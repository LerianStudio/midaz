{
  "collection": {
    "_": {
      "postman_id": "00b3869d-895d-49b2-a6b5-68b193471560"
    },
    "item": [
      {
        "_": {
          "postman_id": "5b815fb8-ebec-4284-bdc2-f0599b39c22d"
        },
        "id": "5b815fb8-ebec-4284-bdc2-f0599b39c22d",
        "name": "Complete API Workflow",
        "description": {
          "content": "A sequence of API calls representing a typical workflow, generated from WORKFLOW.md.",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations",
                "normalizedPath": "/v1/organizations",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations"
              }
            },
            "id": "6cc31c35-123e-4812-809b-cee4fa100ae6",
            "name": "1. Create Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7301f84e-83fe-4827-b9fc-8caf33274676",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "69ab4bd9-92e3-4e1e-a0a7-d7ca3f60a50a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c6dcd53-63c3-4095-8e3d-6c138f617ecd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 1: Create Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 1: Create Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 1\");\n"
                  ],
                  "_lastExecutionId": "7c7e7a3b-4e91-435c-8402-f7c19fa71551"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "274bd169-5adc-4d77-8430-cab7d2247e49",
            "name": "2. Get Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0f363973-dbf0-4d0a-a553-a623ccc1bc1f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "99457570-e3c3-4b6c-8ecf-348b612cd90a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac8701f7-e36f-4e74-8009-a37bee67f91e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 2: Get Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 2: Get Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 2\");\n"
                  ],
                  "_lastExecutionId": "0ed8b612-68c4-4a9c-95b0-3218f4c24b00"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "5c2b3f62-819b-49af-8e8d-9c8f9dd2efeb",
            "name": "3. Update Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fdd184ba-1edb-4c74-b1a4-3421cb110c52",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "1cf7955e-445f-4845-b0fc-b3a24663fd49"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "456b1578-5de5-4d73-9a12-04716842ede2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 3: Update Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 3: Update Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 3\");\n"
                  ],
                  "_lastExecutionId": "3afaa4dd-f203-4135-a06a-98f23342f97a"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations",
                "normalizedPath": "/v1/organizations",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations"
              }
            },
            "id": "9315aa1d-7fc3-44dd-abcf-3be98fba44ce",
            "name": "4. List Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f14e71fc-cda3-45d1-aa28-c8d0993836c6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "eca0d6e8-069e-40c4-8817-fd048999dd63"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b2426be-8784-43a5-9e29-29e478e15ce0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 4: List Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 4: List Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 4\");\n"
                  ],
                  "_lastExecutionId": "a3fc55d2-0a02-473b-a105-d9cb4c1d9b01"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
                "normalizedPath": "/v1/organizations/{}/ledgers",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers"
              }
            },
            "id": "c33e5304-3167-4b47-8725-811b7bfac956",
            "name": "5. Create Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9e7043e6-8313-4e07-8f5e-622818a47030",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "f039f814-8e4e-4918-ba5a-240b0facbd18"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "03dfbdc3-330f-4ae3-9468-794885df60ff",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 5: Create Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 5: Create Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 5\");\n"
                  ],
                  "_lastExecutionId": "0aea731d-61c3-4dbd-843e-f230e800f0e3"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "56f36d8e-3446-44ab-82f7-bec1befafa39",
            "name": "6. Get Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3b9c41c3-fe38-45fe-b9ef-f6a1f4a394d7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ab577efa-3cde-4dd8-a546-866c4eee63d4"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f651077b-b666-4e94-b27b-54b8d9f145a4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 6: Get Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 6: Get Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 6\");\n"
                  ],
                  "_lastExecutionId": "21cf2de4-d2e8-4117-968c-bfc4013f04ee"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "383d0754-41e8-4ec9-8ec3-4486377a9289",
            "name": "7. Update Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "98f1c301-305c-42f4-9f14-0c726aab865d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "c53c25fa-d3be-4b6a-8ac9-3d6bc65a8c40"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2741c9a2-a6e2-4e32-8b74-d48401e3dc47",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 7: Update Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 7: Update Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 7\");\n"
                  ],
                  "_lastExecutionId": "8103df6e-9f2c-442b-ba0a-b4ae5ccbd9f1"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
                "normalizedPath": "/v1/organizations/{}/ledgers",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers"
              }
            },
            "id": "180141f8-30f3-4309-b3eb-eb6bd8060d11",
            "name": "8. List Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e2cf514-540e-409f-b359-0769df2d3e03",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "1b81d315-6ed0-4320-8083-44bc0ae0a1d1"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce48be77-172d-4f83-8896-feb2a9f6dbb6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 8: List Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 8: List Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 8\");\n"
                  ],
                  "_lastExecutionId": "ecef5e72-2aba-45d6-b3fd-653ec13877b9"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
              }
            },
            "id": "afc8872d-2bcd-402b-9a96-77c517c72ade",
            "name": "9. Create Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2a0a40f5-2171-4b7b-bb2e-7071e760088b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "8fee1601-dbf0-436c-8f1b-d0f6700e9ac5"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6865dbbe-5faf-43ad-b5b0-d499665a2796",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 9: Create Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 9: Create Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 9\");\n"
                  ],
                  "_lastExecutionId": "049ffc46-e840-4242-b5cc-3cee5786daa6"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "d1152791-ce1b-4935-bdc4-78ee0368e5f2",
            "name": "10. Get Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ff7f0d05-87fe-446f-a703-2642c48e6fe8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "3424ddcd-ca3e-4699-9464-c1b180527588"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "89727d18-ec18-489b-9d20-57af03a184fd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 10: Get Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 10: Get Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 10\");\n"
                  ],
                  "_lastExecutionId": "cbd60173-76b6-41f7-adfc-572532056400"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "6e7a61f3-30cd-4d39-91bf-92ffef66915c",
            "name": "11. Update Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4188df6b-0e60-4cdd-9f29-90bc6616362c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "28e247cc-4849-4c8b-8c13-fcee48ba612d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8538054b-2512-4eb4-9218-7b2c616606bb",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 11: Update Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 11: Update Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 11\");\n"
                  ],
                  "_lastExecutionId": "9bc4a92e-746a-4ac0-b06d-4816114cf431"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
              }
            },
            "id": "10af124a-28c9-4f48-9ccc-ddfe5c822321",
            "name": "12. List Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "51cf5c88-b472-487b-8cde-d451fead8d3e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "b7602877-f42e-4827-ad04-ad91eea68c15"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "55d02fa8-272c-482a-b960-8b8189845486",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 12: List Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 12: List Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 12\");\n"
                  ],
                  "_lastExecutionId": "12640543-7b9b-456e-bd4d-291a1d5700af"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
              }
            },
            "id": "390e5785-d1bc-4620-89fa-f03d3cbd89d0",
            "name": "13. Create Account",
            "request": {
              "description": {
                "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ae8facd1-3c82-4081-842a-4a4f5fe1a543",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "e75960ab-e387-4525-9afe-356a890d3ca0"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1f3f291-68d5-422a-9496-a1e5528017f9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 13: Create Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 13: Create Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 13\");\n"
                  ],
                  "_lastExecutionId": "a2165830-8917-402e-a6b5-efa31d57d9a8"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "4dfa26f9-9965-4292-a150-309e89dfa3cb",
            "name": "14. Get Account",
            "request": {
              "description": {
                "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "527bec3f-9d3b-4a54-b916-5edeb3215c22",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "f08adc32-57a1-4358-85e1-07cc2566d11e"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "547722ad-6cd7-4b46-ae84-7f6ac8a0825d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 14: Get Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 14: Get Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 14\");\n"
                  ],
                  "_lastExecutionId": "083936e6-9afc-485a-9aac-d48d1e2a02c8"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "2db2a813-2243-4610-b229-916f59ecb82b",
            "name": "15. Update Account",
            "request": {
              "description": {
                "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7ee234aa-4962-4ca0-80e6-cb087f244e98",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "cdb28af6-8705-4ace-8feb-5085548ada08"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2274f7e2-a4c5-42b7-a9a0-9738f35017bd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 15: Update Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 15: Update Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 15\");\n"
                  ],
                  "_lastExecutionId": "8e9436bd-c7cc-4d55-a6ac-211965abb5f7"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
              }
            },
            "id": "36f0806e-2f50-4c87-b5bd-f0469ad532c3",
            "name": "16. List Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9b935bed-29c8-4a6d-aa87-0b68388a13a1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "132a103e-6bba-4ce7-a24e-57fd25ff4d3a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb32304d-9bab-40fd-8487-4124870572c4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 16: List Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 16: List Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 16\");\n"
                  ],
                  "_lastExecutionId": "fd68ff27-145b-4a02-aaf5-adb7db5ea188"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
              }
            },
            "id": "b37ad915-75aa-4ada-a834-c32920b3b281",
            "name": "17. Create Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c4c2d8f7-4040-4a8e-b437-fc07320ccb8d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "47b8322b-aa11-45f9-9f18-9ea84ec51daa"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "da6ee5e9-d110-422b-b266-8d96530fe059",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 17: Create Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 17: Create Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 17\");\n"
                  ],
                  "_lastExecutionId": "93ae704e-375f-4205-b6e9-2b93e56b126e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "16470edb-72b7-4d8f-8b6d-565a14e608bf",
            "name": "18. Get Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4f3ca4b7-9bdf-4681-8f46-ae9de6e27c51",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "1106b698-5cef-4538-82da-a57e80b7180b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d42ac582-c08f-4c01-bd61-e5db48c82000",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 18: Get Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 18: Get Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 18\");\n"
                  ],
                  "_lastExecutionId": "2b08dc6e-efb9-4263-951d-1a595b00de69"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "dd844d02-1f29-4dcb-ab68-c0b2cfc930f5",
            "name": "19. Update Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6473b9b7-a082-4f90-98a9-5ab6810d5268",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "b6f3ab6b-0108-42c6-9e25-99dbb3351b4b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "819b8385-3958-4376-950b-44a7201f00ad",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 19: Update Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 19: Update Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 19\");\n"
                  ],
                  "_lastExecutionId": "70f639b6-9302-40a9-b1f5-3de4e8286518"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
              }
            },
            "id": "d997cd90-9db2-451c-9bc1-cc7c29db32b5",
            "name": "20. List Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3f39d3c-4662-4bd2-bd0b-96c657fd1798",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "cfa4a6fb-3a70-4f21-a877-3e5bf76abadc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d72491a-1b3b-4194-a1a6-bcf01ca9ef8f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 20: List Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 20: List Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 20\");\n"
                  ],
                  "_lastExecutionId": "0e298391-193e-4191-a5d4-5514ff5b39c4"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
              }
            },
            "id": "7ad97d3d-2250-4c5c-bff3-3b7b5a83377a",
            "name": "21. Create Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4bea9ab1-d23a-47c8-9887-bf9cac3438a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "581afb66-1825-4455-b556-893424ed8def"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "49ff6454-ee79-45b3-9565-8fcf96c489cd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 21: Create Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 21: Create Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 21\");\n"
                  ],
                  "_lastExecutionId": "99d8c026-c338-4e40-8e6e-abcb974db9d0"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "cee253b5-5e72-4438-9987-56124bffa430",
            "name": "22. Get Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "afbd7d9a-f2b8-4689-bcc7-00fee1fc23cb",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "3a8ddebe-f865-49f6-9fb3-9d06ac33b298"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "7225c3fb-a71e-40b7-9080-eb44ba5e914d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 22: Get Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 22: Get Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 22\");\n"
                  ],
                  "_lastExecutionId": "8263cb36-491e-4116-9a18-089386219247"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "15fd345f-ba5c-4b50-a8b6-ee896b32a0ad",
            "name": "23. Update Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dedd0b61-dfe2-4f36-a46d-fad04551f9ab",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0cbda995-952a-4c2f-bd06-6769cebb4b8f"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "accd67e0-7410-4269-8104-1b97b349287f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 23: Update Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 23: Update Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 23\");\n"
                  ],
                  "_lastExecutionId": "81920634-def7-45d1-ad2b-61978cd4a4d3"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
              }
            },
            "id": "14f0877a-09e6-4662-894c-0609aaeca026",
            "name": "24. List Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0c43a868-dc57-4d81-815d-8a95f9d86ccf",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "aff7d02f-87ff-4329-95da-2e74ce40cd45"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f7e157c-5ccf-43fa-bd4b-2ba6861ecc6e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 24: List Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 24: List Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 24\");\n"
                  ],
                  "_lastExecutionId": "9e8b09ba-1444-4795-b4cc-c405ac3e0bf7"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/metrics/count",
                "normalizedPath": "/v1/organizations/metrics/count",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/metrics/count"
              }
            },
            "id": "94ec44af-7fb3-415f-af3a-808d65782140",
            "name": "25. Count Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e1d464f0-959b-4a85-9519-083d7ce9374f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "25748080-a035-41d2-8dca-2658e24ac947"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fbbcedb-d5a0-4bdf-9e0a-3fed820d97e6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 25: Count Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 25: Count Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 25\");\n"
                  ],
                  "_lastExecutionId": "2425bb00-db61-4d3b-ae5a-c6d8e39191bc"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/metrics/count",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/metrics/count"
              }
            },
            "id": "9cf7fac2-7a7b-420b-9bca-451a51cab5a6",
            "name": "26. Count Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e271516b-e310-4882-abf2-11cfa43824b7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "bab3daa6-0298-4fe1-a4e8-85fab4350a88"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef0e3ce5-afbe-4455-b52a-5e60c1b15d13",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 26: Count Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 26: Count Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 26\");\n"
                  ],
                  "_lastExecutionId": "f879f8a0-53a6-4ad8-9421-afc223bab35e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count"
              }
            },
            "id": "d955d250-7392-4a68-a702-06e4b1ca8c04",
            "name": "27. Count Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "26787d55-7678-473f-8bdb-986a2452f15f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "8646da9c-3f00-4a77-977b-bf25303202a2"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c24f4cc-10a2-46db-a9b7-a3717eb1f1d9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 27: Count Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 27: Count Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 27\");\n"
                  ],
                  "_lastExecutionId": "6ee3ef5c-8a4b-4ee9-9dda-960f2979785c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count"
              }
            },
            "id": "8e84fc8d-0c97-4c59-addb-36781b4c218a",
            "name": "28. Count Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "54c1ac01-87b9-405e-b951-ecbe80b5a55b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "0e26cae6-7d54-4a97-b080-533ffc7d70e3"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "de407d57-32bc-4e24-a529-ec15c5d71dd0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 28: Count Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 28: Count Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 28\");\n"
                  ],
                  "_lastExecutionId": "075adaf6-552e-481b-9d3e-34e776e00955"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count"
              }
            },
            "id": "947cd277-fcd5-473d-8e6e-fa5c3fd2f161",
            "name": "29. Count Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f60f9b87-8352-4ca6-af52-d9c4ace89ea9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "28183983-a8ad-42ee-a94a-80a250f32a05"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f5f89f3-1758-4d93-a73b-349c1f41bae0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 29: Count Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 29: Count Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 29\");\n"
                  ],
                  "_lastExecutionId": "09f9ae3d-40ae-407b-b1f5-d526304f971b"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count"
              }
            },
            "id": "b2d2ac13-6fdf-4d5f-8655-e84d9e1340ae",
            "name": "30. Count Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "96a37fa3-d4ee-4480-8033-f29e0e939f22",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "be808743-6aac-49b6-8ba4-740340d238b5"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e984b6c-3939-46ea-be0b-5456dbe5e61e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 30: Count Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 30: Count Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 30\");\n"
                  ],
                  "_lastExecutionId": "044fa006-b79b-426f-a120-caac7770130e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}"
              }
            },
            "id": "102f80f8-e208-46ba-a6b4-51d019e758f8",
            "name": "31. Get Account by Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3ad068a0-1a84-4794-bd56-b38e1e89b56f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "1becd571-eb9b-42e3-9929-fae0e945bef9"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bc1e003b-b791-4b31-abfe-bb59d87d3be1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 31: Get Account by Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 31: Get Account by Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 31\");\n"
                  ],
                  "_lastExecutionId": "5ccae16f-ece4-47aa-80c7-9419fd39ada4"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}"
              }
            },
            "id": "4b3ece7a-8c9c-4ee5-b782-2a676fe97b03",
            "name": "32. Get Account by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1d2caca5-110d-495a-8b46-079f32f90bfe",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "2e687c88-ef9a-4deb-83b6-a36087e3ad46"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "09d66944-7bb2-4989-b624-6c6f6752b4c7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 32: Get Account by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 32: Get Account by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 32\");\n"
                  ],
                  "_lastExecutionId": "d5ca020c-e03b-43b7-9dcc-ae032e8c677d"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
              }
            },
            "id": "fa259bd8-588b-40a4-b9b0-84c85cef35ec",
            "name": "33. Create Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8f56ab26-fbf3-41c9-9310-18e150dffd9d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "d0a57aac-de86-4c36-8741-1ffda2005590"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "b592fa99-b8fc-495b-9225-93971167200a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 33: Create Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 33: Create Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 33\");\n"
                  ],
                  "_lastExecutionId": "105fbc75-9f21-4cfc-b55d-c8bb553b1402"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow"
              }
            },
            "id": "d3ab0534-05cc-4836-bc1f-d9c732905c08",
            "name": "34. Create Transaction (Inflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b691fa28-0e6a-49dd-bf01-7a99a3108616",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "5c9b76c9-ecdc-41c9-a2ff-b1bb3449a67b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "890cd461-8baa-4b4d-8906-18f87e0219cd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 34: Create Transaction (Inflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 34\");\n"
                  ],
                  "_lastExecutionId": "6dcf875e-b49e-4cab-b185-3fde448f0444"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow"
              }
            },
            "id": "d973f4f6-fd81-481c-979a-be77c9abbc36",
            "name": "35. Create Transaction (Outflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f330348a-e071-4f39-81ca-d4d371795636",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "eed6180c-d375-467e-8871-77dc5c515f56"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd88536f-7029-43ec-8701-1e0f9702fe71",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 35: Create Transaction (Outflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 35\");\n"
                  ],
                  "_lastExecutionId": "91aabf9b-3877-4270-b14f-3818a25518ae"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
              }
            },
            "id": "d3c40e7a-3472-49ef-aeff-cac14b1a40f9",
            "name": "36. Get Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "32ed3288-0f17-4f66-b7c7-cb5a3d6d6d82",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0c5f349f-9acf-4cf2-9d4b-81248b9b0940"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "739b40c0-4259-4103-98f7-f58ea43cd8d1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 36: Get Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 36: Get Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 36\");\n"
                  ],
                  "_lastExecutionId": "ece294e7-4ae2-4c57-957a-e840a284bb75"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
              }
            },
            "id": "ec469ad4-2077-4d5a-801d-0b88cba526e4",
            "name": "37. Update Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "23a0656b-3e6f-4b69-9c5f-ea722e4b0195",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "99f10e9f-ab86-421c-b002-2360b90e5e0b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e9cd824e-f9ae-4362-a653-1925bb5fe81b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 37: Update Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 37: Update Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 37\");\n"
                  ],
                  "_lastExecutionId": "7ba03e10-0763-491d-8690-25b75ea1fdac"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions"
              }
            },
            "id": "988396dd-1a41-4d7d-a4ab-5434cdc0f089",
            "name": "38. List Transactions",
            "request": {
              "description": {
                "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "66f199c4-5bca-4509-b0ce-1066ae185741",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ed27bf12-1f5d-4c2f-b315-fc77357aa4ea"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fcdf33e-df20-44ed-ab22-35033a4111dc",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 38: List Transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step 38: List Transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 38\");\n"
                  ],
                  "_lastExecutionId": "6cbc908b-6745-4fe7-a065-1ab0742e0cba"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}"
              }
            },
            "id": "487f3298-106a-4c38-8013-adc4e08ac5d4",
            "name": "39. Get Operation",
            "request": {
              "description": {
                "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca7159b4-bfa7-4c6b-9fdf-08b94978247a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "eb2159af-071f-4b07-b2d6-136ed2579c34"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5a2ad97-01a9-40b0-9159-5211afff5393",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 39: Get Operation =====\nconsole.log(\"‚öôÔ∏è Setting up Step 39: Get Operation\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 39\");\n"
                  ],
                  "_lastExecutionId": "34f0c693-b261-4cfb-99e4-dff2f6de4944"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations"
              }
            },
            "id": "0006aa94-996a-4ec6-ba5a-64b355a03953",
            "name": "40. List Operations by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ffc15af3-8562-403a-9654-ca76d357b978",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "4af3b154-eefa-4e58-9eaa-f3fd460620cf"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "00541973-1c85-41a6-a728-9d32c10c4fdf",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 40: List Operations by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 40: List Operations by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 40\");\n"
                  ],
                  "_lastExecutionId": "8a1871b6-e7dc-4340-989c-1eebbb91bcef"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}"
              }
            },
            "id": "d434f723-d8c1-4428-ace8-ce5044675451",
            "name": "41. Update Operation Metadata",
            "request": {
              "description": {
                "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c6dad4d-0ff0-49fe-b278-c1ed53d036aa",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "7753d119-773f-4a84-9b03-c977dea90ffd"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "60797250-af5e-43b3-b0ce-6a26d0bd1203",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 41: Update Operation Metadata =====\nconsole.log(\"‚öôÔ∏è Setting up Step 41: Update Operation Metadata\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 41\");\n"
                  ],
                  "_lastExecutionId": "c289af9c-cfb6-40b4-8361-0ec33f531abb"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "eaa6ef19-e0f6-44d6-95c3-5bf45e870a5d",
            "name": "42. Get Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0da0d212-a868-41a6-b135-cad6b1b1ea90",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "bd060885-9bb5-4a51-a5ea-02e3e9fc8195"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e10d1be-ab9b-4ff8-aacb-8a202a441298",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 42: Get Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 42: Get Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 42\");\n"
                  ],
                  "_lastExecutionId": "9450f907-6e73-4ab1-bef9-17fd90381609"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances"
              }
            },
            "id": "9924156c-836e-4535-abcd-b3745bd09a13",
            "name": "43. List Balances by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dd5d13cd-e489-4072-bb3d-ec4e741070b7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "25e6fbc9-c26a-46c2-9ae6-0d9eb6c4fdc0"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f672cb22-d727-4cad-90cd-a3737a4cc899",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 43: List Balances by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 43: List Balances by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 43\");\n"
                  ],
                  "_lastExecutionId": "eca2d09f-e8d8-4da2-8447-a5df318105a6"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
              }
            },
            "id": "81eea49d-1903-4c79-877d-50ec36ed23cd",
            "name": "44. List Balances by Account Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4c68f9f8-0912-49da-982e-7564791d734c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "481b64e0-99d1-4325-a5c3-f3bef26b2427"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "428cd6c9-7c5d-48b8-8298-4a08b0d5e9e8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 44: List Balances by Account Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 44: List Balances by Account Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 44\");\n"
                  ],
                  "_lastExecutionId": "1b132666-dafc-4b52-9ea6-46179de75883"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances"
              }
            },
            "id": "044c8e38-d0a3-4c20-b3c0-8097b403390b",
            "name": "45. List Balances by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "79d37ef1-1555-4a3f-8f28-23d76f7a4e51",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "a8ac0a48-4086-48f7-85fb-65d313063464"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "4098ca1f-acf9-4615-953a-0a025c80f2f8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 45: List Balances by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 45: List Balances by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 45\");\n"
                  ],
                  "_lastExecutionId": "1a037417-307d-4aa8-a6c6-042bf4df790d"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "9368e13a-f13d-457b-bd8d-9a2d7f23ee43",
            "name": "46. Update Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "55f743e2-eb35-478d-9e25-1e0b30cc4a76",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "5eadc4fd-f6d2-41fa-97f7-0296e70bb082"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9b0bae6-81f3-49fa-970d-a8e2e659af9f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 46: Update Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 46: Update Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 46\");\n"
                  ],
                  "_lastExecutionId": "b6f51415-2982-4728-a877-fead4aad3a44"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances"
              }
            },
            "id": "5928eecf-eda9-4895-9496-13db21300503",
            "name": "47. List All Balances",
            "request": {
              "description": {
                "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d970f7e1-66df-48ac-ad83-867ff29e53ad",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "05075b1b-25ac-469e-bd18-c08a28f4171d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9e44699-1393-4145-bf78-94e9f2282ba2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 47: List All Balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step 47: List All Balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 47\");\n"
                  ],
                  "_lastExecutionId": "c9063a49-eae1-4efb-88d9-71a7a98b28d5"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
              }
            },
            "id": "a8561bdc-a0d7-4183-8123-08c081c0b2d6",
            "name": "48. Check Account Balance Before Zeroing",
            "request": {
              "description": {
                "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1c44cbb5-ebe4-416e-98e7-99804047b752",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n    if (responseJson.items && responseJson.items.length > 0) {\n        const balance = responseJson.items[0];\n        if (balance.available !== undefined) {\n            const balanceAmount = Math.abs(balance.available);\n            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n        } else {\n            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n            pm.environment.set(\"currentBalanceAmount\", 0);\n        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                  ],
                  "_lastExecutionId": "30298357-d26e-4e0b-b194-1170496239ef"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "65afe0c2-5fd7-4ed0-88ce-f1d0290e5ca4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"‚öôÔ∏è Setting up Step 48: Check Account Balance Before Zeroing\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 48\");\n"
                  ],
                  "_lastExecutionId": "926e2eb4-c076-497b-9deb-c06f8de4f71b"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
              }
            },
            "id": "202a7b61-c81a-4adc-a1d7-9cb03bbbaa76",
            "name": "49. Zero Out Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "730f4d0f-7f87-4349-9626-552b092b30d8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "85df4a70-e421-46a9-98e9-bc73fe2995a3"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6febd3da-bd0c-4eff-85f6-541438ce03a9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 49: Zero Out Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 49: Zero Out Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 49\");\n"
                  ],
                  "_lastExecutionId": "53a2acc7-03ec-4fa2-8e3d-3004dccd88f3"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "2a20dba9-3812-4fb1-ab18-b22ae7c64b0d",
            "name": "50. Delete Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92279126-7aa9-438b-b32a-479336ade098",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "e0bf550e-849a-4382-a6e2-a0b03f3b29f9"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "925528c8-52d4-49cb-a42f-32f58c06d33d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 50: Delete Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 50: Delete Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 50\");\n"
                  ],
                  "_lastExecutionId": "a198b0f3-8e8b-4001-b011-5ffad9927b56"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "0b5ebf71-9a97-43e2-bf52-3756e8dc6631",
            "name": "51. Delete Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "082ea7bb-cd5b-4d8e-b813-76910f160117",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "d80d9e3b-9d72-46f5-886e-b5f8a18e5b6b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf52f709-afc8-4a9d-b538-7dcfb94a1d6c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 51: Delete Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 51: Delete Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 51\");\n"
                  ],
                  "_lastExecutionId": "d79d4f7b-bd3b-47b8-bd00-6c0a785c64a9"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "278598e3-e3b2-44c0-aac9-ee79eabdf565",
            "name": "52. Delete Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53a8da32-249f-457d-be6f-c58a543a3e85",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "ecc26707-ad35-49ff-9c82-a24bd882d89b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "35399ee9-3cff-4d3a-bca1-40c1a4711b33",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 52: Delete Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 52: Delete Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 52\");\n"
                  ],
                  "_lastExecutionId": "7652fc53-c4bd-4ad0-857d-0eb39a6b6823"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "be78551f-f091-4c50-91e6-f6a9d5021a07",
            "name": "53. Delete Account",
            "request": {
              "description": {
                "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0599cbc0-5935-4d39-a6de-d5b0a1730c5c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "1a766c01-8417-4528-a207-26add70a6eaa"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "22e01819-04fd-4c5d-893c-6ec6ba6ec075",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 53: Delete Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 53: Delete Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 53\");\n"
                  ],
                  "_lastExecutionId": "31f09421-9511-4474-b015-0e6bdbfe80e1"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "6d919ff9-839a-44bd-999b-bf05bcc7c0f3",
            "name": "54. Delete Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fa993c0d-b860-48f1-be28-158d5a7dc346",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "0aa8ed84-2da7-4d77-bd6b-c0626f02abd4"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "36a2ff43-a351-41c7-bdb5-a1ae9ed27c4e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 54: Delete Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 54: Delete Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 54\");\n"
                  ],
                  "_lastExecutionId": "e9edb8ea-642a-4b6c-b9cf-6811e6997eaa"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "14160194-c0bd-4fbe-9c95-dcf3849d49eb",
            "name": "55. Delete Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e2fa9da2-8aad-4471-84a9-cb147c6f78ce",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "489699db-c4bd-4013-af75-ed4a95095d03"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "cab7d2a0-106d-4067-b483-f32361f9b6e2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 55: Delete Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 55: Delete Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 55\");\n"
                  ],
                  "_lastExecutionId": "9b930cf9-7b2a-44a6-a4d3-601ddb8d21c6"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "889eb287-28b4-44a2-b93e-eb6f9d3e1e86",
            "name": "56. Delete Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "38eb42e8-7b3c-4515-b1ae-0c02dcccc5d1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "aeda8bc3-494f-45ea-8609-4ee2ea8f303a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fee647f0-3ef6-4805-966d-7bd05c9f42df",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 56: Delete Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 56: Delete Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 56\");\n"
                  ],
                  "_lastExecutionId": "a24902ab-5630-4aed-a64a-7c43792dc279"
                }
              }
            ]
          },
          {
            "id": "a3b40381-844c-4935-b5f4-72a017952a79",
            "name": "Workflow Summary & Report",
            "request": {
              "description": {
                "content": "Final step that generates comprehensive test summary for CI reporting",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "91d30070-8ac7-4c00-8b27-e60c07b2f9fc",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: 56\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= 56; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                  ],
                  "_lastExecutionId": "c1b4da93-39da-4035-b80c-4e6f18a8c6b9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c6204cc9-7030-45f6-b2c0-44a45d642288",
        "name": "Organizations",
        "description": {
          "content": "Endpoints for managing organizations, which are the top-level entities in the MIDAZ system.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "54bf4c98-63ea-4f33-8067-2cfb86983145",
            "name": "List all organizations",
            "request": {
              "description": {
                "content": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d03e6a9d-e861-4b73-bc83-b719f4603cde",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4e8e6fb-cc78-47ae-a719-a227d6f3d660",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "08ce062c-1853-480b-9ecb-d17f9ea8e152",
            "name": "Create a new organization",
            "request": {
              "description": {
                "content": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d61cf8c-4ecf-430d-9156-1f56d3661ddd",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b3d9a47-f453-4f40-a3cd-5651e42b513a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"organizationId\", jsonData.id);",
                    "    console.log(\"organizationId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract organizationId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "0fb0bebe-6aa9-4761-97aa-187eb39c2102",
            "name": "Count total organizations",
            "request": {
              "description": {
                "content": "Returns the total count of organizations as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26859c88-aa5f-4655-adc4-43236e550942",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d329605-2b5c-4aef-a3c5-882528d0127b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "19061c3a-872c-47eb-8763-393bcc99a45d",
            "name": "Retrieve a specific organization",
            "request": {
              "description": {
                "content": "Returns detailed information about an organization identified by its UUID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4d20fb0-5855-4e50-b21e-d0ec421f0369",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c020ce8-c23c-4c45-9447-49e8ada8c8ea",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "8b541bce-2d72-475d-9165-9c46bcec8671",
            "name": "Delete an organization",
            "request": {
              "description": {
                "content": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ab8c1e5-5bf5-40b4-af41-4619058e0fc0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7210f74f-995d-4b08-a08b-dd8a430dfe74",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "bada848d-f695-4c52-ac92-228ad52c6a6d",
            "name": "Update an existing organization",
            "request": {
              "description": {
                "content": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e06af377-7d08-43e6-95d9-57b88c12b369",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27f430ec-c5dc-41ef-ab18-cdbd53e0abf0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f24709e-3170-40e0-b003-9ff2e0ce27d3",
        "name": "Ledgers",
        "description": {
          "content": "Endpoints for managing ledgers, which are financial record-keeping systems for tracking assets, accounts, and transactions within an organization.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "083a2e8f-2270-48d0-a53c-ba32763dbeeb",
            "name": "List all ledgers",
            "request": {
              "description": {
                "content": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c60884c-e2da-4896-a697-f1d608acb5b6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9fede201-80d4-4cf2-9499-0e40989006d2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "d496e49e-67cc-42bb-9ae8-0dd46adff400",
            "name": "Create a new ledger",
            "request": {
              "description": {
                "content": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb68bf20-1bcc-4a29-8b3d-973a49e48d65",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d70456a-506c-4661-8d96-4b3305d5a00f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"ledgerId\", jsonData.id);",
                    "    console.log(\"ledgerId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract ledgerId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "e6ae6db6-ec28-4cea-92a3-d1a236cf88a4",
            "name": "Count total ledgers",
            "request": {
              "description": {
                "content": "Returns the total count of ledgers for a specific organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca81075d-4b75-4a58-82e3-844ed899e04f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b47122dd-a6ba-44c3-af1f-e94ac6cf2833",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a1c02e73-ae49-4856-acea-dade4d92a024",
            "name": "Retrieve a specific ledger",
            "request": {
              "description": {
                "content": "Returns detailed information about a ledger identified by its UUID within the specified organization",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecda3339-0604-40ec-bab7-640e3c00f2e3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bab2b8ff-6606-4abd-a85c-6d4be49b1f5c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "5d244f2d-2874-4867-bd6d-4c3a32ae18b9",
            "name": "Delete a ledger",
            "request": {
              "description": {
                "content": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0dfec1e6-fbf9-4c99-b899-0160dab4f7e0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1b4d2770-f6b4-4168-933f-83c385059547",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "3a3059ad-2ab4-4c9b-89ff-5d3584ad1bbd",
            "name": "Update an existing ledger",
            "request": {
              "description": {
                "content": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2716f688-a461-44f8-8663-bc459fe5c5cc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6a0bcf68-124e-498f-b628-f34442a931a8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "130a8895-a614-43a8-9d53-59e0e7d31827",
        "name": "Account Types",
        "description": {
          "content": "Endpoints related to Account Types.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "2148ec87-1429-456b-84ff-463dd656a772",
            "name": "Get all account types",
            "request": {
              "description": {
                "content": "Returns a paginated list of all account types for the specified organization and ledger, optionally filtered by metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter account types by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit of account types per page (default: 10, max: 100)",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for offset pagination (default: 1)",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor for cursor-based pagination",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort order (asc or desc, default: asc)",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8daa813d-561f-42a3-b7e9-6271d95b798f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b70f57e2-0164-48d4-9a2e-421af4978524",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "5b76c95d-ab92-4509-944e-2943801c21d0",
            "name": "Create Account Type",
            "request": {
              "description": {
                "content": "Endpoint to create a new Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"keyValue\": \"current_assets\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9bbad6df-a7f6-4822-8f9c-cc98d01dfccf",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c89d633-3062-46d4-a43a-2b390e02a664",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "6b79e235-2e3c-4be0-ba5a-b0ac22852c38",
            "name": "Retrieve a specific account type",
            "request": {
              "description": {
                "content": "Returns detailed information about an account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4dc73681-191d-4b6e-b1cb-91a487fefe3f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e3a3b09-ee70-4200-ba8f-5fe6a500761d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "7086403c-09e4-43e0-b9e4-2fcfb47c4910",
            "name": "Delete an account type",
            "request": {
              "description": {
                "content": "Deletes an existing account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15b817c4-9951-485e-b187-255c671c1cfc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa9613fd-0f03-4ac6-bc80-d617e57bb1db",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "965f5bad-79d6-4d6c-a1fb-d590350c4cb0",
            "name": "Update Account Type",
            "request": {
              "description": {
                "content": "Endpoint to update an existing Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ef3f4e5-4200-41de-93dc-2fbc490552e1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "508938b0-f584-40d3-8867-25cd8044de57",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "160cdf0b-f9a2-4042-8130-9c76b589205e",
        "name": "Accounts",
        "description": {
          "content": "Endpoints for managing accounts, which represent individual financial entities like bank accounts, credit cards, or expense categories within a ledger.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "cb0c59dc-3d35-4d50-91d5-6603f2e92fe5",
            "name": "List all accounts",
            "request": {
              "description": {
                "content": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a934b00-be73-4456-a434-b2bf522a17e0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ffc8fa64-9bb9-4468-9fad-66a9d71245a5",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "07f38b50-0d33-42c5-a275-19c7e8c9fd97",
            "name": "Create a new account",
            "request": {
              "description": {
                "content": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6efb9632-ee70-4153-bdbc-f1fb72bb5ea2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8439b417-5529-45f4-8dea-d91462ba2ad7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"accountId\", jsonData.id);",
                    "    console.log(\"accountId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.alias) {",
                    "    pm.environment.set(\"accountAlias\", jsonData.alias);",
                    "    console.log(\"accountAlias set to: \" + jsonData.alias);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountAlias: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "a55b6a31-283e-4d7e-a846-924191fea4d7",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c358c39-7586-49f6-bb6d-2aad8c614d12",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b42487d-4079-44fe-b29d-d9018fa66466",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e4206fb4-d009-4c5c-bfc2-797dab08c5e8",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6792e5df-eab9-4263-9c45-3e42121da8a1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "adfd2051-762a-43c2-a7e1-d964d72d031d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "31a7f6ec-8ce3-4072-9f2a-a5ba9da54b27",
            "name": "Count accounts",
            "request": {
              "description": {
                "content": "Returns the total count of accounts for the specified organization, ledger, and optional portfolio",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8e872e2-37eb-4d8b-8d06-81919e6aea48",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "345c9b70-386e-41ed-b77b-6bcd8343d548",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "ced84e63-fdca-450b-818a-d9a9990b88fc",
            "name": "Retrieve a specific account",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4762a091-07d5-42b4-a2ab-d5a2fa0959c3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d51f96f-777a-4f8f-9424-1b81867845a9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "32a83ffd-b4e6-45ab-9a35-abb3be676d96",
            "name": "Delete an account",
            "request": {
              "description": {
                "content": "Permanently removes an account from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c65eff1-cfb9-4e3b-9af0-5fa8e4d17adc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ee8c672-70da-4a82-8a5a-3e1bdf17eb91",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "99df1228-fb64-4c90-ba82-f1db2e9ab19c",
            "name": "Update an account",
            "request": {
              "description": {
                "content": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e463fa36-5862-4200-b108-0b3a01787ee5",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20cf6d58-3f4c-4728-a4f9-25e3ca51922f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "45460bb4-0e5d-4fc6-bc96-0f1e9be3e2b0",
        "name": "Assets",
        "description": {
          "content": "Endpoints for managing assets, which represent the types of value that can be transferred between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "02ba79fe-8d5a-452a-b893-91209721a0bc",
            "name": "List all assets",
            "request": {
              "description": {
                "content": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "83e33e38-dbd0-45ac-9a42-36e0a4d48aea",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41267d09-8024-4cbf-af3d-e3bfface2d39",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "3bd9a339-f085-4ffa-9e52-33847ab4a2b4",
            "name": "Create a new asset",
            "request": {
              "description": {
                "content": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24985556-8a16-41eb-a239-976180787eec",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "713fc216-d527-4928-a01f-0ef0c84ec4cf",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"assetId\", jsonData.id);",
                    "    console.log(\"assetId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract assetId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "31d602f3-1d1b-44ba-b663-80574c38ee5a",
            "name": "Count total assets",
            "request": {
              "description": {
                "content": "Returns the total count of assets for a specific ledger in an organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d89d47e-a249-47b2-a875-54ee4d5c1e23",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d89c12f1-5aaa-421b-a7ff-fc27d8fe917f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9a641e82-8699-4e38-a5eb-2f8f15f5571d",
            "name": "Retrieve a specific asset",
            "request": {
              "description": {
                "content": "Returns detailed information about an asset identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01a63d93-63ab-48c3-bb18-94d673726cc2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "37f72581-8008-48ad-a37c-ce72eac4324c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "240ad302-dce6-41cf-9740-ffb1f3750643",
            "name": "Delete an asset",
            "request": {
              "description": {
                "content": "Permanently removes an asset from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79579f6b-0b23-46eb-bacf-89bc3b5aa76d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4a003acd-f8ce-4176-b8c0-5e0e9e529547",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "59508263-0a6f-4995-88a9-dc8cfe5c4ef6",
            "name": "Update an asset",
            "request": {
              "description": {
                "content": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "adbabfa0-9f6e-4715-af96-19bc436ca340",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9704c5b5-d247-48be-ba09-c909fb7f6132",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5d9b9041-191b-4d75-990e-af64338d32ae",
        "name": "Portfolios",
        "description": {
          "content": "Endpoints for managing portfolios, which are collections of accounts grouped for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "f2c1a784-a315-4bce-9bc6-cfdba546c94d",
            "name": "List all portfolios",
            "request": {
              "description": {
                "content": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c0e0cd7-0419-406d-9d3b-12ae5a770825",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7c211574-7b59-4fb3-981a-640c2aad569c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a280a9c6-4d07-4551-9707-607e30557d63",
            "name": "Create a new portfolio",
            "request": {
              "description": {
                "content": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d81004c8-d5f2-4daf-be1d-86ed964b6351",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a0433e79-c0dc-42f9-8f5c-7c3dff9a6b3c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"portfolioId\", jsonData.id);",
                    "    console.log(\"portfolioId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract portfolioId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "0ddae6e0-f824-4310-9c4e-7d3bb61c051a",
            "name": "Count total portfolios",
            "request": {
              "description": {
                "content": "Returns the total count of portfolios for a specific organization and ledger as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8fd738d-3d8f-48dd-81d0-9d3d748c874d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8c860442-4f60-4acf-9d8b-ad1ff3b8c37a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "03b6458b-6167-43f4-a6db-d8bbc8843ecc",
            "name": "Retrieve a specific portfolio",
            "request": {
              "description": {
                "content": "Returns detailed information about a portfolio identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "caa9c162-4612-464c-9a59-acb3b824347c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ca0ff8f-300a-4c6a-adb8-3d71d4f89cd2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "000b2313-cff6-4c3d-a642-5132112d8387",
            "name": "Delete a portfolio",
            "request": {
              "description": {
                "content": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "064eaa21-b030-44f2-b9e7-34a2ee225e31",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ed9d7486-f4b7-44bf-b382-7d816492c7de",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "05738990-9bbd-4b28-a1e5-07a9f517ce82",
            "name": "Update a portfolio",
            "request": {
              "description": {
                "content": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46c61941-2f3b-4619-a492-4b73275f57d4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d45d14b8-0dd4-4eae-bdcc-0a6a0b7ce0ab",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "643ccd79-7c77-42d5-b05f-f344eaf9b632",
        "name": "Segments",
        "description": {
          "content": "Endpoints for managing segments, which are used to categorize accounts for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "6aeaf522-e8e7-45c3-90ed-99b82b78df62",
            "name": "List all segments",
            "request": {
              "description": {
                "content": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f26f6d5a-a84d-4b7e-ba10-fdd854789178",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a02176c0-9b59-43a2-b0d6-d03234a80174",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e2021ae9-e7d0-4ef8-9211-2fa588c313c5",
            "name": "Create a new segment",
            "request": {
              "description": {
                "content": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "610c82b8-842f-4488-a5f7-8401594027e7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6890ab6f-4e5f-4b67-8299-4dddfd21c201",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"segmentId\", jsonData.id);",
                    "    console.log(\"segmentId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract segmentId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "bb0e8379-b8cc-4f2c-b0eb-fdd75384b084",
            "name": "Count segments",
            "request": {
              "description": {
                "content": "Returns the total count of segments for the specified organization and ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "491c946c-c1e2-4f8d-8975-e83dc2cdc3fc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5edb4e80-a18c-45de-8aea-49663e044662",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "c50c04eb-fea2-4224-be1f-66ef30f4333d",
            "name": "Retrieve a specific segment",
            "request": {
              "description": {
                "content": "Returns detailed information about a segment identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f700c970-c428-4243-9525-07fc9935e68b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c2d5380-e27b-4430-9d02-bd820a823730",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "8ed48b45-2bac-4e1a-a562-ee329ee12626",
            "name": "Delete a segment",
            "request": {
              "description": {
                "content": "Permanently removes a segment from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1a358f2-0bb2-4e45-a40f-adecb179fd34",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6d9585e-b466-491c-89b1-3cbc0a21c576",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "34d72279-ab0d-48a6-af07-ceb70611dbdd",
            "name": "Update a segment",
            "request": {
              "description": {
                "content": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8318396-f78c-4129-87d7-5606766b845e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94a1b0f7-32f4-49c1-a30f-a1ea92de0f68",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9b5d24b5-28cd-47c5-9b09-9f7940fb2b20",
        "name": "Balances",
        "description": {
          "content": "Endpoints for retrieving account balances, which represent the current value of an account.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "b29ecde2-d965-47a0-be2a-9a1e2b870278",
            "name": "Get Balances using Alias",
            "request": {
              "description": {
                "content": "Get Balances with alias",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "192fa3c6-1f01-4bba-9045-c411fb97b1d0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96378325-9457-434e-a6c7-7f55d781762b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "2a59f5b9-237f-4d52-ac8b-8f0d7d49e48d",
            "name": "Get External balances using code",
            "request": {
              "description": {
                "content": "Get External balances with code",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68dac2c6-833a-4fc6-85ed-551acb519c9e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7168f6ff-ed92-491d-8930-cc4d176db546",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "83d46475-dd61-4700-b158-f2be5af0e6c5",
            "name": "Get all balances by account id",
            "request": {
              "description": {
                "content": "Get all balances by account id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2a9abf9-483d-4d6f-b4bb-7a67e3f696e3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "77a1127f-b7a5-4571-9775-bbe71bd4f5e9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "0c9a708e-70d2-4392-ad46-bebe28f014da",
            "name": "Get all balances",
            "request": {
              "description": {
                "content": "Get all balances",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5cc73af1-1165-4f5e-bc51-2f989badda6d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b78c110-2b76-42ea-acce-88e7ce193341",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "649243b5-8e90-473a-b0ca-6b21872c9e6a",
            "name": "Get Balance by id",
            "request": {
              "description": {
                "content": "Get a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f82ccd8-64a0-456e-9a17-a11935b2de4b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "baef0ec3-f1e3-4072-82b6-99bdd345d411",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1819410d-1fea-472d-8caa-c4d0d3e8411e",
            "name": "Delete Balance by account",
            "request": {
              "description": {
                "content": "Delete a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a82948d-20e0-421a-8b58-b086ef15396c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "254ec3e2-7c02-485d-b231-f6838312025c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "ff9d7809-f37a-4645-ad18-47fc53a902dc",
            "name": "Update Balance",
            "request": {
              "description": {
                "content": "Update a Balance with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "571f48de-080a-49c5-82a5-86419b50e308",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e55f1815-3f01-44fa-8217-082afb1d0c19",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c0faa014-9f07-400a-be37-1cb7b9fea0c5",
        "name": "Operations",
        "description": {
          "content": "Endpoints for managing operations, which are the individual debit and credit entries that make up a transaction.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "2e88d691-3c89-449d-a7de-cf43ba0d5bfc",
            "name": "Get all Operations by account",
            "request": {
              "description": {
                "content": "Get all Operations with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f7d5ed6-021d-4235-a9bc-11d9e75fe74d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "074106d9-166f-4c2b-8fa2-a3d9dfafc06f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "f128236f-821f-4a88-bcd7-4b63d7640cd6",
            "name": "Get Operation",
            "request": {
              "description": {
                "content": "Get an Operation with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcbd46c0-fc58-41af-8959-6bbe03aad6e4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "adc91630-8803-4424-8c50-cc9d2df868f4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "fa02664c-79bc-41d2-8533-fe46085928fb",
            "name": "Update an Operation",
            "request": {
              "description": {
                "content": "Update an Operation with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9323846-8e54-4b9f-b179-bf3524638fc2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"transactionId\")) {",
                    "  console.log(\"Warning: transactionId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "250a2cfb-dd32-4874-808f-1b99c4967480",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8846b711-a9d5-4c38-909a-84b49adfafed",
        "name": "Operation Route",
        "description": {
          "content": "Endpoints related to Operation Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c3509827-2615-436f-bfa4-137b832b9535",
            "name": "Retrieve all operation routes",
            "request": {
              "description": {
                "content": "Returns a list of all operation routes within the specified ledger with cursor-based pagination",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8abf0658-f177-48fb-b9d2-6855fd6c8bb8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c50a7f4b-9c8a-4bff-a0a0-0e9fb4b71b63",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "dd315cf5-762c-4039-959a-5260126e7c4d",
            "name": "Create Operation Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Operation Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d70a0f3f-3c49-4cab-8006-df3876648a96",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e3187c38-6084-442b-a557-05cf57be0299",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "462ff97b-f051-43d0-8ff9-d11c08490403",
            "name": "Retrieve a specific operation route",
            "request": {
              "description": {
                "content": "Returns detailed information about an operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5add3570-b990-4ce6-a119-ca564ec04368",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a94f123d-5cf1-4b73-ba90-87d4afdab8d9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9ba6d94d-313d-42ff-a424-9dffe230d5aa",
            "name": "Delete an operation route",
            "request": {
              "description": {
                "content": "Deletes an existing operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ea629ba-38b1-4a2b-9310-192dc7b46aa0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ffa39729-b614-481b-97f3-0b62fa959836",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "bbbc28b2-aa74-424c-bc68-953901442803",
            "name": "Update an operation route",
            "request": {
              "description": {
                "content": "Updates an existing operation route's properties such as title, description, and type within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"account\": null,\n  \"description\": \"This operation route handles cash-in transactions from service charge collections\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"title\": \"Cashin from service charge\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb4b7d6c-33d6-4191-a71e-80df7e9b224e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "455180b6-842f-4055-bba1-384ca5e12328",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "15c4612f-7bd3-4639-aab5-df52383e06ef",
        "name": "Transaction Route",
        "description": {
          "content": "Endpoints related to Transaction Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "cf69aebe-c573-4b83-953c-c9e76da920e3",
            "name": "Get all Transaction Routes",
            "request": {
              "description": {
                "content": "Endpoint to get all Transaction Routes with optional metadata filtering.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "736ce117-5244-4bb8-ada1-c053a39f1181",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d5c0028-cebd-4a1f-a958-7ead378a4a96",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a923bbc5-4ecf-401a-a155-6c28202c19c7",
            "name": "Create Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Transaction Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c95bfb97-b8e7-4c7e-b666-cb321444f87a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "671e23e1-9116-4c34-ae9f-8008c7862655",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "77c633d7-9d47-4c30-8540-933de4853375",
            "name": "Get Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to get a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52ee32f7-337d-4cb6-ae2e-1125adbff277",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2fddb41-f4b0-4f1c-a4e6-5e71eed13e82",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f9901060-8453-424a-af70-b6470b617822",
            "name": "Delete Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to delete a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08403795-49fd-412d-bfa4-cd299985266a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34a9bed6-cbf6-448a-8789-23ef078c96a4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "5da447c6-7066-4ccb-a665-b9c2426c06e9",
            "name": "Update Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to update a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "33d74ba6-41a1-40dc-ac69-cbfe03324ad0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6cee1881-7d0a-44ce-a87f-fa5ff8ad030e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ee2184c3-a33d-4556-b2e3-def52a3bc666",
        "name": "Transactions",
        "description": {
          "content": "Endpoints for managing transactions, which represent the movement of value between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "c40a2430-189d-41a0-a048-be07086ec4f9",
            "name": "Get all Transactions",
            "request": {
              "description": {
                "content": "Get all Transactions with the input metadata or without metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1661803-7b20-43b1-bc9d-88e2db22b4f2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05755e68-4438-4f63-8cea-a04e7d175612",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "6013e317-2d70-4e3c-b2b4-29dfa33a50c5",
            "name": "Create a Transaction using DSL",
            "request": {
              "description": {
                "content": "Create a Transaction with the input DSL file",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "dsl"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6cd716d-029c-4874-ad30-3adb16de7c7b",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d4768351-3259-4d33-a209-2a70c82b1365",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // DSL endpoint requires proper DSL format",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a7bef503-d85b-443c-969a-32f673ceecf9",
            "name": "Create a Transaction without passing from source",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "592b8bbc-bf23-4777-b413-c83129ccc64d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ecd0cf93-6a18-4cf3-a8bb-dd66671793aa",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"inflowTransactionId\", jsonData.id);",
                    "    console.log(\"inflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract inflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "7e946601-aa81-4be4-9c11-172ea49cde6f",
            "name": "Create a Transaction using JSON",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b78c22da-6e6e-4a95-ad8c-61cc2bb3afb6",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c868b84-9a2f-4313-bc1b-9f8fbc28abca",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"transactionId\", jsonData.id);",
                    "    console.log(\"transactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract transactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "fb0877db-bcd1-45ec-ac49-eef9b72b573c",
            "name": "Create a Transaction without passing to distribution",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8183548b-4f81-45ba-9edd-668e95e1f7d3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8edaea9-fe95-4f1a-9691-2fc04fb1c898",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"outflowTransactionId\", jsonData.id);",
                    "    console.log(\"outflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract outflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "22490afd-def1-4f2c-817a-4fe1fc8b921f",
            "name": "Get a Transaction by ID",
            "request": {
              "description": {
                "content": "Get a Transaction with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48bbc44e-f981-462e-beb2-954047a1a26f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06c9fb02-d4d2-4189-9fcf-74c55fbd99d2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "7af3b6fc-fe17-4f45-b63b-9b209fbf2b88",
            "name": "Update a Transaction",
            "request": {
              "description": {
                "content": "Update a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd8e21d2-6534-424c-bd6d-3fdffa53cb5a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46df72aa-34ac-4978-80b7-5a0c62cc9f68",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "description": {
          "content": "This collection requires the MIDAZ environment to be selected for proper functionality.",
          "type": "text/plain"
        },
        "type": "string",
        "value": "MIDAZ",
        "key": "environment"
      }
    ],
    "info": {
      "_postman_id": "00b3869d-895d-49b2-a6b5-68b193471560",
      "name": "MIDAZ",
      "version": {
        "raw": "v1.48.0",
        "major": 1,
        "minor": 48,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.48.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This is a swagger documentation for the Midaz Ledger API\n\n**IMPORTANT**: This collection requires the **MIDAZ Environment** to be selected for proper functionality. Please ensure you have imported and selected the MIDAZ environment before using this collection.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "midaz-environment-id",
    "name": "MIDAZ Environment",
    "values": [
      {
        "type": "any",
        "value": "@treasury_checking",
        "key": "accountAlias"
      },
      {
        "type": "any",
        "value": "0198a8c4-fec3-7815-ba3e-620f2eefb606",
        "key": "accountId"
      },
      {
        "type": "any",
        "value": "0198a8c4-fc98-77de-bcad-d9afb129724b",
        "key": "assetId"
      },
      {
        "type": "any",
        "value": "",
        "key": "assetRateId"
      },
      {
        "type": "any",
        "value": "",
        "key": "authToken"
      },
      {
        "type": "any",
        "value": "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e",
        "key": "balanceId"
      },
      {
        "type": "any",
        "value": "http://localhost",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "USD",
        "key": "externalCode"
      },
      {
        "type": "any",
        "value": "418faa80-aeb9-4bcb-a88f-874e0cb020da",
        "key": "idempotencyKey"
      },
      {
        "type": "any",
        "value": "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
        "key": "ledgerId"
      },
      {
        "type": "any",
        "value": "3000",
        "key": "onboardingPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{onboardingPort}}",
        "key": "onboardingUrl"
      },
      {
        "type": "any",
        "value": "0198a8c5-1200-7015-be1a-ee0427417239",
        "key": "operationId"
      },
      {
        "type": "any",
        "value": "0198a8c4-f826-7617-8094-092c0c434e6b",
        "key": "organizationId"
      },
      {
        "type": "any",
        "value": "0198a8c5-00f5-727e-a6b8-db9e4926cdf0",
        "key": "portfolioId"
      },
      {
        "type": "any",
        "value": "0198a8c5-0315-7f12-a6ca-b106c659cb70",
        "key": "segmentId"
      },
      {
        "type": "any",
        "value": "0198a8c5-11ff-7db3-85ae-51f52aede073",
        "key": "transactionId"
      },
      {
        "type": "any",
        "value": "3001",
        "key": "transactionPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{transactionPort}}",
        "key": "transactionUrl"
      },
      {
        "type": "any",
        "value": 39,
        "key": "perf_step_1"
      },
      {
        "type": "any",
        "value": 16,
        "key": "perf_step_2"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_3"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_4"
      },
      {
        "type": "any",
        "value": 24,
        "key": "perf_step_5"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_6"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_7"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_8"
      },
      {
        "type": "any",
        "value": 24,
        "key": "perf_step_9"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_10"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_11"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_12"
      },
      {
        "type": "any",
        "value": 28,
        "key": "perf_step_13"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_14"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_15"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_16"
      },
      {
        "type": "any",
        "value": 18,
        "key": "perf_step_17"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_18"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_19"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_20"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_21"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_22"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_23"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_24"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_25"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_26"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_27"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_28"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_29"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_30"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_31"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_32"
      },
      {
        "type": "any",
        "value": 52,
        "key": "perf_step_33"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_34"
      },
      {
        "type": "any",
        "value": "0198a8c5-0a0c-74ba-b0a7-f06d1bd5e4d2",
        "key": "inflowTransactionId"
      },
      {
        "type": "any",
        "value": "0198a8c5-0a0c-7568-9ac0-5fc69e400382",
        "key": "inflowOperationId"
      },
      {
        "type": "any",
        "value": "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e",
        "key": "inflowBalanceId"
      },
      {
        "type": "any",
        "value": 18,
        "key": "perf_step_35"
      },
      {
        "type": "any",
        "value": "0198a8c5-0a99-79b8-ad3f-fd50b6f0e3df",
        "key": "outflowTransactionId"
      },
      {
        "type": "any",
        "value": "0198a8c5-0a99-7ae7-aa15-1f2a6adcc249",
        "key": "outflowOperationId"
      },
      {
        "type": "any",
        "value": "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e",
        "key": "outflowBalanceId"
      },
      {
        "type": "any",
        "value": 14,
        "key": "perf_step_36"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_37"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_38"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_39"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_40"
      },
      {
        "type": "any",
        "value": 14,
        "key": "perf_step_41"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_42"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_43"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_44"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_45"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_46"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_47"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_48"
      },
      {
        "type": "any",
        "value": 100,
        "key": "currentBalanceAmount"
      },
      {
        "type": "any",
        "value": 17,
        "key": "perf_step_49"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_50"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_51"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_52"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_53"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_54"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_55"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_56"
      }
    ]
  },
  "globals": {
    "id": "b600288f-159e-4a54-aef3-22af47b3eb02",
    "values": [
      {
        "type": "any",
        "value": 1755178137679,
        "key": "step_1_start"
      },
      {
        "type": "any",
        "value": 1755178137816,
        "key": "step_2_start"
      },
      {
        "type": "any",
        "value": 1755178137952,
        "key": "step_3_start"
      },
      {
        "type": "any",
        "value": 1755178138088,
        "key": "step_4_start"
      },
      {
        "type": "any",
        "value": 1755178138242,
        "key": "step_5_start"
      },
      {
        "type": "any",
        "value": 1755178138383,
        "key": "step_6_start"
      },
      {
        "type": "any",
        "value": 1755178138515,
        "key": "step_7_start"
      },
      {
        "type": "any",
        "value": 1755178138650,
        "key": "step_8_start"
      },
      {
        "type": "any",
        "value": 1755178138794,
        "key": "step_9_start"
      },
      {
        "type": "any",
        "value": 1755178138928,
        "key": "step_10_start"
      },
      {
        "type": "any",
        "value": 1755178139068,
        "key": "step_11_start"
      },
      {
        "type": "any",
        "value": 1755178139201,
        "key": "step_12_start"
      },
      {
        "type": "any",
        "value": 1755178139357,
        "key": "step_13_start"
      },
      {
        "type": "any",
        "value": 1755178139493,
        "key": "step_14_start"
      },
      {
        "type": "any",
        "value": 1755178139633,
        "key": "step_15_start"
      },
      {
        "type": "any",
        "value": 1755178139769,
        "key": "step_16_start"
      },
      {
        "type": "any",
        "value": 1755178139913,
        "key": "step_17_start"
      },
      {
        "type": "any",
        "value": 1755178140044,
        "key": "step_18_start"
      },
      {
        "type": "any",
        "value": 1755178140187,
        "key": "step_19_start"
      },
      {
        "type": "any",
        "value": 1755178140320,
        "key": "step_20_start"
      },
      {
        "type": "any",
        "value": 1755178140453,
        "key": "step_21_start"
      },
      {
        "type": "any",
        "value": 1755178140589,
        "key": "step_22_start"
      },
      {
        "type": "any",
        "value": 1755178140726,
        "key": "step_23_start"
      },
      {
        "type": "any",
        "value": 1755178140856,
        "key": "step_24_start"
      },
      {
        "type": "any",
        "value": 1755178140991,
        "key": "step_25_start"
      },
      {
        "type": "any",
        "value": 1755178141123,
        "key": "step_26_start"
      },
      {
        "type": "any",
        "value": 1755178141259,
        "key": "step_27_start"
      },
      {
        "type": "any",
        "value": 1755178141388,
        "key": "step_28_start"
      },
      {
        "type": "any",
        "value": 1755178141517,
        "key": "step_29_start"
      },
      {
        "type": "any",
        "value": 1755178141649,
        "key": "step_30_start"
      },
      {
        "type": "any",
        "value": 1755178141779,
        "key": "step_31_start"
      },
      {
        "type": "any",
        "value": 1755178141910,
        "key": "step_32_start"
      },
      {
        "type": "any",
        "value": 1755178142092,
        "key": "step_33_start"
      },
      {
        "type": "any",
        "value": 1755178142229,
        "key": "step_34_start"
      },
      {
        "type": "any",
        "value": 1755178142378,
        "key": "step_35_start"
      },
      {
        "type": "any",
        "value": 1755178142523,
        "key": "step_36_start"
      },
      {
        "type": "any",
        "value": 1755178142653,
        "key": "step_37_start"
      },
      {
        "type": "any",
        "value": 1755178142789,
        "key": "step_38_start"
      },
      {
        "type": "any",
        "value": 1755178142921,
        "key": "step_39_start"
      },
      {
        "type": "any",
        "value": 1755178143056,
        "key": "step_40_start"
      },
      {
        "type": "any",
        "value": 1755178143198,
        "key": "step_41_start"
      },
      {
        "type": "any",
        "value": 1755178143329,
        "key": "step_42_start"
      },
      {
        "type": "any",
        "value": 1755178143466,
        "key": "step_43_start"
      },
      {
        "type": "any",
        "value": 1755178143600,
        "key": "step_44_start"
      },
      {
        "type": "any",
        "value": 1755178143725,
        "key": "step_45_start"
      },
      {
        "type": "any",
        "value": 1755178143860,
        "key": "step_46_start"
      },
      {
        "type": "any",
        "value": 1755178143996,
        "key": "step_47_start"
      },
      {
        "type": "any",
        "value": 1755178144131,
        "key": "step_48_start"
      },
      {
        "type": "any",
        "value": 1755178144269,
        "key": "step_49_start"
      },
      {
        "type": "any",
        "value": 1755178144392,
        "key": "step_50_start"
      },
      {
        "type": "any",
        "value": 1755178144518,
        "key": "step_51_start"
      },
      {
        "type": "any",
        "value": 1755178144650,
        "key": "step_52_start"
      },
      {
        "type": "any",
        "value": 1755178144789,
        "key": "step_53_start"
      },
      {
        "type": "any",
        "value": 1755178144928,
        "key": "step_54_start"
      },
      {
        "type": "any",
        "value": 1755178145064,
        "key": "step_55_start"
      },
      {
        "type": "any",
        "value": 1755178145200,
        "key": "step_56_start"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 113,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 165,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 56,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.49122807017544,
      "responseMin": 2,
      "responseMax": 52,
      "responseSd": 8.612766548249796,
      "dnsAverage": 0.5051076666666797,
      "dnsMin": 0.21920899999986432,
      "dnsMax": 0.5140420000000177,
      "dnsSd": 0.050540221483074375,
      "firstByteAverage": 9.147452438596513,
      "firstByteMin": 0.9854580000001079,
      "firstByteMax": 49.42112499999985,
      "firstByteSd": 7.911521501806416,
      "started": 1755178137499,
      "completed": 1755178145335
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 57,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "61ab955d-c629-4de2-b9e6-d784fa1d128a",
          "httpRequestId": "2ed0e58d-c6fe-4521-8dc8-66593767ddc7"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations",
              "normalizedPath": "/v1/organizations",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations"
            }
          },
          "id": "6cc31c35-123e-4812-809b-cee4fa100ae6",
          "name": "1. Create Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7301f84e-83fe-4827-b9fc-8caf33274676",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "69ab4bd9-92e3-4e1e-a0a7-d7ca3f60a50a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3c6dcd53-63c3-4095-8e3d-6c138f617ecd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 1: Create Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 1: Create Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 1\");\n"
                ],
                "_lastExecutionId": "7c7e7a3b-4e91-435c-8402-f7c19fa71551"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "183f4059-5c99-4308-878e-3a8a414900fc"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "775094d8-eabf-4afb-8cd7-3019f22c36dd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "406",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "69122f58-5fbf-45b3-a2dc-79bc30c7664d",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "490"
            },
            {
              "key": "X-Request-Id",
              "value": "7cdf3c09-dcaa-4c0a-9236-be6c0fe593dd"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              48,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              51,
              48,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 39,
          "responseSize": 490
        },
        "id": "6cc31c35-123e-4812-809b-cee4fa100ae6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè¢ Business Logic: Organization has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "42fe1189-599b-417b-9f23-d58d7a826380",
          "length": 57,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0733d212-08ac-4660-841d-30daf29ad3fd"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "274bd169-5adc-4d77-8430-cab7d2247e49",
          "name": "2. Get Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0f363973-dbf0-4d0a-a553-a623ccc1bc1f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "99457570-e3c3-4b6c-8ecf-348b612cd90a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ac8701f7-e36f-4e74-8009-a37bee67f91e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 2: Get Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 2: Get Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 2\");\n"
                ],
                "_lastExecutionId": "0ed8b612-68c4-4a9c-95b0-3218f4c24b00"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "557b6c3d-b0d8-45b5-abd1-f7a09b122fd5"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b29e23fa-d4de-433f-a7c8-eee1a0f66d01",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2fbec01f-6bb0-474f-b58d-9f764bf33f42",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "484"
            },
            {
              "key": "X-Request-Id",
              "value": "df14ce1a-0e9c-4dbc-b0a5-069ac13e2623"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 484
        },
        "id": "274bd169-5adc-4d77-8430-cab7d2247e49",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e2fe5334-deb9-4c42-990c-27e687fa9e76",
          "length": 57,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5e6020fd-3484-43e7-90a4-0d1f04ccfcfb"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "5c2b3f62-819b-49af-8e8d-9c8f9dd2efeb",
          "name": "3. Update Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fdd184ba-1edb-4c74-b1a4-3421cb110c52",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "1cf7955e-445f-4845-b0fc-b3a24663fd49"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "456b1578-5de5-4d73-9a12-04716842ede2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 3: Update Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 3: Update Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 3\");\n"
                ],
                "_lastExecutionId": "3afaa4dd-f203-4135-a06a-98f23342f97a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b5d0b871-4728-48b9-b290-1688c300f186"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76ddf37e-49ba-41d3-8b85-21c45a538975",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "368",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c6a68b3a-16b0-450c-92c5-3fe3e443a760",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "484"
            },
            {
              "key": "X-Request-Id",
              "value": "73b4f3e4-001e-44c3-acbd-e388e9093abe"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              71,
              114,
              111,
              117,
              112,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              57,
              51,
              56,
              49,
              53,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 484
        },
        "id": "5c2b3f62-819b-49af-8e8d-9c8f9dd2efeb",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c0ec479f-8d74-4595-947e-a2b7b9b5973a",
          "length": 57,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "737335e3-110d-4e8c-9536-e07d7dbd17bb"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations",
              "normalizedPath": "/v1/organizations",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations"
            }
          },
          "id": "9315aa1d-7fc3-44dd-abcf-3be98fba44ce",
          "name": "4. List Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter organizations by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f14e71fc-cda3-45d1-aa28-c8d0993836c6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "eca0d6e8-069e-40c4-8817-fd048999dd63"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3b2426be-8784-43a5-9e29-29e478e15ce0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 4: List Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 4: List Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 4\");\n"
                ],
                "_lastExecutionId": "a3fc55d2-0a02-473b-a105-d9cb4c1d9b01"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "649c47c0-569b-4535-bfa5-d78fd5eee05c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3b9d28cc-be8e-4098-9d93-08062fe394da",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0d9ca39b-dc50-4143-9968-80bca0a8bd3b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "516"
            },
            {
              "key": "X-Request-Id",
              "value": "8c358d2c-c530-4c70-b465-0ed34ae090a5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              71,
              114,
              111,
              117,
              112,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              54,
              51,
              56,
              50,
              52,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              55,
              46,
              57,
              51,
              56,
              49,
              53,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 516
        },
        "id": "9315aa1d-7fc3-44dd-abcf-3be98fba44ce",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57fc7591-388c-45a9-84dc-2d1b0ec3a4c1",
          "length": 57,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3f0ebc41-6f7c-46ef-bd54-fb42fe3ccda1"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
              "normalizedPath": "/v1/organizations/{}/ledgers",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers"
            }
          },
          "id": "c33e5304-3167-4b47-8725-811b7bfac956",
          "name": "5. Create Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e7043e6-8313-4e07-8f5e-622818a47030",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "f039f814-8e4e-4918-ba5a-240b0facbd18"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "03dfbdc3-330f-4ae3-9468-794885df60ff",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 5: Create Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 5: Create Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 5\");\n"
                ],
                "_lastExecutionId": "0aea731d-61c3-4dbd-843e-f230e800f0e3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e5e8df7d-da60-4aee-a39d-a429afc25127"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b31f947-344a-4726-9a37-cdf4e0f666f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "108",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3e7cb5ab-084f-41bd-8b16-a261f3585ff5",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "303"
            },
            {
              "key": "X-Request-Id",
              "value": "95661d08-394b-463e-b62d-1d84f3f909dd"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              51,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              55,
              54,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 303
        },
        "id": "c33e5304-3167-4b47-8725-811b7bfac956",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìí Business Logic: Ledger has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a35b3786-d82e-434a-87fd-2b220fdb4bf8",
          "length": 57,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f33249e9-24a9-4eae-9084-3eaf12c6d3fb"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "56f36d8e-3446-44ab-82f7-bec1befafa39",
          "name": "6. Get Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b9c41c3-fe38-45fe-b9ef-f6a1f4a394d7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ab577efa-3cde-4dd8-a546-866c4eee63d4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f651077b-b666-4e94-b27b-54b8d9f145a4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 6: Get Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 6: Get Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 6\");\n"
                ],
                "_lastExecutionId": "21cf2de4-d2e8-4117-968c-bfc4013f04ee"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "581c7af5-21ea-4c50-be08-d2808d1cfb9b"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "43890a42-b5af-4a36-9e3d-dde792643b52",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6a80e892-608b-4ccb-a1d7-989360faeb18",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "297"
            },
            {
              "key": "X-Request-Id",
              "value": "9b023058-614c-460b-8efe-dc913a5f5119"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 297
        },
        "id": "56f36d8e-3446-44ab-82f7-bec1befafa39",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6fa3add-8e62-4945-af1a-77931550b0d4",
          "length": 57,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6e926003-735c-4a9d-b87a-45eb73a7583d"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "383d0754-41e8-4ec9-8ec3-4486377a9289",
          "name": "7. Update Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "98f1c301-305c-42f4-9f14-0c726aab865d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "c53c25fa-d3be-4b6a-8ac9-3d6bc65a8c40"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2741c9a2-a6e2-4e32-8b74-d48401e3dc47",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 7: Update Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 7: Update Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 7\");\n"
                ],
                "_lastExecutionId": "8103df6e-9f2c-442b-ba0a-b4ae5ccbd9f1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "0c479304-f6f9-4550-a437-2c6403eaab61"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12808c81-a5de-4740-bd59-b76d85b3132f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ebddc2bf-6677-4dd6-bb29-3bec1a9dcf4f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "311"
            },
            {
              "key": "X-Request-Id",
              "value": "6bfa1779-293c-4af1-9ab6-81da38437c15"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              53,
              48,
              54,
              49,
              50,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 311
        },
        "id": "383d0754-41e8-4ec9-8ec3-4486377a9289",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "14841de9-f376-4f47-b17a-d3cb82bd5a79",
          "length": 57,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a329ca51-c1ed-4ba9-a06b-c9615ebd18b4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
              "normalizedPath": "/v1/organizations/{}/ledgers",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers"
            }
          },
          "id": "180141f8-30f3-4309-b3eb-eb6bd8060d11",
          "name": "8. List Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter ledgers by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e2cf514-540e-409f-b359-0769df2d3e03",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "1b81d315-6ed0-4320-8083-44bc0ae0a1d1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ce48be77-172d-4f83-8896-feb2a9f6dbb6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 8: List Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 8: List Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 8\");\n"
                ],
                "_lastExecutionId": "ecef5e72-2aba-45d6-b3fd-653ec13877b9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "99092cba-4a15-4021-84ef-bd3232e8700c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c269b0e7-5c44-46b4-a858-8a5cfff40a98",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fae89012-f4dd-4c30-baa2-19fb210c0339",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:57 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "343"
            },
            {
              "key": "X-Request-Id",
              "value": "a260b8c3-f3d7-487c-8da7-48d6a980bb29"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              50,
              50,
              51,
              51,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              53,
              48,
              54,
              49,
              50,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 343
        },
        "id": "180141f8-30f3-4309-b3eb-eb6bd8060d11",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2f7ec521-4e7d-4258-9619-74108f02a803",
          "length": 57,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2845ecb4-2389-479a-91a9-1829bc14c19c"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
            }
          },
          "id": "afc8872d-2bcd-402b-9a96-77c517c72ade",
          "name": "9. Create Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a0a40f5-2171-4b7b-bb2e-7071e760088b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "8fee1601-dbf0-436c-8f1b-d0f6700e9ac5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6865dbbe-5faf-43ad-b5b0-d499665a2796",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 9: Create Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 9: Create Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 9\");\n"
                ],
                "_lastExecutionId": "049ffc46-e840-4242-b5cc-3cee5786daa6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "95b14d5e-2441-4592-82c0-26e0abc2b908"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4ed34a39-6675-4b58-8b26-1aeb35be2f60",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "144",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8fb640dd-577f-44cd-9ffe-de3ef278cabf",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "381"
            },
            {
              "key": "X-Request-Id",
              "value": "44702abd-a075-483e-94a1-a1413e0d0082"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              57,
              56,
              45,
              55,
              55,
              100,
              101,
              45,
              98,
              99,
              97,
              100,
              45,
              100,
              57,
              97,
              102,
              98,
              49,
              50,
              57,
              55,
              50,
              52,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              56,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              56,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 381
        },
        "id": "afc8872d-2bcd-402b-9a96-77c517c72ade",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∞ Business Logic: Asset has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a37cfea-8fe4-4e4d-8dc9-a2e8327e6ecd",
          "length": 57,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cd5f12a4-48c2-4938-966f-6e172f912d0b"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "d1152791-ce1b-4935-bdc4-78ee0368e5f2",
          "name": "10. Get Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff7f0d05-87fe-446f-a703-2642c48e6fe8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "3424ddcd-ca3e-4699-9464-c1b180527588"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "89727d18-ec18-489b-9d20-57af03a184fd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 10: Get Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 10: Get Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 10\");\n"
                ],
                "_lastExecutionId": "cbd60173-76b6-41f7-adfc-572532056400"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets",
              "0198a8c4-fc98-77de-bcad-d9afb129724b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4579644c-a911-4dea-860c-ca2b1b2e6e09"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "846fa65e-8cb3-452b-88ca-2b2ae540db59",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4d042924-a2e4-41e4-9782-9ae81d5315f8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "375"
            },
            {
              "key": "X-Request-Id",
              "value": "08aedff8-bcf5-46bd-8b5c-19552d73135c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              57,
              56,
              45,
              55,
              55,
              100,
              101,
              45,
              98,
              99,
              97,
              100,
              45,
              100,
              57,
              97,
              102,
              98,
              49,
              50,
              57,
              55,
              50,
              52,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 375
        },
        "id": "d1152791-ce1b-4935-bdc4-78ee0368e5f2",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "84b62e22-a4df-4678-a5bb-cda56a4298ac",
          "length": 57,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3b16ba99-389b-42e8-8893-7857e26fb71e"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "6e7a61f3-30cd-4d39-91bf-92ffef66915c",
          "name": "11. Update Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4188df6b-0e60-4cdd-9f29-90bc6616362c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "28e247cc-4849-4c8b-8c13-fcee48ba612d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8538054b-2512-4eb4-9218-7b2c616606bb",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 11: Update Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 11: Update Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 11\");\n"
                ],
                "_lastExecutionId": "9bc4a92e-746a-4ac0-b06d-4816114cf431"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets",
              "0198a8c4-fc98-77de-bcad-d9afb129724b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "57828a7d-89c4-448d-afd7-9fbeac9c96cf"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "180459d0-128f-42fc-98c1-61301901d272",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "103",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d8343eb8-8997-4423-8832-cd1fdabfe2b0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "373"
            },
            {
              "key": "X-Request-Id",
              "value": "5d4d997c-53d3-4367-9c51-0013001cf79a"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              57,
              56,
              45,
              55,
              55,
              100,
              101,
              45,
              98,
              99,
              97,
              100,
              45,
              100,
              57,
              97,
              102,
              98,
              49,
              50,
              57,
              55,
              50,
              52,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              48,
              53,
              50,
              57,
              48,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 373
        },
        "id": "6e7a61f3-30cd-4d39-91bf-92ffef66915c",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d01e8e84-ac13-4cdf-a4c8-9f4e38dd3bb2",
          "length": 57,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bcb269dd-3077-47a4-8413-70f7e5466d10"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
            }
          },
          "id": "10af124a-28c9-4f48-9ccc-ddfe5c822321",
          "name": "12. List Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter assets by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51cf5c88-b472-487b-8cde-d451fead8d3e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "b7602877-f42e-4827-ad04-ad91eea68c15"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "55d02fa8-272c-482a-b960-8b8189845486",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 12: List Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 12: List Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 12\");\n"
                ],
                "_lastExecutionId": "12640543-7b9b-456e-bd4d-291a1d5700af"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "0c517018-01f6-42bb-b8e3-f917e7fbdd44"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56bf3dd8-d138-4fdd-918d-3cd2b97f06b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ec8ec8e9-c551-40b7-9d07-087e411f5970",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "405"
            },
            {
              "key": "X-Request-Id",
              "value": "4feb19e3-056d-4598-babd-7ba8626d9f75"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              57,
              56,
              45,
              55,
              55,
              100,
              101,
              45,
              98,
              99,
              97,
              100,
              45,
              100,
              57,
              97,
              102,
              98,
              49,
              50,
              57,
              55,
              50,
              52,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              55,
              54,
              52,
              51,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              48,
              53,
              50,
              57,
              48,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 405
        },
        "id": "10af124a-28c9-4f48-9ccc-ddfe5c822321",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25cc3769-82a5-4c43-a21a-d94503790d70",
          "length": 57,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fb07abb6-03aa-4079-8d00-1c693806947e"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
            }
          },
          "id": "390e5785-d1bc-4620-89fa-f03d3cbd89d0",
          "name": "13. Create Account",
          "request": {
            "description": {
              "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae8facd1-3c82-4081-842a-4a4f5fe1a543",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "e75960ab-e387-4525-9afe-356a890d3ca0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d1f3f291-68d5-422a-9496-a1e5528017f9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 13: Create Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 13: Create Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 13\");\n"
                ],
                "_lastExecutionId": "a2165830-8917-402e-a6b5-efa31d57d9a8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "87b10bfa-e0f0-49cc-af18-b36dbf19ba4b"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6f69aa67-4778-474b-9ca2-d12efe396b86",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "300",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "16534d25-a559-4760-b495-addb83952e4f",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "517"
            },
            {
              "key": "X-Request-Id",
              "value": "dc9da615-2703-4c4d-bcd3-05c85fbaa760"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              48,
              52,
              50,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              48,
              53,
              49,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 28,
          "responseSize": 517
        },
        "id": "390e5785-d1bc-4620-89fa-f03d3cbd89d0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üë§ Business Logic: Account has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9a53c0a-5919-4365-9d3f-0e1d5577c98c",
          "length": 57,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a4053323-eb86-47ea-8b87-84db6170c216"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "4dfa26f9-9965-4292-a150-309e89dfa3cb",
          "name": "14. Get Account",
          "request": {
            "description": {
              "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "527bec3f-9d3b-4a54-b916-5edeb3215c22",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "f08adc32-57a1-4358-85e1-07cc2566d11e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "547722ad-6cd7-4b46-ae84-7f6ac8a0825d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 14: Get Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 14: Get Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 14\");\n"
                ],
                "_lastExecutionId": "083936e6-9afc-485a-9aac-d48d1e2a02c8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "53b1091d-813b-4e6a-9942-945986abbb59"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "505144f7-8bbe-4d4e-9436-ece4d58cc242",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fb998c3f-9987-43b4-bbee-6897702f37e3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "509"
            },
            {
              "key": "X-Request-Id",
              "value": "9b6b0165-dd67-400e-b502-175361605597"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 509
        },
        "id": "4dfa26f9-9965-4292-a150-309e89dfa3cb",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "278b21ab-f968-41ba-8abf-4224ff89b6ea",
          "length": 57,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d9494ac5-3785-4878-83d1-719a401c8a93"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "2db2a813-2243-4610-b229-916f59ecb82b",
          "name": "15. Update Account",
          "request": {
            "description": {
              "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7ee234aa-4962-4ca0-80e6-cb087f244e98",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "cdb28af6-8705-4ace-8feb-5085548ada08"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2274f7e2-a4c5-42b7-a9a0-9738f35017bd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 15: Update Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 15: Update Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 15\");\n"
                ],
                "_lastExecutionId": "8e9436bd-c7cc-4d55-a6ac-211965abb5f7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "922f7265-c8d9-4020-80cb-56905d662c89"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95451e74-5451-43e3-b527-29fad5c1751d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "205",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "aaf8d177-fd32-4c1d-8eae-54fc40ed97a8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:58 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "518"
            },
            {
              "key": "X-Request-Id",
              "value": "107b6691-634d-4e16-a9e8-accb61081b40"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              54,
              49,
              56,
              57,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 518
        },
        "id": "2db2a813-2243-4610-b229-916f59ecb82b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d066ec5-fc50-4858-ad53-e47f8dca6b3e",
          "length": 57,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ba1b204-cff8-4289-919b-844820b1aead"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
            }
          },
          "id": "36f0806e-2f50-4c87-b5bd-f0469ad532c3",
          "name": "16. List Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter accounts by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b935bed-29c8-4a6d-aa87-0b68388a13a1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "132a103e-6bba-4ce7-a24e-57fd25ff4d3a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fb32304d-9bab-40fd-8487-4124870572c4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 16: List Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 16: List Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 16\");\n"
                ],
                "_lastExecutionId": "fd68ff27-145b-4a02-aaf5-adb7db5ea188"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "43c7bdb9-124f-445a-9ba5-3cacf98d2460"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9004ede-7078-42b2-bb56-e3a999be44e9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2be2071d-44ac-4e7a-898d-b2904dba0e80",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "1044"
            },
            {
              "key": "X-Request-Id",
              "value": "6069ed74-faaf-4da1-be17-a6adcb4acf36"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              54,
              49,
              56,
              57,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              56,
              55,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              56,
              55,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 1044
        },
        "id": "36f0806e-2f50-4c87-b5bd-f0469ad532c3",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa134080-166a-4189-9f96-7102ce7a84a9",
          "length": 57,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2a72523e-9b85-4ab6-b37d-d3968f9f97cf"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
            }
          },
          "id": "b37ad915-75aa-4ada-a834-c32920b3b281",
          "name": "17. Create Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c4c2d8f7-4040-4a8e-b437-fc07320ccb8d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "47b8322b-aa11-45f9-9f18-9ea84ec51daa"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "da6ee5e9-d110-422b-b266-8d96530fe059",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 17: Create Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 17: Create Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 17\");\n"
                ],
                "_lastExecutionId": "93ae704e-375f-4205-b6e9-2b93e56b126e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d165686f-0edb-47c4-9c63-4ebb5673692b"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a68f8ce-ca20-48b7-9aa4-0863aff9d7f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "162",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a4f01e1d-40fa-4fc9-83f5-0323a68fcb4a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "402"
            },
            {
              "key": "X-Request-Id",
              "value": "04e88c63-9b61-4adb-b97b-820234676079"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              48,
              102,
              53,
              45,
              55,
              50,
              55,
              101,
              45,
              97,
              54,
              98,
              56,
              45,
              100,
              98,
              57,
              101,
              52,
              57,
              50,
              54,
              99,
              100,
              102,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              50,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              51,
              52,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 402
        },
        "id": "b37ad915-75aa-4ada-a834-c32920b3b281",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìÅ Business Logic: Portfolio has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cfa1b9f5-eb74-4bbb-a4b2-7a644e4ffe0f",
          "length": 57,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8b5ee790-fcb4-4f32-8355-82380a77a324"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "16470edb-72b7-4d8f-8b6d-565a14e608bf",
          "name": "18. Get Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f3ca4b7-9bdf-4681-8f46-ae9de6e27c51",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "1106b698-5cef-4538-82da-a57e80b7180b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d42ac582-c08f-4c01-bd61-e5db48c82000",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 18: Get Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 18: Get Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 18\");\n"
                ],
                "_lastExecutionId": "2b08dc6e-efb9-4263-951d-1a595b00de69"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios",
              "0198a8c5-00f5-727e-a6b8-db9e4926cdf0"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c8f4ae88-e1cd-4294-9cf9-cb6dadc859f2"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5ee66c54-ab73-483a-8c85-13b2b6b8fb23",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0261e584-1d52-4a3b-93ee-ed063f7689c5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "397"
            },
            {
              "key": "X-Request-Id",
              "value": "c6017b79-a7b5-4a39-ac4e-fcb55e6c594e"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              48,
              102,
              53,
              45,
              55,
              50,
              55,
              101,
              45,
              97,
              54,
              98,
              56,
              45,
              100,
              98,
              57,
              101,
              52,
              57,
              50,
              54,
              99,
              100,
              102,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 397
        },
        "id": "16470edb-72b7-4d8f-8b6d-565a14e608bf",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b3bed39f-94d8-455a-8cf9-27960d4cb486",
          "length": 57,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "71010eca-34a1-4980-ba6b-ef477b7ed1df"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "dd844d02-1f29-4dcb-ab68-c0b2cfc930f5",
          "name": "19. Update Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6473b9b7-a082-4f90-98a9-5ab6810d5268",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "b6f3ab6b-0108-42c6-9e25-99dbb3351b4b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "819b8385-3958-4376-950b-44a7201f00ad",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 19: Update Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 19: Update Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 19\");\n"
                ],
                "_lastExecutionId": "70f639b6-9302-40a9-b1f5-3de4e8286518"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios",
              "0198a8c5-00f5-727e-a6b8-db9e4926cdf0"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4a65e7d1-2e76-4975-9854-43c1f27face8"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ad5df039-e7b5-422d-a1ff-78d1e3dd0cad",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "96dcf450-d853-4284-9b28-8e01da412535",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "405"
            },
            {
              "key": "X-Request-Id",
              "value": "5a16e3fc-1c30-4e91-9de5-82ab9b6ba402"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              48,
              102,
              53,
              45,
              55,
              50,
              55,
              101,
              45,
              97,
              54,
              98,
              56,
              45,
              100,
              98,
              57,
              101,
              52,
              57,
              50,
              54,
              99,
              100,
              102,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              49,
              55,
              49,
              49,
              49,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 405
        },
        "id": "dd844d02-1f29-4dcb-ab68-c0b2cfc930f5",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3ebb4174-82fa-4efc-979a-9936611ea657",
          "length": 57,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fcd99e65-709c-4f50-823e-bd05b03a2351"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
            }
          },
          "id": "d997cd90-9db2-451c-9bc1-cc7c29db32b5",
          "name": "20. List Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter portfolios by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f39d3c-4662-4bd2-bd0b-96c657fd1798",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "cfa4a6fb-3a70-4f21-a877-3e5bf76abadc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8d72491a-1b3b-4194-a1a6-bcf01ca9ef8f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 20: List Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 20: List Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 20\");\n"
                ],
                "_lastExecutionId": "0e298391-193e-4191-a5d4-5514ff5b39c4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "9544bd2b-9d1d-41fd-a723-241725ab8b3f"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "87d73843-b25c-4925-87ec-c7ce6ed608d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5c13b250-667e-4fe8-b508-e2994eabc42d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "437"
            },
            {
              "key": "X-Request-Id",
              "value": "aba54f9d-9ba4-4008-9af5-1b8be8ddd2d6"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              48,
              102,
              53,
              45,
              55,
              50,
              55,
              101,
              45,
              97,
              54,
              98,
              56,
              45,
              100,
              98,
              57,
              101,
              52,
              57,
              50,
              54,
              99,
              100,
              102,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              56,
              57,
              51,
              48,
              53,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              49,
              55,
              49,
              49,
              49,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 437
        },
        "id": "d997cd90-9db2-451c-9bc1-cc7c29db32b5",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b478945f-19d4-440a-b805-b1d657c52565",
          "length": 57,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "21233a73-4018-42b6-970e-931b2e62ae58"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
            }
          },
          "id": "7ad97d3d-2250-4c5c-bff3-3b7b5a83377a",
          "name": "21. Create Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4bea9ab1-d23a-47c8-9887-bf9cac3438a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "581afb66-1825-4455-b556-893424ed8def"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "49ff6454-ee79-45b3-9565-8fcf96c489cd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 21: Create Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 21: Create Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 21\");\n"
                ],
                "_lastExecutionId": "99d8c026-c338-4e40-8e6e-abcb974db9d0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b7c0be78-6d7f-4c50-9402-cc09366116da"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "040f75c3-fcb0-4607-bbd8-4c805fc0b96d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e6028a41-2361-4881-aa97-1419c443bd89",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "350"
            },
            {
              "key": "X-Request-Id",
              "value": "fd1c95a0-8756-4497-a20b-3155deff27e1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              51,
              49,
              53,
              45,
              55,
              102,
              49,
              50,
              45,
              97,
              54,
              99,
              97,
              45,
              98,
              49,
              48,
              54,
              99,
              54,
              53,
              57,
              99,
              98,
              55,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              49,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              50,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 350
        },
        "id": "7ad97d3d-2250-4c5c-bff3-3b7b5a83377a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè∑Ô∏è Business Logic: Segment has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b36e1328-f3c0-4cd9-ad73-e4a798b480b4",
          "length": 57,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "627ddeb9-0728-4002-86be-51dfbcf702c4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "cee253b5-5e72-4438-9987-56124bffa430",
          "name": "22. Get Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afbd7d9a-f2b8-4689-bcc7-00fee1fc23cb",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "3a8ddebe-f865-49f6-9fb3-9d06ac33b298"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7225c3fb-a71e-40b7-9080-eb44ba5e914d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 22: Get Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 22: Get Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 22\");\n"
                ],
                "_lastExecutionId": "8263cb36-491e-4116-9a18-089386219247"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments",
              "0198a8c5-0315-7f12-a6ca-b106c659cb70"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3fdb2b6c-96bb-4fd5-8bc3-738c8f446682"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "071c08e6-71d9-4ebe-85da-e84680a8f1ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "34326b32-b00a-4b42-bb2e-8a224f5eb71f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:28:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "345"
            },
            {
              "key": "X-Request-Id",
              "value": "6685e608-4c7a-40a8-a0f1-c53af3d5c0b5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              51,
              49,
              53,
              45,
              55,
              102,
              49,
              50,
              45,
              97,
              54,
              99,
              97,
              45,
              98,
              49,
              48,
              54,
              99,
              54,
              53,
              57,
              99,
              98,
              55,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 345
        },
        "id": "cee253b5-5e72-4438-9987-56124bffa430",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "65926a29-f1b5-4881-b2b4-2a764a053693",
          "length": 57,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b90d8c0a-6bf2-4dde-b147-8fae81fc8a66"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "15fd345f-ba5c-4b50-a8b6-ee896b32a0ad",
          "name": "23. Update Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dedd0b61-dfe2-4f36-a46d-fad04551f9ab",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0cbda995-952a-4c2f-bd06-6769cebb4b8f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "accd67e0-7410-4269-8104-1b97b349287f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 23: Update Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 23: Update Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 23\");\n"
                ],
                "_lastExecutionId": "81920634-def7-45d1-ad2b-61978cd4a4d3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments",
              "0198a8c5-0315-7f12-a6ca-b106c659cb70"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "818cfc6b-b7c5-4530-aa6e-1c57fb914a92"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f1bbf32-e482-4a2f-af82-d3ae44082254",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "114",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1d304616-a99e-4b9f-b094-24037f9a7545",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "352"
            },
            {
              "key": "X-Request-Id",
              "value": "2d2665e7-0a6d-4ebf-95ff-af92b771750b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              51,
              49,
              53,
              45,
              55,
              102,
              49,
              50,
              45,
              97,
              54,
              99,
              97,
              45,
              98,
              49,
              48,
              54,
              99,
              54,
              53,
              57,
              99,
              98,
              55,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              55,
              49,
              52,
              53,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 352
        },
        "id": "15fd345f-ba5c-4b50-a8b6-ee896b32a0ad",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6338bb0c-753f-449b-858d-c38fc8629f84",
          "length": 57,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e487c743-a0c5-4634-bff3-05c609de67d4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
            }
          },
          "id": "14f0877a-09e6-4662-894c-0609aaeca026",
          "name": "24. List Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter segments by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c43a868-dc57-4d81-815d-8a95f9d86ccf",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "aff7d02f-87ff-4329-95da-2e74ce40cd45"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1f7e157c-5ccf-43fa-bd4b-2ba6861ecc6e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 24: List Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 24: List Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 24\");\n"
                ],
                "_lastExecutionId": "9e8b09ba-1444-4795-b4cc-c405ac3e0bf7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "141c2438-661f-4305-b308-8b9d20cb92de"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "73de9656-e122-4d73-ad4b-1b9f8fdad0ca",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "df6acc10-0828-4ff0-b311-0f7f9e70d632",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "384"
            },
            {
              "key": "X-Request-Id",
              "value": "811bf731-a262-47be-a2a4-a5322e3764cd"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              51,
              49,
              53,
              45,
              55,
              102,
              49,
              50,
              45,
              97,
              54,
              99,
              97,
              45,
              98,
              49,
              48,
              54,
              99,
              54,
              53,
              57,
              99,
              98,
              55,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              52,
              51,
              55,
              51,
              49,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              48,
              46,
              55,
              49,
              52,
              53,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 384
        },
        "id": "14f0877a-09e6-4662-894c-0609aaeca026",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fbe7cab6-78ea-4d3f-ab99-c098a089903c",
          "length": 57,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9cb43412-7299-482e-8cff-bb2335ca4d38"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/metrics/count",
              "normalizedPath": "/v1/organizations/metrics/count",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/metrics/count"
            }
          },
          "id": "94ec44af-7fb3-415f-af3a-808d65782140",
          "name": "25. Count Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e1d464f0-959b-4a85-9519-083d7ce9374f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "25748080-a035-41d2-8dca-2658e24ac947"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5fbbcedb-d5a0-4bdf-9e0a-3fed820d97e6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 25: Count Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 25: Count Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 25\");\n"
                ],
                "_lastExecutionId": "2425bb00-db61-4d3b-ae5a-c6d8e39191bc"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3e4a910f-df95-4a96-a5eb-a4cff8b79353"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6c7d8a0-2173-4ebb-a993-348537a597c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "d0f19e5d-bf70-44b4-aff8-38550fe44d37",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "17c6e62b-449e-4825-858e-4265969113a9"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 0
        },
        "id": "94ec44af-7fb3-415f-af3a-808d65782140",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "71e526bb-6165-41aa-9004-6c54178b98a0",
          "length": 57,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b6b442d7-7fc8-4c7d-9b01-b7b0ec1e6fd7"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/metrics/count",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/metrics/count"
            }
          },
          "id": "9cf7fac2-7a7b-420b-9bca-451a51cab5a6",
          "name": "26. Count Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e271516b-e310-4882-abf2-11cfa43824b7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "bab3daa6-0298-4fe1-a4e8-85fab4350a88"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ef0e3ce5-afbe-4455-b52a-5e60c1b15d13",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 26: Count Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 26: Count Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 26\");\n"
                ],
                "_lastExecutionId": "f879f8a0-53a6-4ad8-9421-afc223bab35e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "64898a5b-53bc-4cc4-b234-05fea57cbe05"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fc06c5a6-b702-4097-9343-60fd1cf7a2df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "8418fbcb-2479-48da-8198-16fdff65c707",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "fc43b123-aa0a-4cda-ae34-658144366390"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "9cf7fac2-7a7b-420b-9bca-451a51cab5a6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7202264b-a4a7-4f31-91fd-68742f2f9f10",
          "length": 57,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f7703de5-c251-41ba-81fd-7b654c9b9bff"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count"
            }
          },
          "id": "d955d250-7392-4a68-a702-06e4b1ca8c04",
          "name": "27. Count Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26787d55-7678-473f-8bdb-986a2452f15f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "8646da9c-3f00-4a77-977b-bf25303202a2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0c24f4cc-10a2-46db-a9b7-a3717eb1f1d9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 27: Count Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 27: Count Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 27\");\n"
                ],
                "_lastExecutionId": "6ee3ef5c-8a4b-4ee9-9dda-960f2979785c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "da5dc60a-1fe2-433b-a900-99021c7df1f1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ac817f6e-dc60-4e7d-8900-0e39554c9d4a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "add620f0-96c4-42c6-8b83-60bca6c15a11",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "b5c01623-d934-4323-82a9-455e91438cf5"
            },
            {
              "key": "X-Total-Count",
              "value": "2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 0
        },
        "id": "d955d250-7392-4a68-a702-06e4b1ca8c04",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b1fbda78-44a9-42c9-b7e3-09266bbc9dc5",
          "length": 57,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "69adf0f8-75f0-476d-8727-72ff95a8de2f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count"
            }
          },
          "id": "8e84fc8d-0c97-4c59-addb-36781b4c218a",
          "name": "28. Count Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54c1ac01-87b9-405e-b951-ecbe80b5a55b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "0e26cae6-7d54-4a97-b080-533ffc7d70e3"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "de407d57-32bc-4e24-a529-ec15c5d71dd0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 28: Count Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 28: Count Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 28\");\n"
                ],
                "_lastExecutionId": "075adaf6-552e-481b-9d3e-34e776e00955"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4d43f8f8-30b9-4112-985d-8467f0ee2126"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "45672f89-1e02-4b7b-bd7a-680fc15555f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "95967ddd-0196-4cba-9464-7d30f615e504",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "b288006e-47fd-411c-8295-f84222087979"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 0
        },
        "id": "8e84fc8d-0c97-4c59-addb-36781b4c218a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9cc65fea-b873-4751-9147-d4fab979a126",
          "length": 57,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e8750bd1-37d3-4e0c-8c30-658746e8b432"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count"
            }
          },
          "id": "947cd277-fcd5-473d-8e6e-fa5c3fd2f161",
          "name": "29. Count Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f60f9b87-8352-4ca6-af52-d9c4ace89ea9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "28183983-a8ad-42ee-a94a-80a250f32a05"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7f5f89f3-1758-4d93-a73b-349c1f41bae0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 29: Count Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 29: Count Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 29\");\n"
                ],
                "_lastExecutionId": "09f9ae3d-40ae-407b-b1f5-d526304f971b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "00ab93f7-2531-48e2-a167-223872680fb7"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d053e93-4c90-44c1-b170-1c150f2c33df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "b317272e-7f7a-4c52-a022-af0221e8ff5e",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "75eddff6-b59c-4d95-a82a-e7b96d7b5eae"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "947cd277-fcd5-473d-8e6e-fa5c3fd2f161",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e66a2cc-85f7-44bf-8269-52808c5eddaf",
          "length": 57,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7e09030b-151d-4e85-afe9-715fcf8b2897"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count"
            }
          },
          "id": "b2d2ac13-6fdf-4d5f-8655-e84d9e1340ae",
          "name": "30. Count Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96a37fa3-d4ee-4480-8033-f29e0e939f22",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "be808743-6aac-49b6-8ba4-740340d238b5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6e984b6c-3939-46ea-be0b-5456dbe5e61e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 30: Count Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 30: Count Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 30\");\n"
                ],
                "_lastExecutionId": "044fa006-b79b-426f-a120-caac7770130e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "2f8a4f20-9056-4b70-b08a-162628d35ee2"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00c68e02-d0d8-4822-9d1d-3faab657ce12",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "3c20f0a4-cda3-46eb-a8ca-e0f62e9da3f5",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:00 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "b9bba3b8-cbf2-4597-82f6-5402c01e3cfc"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 0
        },
        "id": "b2d2ac13-6fdf-4d5f-8655-e84d9e1340ae",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd9e7430-cf1b-4015-b97b-35a5da487b57",
          "length": 57,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9d94597a-8b83-454d-a421-46195f8c96c1"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}"
            }
          },
          "id": "102f80f8-e208-46ba-a6b4-51d019e758f8",
          "name": "31. Get Account by Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ad068a0-1a84-4794-bd56-b38e1e89b56f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "1becd571-eb9b-42e3-9929-fae0e945bef9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bc1e003b-b791-4b31-abfe-bb59d87d3be1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 31: Get Account by Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 31: Get Account by Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 31\");\n"
                ],
                "_lastExecutionId": "5ccae16f-ece4-47aa-80c7-9419fd39ada4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "alias",
              "@treasury_checking"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "5d8bccd3-1f48-4730-a00d-4069a53fc16c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4f7d03e6-0b21-4ae3-a5d3-8b883e30b3f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "058f5db6-ea3f-4d2f-98a9-a47c9959c919",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "491"
            },
            {
              "key": "X-Request-Id",
              "value": "79c3ee23-537f-444b-b094-cfc87850a888"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              51,
              54,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              54,
              49,
              56,
              57,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 491
        },
        "id": "102f80f8-e208-46ba-a6b4-51d019e758f8",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d4d08a1-958a-4c36-8a3e-48a5321e4669",
          "length": 57,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "797e10d8-cebc-4c7c-b157-bab74b0867e2"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}"
            }
          },
          "id": "4b3ece7a-8c9c-4ee5-b782-2a676fe97b03",
          "name": "32. Get Account by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account External Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1d2caca5-110d-495a-8b46-079f32f90bfe",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "2e687c88-ef9a-4deb-83b6-a36087e3ad46"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "09d66944-7bb2-4989-b624-6c6f6752b4c7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 32: Get Account by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 32: Get Account by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 32\");\n"
                ],
                "_lastExecutionId": "d5ca020c-e03b-43b7-9dcc-ae032e8c677d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "external",
              "USD"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "38a98808-9ce4-4eec-b149-0d28f78fcad3"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a3ed9251-d412-4fe3-b644-345c29114de6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "899be3d4-328f-4f5f-849f-1729facc7fd7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "493"
            },
            {
              "key": "X-Request-Id",
              "value": "3be612a3-9e7d-4efd-8778-9574dcf52c70"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              56,
              55,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              56,
              55,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 493
        },
        "id": "4b3ece7a-8c9c-4ee5-b782-2a676fe97b03",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "97bdabba-7845-4110-b412-dded347d1cc5",
          "length": 57,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1496bf94-43ce-4e62-bbe0-52fcc2fbfb6b"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
            }
          },
          "id": "fa259bd8-588b-40a4-b9b0-84c85cef35ec",
          "name": "33. Create Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8f56ab26-fbf3-41c9-9310-18e150dffd9d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "d0a57aac-de86-4c36-8741-1ffda2005590"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b592fa99-b8fc-495b-9225-93971167200a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 33: Create Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 33: Create Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 33\");\n"
                ],
                "_lastExecutionId": "105fbc75-9f21-4cfc-b55d-c8bb553b1402"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1f5bd344-49e6-4768-8b2a-795c9204805f"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "89db2ff6-e287-44d5-855a-046f52eab6ad"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "612f5e45-8fb3-4655-beeb-30d47ff6c93a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "980",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e473c28b-fa64-4529-8e4a-eb29dbf994c7",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2069"
            },
            {
              "key": "X-Request-Id",
              "value": "798db5f5-c254-4d04-b120-43acb3037cf6"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              53,
              57,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              54,
              51,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              97,
              54,
              45,
              57,
              98,
              51,
              99,
              45,
              57,
              49,
              54,
              51,
              53,
              98,
              100,
              54,
              102,
              56,
              102,
              52,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              54,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              50,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              50,
              54,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 52,
          "responseSize": 2069
        },
        "id": "fa259bd8-588b-40a4-b9b0-84c85cef35ec",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "40a4f6d6-d74f-4fda-b128-a3189df52c1c",
          "length": 57,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ba605990-f2ca-4e80-b9f4-241a94674521"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow"
            }
          },
          "id": "d3ab0534-05cc-4836-bc1f-d9c732905c08",
          "name": "34. Create Transaction (Inflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "inflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b691fa28-0e6a-49dd-bf01-7a99a3108616",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "5c9b76c9-ecdc-41c9-a2ff-b1bb3449a67b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "890cd461-8baa-4b4d-8906-18f87e0219cd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 34: Create Transaction (Inflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 34\");\n"
                ],
                "_lastExecutionId": "6dcf875e-b49e-4cab-b185-3fde448f0444"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "inflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c5d85130-6092-40d4-899a-74eba71647a1"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f3fbdc6d-496a-47e9-ae67-0dba9ee724b4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "610",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b00ef734-6b3d-4536-a3de-8f0266f7959f",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2040"
            },
            {
              "key": "X-Request-Id",
              "value": "a03e03be-e81a-4011-80a8-340ed449b016"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              49,
              48,
              49,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              49,
              48,
              50,
              54,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              102,
              99,
              45,
              56,
              53,
              102,
              55,
              45,
              54,
              101,
              100,
              99,
              51,
              48,
              102,
              100,
              53,
              48,
              48,
              54,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              50,
              55,
              48,
              57,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              50,
              55,
              49,
              51,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              53,
              54,
              56,
              45,
              57,
              97,
              99,
              48,
              45,
              53,
              102,
              99,
              54,
              57,
              101,
              52,
              48,
              48,
              51,
              56,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              55,
              54,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 2040
        },
        "id": "d3ab0534-05cc-4836-bc1f-d9c732905c08",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a42b7575-ad9f-41f0-aba9-37240b0f3d0c",
          "length": 57,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bc38fc3a-07d0-4cc2-bb89-bc8d8e039684"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow"
            }
          },
          "id": "d973f4f6-fd81-481c-979a-be77c9abbc36",
          "name": "35. Create Transaction (Outflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "outflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f330348a-e071-4f39-81ca-d4d371795636",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "eed6180c-d375-467e-8871-77dc5c515f56"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd88536f-7029-43ec-8701-1e0f9702fe71",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 35: Create Transaction (Outflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 35\");\n"
                ],
                "_lastExecutionId": "91aabf9b-3877-4270-b14f-3818a25518ae"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "outflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "304e1362-0e95-4fca-9c36-6140793f8634"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5f2137ae-a1e9-49de-ab50-b28b2b6f168c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "608",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d9cd1cef-d690-4b65-a34d-84847814669d",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2039"
            },
            {
              "key": "X-Request-Id",
              "value": "0710e3c3-896f-482b-8883-59011bbf2340"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              51,
              55,
              56,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              51,
              55,
              57,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              97,
              49,
              51,
              45,
              56,
              98,
              53,
              53,
              45,
              101,
              50,
              99,
              97,
              100,
              49,
              100,
              55,
              98,
              101,
              54,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              54,
              48,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              54,
              48,
              56,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              97,
              101,
              55,
              45,
              97,
              97,
              49,
              53,
              45,
              49,
              102,
              50,
              97,
              54,
              97,
              100,
              99,
              99,
              50,
              52,
              57,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              50,
              54,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              51,
              48,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 2039
        },
        "id": "d973f4f6-fd81-481c-979a-be77c9abbc36",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8dc5d476-b20e-44b1-b5b2-ff67f288a7ee",
          "length": 57,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "48620387-9ad8-4451-8b68-0cbc0555c468"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
            }
          },
          "id": "d3c40e7a-3472-49ef-aeff-cac14b1a40f9",
          "name": "36. Get Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32ed3288-0f17-4f66-b7c7-cb5a3d6d6d82",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0c5f349f-9acf-4cf2-9d4b-81248b9b0940"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "739b40c0-4259-4103-98f7-f58ea43cd8d1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 36: Get Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 36: Get Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 36\");\n"
                ],
                "_lastExecutionId": "ece294e7-4ae2-4c57-957a-e840a284bb75"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "0198a8c5-096d-710e-8a49-c7f791fda6fe"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "8b37fdeb-79e7-4644-bcca-0370fdc50b0d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fdc5366a-ee40-4bee-b79b-d3f9ebf2f16c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4b87d074-322b-4275-8840-ee9476866415",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2053"
            },
            {
              "key": "X-Request-Id",
              "value": "a4d7124e-1ad7-46c4-8afc-2c90a510d5f8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              97,
              54,
              45,
              57,
              98,
              51,
              99,
              45,
              57,
              49,
              54,
              51,
              53,
              98,
              100,
              54,
              102,
              56,
              102,
              52,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 2053
        },
        "id": "d3c40e7a-3472-49ef-aeff-cac14b1a40f9",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e040812-478a-4eb6-b598-743dc1e76e15",
          "length": 57,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bdfaa2bd-0b1c-4c31-8722-b801a1f379f1"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
            }
          },
          "id": "ec469ad4-2077-4d5a-801d-0b88cba526e4",
          "name": "37. Update Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23a0656b-3e6f-4b69-9c5f-ea722e4b0195",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "99f10e9f-ab86-421c-b002-2360b90e5e0b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e9cd824e-f9ae-4362-a653-1925bb5fe81b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 37: Update Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 37: Update Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 37\");\n"
                ],
                "_lastExecutionId": "7ba03e10-0763-491d-8690-25b75ea1fdac"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "0198a8c5-096d-710e-8a49-c7f791fda6fe"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "7be43789-a77b-4fe6-8cda-c166d9362bd1"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0cbb252a-8856-4962-a1d2-836b17fd6001",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "86",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5b9ca0e0-6e46-425a-b828-ebeab9bd9041",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "530"
            },
            {
              "key": "X-Request-Id",
              "value": "e88e5960-3715-49c2-ae4d-e8688eaa4ebf"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              54,
              52,
              53,
              51,
              49,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 530
        },
        "id": "ec469ad4-2077-4d5a-801d-0b88cba526e4",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ca81a67-a39a-44ae-b041-c48dacb9813f",
          "length": 57,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "853673d8-bccc-41b0-bfc2-0557fd8ed0d3"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions"
            }
          },
          "id": "988396dd-1a41-4d7d-a4ab-5434cdc0f089",
          "name": "38. List Transactions",
          "request": {
            "description": {
              "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66f199c4-5bca-4509-b0ce-1066ae185741",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ed27bf12-1f5d-4c2f-b315-fc77357aa4ea"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6fcdf33e-df20-44ed-ab22-35033a4111dc",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 38: List Transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step 38: List Transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 38\");\n"
                ],
                "_lastExecutionId": "6cbc908b-6745-4fe7-a065-1ab0742e0cba"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4bde015e-a8bb-4a33-b0c6-2b22c831a937"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2776700f-e08a-4f4d-b3e1-b350c7c70242",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a0230251-c2e3-4008-a3ff-99ea58fadbd8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6082"
            },
            {
              "key": "X-Request-Id",
              "value": "69668234-01d5-4ce7-9bdd-2cb0e5aa1807"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              51,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              51,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              97,
              49,
              51,
              45,
              56,
              98,
              53,
              53,
              45,
              101,
              50,
              99,
              97,
              100,
              49,
              100,
              55,
              98,
              101,
              54,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              54,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              97,
              101,
              55,
              45,
              97,
              97,
              49,
              53,
              45,
              49,
              102,
              50,
              97,
              54,
              97,
              100,
              99,
              99,
              50,
              52,
              57,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              102,
              99,
              45,
              56,
              53,
              102,
              55,
              45,
              54,
              101,
              100,
              99,
              51,
              48,
              102,
              100,
              53,
              48,
              48,
              54,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              50,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              53,
              54,
              56,
              45,
              57,
              97,
              99,
              48,
              45,
              53,
              102,
              99,
              54,
              57,
              101,
              52,
              48,
              48,
              51,
              56,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              48,
              54,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              54,
              52,
              53,
              51,
              49,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              97,
              54,
              45,
              57,
              98,
              51,
              99,
              45,
              57,
              49,
              54,
              51,
              53,
              98,
              100,
              54,
              102,
              56,
              102,
              52,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              48,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 6082
        },
        "id": "988396dd-1a41-4d7d-a4ab-5434cdc0f089",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6d8e3224-5386-48ed-b00b-e99200c1f169",
          "length": 57,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "55fc4189-c871-4a89-8585-2881012b9a18"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}"
            }
          },
          "id": "487f3298-106a-4c38-8013-adc4e08ac5d4",
          "name": "39. Get Operation",
          "request": {
            "description": {
              "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca7159b4-bfa7-4c6b-9fdf-08b94978247a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "eb2159af-071f-4b07-b2d6-136ed2579c34"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c5a2ad97-01a9-40b0-9159-5211afff5393",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 39: Get Operation =====\nconsole.log(\"‚öôÔ∏è Setting up Step 39: Get Operation\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 39\");\n"
                ],
                "_lastExecutionId": "34f0c693-b261-4cfb-99e4-dff2f6de4944"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606",
              "operations",
              "0198a8c5-096d-7301-b0f8-0237bb879fa1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f4a5a651-c9a4-43d3-b394-641279bec9d1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9c8840e-6af5-4530-85ec-2cab1eb97f30",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "313b20df-afb5-4efa-a12c-9b97c20c2192",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "751"
            },
            {
              "key": "X-Request-Id",
              "value": "f00a6a2b-49e2-4da7-88f3-a9850a02d5c6"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 751
        },
        "id": "487f3298-106a-4c38-8013-adc4e08ac5d4",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f06714c-9313-49b8-acca-08ebcc80e926",
          "length": 57,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0bfbd727-b5d5-4c82-9daf-eda682602b9d"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations"
            }
          },
          "id": "0006aa94-996a-4ec6-ba5a-64b355a03953",
          "name": "40. List Operations by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "DEBIT, CREDIT",
                    "type": "text/plain"
                  },
                  "key": "type",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ffc15af3-8562-403a-9654-ca76d357b978",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "4af3b154-eefa-4e58-9eaa-f3fd460620cf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "00541973-1c85-41a6-a728-9d32c10c4fdf",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 40: List Operations by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 40: List Operations by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 40\");\n"
                ],
                "_lastExecutionId": "8a1871b6-e7dc-4340-989c-1eebbb91bcef"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606",
              "operations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "6f8a8610-7c9a-45c2-9f8e-6b3bdadb7bb0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e186f5a0-9676-402e-8f3b-e830c437aff7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8bbd5845-c49f-4c91-a804-6b919e548655",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2281"
            },
            {
              "key": "X-Request-Id",
              "value": "5e7f2aed-1854-47d1-8c4e-84b47b63eaa3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              97,
              101,
              55,
              45,
              97,
              97,
              49,
              53,
              45,
              49,
              102,
              50,
              97,
              54,
              97,
              100,
              99,
              99,
              50,
              52,
              57,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              57,
              57,
              45,
              55,
              57,
              98,
              56,
              45,
              97,
              100,
              51,
              102,
              45,
              102,
              100,
              53,
              48,
              98,
              54,
              102,
              48,
              101,
              51,
              100,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              49,
              55,
              49,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              53,
              54,
              56,
              45,
              57,
              97,
              99,
              48,
              45,
              53,
              102,
              99,
              54,
              57,
              101,
              52,
              48,
              48,
              51,
              56,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              97,
              48,
              99,
              45,
              55,
              52,
              98,
              97,
              45,
              98,
              48,
              97,
              55,
              45,
              102,
              48,
              54,
              100,
              49,
              98,
              100,
              53,
              101,
              52,
              100,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              50,
              50,
              48,
              51,
              53,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 2281
        },
        "id": "0006aa94-996a-4ec6-ba5a-64b355a03953",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fd97b547-2f44-4753-bde8-df8f659665d2",
          "length": 57,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4929bb63-c33a-4f9e-91b5-1f6cd7e1ca02"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}"
            }
          },
          "id": "d434f723-d8c1-4428-ace8-ce5044675451",
          "name": "41. Update Operation Metadata",
          "request": {
            "description": {
              "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c6dad4d-0ff0-49fe-b278-c1ed53d036aa",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "7753d119-773f-4a84-9b03-c977dea90ffd"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "60797250-af5e-43b3-b0ce-6a26d0bd1203",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 41: Update Operation Metadata =====\nconsole.log(\"‚öôÔ∏è Setting up Step 41: Update Operation Metadata\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 41\");\n"
                ],
                "_lastExecutionId": "c289af9c-cfb6-40b4-8361-0ec33f531abb"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "0198a8c5-096d-710e-8a49-c7f791fda6fe",
              "operations",
              "0198a8c5-096d-7301-b0f8-0237bb879fa1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "09be8792-7938-4895-a4ae-418152498019"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44a28ef7-e064-4945-9d03-77462393952d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a8e74536-99aa-4d87-8310-c20fd1caf526",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "753"
            },
            {
              "key": "X-Request-Id",
              "value": "86db3675-28ec-457d-9fde-2c688f547c3d"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              51,
              48,
              49,
              45,
              98,
              48,
              102,
              56,
              45,
              48,
              50,
              51,
              55,
              98,
              98,
              56,
              55,
              57,
              102,
              97,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              48,
              57,
              54,
              100,
              45,
              55,
              49,
              48,
              101,
              45,
              56,
              97,
              52,
              57,
              45,
              99,
              55,
              102,
              55,
              57,
              49,
              102,
              100,
              97,
              54,
              102,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              100,
              105,
              116,
              32,
              99,
              97,
              114,
              100,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              48,
              54,
              49,
              49,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              51,
              46,
              49,
              56,
              50,
              53,
              50,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 753
        },
        "id": "d434f723-d8c1-4428-ace8-ce5044675451",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d4b5e437-c81d-489b-b3cd-f050a37839e1",
          "length": 57,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0c3dcbe1-17d9-4808-9914-01b5624409dd"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "eaa6ef19-e0f6-44d6-95c3-5bf45e870a5d",
          "name": "42. Get Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0da0d212-a868-41a6-b135-cad6b1b1ea90",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "bd060885-9bb5-4a51-a5ea-02e3e9fc8195"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4e10d1be-ab9b-4ff8-aacb-8a202a441298",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 42: Get Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 42: Get Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 42\");\n"
                ],
                "_lastExecutionId": "9450f907-6e73-4ab1-bef9-17fd90381609"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "balances",
              "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a036c0bc-1e59-4c5e-a251-544225276b71"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "71dbd409-4996-499f-a22e-1c3c58c02b22",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fe4e86e4-b21f-43ae-91fb-a2eb2160e415",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "459"
            },
            {
              "key": "X-Request-Id",
              "value": "5aa68339-e980-4feb-8cd8-b84749ed2b54"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              51,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 459
        },
        "id": "eaa6ef19-e0f6-44d6-95c3-5bf45e870a5d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5fbeac2-32d9-4153-a594-6385088dbdaf",
          "length": 57,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d44902ca-f7b7-46a3-a031-5df9f7db40d5"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances"
            }
          },
          "id": "9924156c-836e-4535-abcd-b3745bd09a13",
          "name": "43. List Balances by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd5d13cd-e489-4072-bb3d-ec4e741070b7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "25e6fbc9-c26a-46c2-9ae6-0d9eb6c4fdc0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f672cb22-d727-4cad-90cd-a3737a4cc899",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 43: List Balances by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 43: List Balances by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 43\");\n"
                ],
                "_lastExecutionId": "eca2d09f-e8d8-4da2-8447-a5df318105a6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "78f17bd2-9d3d-4fab-a8c0-9b8e92f91a92"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42172e06-8d5d-4914-be1e-91a0fed93c4e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "34a5ccaf-1d75-445e-86b9-6141d2f0a354",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "482"
            },
            {
              "key": "X-Request-Id",
              "value": "f94447d9-b610-4c21-8dc4-41239670219d"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              51,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 482
        },
        "id": "9924156c-836e-4535-abcd-b3745bd09a13",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "09d28861-65c4-4999-bb87-b0e54b3b5790",
          "length": 57,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a395355b-27c8-4ed7-88d2-b4f8fee66f88"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
            }
          },
          "id": "81eea49d-1903-4c79-877d-50ec36ed23cd",
          "name": "44. List Balances by Account Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4c68f9f8-0912-49da-982e-7564791d734c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "481b64e0-99d1-4325-a5c3-f3bef26b2427"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "428cd6c9-7c5d-48b8-8298-4a08b0d5e9e8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 44: List Balances by Account Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 44: List Balances by Account Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 44\");\n"
                ],
                "_lastExecutionId": "1b132666-dafc-4b52-9ea6-46179de75883"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "68d937a0-78f0-4698-a99f-4bb2dc5d9e33"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "841aaa5c-50d5-4303-858a-4db8c78465ec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ad24fa73-09e5-4ea7-ac55-74d87d15d6a2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "482"
            },
            {
              "key": "X-Request-Id",
              "value": "52b86bde-4c64-4495-abaa-b5bd17874ff5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              51,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 482
        },
        "id": "81eea49d-1903-4c79-877d-50ec36ed23cd",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4800c9c4-e075-4616-aa2b-75326ee801eb",
          "length": 57,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6206b6eb-7822-4d77-b7b6-9de38e02e428"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances"
            }
          },
          "id": "044c8e38-d0a3-4c20-b3c0-8097b403390b",
          "name": "45. List Balances by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79d37ef1-1555-4a3f-8f28-23d76f7a4e51",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "a8ac0a48-4086-48f7-85fb-65d313063464"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4098ca1f-acf9-4615-953a-0a025c80f2f8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 45: List Balances by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 45: List Balances by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 45\");\n"
                ],
                "_lastExecutionId": "1a037417-307d-4aa8-a6c6-042bf4df790d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "external",
              "USD",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3c4bf1df-2f81-405c-b503-b2fba6b5816a"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb20e35f-9b79-4280-9488-b933283c3e34",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2da766a2-03a7-4336-87a1-a43ead72f502",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "479"
            },
            {
              "key": "X-Request-Id",
              "value": "76da3583-3204-4f80-b1e4-5f554c7b02c5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              57,
              51,
              55,
              53,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              50,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 479
        },
        "id": "044c8e38-d0a3-4c20-b3c0-8097b403390b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bdd759a9-ed72-4117-9931-c93b0b6af026",
          "length": 57,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c650a7a5-fe95-47eb-8485-e7624315f4ce"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "9368e13a-f13d-457b-bd8d-9a2d7f23ee43",
          "name": "46. Update Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55f743e2-eb35-478d-9e25-1e0b30cc4a76",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "5eadc4fd-f6d2-41fa-97f7-0296e70bb082"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a9b0bae6-81f3-49fa-970d-a8e2e659af9f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 46: Update Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 46: Update Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 46\");\n"
                ],
                "_lastExecutionId": "b6f51415-2982-4728-a877-fead4aad3a44"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "balances",
              "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "067e6eb3-b4bf-4375-9f15-017fa299cb1f"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c55fd39d-2197-4d5f-9033-8a40890aa213",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ed91dbdf-176e-45e5-abf2-1be74dd18009",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "459"
            },
            {
              "key": "X-Request-Id",
              "value": "4c6609f0-28f0-4da4-9097-556d2aa402ec"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              51,
              49,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 459
        },
        "id": "9368e13a-f13d-457b-bd8d-9a2d7f23ee43",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6173614-4119-495a-95a3-f6daea24d9d3",
          "length": 57,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "35e4820a-9fc8-4f82-92a8-2e6edff701e5"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances"
            }
          },
          "id": "5928eecf-eda9-4895-9496-13db21300503",
          "name": "47. List All Balances",
          "request": {
            "description": {
              "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d970f7e1-66df-48ac-ad83-867ff29e53ad",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "05075b1b-25ac-469e-bd18-c08a28f4171d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a9e44699-1393-4145-bf78-94e9f2282ba2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 47: List All Balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step 47: List All Balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 47\");\n"
                ],
                "_lastExecutionId": "c9063a49-eae1-4efb-88d9-71a7a98b28d5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a538b05c-5510-4bcd-a0ae-67e5c3180742"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df84be52-d9ba-4784-8388-88af9b0a193b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "07d15bda-ff1c-4290-bd76-bc9672161b9a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "939"
            },
            {
              "key": "X-Request-Id",
              "value": "449f1e39-9a49-4b06-b728-98225859ff9c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              51,
              46,
              56,
              53,
              48,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              56,
              46,
              55,
              57,
              51,
              55,
              53,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              50,
              46,
              51,
              54,
              50,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 939
        },
        "id": "5928eecf-eda9-4895-9496-13db21300503",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "76da33cc-ea2a-4141-abb5-2c6e8ba0f6a0",
          "length": 57,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "44ee3f6e-0c58-4a7f-90e0-660ef14c1329"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
            }
          },
          "id": "a8561bdc-a0d7-4183-8123-08c081c0b2d6",
          "name": "48. Check Account Balance Before Zeroing",
          "request": {
            "description": {
              "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1c44cbb5-ebe4-416e-98e7-99804047b752",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n    if (responseJson.items && responseJson.items.length > 0) {\n        const balance = responseJson.items[0];\n        if (balance.available !== undefined) {\n            const balanceAmount = Math.abs(balance.available);\n            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n        } else {\n            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n            pm.environment.set(\"currentBalanceAmount\", 0);\n        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                ],
                "_lastExecutionId": "30298357-d26e-4e0b-b194-1170496239ef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "65afe0c2-5fd7-4ed0-88ce-f1d0290e5ca4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"‚öôÔ∏è Setting up Step 48: Check Account Balance Before Zeroing\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 48\");\n"
                ],
                "_lastExecutionId": "926e2eb4-c076-497b-9deb-c06f8de4f71b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c9defe6c-ccf9-47a9-afa5-56efbc46da5d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db43dfa9-0d6e-4ec0-ab19-b0c82dba04e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9893f13a-527d-4a67-a149-f046f7c077f2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "482"
            },
            {
              "key": "X-Request-Id",
              "value": "072321e5-16a9-4d7e-9b8d-2b220cd270fe"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              56,
              58,
              53,
              57,
              46,
              51,
              53,
              49,
              54,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              51,
              46,
              56,
              53,
              48,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 482
        },
        "id": "a8561bdc-a0d7-4183-8123-08c081c0b2d6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "09097285-5342-41ab-8a8b-ef6691e9d310",
          "length": 57,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fd666670-2696-4688-9a7e-307c1db544da"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
            }
          },
          "id": "202a7b61-c81a-4adc-a1d7-9cb03bbbaa76",
          "name": "49. Zero Out Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "730f4d0f-7f87-4349-9626-552b092b30d8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "85df4a70-e421-46a9-98e9-bc73fe2995a3"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6febd3da-bd0c-4eff-85f6-541438ce03a9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 49: Zero Out Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 49: Zero Out Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 49\");\n"
                ],
                "_lastExecutionId": "53a2acc7-03ec-4fa2-8e3d-3004dccd88f3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "7dd370eb-ca5c-4600-b89e-aa034fd8e787"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "418faa80-aeb9-4bcb-a88f-874e0cb020da"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b14a6af-d286-4841-996a-4cabed164997",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1145",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d8231bde-0d06-4433-a97e-33b536d24693",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2220"
            },
            {
              "key": "X-Request-Id",
              "value": "85b5fb77-2985-453e-9e50-b64f97b2820a"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              49,
              49,
              102,
              102,
              45,
              55,
              100,
              98,
              51,
              45,
              56,
              53,
              97,
              101,
              45,
              53,
              49,
              102,
              53,
              50,
              97,
              101,
              100,
              101,
              48,
              55,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              118,
              101,
              114,
              115,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              122,
              101,
              114,
              111,
              32,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              117,
              97,
              108,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              53,
              56,
              57,
              56,
              52,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              53,
              56,
              57,
              56,
              54,
              51,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              34,
              58,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              95,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              95,
              115,
              116,
              101,
              112,
              34,
              58,
              34,
              52,
              56,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              49,
              49,
              102,
              102,
              45,
              55,
              101,
              52,
              102,
              45,
              57,
              100,
              49,
              55,
              45,
              101,
              101,
              57,
              97,
              98,
              57,
              49,
              52,
              100,
              97,
              54,
              56,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              49,
              49,
              102,
              102,
              45,
              55,
              100,
              98,
              51,
              45,
              56,
              53,
              97,
              101,
              45,
              53,
              49,
              102,
              53,
              50,
              97,
              101,
              100,
              101,
              48,
              55,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              51,
              45,
              55,
              52,
              102,
              100,
              45,
              98,
              54,
              50,
              55,
              45,
              99,
              48,
              98,
              55,
              102,
              102,
              98,
              52,
              102,
              50,
              56,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              99,
              97,
              57,
              45,
              55,
              98,
              55,
              99,
              45,
              57,
              48,
              52,
              50,
              45,
              98,
              48,
              54,
              97,
              50,
              56,
              55,
              48,
              48,
              102,
              56,
              97,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              53,
              57,
              51,
              56,
              51,
              52,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              53,
              57,
              51,
              56,
              52,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              49,
              50,
              48,
              48,
              45,
              55,
              48,
              49,
              53,
              45,
              98,
              101,
              49,
              97,
              45,
              101,
              101,
              48,
              52,
              50,
              55,
              52,
              49,
              55,
              50,
              51,
              57,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              53,
              45,
              49,
              49,
              102,
              102,
              45,
              55,
              100,
              98,
              51,
              45,
              56,
              53,
              97,
              101,
              45,
              53,
              49,
              102,
              53,
              50,
              97,
              101,
              100,
              101,
              48,
              55,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              99,
              51,
              45,
              55,
              56,
              49,
              53,
              45,
              98,
              97,
              51,
              101,
              45,
              54,
              50,
              48,
              102,
              50,
              101,
              101,
              102,
              98,
              54,
              48,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              101,
              100,
              55,
              45,
              55,
              97,
              53,
              99,
              45,
              97,
              55,
              102,
              48,
              45,
              52,
              50,
              97,
              52,
              56,
              56,
              99,
              50,
              53,
              101,
              54,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              56,
              50,
              54,
              45,
              55,
              54,
              49,
              55,
              45,
              56,
              48,
              57,
              52,
              45,
              48,
              57,
              50,
              99,
              48,
              99,
              52,
              51,
              52,
              101,
              54,
              98,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              97,
              56,
              99,
              52,
              45,
              102,
              97,
              54,
              102,
              45,
              55,
              54,
              57,
              49,
              45,
              57,
              99,
              102,
              50,
              45,
              51,
              99,
              100,
              102,
              56,
              97,
              51,
              55,
              101,
              52,
              97,
              54,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              54,
              48,
              48,
              54,
              49,
              51,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              49,
              52,
              84,
              49,
              51,
              58,
              50,
              57,
              58,
              48,
              52,
              46,
              50,
              53,
              54,
              48,
              48,
              54,
              50,
              50,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              98,
              105,
              116,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 17,
          "responseSize": 2220
        },
        "id": "202a7b61-c81a-4adc-a1d7-9cb03bbbaa76",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "38427cba-ba1e-4bc6-ad1e-998e880aa4eb",
          "length": 57,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "64a0adec-3f5a-4f4c-b3be-1866c1b320cf"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "2a20dba9-3812-4fb1-ab18-b22ae7c64b0d",
          "name": "50. Delete Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92279126-7aa9-438b-b32a-479336ade098",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "e0bf550e-849a-4382-a6e2-a0b03f3b29f9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "925528c8-52d4-49cb-a42f-32f58c06d33d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 50: Delete Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 50: Delete Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 50\");\n"
                ],
                "_lastExecutionId": "a198b0f3-8e8b-4001-b011-5ffad9927b56"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "balances",
              "0198a8c4-fed7-7a5c-a7f0-42a488c25e6e"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "61df825d-bc90-435b-8ced-3616cfcbc516"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9cbb7383-119c-404f-8406-7742c9efda52",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "1a223f18-6822-4bcc-8504-079337d5634d",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "760833a2-4b2c-489e-b06e-726ca94a66d3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "2a20dba9-3812-4fb1-ab18-b22ae7c64b0d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "94b72188-fe1a-4dd1-b60c-e8c6cadf0886",
          "length": 57,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8c27c358-3504-4d6b-85da-33660a8ec33c"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "0b5ebf71-9a97-43e2-bf52-3756e8dc6631",
          "name": "51. Delete Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "082ea7bb-cd5b-4d8e-b813-76910f160117",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "d80d9e3b-9d72-46f5-886e-b5f8a18e5b6b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bf52f709-afc8-4a9d-b538-7dcfb94a1d6c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 51: Delete Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 51: Delete Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 51\");\n"
                ],
                "_lastExecutionId": "d79d4f7b-bd3b-47b8-bd00-6c0a785c64a9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "segments",
              "0198a8c5-0315-7f12-a6ca-b106c659cb70"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "43d364ca-0e55-42f9-ab7b-c76bbc59d035"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75ad8e9d-8396-4380-a976-8fbd44c6d620",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "37efd5e4-cbd2-442a-912f-68751b886495",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "194facf8-f118-4212-8485-a8b76e627c08"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 0
        },
        "id": "0b5ebf71-9a97-43e2-bf52-3756e8dc6631",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7ae5438e-0555-4f1f-b66e-114f2a151c77",
          "length": 57,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0c145ca3-6182-4221-bd5a-d9cdb6d68bb3"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "278598e3-e3b2-44c0-aac9-ee79eabdf565",
          "name": "52. Delete Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53a8da32-249f-457d-be6f-c58a543a3e85",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "ecc26707-ad35-49ff-9c82-a24bd882d89b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "35399ee9-3cff-4d3a-bca1-40c1a4711b33",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 52: Delete Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 52: Delete Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 52\");\n"
                ],
                "_lastExecutionId": "7652fc53-c4bd-4ad0-857d-0eb39a6b6823"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "portfolios",
              "0198a8c5-00f5-727e-a6b8-db9e4926cdf0"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "fa3b80b9-57d8-49d0-acc7-14329a8e1c0b"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c615815c-dc01-4c15-95ec-d45827abd981",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "ff5b4225-19ed-4354-ada3-49faa1b038d3",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:03 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "46f95e34-6c13-4244-bac0-a3f3d59f18f6"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 0
        },
        "id": "278598e3-e3b2-44c0-aac9-ee79eabdf565",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4be0b441-23cd-4009-b62f-c57647073b5a",
          "length": 57,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a06d0ab6-599f-4f2e-ab25-8a8c36edcb07"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "be78551f-f091-4c50-91e6-f6a9d5021a07",
          "name": "53. Delete Account",
          "request": {
            "description": {
              "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0599cbc0-5935-4d39-a6de-d5b0a1730c5c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "1a766c01-8417-4528-a207-26add70a6eaa"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "22e01819-04fd-4c5d-893c-6ec6ba6ec075",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 53: Delete Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 53: Delete Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 53\");\n"
                ],
                "_lastExecutionId": "31f09421-9511-4474-b015-0e6bdbfe80e1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "accounts",
              "0198a8c4-fec3-7815-ba3e-620f2eefb606"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "73765e21-f9d0-47b0-85e5-4126609303bf"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "423b919b-c05e-49dd-b85b-b91550d9921e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "08a2ef49-7c61-4505-94c2-e64aceeab481",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "2398ae85-b59f-41f5-a701-33aafcc1d1e6"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 0
        },
        "id": "be78551f-f091-4c50-91e6-f6a9d5021a07",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "16a53071-4e29-4942-9c53-2696c5d998bf",
          "length": 57,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c51154d1-606c-4ee3-a824-232bc6398424"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "6d919ff9-839a-44bd-999b-bf05bcc7c0f3",
          "name": "54. Delete Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa993c0d-b860-48f1-be28-158d5a7dc346",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "0aa8ed84-2da7-4d77-bd6b-c0626f02abd4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "36a2ff43-a351-41c7-bdb5-a1ae9ed27c4e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 54: Delete Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 54: Delete Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 54\");\n"
                ],
                "_lastExecutionId": "e9edb8ea-642a-4b6c-b9cf-6811e6997eaa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6",
              "assets",
              "0198a8c4-fc98-77de-bcad-d9afb129724b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a609a862-0783-4717-9ea8-31e09e9f3eb6"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c4a5ba4-e0f2-4b88-a85a-346d034fd40f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "1f51ca44-e8cf-4c9c-a0d0-dd7b7cee9feb",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "8d3b79e9-f817-4a23-aeff-0f55f39cebc2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 0
        },
        "id": "6d919ff9-839a-44bd-999b-bf05bcc7c0f3",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6500aa51-ca68-4396-af5f-65a115c1ce27",
          "length": 57,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "302cf076-6fd5-401f-989a-8fb281505c83"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "14160194-c0bd-4fbe-9c95-dcf3849d49eb",
          "name": "55. Delete Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2fa9da2-8aad-4471-84a9-cb147c6f78ce",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "489699db-c4bd-4013-af75-ed4a95095d03"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cab7d2a0-106d-4067-b483-f32361f9b6e2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 55: Delete Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 55: Delete Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 55\");\n"
                ],
                "_lastExecutionId": "9b930cf9-7b2a-44a6-a4d3-601ddb8d21c6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b",
              "ledgers",
              "0198a8c4-fa6f-7691-9cf2-3cdf8a37e4a6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "059c9dc8-9963-4219-9c72-5e00d2b85df9"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa93d694-4fe1-4e23-9291-7a201efaa08f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "2f4a65b2-d2b0-4b71-984b-1e66a4eeaa1e",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "7cd3e4f8-ea96-44c5-a3f0-09f68e15b172"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 0
        },
        "id": "14160194-c0bd-4fbe-9c95-dcf3849d49eb",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "618bf560-6dbe-45bb-955c-112c983492fb",
          "length": 57,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "415cc357-e1bb-4dab-842a-3e1615cdcaf7"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "889eb287-28b4-44a2-b93e-eb6f9d3e1e86",
          "name": "56. Delete Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38eb42e8-7b3c-4515-b1ae-0c02dcccc5d1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "aeda8bc3-494f-45ea-8609-4ee2ea8f303a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fee647f0-3ef6-4805-966d-7bd05c9f42df",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 56: Delete Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 56: Delete Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 56\");\n"
                ],
                "_lastExecutionId": "a24902ab-5630-4aed-a64a-7c43792dc279"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "0198a8c4-f826-7617-8094-092c0c434e6b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b2f2e155-56d0-4344-b04b-1e4bf115cb2c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "343cf06c-42a1-4e25-ac3e-84cc43a7abca",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "20031034-515d-4c58-824d-c9b5e683b1d4",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "a3b8619f-eee6-4018-8046-22c4c8dfebef"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "889eb287-28b4-44a2-b93e-eb6f9d3e1e86",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ede78e0-6961-48ea-b178-c097152a7a3e",
          "length": 57,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5ac98037-414e-4441-81e7-0df2da990318"
        },
        "item": {
          "id": "a3b40381-844c-4935-b5f4-72a017952a79",
          "name": "Workflow Summary & Report",
          "request": {
            "description": {
              "content": "Final step that generates comprehensive test summary for CI reporting",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91d30070-8ac7-4c00-8b27-e60c07b2f9fc",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: 56\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= 56; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                ],
                "_lastExecutionId": "c1b4da93-39da-4035-b80c-4e6f18a8c6b9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Final step that generates comprehensive test summary for CI reporting",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "457ae402-25ac-4a27-8d5f-5e844d39f0e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0e03e4b1-67a7-4dff-b247-aec37afb3984",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 14 Aug 2025 13:29:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "X-Request-Id",
              "value": "42727126-37fe-47a3-a178-03d94e3ab3f0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              104,
              101,
              97,
              108,
              116,
              104,
              121
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 7
        },
        "id": "a3b40381-844c-4935-b5f4-72a017952a79"
      }
    ],
    "transfers": {
      "responseTotal": 36013
    },
    "failures": [],
    "error": null
  }
}