{
  "collection": {
    "_": {
      "postman_id": "00b3869d-895d-49b2-a6b5-68b193471560"
    },
    "item": [
      {
        "_": {
          "postman_id": "27eed443-500c-4ab8-8bc4-13b7f060cfaf"
        },
        "id": "27eed443-500c-4ab8-8bc4-13b7f060cfaf",
        "name": "Complete API Workflow",
        "description": {
          "content": "A sequence of API calls representing a typical workflow, generated from WORKFLOW.md.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "31459a5c-fd9d-4bd7-ad7c-34b7977dd925",
            "name": "1. Create Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94e78e0f-2057-4c8c-a74a-75260a6d1b67",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Organization: /v1/organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Organization: /v1/organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Organization\");\n"
                  ],
                  "_lastExecutionId": "4b2d5aee-5042-4aff-8851-a7c2d4b16c83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7a7c893-915e-40a8-8b99-9d28f8d98d57",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "73f966fc-0f94-4dcf-af21-ae23ad6d429c"
                }
              }
            ]
          },
          {
            "id": "aa2d5ccf-0250-406c-9561-f7503cd31c8d",
            "name": "2. Get Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09f2e953-47c2-4d7b-821e-003e32870179",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Organization\");\n"
                  ],
                  "_lastExecutionId": "55fbab10-e754-45ba-a59b-56a7b0aa7310"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "28875edd-d3f6-4d3e-aae3-d61bcb8b4207",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "db556776-3300-49d6-b6e0-93ad70608d00"
                }
              }
            ]
          },
          {
            "id": "3e13bc51-5198-406f-a0a4-f555fc8bc89b",
            "name": "3. Update Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4dcf4bb-8180-4fd3-a0ed-479f18fea3ad",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Organization\");\n"
                  ],
                  "_lastExecutionId": "9e67b8b6-a286-4909-bb9a-ca3ca942b656"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0cd10941-e399-4705-99b4-7fd36ca710e0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0a2a3665-67b8-44b2-b336-f9226a51976f"
                }
              }
            ]
          },
          {
            "id": "b6a4b643-dbcd-4273-8b57-d9f73960f8e4",
            "name": "4. List Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6310ee1c-c764-4649-aa47-b7a9f85abfa6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Organizations: /v1/organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Organizations: /v1/organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Organizations_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Organizations\");\n"
                  ],
                  "_lastExecutionId": "5dfdc490-cb17-4b9b-8e8d-84078ce632e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1ebb237-a23b-4dd8-bb84-b28e5e334eac",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0f79e9c4-2d1f-43dc-924c-2764d0da4e25"
                }
              }
            ]
          },
          {
            "id": "cf68535e-b044-4dd2-ba5e-78e7e1f7eedb",
            "name": "5. Create Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96576ad6-c597-42d7-bc9f-ac1f7c2a2bb2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Ledger: /v1/organizations/{organizationId}/ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Ledger: /v1/organizations/{organizationId}/ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Ledger\");\n"
                  ],
                  "_lastExecutionId": "087e4666-4a3a-48d3-840f-bfaa9b7168da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5cea900-f562-409c-8960-52a2f5b413c4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "5c05135c-1560-4ab9-86df-8819d1dbaedb"
                }
              }
            ]
          },
          {
            "id": "11c2b1d2-5f42-4091-9854-8d96d466fb8f",
            "name": "6. Get Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f13edf87-fe6b-40b4-9f66-70e485da779f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Ledger\");\n"
                  ],
                  "_lastExecutionId": "36131594-ec60-4323-8a10-722d84b2fed4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3b5a79c4-f235-4a2f-9e34-b252b4925d0a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "cc00e104-5edf-48c5-aeb3-1e39d421e92d"
                }
              }
            ]
          },
          {
            "id": "93609b3d-a8af-409a-b658-fd6cc57f3229",
            "name": "7. Update Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dccb6946-ee03-4298-85e9-36b4a5f51673",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Ledger\");\n"
                  ],
                  "_lastExecutionId": "788c3c6a-4fab-4985-90fc-6611ef48f0d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be314d9d-f1d1-4b5f-8f9e-a01e9f9363ab",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "5f89d058-24b9-472c-9316-f415fcbc5c36"
                }
              }
            ]
          },
          {
            "id": "6efe6954-6ca7-4fe1-8fcb-88cb6ff4d259",
            "name": "8. List Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1245507d-243c-456a-ae1f-2d37cf93cb8c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Ledgers: /v1/organizations/{organizationId}/ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Ledgers: /v1/organizations/{organizationId}/ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Ledgers_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Ledgers\");\n"
                  ],
                  "_lastExecutionId": "6ff8932c-e165-4af4-8b7a-81d6f1b9ad1f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d523528b-e864-48a5-bb30-7eb1e921a47a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ff093b7d-a288-4e59-ab9b-c6ebb7697467"
                }
              }
            ]
          },
          {
            "id": "30f09628-38df-4297-ad8c-4dbf9c2d8d70",
            "name": "9. Create Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66c275a2-d725-4ec4-920a-1edaa4af2d7c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Asset\");\n"
                  ],
                  "_lastExecutionId": "7e2a3716-8678-4377-adc8-a936c373a743"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ab5a7f8-86df-415a-8517-b36be74669b6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "75091af5-b257-45e7-af19-403cdacb0a4a"
                }
              }
            ]
          },
          {
            "id": "451c202d-1862-49bf-89fc-76c6b3174164",
            "name": "10. Get Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b8469b9-82a2-4105-8db1-d1d6fba9dcca",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Asset\");\n"
                  ],
                  "_lastExecutionId": "a7742fec-8d20-44a0-a477-db58589b2a19"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a58815a0-64ae-4ab2-b88d-740a9ccb3c27",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ee17aa25-382b-40bb-994b-5fc3b0adc493"
                }
              }
            ]
          },
          {
            "id": "3a7b2e32-3718-43c3-9525-e0e5d927936b",
            "name": "11. Update Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e0342398-9d29-4f06-8c47-7ea29ab5b478",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Asset\");\n"
                  ],
                  "_lastExecutionId": "e80af126-3fad-466a-86fe-dcf3be7562a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e528653-ba4e-4ec3-b13d-8663c0ea03eb",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "deefb43a-755f-46e4-a2ac-8336150aea0c"
                }
              }
            ]
          },
          {
            "id": "aa92eafa-436c-4589-8e14-44b253949b2b",
            "name": "12. List Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a5b90e08-33f2-4667-80e7-990a885bfa4b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Assets_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Assets\");\n"
                  ],
                  "_lastExecutionId": "a9771bf6-8116-43af-850c-d47f96a2e02c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7ecf2dcb-8cce-4608-bc2b-229cb86eca5e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "7416da51-e86b-46cf-8617-e9c2cf70fd1b"
                }
              }
            ]
          },
          {
            "id": "7846130f-1283-4dbc-9faf-ad629578fc88",
            "name": "13. Create Account",
            "request": {
              "description": {
                "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ab979b2-6db5-4b5a-a587-d36c563c2aae",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Account\");\n"
                  ],
                  "_lastExecutionId": "1ffce2a8-de5b-4c9c-ad5d-35fdac042abc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "342d96c3-98dc-40af-9a94-d49424049151",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "41410340-3b7f-4cac-a6b5-ca6508981c92"
                }
              }
            ]
          },
          {
            "id": "f737aa3a-d4bc-4060-a2bf-062ed86403f9",
            "name": "14. Get Account",
            "request": {
              "description": {
                "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f70ae749-b9c9-47c8-8631-3d11b6c2b290",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account\");\n"
                  ],
                  "_lastExecutionId": "bd17a927-ab4b-4cda-bf35-6a1baee3847c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9a471cea-d033-47d6-8baa-afa432375e06",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "e933042f-856c-4753-99f8-c8d11f86237e"
                }
              }
            ]
          },
          {
            "id": "3a9b9022-d067-44cc-a42d-996d0d17e1f7",
            "name": "15. Update Account",
            "request": {
              "description": {
                "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8bffd35-639f-4a78-ab91-5f1a91424211",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Account\");\n"
                  ],
                  "_lastExecutionId": "512d1821-095c-4b15-86eb-59dd2cfdaf74"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0f755d2-f3f4-43cf-9573-89939185923c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "b3d9997b-7b46-4ebb-b292-58d8acc53512"
                }
              }
            ]
          },
          {
            "id": "e6170a33-50a5-4b54-aec9-33eaa3c9ec5a",
            "name": "16. List Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8bebafe-523e-43db-b825-f2b94c6de149",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Accounts_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Accounts\");\n"
                  ],
                  "_lastExecutionId": "5caaa87c-25b3-4a8a-87f0-a544d818390c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a463a3ac-59dd-400d-9c8f-70ecc707b7c5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "10b224f4-d6fd-4f12-865c-991065667f93"
                }
              }
            ]
          },
          {
            "id": "7e5077ae-a950-4738-ad14-076a39c6f7c4",
            "name": "17. Create Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b2aa8d6-c012-430c-9759-10475f3735a4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Portfolio\");\n"
                  ],
                  "_lastExecutionId": "21635932-72c7-4cf6-b825-ef20243397f5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21b926a7-1987-45a6-9abc-1a283ef29725",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "4d561c9c-13fb-4a28-9c76-d794cfb38a0d"
                }
              }
            ]
          },
          {
            "id": "38fe2fa2-4bab-4474-9dbe-65905850fb86",
            "name": "18. Get Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94d3315d-931a-4fea-bac1-b789bffca7d0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Portfolio\");\n"
                  ],
                  "_lastExecutionId": "9c1e934f-6261-40a8-8f5a-6efb5d8095d1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23a5202c-6d42-4885-9b0a-f84fb6b03459",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "509ec7fa-5643-42ed-9b93-869421ee0eb7"
                }
              }
            ]
          },
          {
            "id": "4f30de4b-99c3-4d1e-8ca7-89449513e5b0",
            "name": "19. Update Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2e4f52d-1ab3-4806-9559-db6f1705bea5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Portfolio\");\n"
                  ],
                  "_lastExecutionId": "0a838d4f-8b0c-47e7-a4b8-a9d8c037abab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "900fe27f-2c09-455f-aadb-0bde8de6d6a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "a20eb758-1e87-4407-9316-9343e4dceec4"
                }
              }
            ]
          },
          {
            "id": "bbb48f65-bfdc-4728-b294-4f22ef4a43f6",
            "name": "20. List Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fc4b115-069c-4374-b8c6-3c096d7a39cd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Portfolios_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Portfolios\");\n"
                  ],
                  "_lastExecutionId": "c026b10b-e0b9-451a-af03-821e1d897c8a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "55bfc44e-3c6a-4ef0-8838-1dc385dbfe7f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "85697163-00e3-4df5-89dc-a89bbae3e39a"
                }
              }
            ]
          },
          {
            "id": "78ff8d69-d28c-484d-b97e-eeaf52e39893",
            "name": "21. Create Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d4457cd-c9e5-4fff-9cfa-86c5f583a4b3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Segment\");\n"
                  ],
                  "_lastExecutionId": "7d68870f-8ce4-4e00-89c8-25850815eeec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc52f2b2-417f-4cd3-88ec-adea8ac50886",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "371389a6-842a-4d9d-98b4-a16fbadb468e"
                }
              }
            ]
          },
          {
            "id": "492787a3-1d7f-4026-8c32-8808c5e67c98",
            "name": "22. Get Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6cf30426-cd41-4b40-a6bb-5ec1ad6ca5a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Segment\");\n"
                  ],
                  "_lastExecutionId": "6fbb52e3-4877-4f3a-8e4d-792267e03a0d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f255e9b1-feb4-4bac-bec2-f676a737c731",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "c73ee65a-0e90-42c5-acd3-a76bc1ba09d5"
                }
              }
            ]
          },
          {
            "id": "3e80f096-f051-4721-82d4-7c56610ae172",
            "name": "23. Update Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13e16beb-cd8b-4628-8c3e-710d0e1b2941",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Segment\");\n"
                  ],
                  "_lastExecutionId": "eb08225e-2b34-47f5-b61e-e468e9662c6c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2a6a24f-c4b5-4f4e-81ad-ddfe6ad03121",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "63642832-5b0c-49af-87ff-b155fef92f05"
                }
              }
            ]
          },
          {
            "id": "67ec4afd-7e14-4c77-91f2-898fcb936703",
            "name": "24. List Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fd38821-63b2-48bd-b1b9-bbef12eec5c1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Segments_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Segments\");\n"
                  ],
                  "_lastExecutionId": "049d3ace-4569-4c14-b590-a68a42cd365e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4304bf1-95ba-47fe-9cf0-696a850ad326",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "253cf0d4-af7f-4628-b95c-e393bd7af296"
                }
              }
            ]
          },
          {
            "id": "e5d4e928-df3c-4eac-ba81-d19f8b2b8024",
            "name": "25. Count Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2713c79a-4f78-46bc-a8d8-04e10364c0a7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Organizations: /v1/organizations/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Organizations: /v1/organizations/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Organizations_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Organizations\");\n"
                  ],
                  "_lastExecutionId": "e0dee76d-44f7-46a8-adf1-1ed5398e8052"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cdc3b84c-c602-47c0-a60b-02cd1a130768",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "0ce22744-eb98-40f0-a024-90b6d06262a6"
                }
              }
            ]
          },
          {
            "id": "36fca075-76f3-4ff0-b600-5bce79cc68b5",
            "name": "26. Count Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fa852c4-dcc6-4c8c-8d62-828c3f3067ef",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Ledgers: /v1/organizations/{organizationId}/ledgers/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Ledgers: /v1/organizations/{organizationId}/ledgers/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Ledgers_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Ledgers\");\n"
                  ],
                  "_lastExecutionId": "7c6a5392-379f-44b4-ac13-6cf00c7bed05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f58989df-71ed-40de-95af-def041ad21f6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "7450d999-5adc-4910-9049-f2511ee835b5"
                }
              }
            ]
          },
          {
            "id": "161c796b-02ff-4c32-9741-b00f7a55f526",
            "name": "27. Count Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cffa9937-b9e8-4386-a93c-e6907a43f906",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Accounts_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Accounts\");\n"
                  ],
                  "_lastExecutionId": "0f69a4d9-7944-4b46-adf9-7c7cdfefa7cd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c105bf4-2598-4f83-b493-1ed7a5e07ef0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "407dedaa-0b80-4949-8ff3-b8bd9224443d"
                }
              }
            ]
          },
          {
            "id": "6aee505a-825b-4662-9707-fe6d26b1966a",
            "name": "28. Count Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "79c63f57-97b3-4f1c-9a78-866c83e8b48c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Assets_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Assets\");\n"
                  ],
                  "_lastExecutionId": "10d4e0a2-14c3-48b1-a5a4-e7ba80afa94c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ff12bef5-06d0-42e2-a8fe-c4bd8551dfc9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "569db178-a4fa-4452-9444-718c9c816ce4"
                }
              }
            ]
          },
          {
            "id": "ecc18558-a32e-46a4-b46a-c4ee6791580c",
            "name": "29. Count Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e4c2af9-4129-40ff-910f-8c5aa1008089",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Portfolios_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Portfolios\");\n"
                  ],
                  "_lastExecutionId": "9cb06845-2e9f-4a7d-9f2c-76823ee3c7c5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4f20bd7-891f-45ab-a732-fd423beb7302",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "7e93d6f1-5fd3-4f54-821b-9342c34e9c1c"
                }
              }
            ]
          },
          {
            "id": "e91b59c8-acf8-453a-a918-9bcf8d1e8e30",
            "name": "30. Count Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6b8c6027-474b-4d27-853c-7d49f688d07f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Count Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Segments_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Segments\");\n"
                  ],
                  "_lastExecutionId": "a6e2a0a8-55bd-4921-b51d-8743d77eaf97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5a97d11-a29c-46d9-a41d-32902573f14a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "ce76bc8b-1d1b-4c3e-b235-74994452cd7d"
                }
              }
            ]
          },
          {
            "id": "c76dbce2-e8d0-4a0d-b452-1753fce5dffe",
            "name": "31. Get Account by Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a777d895-22d7-4434-949f-c08f84ef007c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Account by Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account by Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account by Alias_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account by Alias\");\n"
                  ],
                  "_lastExecutionId": "abc4a34a-2bab-4fef-844b-10713b81d1aa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3da96c7c-2001-49b3-b515-f27755fc27b7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "6149ed9a-7fc8-48af-9137-8d8e4086c87b"
                }
              }
            ]
          },
          {
            "id": "4757c4b4-54c9-4ed3-9718-0683855e4adc",
            "name": "32. Get Account by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "baf8e25d-e357-4482-9582-519520375980",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Account by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account by External Code_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account by External Code\");\n"
                  ],
                  "_lastExecutionId": "07086082-1c28-4c6c-8bbc-2ab5613baccf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b40164ae-c623-4306-bea7-a3072697f938",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "63f93245-568a-47f4-a9cd-23c1d10c540d"
                }
              }
            ]
          },
          {
            "id": "c4d45bf2-f3e2-4838-ba03-652e2da2ef80",
            "name": "33. Create Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "619c4b1f-22c3-4b18-a956-d38a6afd4d7d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction\");\n"
                  ],
                  "_lastExecutionId": "602d7fc8-f65b-48b4-b4d5-3849a1bd0698"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d3637705-7146-46a8-b9f7-488a95630b59",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "529ea9c6-04ee-4af1-a8e6-eb672f7abf66"
                }
              }
            ]
          },
          {
            "id": "eb1639d5-8de3-4868-acba-be32587479e8",
            "name": "34. Create Transaction (Inflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb4b8be3-4d67-440b-90b3-5dab7b9b50b4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Transaction (Inflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/inflow =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction (Inflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/inflow\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction (Inflow)_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction (Inflow)\");\n"
                  ],
                  "_lastExecutionId": "332d8fc5-4aea-4e96-991a-5a1bcc195186"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2101bfa2-cedb-495a-87e7-ef7aa7eef3e0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "d0a35b96-0c46-41a9-80c0-4a798eeff6da"
                }
              }
            ]
          },
          {
            "id": "c8e75ed4-3af2-4e79-8f47-c6a1fa9c44cb",
            "name": "35. Create Transaction (Outflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4917af3-857e-462e-b1b7-fbbf6439ef7c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Create Transaction (Outflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/outflow =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction (Outflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/outflow\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction (Outflow)_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction (Outflow)\");\n"
                  ],
                  "_lastExecutionId": "eaaa1102-d7ec-4025-87ed-5be42a369773"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "924a17fa-c0fd-46e8-9195-3bb84a0fe879",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "f19a42c1-2dcf-4f61-922e-249b5c9ed8ba"
                }
              }
            ]
          },
          {
            "id": "bd1a2d06-c675-4487-8b06-d7fc82308c4e",
            "name": "36. Get Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16821333-d8e9-4969-b8d1-ee8ee0053d29",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Transaction\");\n"
                  ],
                  "_lastExecutionId": "9475496c-b127-43de-be70-fa415d610315"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e73cd241-f54e-45b3-bf65-9097d53f4f75",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "fc753455-5ad1-443f-a817-af6439ea11fa"
                }
              }
            ]
          },
          {
            "id": "8df706fe-3e85-494a-a0b0-15e33729299d",
            "name": "37. Update Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15e2328d-dc7a-4ede-b041-bc37965e8b8f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Transaction\");\n"
                  ],
                  "_lastExecutionId": "88778d74-5655-4666-acda-c090ebd9a2fa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f922e23c-5e0b-4d99-b4d0-2098d2263ffa",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "33c42fc5-ae20-4a45-91b6-c36c36e202ca"
                }
              }
            ]
          },
          {
            "id": "02f24a87-2fde-4090-ac6d-07014de40cd0",
            "name": "38. List Transactions",
            "request": {
              "description": {
                "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbb4a84f-8b91-48b5-9772-c2c1d4ad39e4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Transactions: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Transactions: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Transactions_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Transactions\");\n"
                  ],
                  "_lastExecutionId": "2648f124-f9e8-478e-963b-58c5b351bf56"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e04b9c75-3ec1-48e3-92d9-9054748043c9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "3aa1f3c5-2c51-4ec5-afa2-4c43ad7241b8"
                }
              }
            ]
          },
          {
            "id": "20ff6e4d-4bc5-42a7-ae21-c04ae76d7489",
            "name": "39. Get Operation",
            "request": {
              "description": {
                "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3993622e-9fd0-41a7-b205-eabcb16d58a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Operation: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations/{operationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Operation: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations/{operationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Operation_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Operation\");\n"
                  ],
                  "_lastExecutionId": "f9996c54-3d2c-4501-9921-40e2c8dd1ab6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "807c4e92-5064-49c4-93b2-4ca6e4c1500c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "bfaa2704-9e94-4ff8-97b9-953805448bb2"
                }
              }
            ]
          },
          {
            "id": "2edac4f2-6d84-4ae9-b313-cdd28e3366ee",
            "name": "40. List Operations by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a3d360b-9c68-43d3-91c6-8ae02e0bb6f3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Operations by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Operations by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Operations by Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Operations by Account\");\n"
                  ],
                  "_lastExecutionId": "238553c5-414a-457b-8fcd-530ba5850bbd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "215709a6-8076-41fa-a5b4-fbd6c1ba81fc",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "2c5f7ceb-5cda-4dc1-8ea3-2c05d7fafb8c"
                }
              }
            ]
          },
          {
            "id": "7af47b6d-7bb6-4054-afdc-75f0cc25a9ef",
            "name": "41. Update Operation Metadata",
            "request": {
              "description": {
                "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2ca6546c-de4a-4931-b2ab-de01e5c5bcde",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Operation Metadata: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}/operations/{operationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Operation Metadata: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}/operations/{operationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Operation Metadata_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Operation Metadata\");\n"
                  ],
                  "_lastExecutionId": "be581dfe-b75e-4a14-b9dd-3705cedfafbd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0ceb6d0-0bbd-4bb8-978a-ac71ddd28eb6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "32a6099c-f3a9-4393-b210-18263095631e"
                }
              }
            ]
          },
          {
            "id": "2951554b-c795-4de5-8561-4daf245fdf2b",
            "name": "42. Get Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97b30751-58d9-400a-8609-27492abccffd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Get Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Balance\");\n"
                  ],
                  "_lastExecutionId": "c4169de8-2544-4e80-8de7-933dce270541"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bafe89d4-5965-4d12-9cf7-338c5211d6db",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "5cfe6792-a720-4a36-a210-d8808f308f32"
                }
              }
            ]
          },
          {
            "id": "f84ac438-6fea-44d1-82a5-28d06013d0d5",
            "name": "43. List Balances by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05d59f4f-dc1b-4b12-844e-7545059ea1e8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Balances by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by Account\");\n"
                  ],
                  "_lastExecutionId": "bea37be4-8514-4e71-acb6-31ea76219a1b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0f113eba-14eb-4d2c-b357-874ef80704a3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "fa4771ee-a056-4835-b821-2e53678403f2"
                }
              }
            ]
          },
          {
            "id": "54464db6-47bc-4741-bb44-356f059d6634",
            "name": "44. List Balances by Account Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e5be257-186c-468c-bae6-7dd138be13dd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Balances by Account Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by Account Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by Account Alias_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by Account Alias\");\n"
                  ],
                  "_lastExecutionId": "1f863374-5ec9-450d-8517-a11d125badd9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "675433e8-817a-498d-8fb0-49024922f9de",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "a53c7ce1-68e0-4ad2-8aa2-a41f07ab328d"
                }
              }
            ]
          },
          {
            "id": "159f9661-11ff-40fb-9a4b-8f6459af95a0",
            "name": "45. List Balances by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f023a7de-89e4-4668-8da4-77b1ebd3a081",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List Balances by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by External Code_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by External Code\");\n"
                  ],
                  "_lastExecutionId": "37af67b9-de1e-41fe-967a-7caeb5ee3718"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3983a7d1-d854-443a-8616-bb789bd2509e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "dd48a6a5-6f96-4c27-a916-5de48704a833"
                }
              }
            ]
          },
          {
            "id": "0dc00a70-b95b-4baf-925b-c66d333f3f03",
            "name": "46. Update Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbfe4ea6-c571-4505-b104-eaf6621fa427",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Update Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Balance\");\n"
                  ],
                  "_lastExecutionId": "ae80e37d-f721-4e2c-a4fb-016f52b239e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "65d20787-902f-4151-9ccc-92934343c452",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "df51fdb5-05c3-4fe1-89e3-ee3d445efc25"
                }
              }
            ]
          },
          {
            "id": "dc6451d9-1881-4bea-83a4-21bbc35f39f5",
            "name": "47. List All Balances",
            "request": {
              "description": {
                "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b33588a1-ff97-4a61-8762-621faf6584c7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP List All Balances: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List All Balances: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List All Balances_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List All Balances\");\n"
                  ],
                  "_lastExecutionId": "2409c74c-c2b9-43f7-9ed8-8641937674e4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "df9111d3-bba5-40a0-8403-5e9dd1bf81e4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "7dc34722-4b4a-4ec1-8dc4-0058b5026db7"
                }
              }
            ]
          },
          {
            "id": "db488377-ecce-43b4-ba9c-7cbb0bd92b65",
            "name": "48. Check Account Balance Before Zeroing",
            "request": {
              "description": {
                "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a962cc3-6446-448f-8b54-ef127c70cc45",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Check Account Balance Before Zeroing: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step Check Account Balance Before Zeroing: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Check Account Balance Before Zeroing_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Check Account Balance Before Zeroing\");\n"
                  ],
                  "_lastExecutionId": "41c19e9a-9772-4d2e-b357-4548a844fef7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab50ca75-ea22-4afc-8ce4-a84f5ba43f38",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n                        if (responseJson.items && responseJson.items.length > 0) {\n                        // Get the first balance (USD balance for the account)\n                        const balance = responseJson.items[0];\n                        if (balance.available !== undefined) {\n                            const balanceAmount = Math.abs(balance.available); // Use absolute value of available balance\n                            \n                            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n                            \n                            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n                            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n                            console.log(\"üìã Balance object:\", JSON.stringify(balance, null, 2));\n                        } else {\n                            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n                            console.warn(\"‚ö†Ô∏è Balance object structure:\", JSON.stringify(balance, null, 2));\n                            // Set default values to prevent failures\n                            pm.environment.set(\"currentBalanceAmount\", 0);\n                        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        // Set default values to prevent failures\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                  ],
                  "_lastExecutionId": "6e9962df-57d2-4609-abf1-4f260122d80f"
                }
              }
            ]
          },
          {
            "id": "b7b2518a-3d1a-45c3-863b-774fc18b496a",
            "name": "49. Zero Out Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad2874ad-a614-4f3a-a520-50163ff5d8c5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Zero Out Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json =====\nconsole.log(\"‚öôÔ∏è Setting up Step Zero Out Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Zero Out Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Zero Out Balance\");\n"
                  ],
                  "_lastExecutionId": "cfbe92e9-073f-4a13-9a03-c9a219ebe26c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6197838e-4df2-4063-b9c4-792f9fa1dd16",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "245d1e5b-122d-426e-acc6-b0abecd1c545"
                }
              }
            ]
          },
          {
            "id": "b3b88d23-4ed9-4d4b-be21-52ad3a43a9ad",
            "name": "50. Delete Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddaf536e-2f64-4e2c-a2a7-6e49031a7ccb",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Balance\");\n"
                  ],
                  "_lastExecutionId": "e2275d70-1c0c-4b99-b589-bf36ee8bc86c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64c49925-d808-47ad-b366-d34c68a75a61",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "52661fa0-45ab-4e18-a1d1-9e6365757c07"
                }
              }
            ]
          },
          {
            "id": "61f32aed-a28d-4c81-ab62-a7ab9b31a170",
            "name": "51. Delete Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd8798de-d2e2-445e-8221-c8122a6213a0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Segment\");\n"
                  ],
                  "_lastExecutionId": "57489cd0-f9fe-473d-b2e0-9ff0a12ab0e1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46dcc274-3a79-44da-8b85-73275a3187dd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "c6c7aa40-80b8-411f-97eb-4e6b451f726f"
                }
              }
            ]
          },
          {
            "id": "88d954d1-b16f-48ed-b350-2d398dd05c3a",
            "name": "52. Delete Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca44ca02-7023-46fa-8968-b18f14100c5a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Portfolio\");\n"
                  ],
                  "_lastExecutionId": "324a6113-c38d-4ded-99d6-c437a29d4d80"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c8f4d8e4-01b2-4bbf-a492-f50db33138e6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "f668a3f5-b8b3-4769-8ec5-efd949a411e1"
                }
              }
            ]
          },
          {
            "id": "adfe09c7-dc39-4794-b4ad-53eb91758bda",
            "name": "53. Delete Account",
            "request": {
              "description": {
                "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c55d913e-643a-4613-bb2c-00cc1c67a689",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Account\");\n"
                  ],
                  "_lastExecutionId": "51359a80-6e3c-4a7f-8e5e-9afe3517964f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cd35670a-a751-48df-b080-ca641c15725e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "fa672099-5a07-43b5-9b6c-fb2a1b512b1d"
                }
              }
            ]
          },
          {
            "id": "c926a6ad-6bb0-4f75-800e-3d5bf832a887",
            "name": "54. Delete Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "53228d77-1e97-482e-a828-731f9356004f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Asset\");\n"
                  ],
                  "_lastExecutionId": "d2d9c36f-b9fc-4967-aa4a-c98b7f43c6ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5573a22a-72ef-4493-90b0-675e37e395b9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "03b2890d-7618-401e-a9d1-b18a4868c739"
                }
              }
            ]
          },
          {
            "id": "ae66d477-a1ee-4d38-bab4-bb755b6e3802",
            "name": "55. Delete Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52299318-7d72-47f6-a7ff-7a425dee464a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Ledger\");\n"
                  ],
                  "_lastExecutionId": "905afd54-a2f2-458c-b9bc-12fc7c6c5974"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fca06acc-0d0a-4abd-ba02-0c26d099a5af",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "6078e247-afab-4635-b2d5-604b849eaf73"
                }
              }
            ]
          },
          {
            "id": "77b4dd9a-5e63-4e5c-bc96-33a8e3c7778a",
            "name": "56. Delete Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `[object Object]`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9364c519-2345-4f9f-9aa6-cd4a8ef304b9",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP Delete Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Organization\");\n"
                  ],
                  "_lastExecutionId": "6bc21cf9-22ef-401b-ba98-c2f6ac37cb9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21811e51-8b6c-450e-870e-896e5cbc2ecf",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "bf4c8585-8bd3-4728-824b-ab2c1ac5e0fd"
                }
              }
            ]
          },
          {
            "id": "c106d42c-a9a7-4534-9d7f-7fa60788abdf",
            "name": "Workflow Summary & Report",
            "request": {
              "description": {
                "content": "Final step that generates comprehensive test summary for CI reporting",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6f40938b-bb25-4204-b96c-72018d13cd1a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: undefined\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= undefined; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                  ],
                  "_lastExecutionId": "0bfe90bd-1b8a-4bc4-a5a4-210535dbe54f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0a067cda-3292-4045-a4ae-23e3ddf623ef",
        "name": "Organizations",
        "description": {
          "content": "Endpoints for managing organizations, which are the top-level entities in the MIDAZ system.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "88cca6a5-367b-4dbd-b4a0-46581f3c8170",
            "name": "List all organizations",
            "request": {
              "description": {
                "content": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "077d546b-8b2e-44da-bf32-2fdece6e1ffe",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4b8bdbf1-f24d-4f31-b2d3-517f5e8d6b15",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "fd44c1b0-e2fb-44c6-bc4c-51f8175a3a3a",
            "name": "Create a new organization",
            "request": {
              "description": {
                "content": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5aac02e6-1b6c-4828-8c7d-667a3c30b944",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4b15e9da-fead-4034-8edc-8dd257cb14f4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"organizationId\", jsonData.id);",
                    "    console.log(\"organizationId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract organizationId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "781e2aeb-9143-44d1-9ef4-334b4e48a250",
            "name": "Count total organizations",
            "request": {
              "description": {
                "content": "Returns the total count of organizations as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "894fb8d9-9dc3-4565-add2-1bfa7703271a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4133b92-f427-4a5b-b8e3-ac60b37f058b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "8551676e-47cb-44e7-8b58-143a99105758",
            "name": "Retrieve a specific organization",
            "request": {
              "description": {
                "content": "Returns detailed information about an organization identified by its UUID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "665ccf31-c55a-444c-91e6-cfecba0d2fce",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3473479c-9c4d-43ea-bcf7-a827703bc650",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e57bcb4d-6e33-4be0-b9e5-b03d6deeff04",
            "name": "Delete an organization",
            "request": {
              "description": {
                "content": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5999b3d5-fedc-4921-abca-d9d3bc07f27a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51d2260f-a401-4ea1-8f3f-307da1c31f2a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "02ae3dcc-c46e-4e47-9136-be07f2031d1e",
            "name": "Update an existing organization",
            "request": {
              "description": {
                "content": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7fde88d9-f4dd-4afa-b149-27a76b8e40f7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a53162e6-afc3-4c5d-975d-47bf6fd1d08b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2f680482-8deb-4d54-b325-68b498e6a788",
        "name": "Ledgers",
        "description": {
          "content": "Endpoints for managing ledgers, which are financial record-keeping systems for tracking assets, accounts, and transactions within an organization.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "01002855-a797-41f7-b3fe-b45c70e7f468",
            "name": "List all ledgers",
            "request": {
              "description": {
                "content": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1930cac6-6b4c-41ff-ad79-d6e92cd3a43e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1070360e-2c30-46d4-bac0-b2bc9c1277ed",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "3d2d304b-d8c3-4995-81d1-a9c44f6d1ce4",
            "name": "Create a new ledger",
            "request": {
              "description": {
                "content": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6ded2b3e-5c98-436e-85a8-8bb8cc1d914c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fe6b4a1-15be-4ff4-bb4c-acb28c2a461e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"ledgerId\", jsonData.id);",
                    "    console.log(\"ledgerId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract ledgerId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "b3805a45-a4f2-46eb-a76d-b5a86ac82f5c",
            "name": "Count total ledgers",
            "request": {
              "description": {
                "content": "Returns the total count of ledgers for a specific organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66474ae1-f652-4dca-824f-6354982d06d6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c792ad26-ec62-4e69-b5dd-cf33a6a10609",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b6522d81-908e-4921-977a-9f61dee6f1c6",
            "name": "Retrieve a specific ledger",
            "request": {
              "description": {
                "content": "Returns detailed information about a ledger identified by its UUID within the specified organization",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4c81e44-a81f-48f6-8e5b-ce3efc4f5009",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfac3448-d46c-45b7-9820-ed30a72b9014",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "eba8d819-70f9-40b8-8d3d-1ade8d503d12",
            "name": "Delete a ledger",
            "request": {
              "description": {
                "content": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03d150a7-db25-4bca-8ab7-fd064e5b5f15",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "92c97c5c-9b6e-4b74-b240-fb4c67d6001a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "fa49c602-472f-460b-b917-20971edd2b5b",
            "name": "Update an existing ledger",
            "request": {
              "description": {
                "content": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0deb9bbb-ad53-4a18-8ec3-c178694be4d9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e72b056-4ab6-4e60-ab58-a0cbb2d05f56",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b725b9c7-2274-4d69-8709-58afbbb18c73",
        "name": "Account Types",
        "description": {
          "content": "Endpoints related to Account Types.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "700c5867-45fd-414f-87f2-6fc19aed3780",
            "name": "Get all account types",
            "request": {
              "description": {
                "content": "Returns a paginated list of all account types for the specified organization and ledger, optionally filtered by metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter account types by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit of account types per page (default: 10, max: 100)",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for offset pagination (default: 1)",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor for cursor-based pagination",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort order (asc or desc, default: asc)",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67a48fb7-62b4-4b62-a60c-6fcfd463d894",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88292dcd-3548-4b74-9756-c11f98287575",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b5dc5d40-b546-40c3-864f-979432f5c92c",
            "name": "Create Account Type",
            "request": {
              "description": {
                "content": "Endpoint to create a new Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"keyValue\": \"current_assets\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "793b4baa-6726-4921-b0f2-c96b9c1748f6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12ead6d1-9702-4e0a-8fef-fbcf4e4784f1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "97620a9e-1dda-432f-8127-5fbd91eda318",
            "name": "Retrieve a specific account type",
            "request": {
              "description": {
                "content": "Returns detailed information about an account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8c18754-4433-416d-891f-192fb62b2def",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bedae11c-4cff-4ccd-9602-63f2399e43eb",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "c7ea179f-9752-4d49-810d-598fa31b254e",
            "name": "Delete an account type",
            "request": {
              "description": {
                "content": "Deletes an existing account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea00ec54-29e5-410e-b2c7-f64c84275513",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1604e7e-3710-4c8c-86d0-1c50933d914b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b03655de-6ea3-4f7f-b9c4-4437b4581e68",
            "name": "Update Account Type",
            "request": {
              "description": {
                "content": "Endpoint to update an existing Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02e3b012-9b74-4cf7-b23f-858a09bdceea",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4744fac6-e3fc-4ac8-a20d-72fc8d0a0088",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dfb73bb3-fc76-4118-b900-0e3ba09ab3ce",
        "name": "Accounts",
        "description": {
          "content": "Endpoints for managing accounts, which represent individual financial entities like bank accounts, credit cards, or expense categories within a ledger.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "aa4f7ed2-a60f-4336-9c3e-320e5a0a9aa9",
            "name": "List all accounts",
            "request": {
              "description": {
                "content": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9bebf748-ec58-4632-ba87-5b613ac79923",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2dd0e098-4f02-44d2-853d-36c714d37c19",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "d7a78717-5929-4eff-8ab5-e97e306b79bf",
            "name": "Create a new account",
            "request": {
              "description": {
                "content": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6cbdd3e7-6261-4259-8bcc-3154ad7dc104",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec68f4a6-cc73-4d4f-95be-d633ff82772e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"accountId\", jsonData.id);",
                    "    console.log(\"accountId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.alias) {",
                    "    pm.environment.set(\"accountAlias\", jsonData.alias);",
                    "    console.log(\"accountAlias set to: \" + jsonData.alias);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountAlias: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "88bdc87a-59f3-4098-9aff-d643e2bb8884",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95f1ce9d-11b1-4982-a646-b444bd76c0aa",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2403606-9045-481d-9f59-1da72b472793",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "8529c73e-ecbb-476a-b558-752a41044f6c",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d19cc4f-f890-4831-a326-74723e5ea806",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b20f93fd-ac0b-43d2-b662-f9614a409803",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "32d7e3c6-3fa9-4e3e-b413-d49cbd8310b4",
            "name": "Count accounts",
            "request": {
              "description": {
                "content": "Returns the total count of accounts for the specified organization, ledger, and optional portfolio",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ee14ccd-af50-474d-a9aa-3857f676b81f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e93fb32e-f2fc-46dd-8ad2-2b86f3292356",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "270928ec-3e34-401a-9d15-915d4b8b5f63",
            "name": "Retrieve a specific account",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7acefd7-7fa1-498e-b70a-262788deed2d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad688642-391f-4728-b953-730db714bad1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "61d65a61-e05c-435c-a801-c2e26673bcde",
            "name": "Delete an account",
            "request": {
              "description": {
                "content": "Permanently removes an account from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87f2d9ff-e5f4-4149-8ec4-4e59c0ca168a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3759d5d-c738-4e82-a810-5eb3fc1020ed",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "10a28b6f-0e8b-47f8-b5ce-8cd30e897ba2",
            "name": "Update an account",
            "request": {
              "description": {
                "content": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7448b1e0-e008-4608-8fd6-c138a6759b5b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b40068e5-9424-4e38-bca7-299e23d9595f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "03f78134-60c1-4c76-a68d-dadc12d370da",
        "name": "Assets",
        "description": {
          "content": "Endpoints for managing assets, which represent the types of value that can be transferred between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "79c6f88b-ac93-4dc8-a6d5-171ed4461f91",
            "name": "List all assets",
            "request": {
              "description": {
                "content": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "43998ec9-1e99-4c64-97dc-c4e50d82bd6c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "341d927d-e549-47af-a9ed-dd5bd0887b69",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a463a923-324f-4ba1-9b83-5b228cceb536",
            "name": "Create a new asset",
            "request": {
              "description": {
                "content": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4dd6bc6-82c6-46aa-ac26-89b0ac450931",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34cc046e-e18b-490b-9202-839fb71cd6f1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"assetId\", jsonData.id);",
                    "    console.log(\"assetId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract assetId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "bc68fea1-7acd-4c8a-9568-54363900cc7e",
            "name": "Count total assets",
            "request": {
              "description": {
                "content": "Returns the total count of assets for a specific ledger in an organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "439c71b2-b55e-4315-8707-e51898b5a027",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0c54ae7-0e13-4ee7-a9a4-d9206b2da469",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "7462c587-d71f-44e8-82d7-352fd758a869",
            "name": "Retrieve a specific asset",
            "request": {
              "description": {
                "content": "Returns detailed information about an asset identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b8eb70c-8d58-4376-b65f-1be8252ae8ca",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26901bed-c42a-417d-b131-4c3387820f97",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "01efde4c-a046-43b0-a85c-fa62ce144ea2",
            "name": "Delete an asset",
            "request": {
              "description": {
                "content": "Permanently removes an asset from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0235fca8-9d8d-4d95-8349-874e54212023",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1a67eb4-5b6c-4c29-8e9b-ed7c73fdaae1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "d42ac1ed-5977-4de3-8a09-e92925d785c6",
            "name": "Update an asset",
            "request": {
              "description": {
                "content": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e663c753-701a-47d9-81d3-4b2e650a01ac",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "caa08410-006b-466d-80cd-e09808863f43",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ccb09e21-109c-4dc6-8812-da718844029a",
        "name": "Portfolios",
        "description": {
          "content": "Endpoints for managing portfolios, which are collections of accounts grouped for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ab101f2a-afac-4a77-ba36-29015fec0d91",
            "name": "List all portfolios",
            "request": {
              "description": {
                "content": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e176e29-4260-4080-b502-101cb446ef34",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4af7d36d-5c25-4a8a-abe9-f76cdd8a1a84",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "0870b258-f2a6-44ff-a833-9eb987986b85",
            "name": "Create a new portfolio",
            "request": {
              "description": {
                "content": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b169307f-fbc0-40dc-b77a-83f2cdde2bf1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ded0093e-c19d-498b-8fcf-bc24a165d9fe",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"portfolioId\", jsonData.id);",
                    "    console.log(\"portfolioId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract portfolioId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "e504fc7c-6f2f-4846-9716-e20629dd0d3d",
            "name": "Count total portfolios",
            "request": {
              "description": {
                "content": "Returns the total count of portfolios for a specific organization and ledger as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a08b963-d665-4c2a-be55-9233bf8f8645",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1cf99cb0-3982-4d85-8b59-417309c1d4eb",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "261cce31-4601-4d44-a1c9-4d5f72d17251",
            "name": "Retrieve a specific portfolio",
            "request": {
              "description": {
                "content": "Returns detailed information about a portfolio identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fea50f2e-e160-45d7-aebe-4e63cc0df585",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61b3c924-6bda-4b6c-910e-1555c11b0483",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "429f4ec2-369b-40bb-be06-ef8860922ff8",
            "name": "Delete a portfolio",
            "request": {
              "description": {
                "content": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebbcb577-718d-46df-bd17-dcc6bef76453",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "582410f9-a6f8-4884-a157-557eb72d1409",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "db551f1c-1080-44a2-af4c-d99b2a57ed1a",
            "name": "Update a portfolio",
            "request": {
              "description": {
                "content": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "859607dd-bf8d-4e15-8d65-f98fcd2bbe4a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "293b38a4-ebf1-4bad-84f5-03257c8151e6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f8e190e3-9160-4f33-99a1-fb30423a2469",
        "name": "Segments",
        "description": {
          "content": "Endpoints for managing segments, which are used to categorize accounts for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "ab83321b-5a91-47b4-bf5f-ec1b824c7e43",
            "name": "List all segments",
            "request": {
              "description": {
                "content": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6220198-ab03-4fd3-9f45-d0a7c8758757",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02d1c47f-1622-4195-b713-140323ef53c2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "51079aa2-dc92-4de0-870c-2bcc241e7267",
            "name": "Create a new segment",
            "request": {
              "description": {
                "content": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "143d8e08-857c-4a93-bdd9-1eeb4e51131d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d775eaf3-737a-4433-86cf-c9fb573775fe",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"segmentId\", jsonData.id);",
                    "    console.log(\"segmentId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract segmentId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "44ad26c1-6d5e-425e-9216-24c5751f0afd",
            "name": "Count segments",
            "request": {
              "description": {
                "content": "Returns the total count of segments for the specified organization and ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "528dce42-3f2f-41e2-97a6-c7bd605ef834",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2b66374-7b78-45ff-8b3c-a3adc1abaf45",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a0f07461-07fa-40ce-9697-58956aac0188",
            "name": "Retrieve a specific segment",
            "request": {
              "description": {
                "content": "Returns detailed information about a segment identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5416effe-fbe0-4163-933b-ad60ea28b58d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29ea24b5-a336-4fd6-b395-bf54d9a47e5e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "31681280-c229-4194-9f19-8ace067c7b75",
            "name": "Delete a segment",
            "request": {
              "description": {
                "content": "Permanently removes a segment from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d87a81d-c633-4d8b-95d0-548843e8ca9a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "438c841a-536c-4975-bfd4-11f627cb37e6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "581e8c72-214e-4602-96a6-4e385623bf35",
            "name": "Update a segment",
            "request": {
              "description": {
                "content": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40816606-128c-46a6-ba45-fa5966270c34",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb9c12e8-21e4-4e64-b74c-c0b733993783",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "de31d8af-8453-4bcb-b6cc-c0b03a4cd0da",
        "name": "Balances",
        "description": {
          "content": "Endpoints for retrieving account balances, which represent the current value of an account.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "865e244d-07f4-44c9-8273-0f7869adeef5",
            "name": "Get Balances using Alias",
            "request": {
              "description": {
                "content": "Get Balances with alias",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "daa759b3-e0c1-430f-ab1c-fca0982951cd",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5de8c23-4885-45fc-b54b-337b21d1be78",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e01b2a19-56ca-4967-a08b-b63170604633",
            "name": "Get External balances using code",
            "request": {
              "description": {
                "content": "Get External balances with code",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c39e52cc-9983-45ee-b962-f99d133582f3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "650d1c02-3e5a-4668-8321-575980cea6a9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "799c103b-e77d-4685-8fa1-ad368cdfbb73",
            "name": "Get all balances by account id",
            "request": {
              "description": {
                "content": "Get all balances by account id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af45d1a2-e458-403c-9894-c7abcc258be5",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e5582c3-8d4c-4ccb-880b-3177d277c189",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "8c34a791-4b90-4899-9a67-a483ef3eab8c",
            "name": "Get all balances",
            "request": {
              "description": {
                "content": "Get all balances",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b0755cb8-f0d7-41a7-a7a6-0feec5de73d4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da212980-a574-4692-aa4d-7921e7952279",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9c0a5841-ecef-4ab3-9ff9-281c89fcdf32",
            "name": "Get Balance by id",
            "request": {
              "description": {
                "content": "Get a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3c28d14c-e4c0-46d6-9126-410a1d78ae2c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09f9b229-1956-494d-b972-6bdc5f080bcb",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "661befba-379c-4988-ab72-9c876fc1c81b",
            "name": "Delete Balance by account",
            "request": {
              "description": {
                "content": "Delete a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc0bc34c-2904-412c-852d-fcbd3ce3afe0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d32e707d-bb57-482c-9775-24cde5f14923",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "0b52add5-56d7-4c22-8ba6-6b3a2d0ebc11",
            "name": "Update Balance",
            "request": {
              "description": {
                "content": "Update a Balance with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "32d2cf17-c36f-4be7-ab5d-8a26939f375c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca39b0f8-8331-4892-ae0a-d621dbb5cd5f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2c241da7-6ed8-40fd-b7a5-5278ff9af806",
        "name": "Operations",
        "description": {
          "content": "Endpoints for managing operations, which are the individual debit and credit entries that make up a transaction.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "1a05b436-be23-4560-bcd7-aa6b2ead9ad7",
            "name": "Get all Operations by account",
            "request": {
              "description": {
                "content": "Get all Operations with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8040b00d-08bf-4c56-a555-f8d9af6470f8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c7a7d71-7435-4d91-ab01-5cbc739263b0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "9ea2d163-f9fb-4851-87ec-3e9f1e8e4c64",
            "name": "Get Operation",
            "request": {
              "description": {
                "content": "Get an Operation with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d65a0aa-c25e-4341-91aa-f38049ab0909",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1412c27c-c54d-4c4e-bb13-e53953b3b795",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "eb20c663-908e-4489-a9b1-1a00acb02885",
            "name": "Update an Operation",
            "request": {
              "description": {
                "content": "Update an Operation with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1ba4390-0788-4ee2-8412-4ba8897e0684",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"transactionId\")) {",
                    "  console.log(\"Warning: transactionId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bbcea8bf-3f26-4490-a8c6-202e3f80f82e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8b6742f5-9001-4034-aa70-f43cf30dbff8",
        "name": "Operation Route",
        "description": {
          "content": "Endpoints related to Operation Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "2393b739-b234-4254-aae0-360fe6391115",
            "name": "Retrieve all operation routes",
            "request": {
              "description": {
                "content": "Returns a list of all operation routes within the specified ledger with cursor-based pagination",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dfa8bfcf-f9ed-4e70-ad46-41ebb2c9f71b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eed791d4-e661-43c9-96b5-19c1d40577f8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "02ce8670-6a6e-442e-b4a8-90baede00035",
            "name": "Create Operation Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Operation Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07310d3e-9736-4f3a-8cbd-64eedf50139f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11d2ee5e-7a08-4228-946b-68113d20da6a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "0de9865b-8168-431e-9030-69ac73a5568c",
            "name": "Retrieve a specific operation route",
            "request": {
              "description": {
                "content": "Returns detailed information about an operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9dae2659-6703-43e4-aa38-ed5aa94139d2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c5ea4c5d-6bdb-4871-bad7-134ba29e8647",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "4a52e3eb-ad2c-4c42-84e2-e889bfa126cb",
            "name": "Delete an operation route",
            "request": {
              "description": {
                "content": "Deletes an existing operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f5a3320e-3979-4615-8d26-38c20e3754d3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "29ad04d1-ccf3-4c33-ba35-8a3312ad1839",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "606a0915-008a-40f6-a61e-96ec549379e6",
            "name": "Update an operation route",
            "request": {
              "description": {
                "content": "Updates an existing operation route's properties such as title, description, and type within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"account\": null,\n  \"description\": \"This operation route handles cash-in transactions from service charge collections\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"title\": \"Cashin from service charge\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65e16d48-92dc-42eb-83eb-7d53455789d7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5efc8c8-2d39-4073-88a6-111d9225ecec",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "db734201-9c43-47a8-9cfa-42d6dcd89642",
        "name": "Transaction Route",
        "description": {
          "content": "Endpoints related to Transaction Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d653d645-405f-438d-b9b0-149fe392fa55",
            "name": "Get all Transaction Routes",
            "request": {
              "description": {
                "content": "Endpoint to get all Transaction Routes with optional metadata filtering.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7771fad-db66-45bd-aba1-0eeb1fe9798d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6547fbe2-01b7-4a39-a73a-11a2fc8c9724",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "0cee40f5-2402-4b63-b0d2-16c99e246869",
            "name": "Create Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Transaction Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17e7e9be-6d9e-40ab-aca4-36d36dbfe7d3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22fa9c44-1c4d-40f5-9a8e-a42997c0a583",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "6fe1007d-85e6-4e2c-b942-d179054c486f",
            "name": "Get Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to get a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84cb8474-e0fc-4d28-b2e3-df652f70d8f7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8583c90-7b76-4495-b5a6-2ab4576bde08",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "323cf85f-9e18-4fca-844a-655376cae9cb",
            "name": "Delete Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to delete a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f85c8bd9-3202-46e7-9202-35977705f70f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46075098-d9bf-4f0f-a187-627352103a05",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "8e956790-e382-483b-a93b-78b7a67ed954",
            "name": "Update Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to update a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08eec713-4717-4506-ae25-dd3381debb45",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "76cf6add-f0a8-4548-aa8e-933c1a12e8dc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "556377e6-da12-44c9-bd3d-4b2a7657dcfc",
        "name": "Transactions",
        "description": {
          "content": "Endpoints for managing transactions, which represent the movement of value between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e15fe48c-8e4c-4c1f-a9a2-aa048558650e",
            "name": "Get all Transactions",
            "request": {
              "description": {
                "content": "Get all Transactions with the input metadata or without metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7e79bd3-67cf-4512-bb55-4280822ed451",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95539ed8-1c60-455b-86e7-012faa767840",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f7c270f4-f0c3-4499-aeb7-2630e83f1008",
            "name": "Create a Transaction using DSL",
            "request": {
              "description": {
                "content": "Create a Transaction with the input DSL file",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "dsl"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b301ccdd-097b-48ae-90af-489ead5a829f",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3e0e6a4b-14cc-4ab5-9b08-bf7c18007627",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // DSL endpoint requires proper DSL format",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "05a9425f-5d56-446e-b205-8d690da38b30",
            "name": "Create a Transaction without passing from source",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54c32266-a061-4d7b-a3d6-3e266196b54b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "384ec357-9e9f-456b-8aba-8236df0a73cb",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"inflowTransactionId\", jsonData.id);",
                    "    console.log(\"inflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract inflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "c975c9e1-def8-4065-a3f6-c0645db4edd4",
            "name": "Create a Transaction using JSON",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e2ddca8-2d7f-4c5a-93c1-dec937db84d6",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e86d9474-40a9-43d8-83f5-1ab40b75a3d2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"transactionId\", jsonData.id);",
                    "    console.log(\"transactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract transactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "64a08835-12db-4d2e-8dcc-66d4315ef344",
            "name": "Create a Transaction without passing to distribution",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e69504fc-836d-43d0-89d9-1181a835e73a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "058c9a96-42c4-495d-89d4-3ed27e56b52a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"outflowTransactionId\", jsonData.id);",
                    "    console.log(\"outflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract outflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "27147c4e-100f-487f-9a66-70425c29c722",
            "name": "Get a Transaction by ID",
            "request": {
              "description": {
                "content": "Get a Transaction with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da89e6e7-0ca3-4175-a0e4-05a8a37eaf4a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09692e62-a77d-4c1b-a979-d66b7d49533f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "c1030e73-9b3a-4fee-a873-13d381e0691c",
            "name": "Update a Transaction",
            "request": {
              "description": {
                "content": "Update a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f58fa4fe-25cc-4386-a503-211bcc87db60",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72c2117d-75c7-412a-904b-d7004778db2c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "description": {
          "content": "This collection requires the MIDAZ environment to be selected for proper functionality.",
          "type": "text/plain"
        },
        "type": "string",
        "value": "MIDAZ",
        "key": "environment"
      }
    ],
    "info": {
      "_postman_id": "00b3869d-895d-49b2-a6b5-68b193471560",
      "name": "MIDAZ",
      "version": {
        "raw": "v1.48.0",
        "major": 1,
        "minor": 48,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.48.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This is a swagger documentation for the Midaz Ledger API\n\n**IMPORTANT**: This collection requires the **MIDAZ Environment** to be selected for proper functionality. Please ensure you have imported and selected the MIDAZ environment before using this collection.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "midaz-environment-id",
    "name": "MIDAZ Environment",
    "values": [
      {
        "type": "any",
        "value": "@treasury_checking",
        "key": "accountAlias"
      },
      {
        "type": "any",
        "value": "01987cb2-1181-78a8-813c-6f94927cdab1",
        "key": "accountId"
      },
      {
        "type": "any",
        "value": "01987cb2-0f6b-72ca-a58f-58a2592aec37",
        "key": "assetId"
      },
      {
        "type": "any",
        "value": "",
        "key": "assetRateId"
      },
      {
        "type": "any",
        "value": "",
        "key": "authToken"
      },
      {
        "type": "any",
        "value": "01987cb2-1184-7e7e-8f45-38f9d47b54bc",
        "key": "balanceId"
      },
      {
        "type": "any",
        "value": "http://localhost",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "USD",
        "key": "externalCode"
      },
      {
        "type": "any",
        "value": "4a7c4b23-9adf-4047-92fc-380eb6f08570",
        "key": "idempotencyKey"
      },
      {
        "type": "any",
        "value": "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
        "key": "ledgerId"
      },
      {
        "type": "any",
        "value": "3000",
        "key": "onboardingPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{onboardingPort}}",
        "key": "onboardingUrl"
      },
      {
        "type": "any",
        "value": "01987cb2-244c-7cd8-b693-fc68aee331b1",
        "key": "operationId"
      },
      {
        "type": "any",
        "value": "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
        "key": "organizationId"
      },
      {
        "type": "any",
        "value": "01987cb2-138e-7d88-aa3f-68e13e9bc664",
        "key": "portfolioId"
      },
      {
        "type": "any",
        "value": "01987cb2-15b2-742b-8fa3-2190e151b1de",
        "key": "segmentId"
      },
      {
        "type": "any",
        "value": "01987cb2-244c-7941-8c51-21ed8da763ea",
        "key": "transactionId"
      },
      {
        "type": "any",
        "value": "3001",
        "key": "transactionPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{transactionPort}}",
        "key": "transactionUrl"
      },
      {
        "type": "any",
        "value": 19,
        "key": "perf_step_1"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_2"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_3"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_4"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_5"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_6"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_7"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_8"
      },
      {
        "type": "any",
        "value": 15,
        "key": "perf_step_9"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_10"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_11"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_12"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_13"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_14"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_15"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_16"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_17"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_18"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_19"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_20"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_21"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_22"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_23"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_24"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_25"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_26"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_27"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_28"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_29"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_30"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_31"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_32"
      },
      {
        "type": "any",
        "value": 23,
        "key": "perf_step_33"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_34"
      },
      {
        "type": "any",
        "value": "01987cb2-1c6f-72d1-99e5-c499fbbd3f1c",
        "key": "inflowTransactionId"
      },
      {
        "type": "any",
        "value": "01987cb2-1c6f-7381-8693-9a4c48baaa0d",
        "key": "inflowOperationId"
      },
      {
        "type": "any",
        "value": "01987cb2-1184-7e7e-8f45-38f9d47b54bc",
        "key": "inflowBalanceId"
      },
      {
        "type": "any",
        "value": 16,
        "key": "perf_step_35"
      },
      {
        "type": "any",
        "value": "01987cb2-1cfa-7aaa-b5a8-efb21369db4f",
        "key": "outflowTransactionId"
      },
      {
        "type": "any",
        "value": "01987cb2-1cfa-7bb6-913f-fccb44bec0f0",
        "key": "outflowOperationId"
      },
      {
        "type": "any",
        "value": "01987cb2-1184-7e7e-8f45-38f9d47b54bc",
        "key": "outflowBalanceId"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_36"
      },
      {
        "type": "any",
        "value": 14,
        "key": "perf_step_37"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_38"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_39"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_40"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_41"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_42"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_43"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_44"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_45"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_46"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_47"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_48"
      },
      {
        "type": "any",
        "value": 100,
        "key": "currentBalanceAmount"
      },
      {
        "type": "any",
        "value": 18,
        "key": "perf_step_49"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_50"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_51"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_52"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_53"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_54"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_55"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_56"
      }
    ]
  },
  "globals": {
    "id": "a8d3f4c3-2775-4540-bb1e-90a09ae8b42c",
    "values": [
      {
        "type": "any",
        "value": 1754438699800,
        "key": "step_Create Organization_start"
      },
      {
        "type": "any",
        "value": 1754438699844,
        "key": "step_1_start"
      },
      {
        "type": "any",
        "value": 1754438699955,
        "key": "step_Get Organization_start"
      },
      {
        "type": "any",
        "value": 1754438699967,
        "key": "step_2_start"
      },
      {
        "type": "any",
        "value": 1754438700081,
        "key": "step_Update Organization_start"
      },
      {
        "type": "any",
        "value": 1754438700099,
        "key": "step_3_start"
      },
      {
        "type": "any",
        "value": 1754438700215,
        "key": "step_List Organizations_start"
      },
      {
        "type": "any",
        "value": 1754438700236,
        "key": "step_4_start"
      },
      {
        "type": "any",
        "value": 1754438700351,
        "key": "step_Create Ledger_start"
      },
      {
        "type": "any",
        "value": 1754438700373,
        "key": "step_5_start"
      },
      {
        "type": "any",
        "value": 1754438700490,
        "key": "step_Get Ledger_start"
      },
      {
        "type": "any",
        "value": 1754438700508,
        "key": "step_6_start"
      },
      {
        "type": "any",
        "value": 1754438700623,
        "key": "step_Update Ledger_start"
      },
      {
        "type": "any",
        "value": 1754438700647,
        "key": "step_7_start"
      },
      {
        "type": "any",
        "value": 1754438700760,
        "key": "step_List Ledgers_start"
      },
      {
        "type": "any",
        "value": 1754438700779,
        "key": "step_8_start"
      },
      {
        "type": "any",
        "value": 1754438700893,
        "key": "step_Create Asset_start"
      },
      {
        "type": "any",
        "value": 1754438700920,
        "key": "step_9_start"
      },
      {
        "type": "any",
        "value": 1754438701035,
        "key": "step_Get Asset_start"
      },
      {
        "type": "any",
        "value": 1754438701053,
        "key": "step_10_start"
      },
      {
        "type": "any",
        "value": 1754438701167,
        "key": "step_Update Asset_start"
      },
      {
        "type": "any",
        "value": 1754438701188,
        "key": "step_11_start"
      },
      {
        "type": "any",
        "value": 1754438701302,
        "key": "step_List Assets_start"
      },
      {
        "type": "any",
        "value": 1754438701322,
        "key": "step_12_start"
      },
      {
        "type": "any",
        "value": 1754438701434,
        "key": "step_Create Account_start"
      },
      {
        "type": "any",
        "value": 1754438701448,
        "key": "step_13_start"
      },
      {
        "type": "any",
        "value": 1754438701562,
        "key": "step_Get Account_start"
      },
      {
        "type": "any",
        "value": 1754438701573,
        "key": "step_14_start"
      },
      {
        "type": "any",
        "value": 1754438701687,
        "key": "step_Update Account_start"
      },
      {
        "type": "any",
        "value": 1754438701709,
        "key": "step_15_start"
      },
      {
        "type": "any",
        "value": 1754438701823,
        "key": "step_List Accounts_start"
      },
      {
        "type": "any",
        "value": 1754438701841,
        "key": "step_16_start"
      },
      {
        "type": "any",
        "value": 1754438701958,
        "key": "step_Create Portfolio_start"
      },
      {
        "type": "any",
        "value": 1754438701979,
        "key": "step_17_start"
      },
      {
        "type": "any",
        "value": 1754438702096,
        "key": "step_Get Portfolio_start"
      },
      {
        "type": "any",
        "value": 1754438702113,
        "key": "step_18_start"
      },
      {
        "type": "any",
        "value": 1754438702228,
        "key": "step_Update Portfolio_start"
      },
      {
        "type": "any",
        "value": 1754438702253,
        "key": "step_19_start"
      },
      {
        "type": "any",
        "value": 1754438702369,
        "key": "step_List Portfolios_start"
      },
      {
        "type": "any",
        "value": 1754438702390,
        "key": "step_20_start"
      },
      {
        "type": "any",
        "value": 1754438702505,
        "key": "step_Create Segment_start"
      },
      {
        "type": "any",
        "value": 1754438702526,
        "key": "step_21_start"
      },
      {
        "type": "any",
        "value": 1754438702640,
        "key": "step_Get Segment_start"
      },
      {
        "type": "any",
        "value": 1754438702657,
        "key": "step_22_start"
      },
      {
        "type": "any",
        "value": 1754438702772,
        "key": "step_Update Segment_start"
      },
      {
        "type": "any",
        "value": 1754438702790,
        "key": "step_23_start"
      },
      {
        "type": "any",
        "value": 1754438702903,
        "key": "step_List Segments_start"
      },
      {
        "type": "any",
        "value": 1754438702918,
        "key": "step_24_start"
      },
      {
        "type": "any",
        "value": 1754438703031,
        "key": "step_Count Organizations_start"
      },
      {
        "type": "any",
        "value": 1754438703047,
        "key": "step_25_start"
      },
      {
        "type": "any",
        "value": 1754438703161,
        "key": "step_Count Ledgers_start"
      },
      {
        "type": "any",
        "value": 1754438703179,
        "key": "step_26_start"
      },
      {
        "type": "any",
        "value": 1754438703294,
        "key": "step_Count Accounts_start"
      },
      {
        "type": "any",
        "value": 1754438703310,
        "key": "step_27_start"
      },
      {
        "type": "any",
        "value": 1754438703424,
        "key": "step_Count Assets_start"
      },
      {
        "type": "any",
        "value": 1754438703437,
        "key": "step_28_start"
      },
      {
        "type": "any",
        "value": 1754438703551,
        "key": "step_Count Portfolios_start"
      },
      {
        "type": "any",
        "value": 1754438703568,
        "key": "step_29_start"
      },
      {
        "type": "any",
        "value": 1754438703683,
        "key": "step_Count Segments_start"
      },
      {
        "type": "any",
        "value": 1754438703695,
        "key": "step_30_start"
      },
      {
        "type": "any",
        "value": 1754438703810,
        "key": "step_Get Account by Alias_start"
      },
      {
        "type": "any",
        "value": 1754438703826,
        "key": "step_31_start"
      },
      {
        "type": "any",
        "value": 1754438703939,
        "key": "step_Get Account by External Code_start"
      },
      {
        "type": "any",
        "value": 1754438703961,
        "key": "step_32_start"
      },
      {
        "type": "any",
        "value": 1754438704077,
        "key": "step_Create Transaction_start"
      },
      {
        "type": "any",
        "value": 1754438704114,
        "key": "step_33_start"
      },
      {
        "type": "any",
        "value": 1754438704230,
        "key": "step_Create Transaction (Inflow)_start"
      },
      {
        "type": "any",
        "value": 1754438704253,
        "key": "step_34_start"
      },
      {
        "type": "any",
        "value": 1754438704368,
        "key": "step_Create Transaction (Outflow)_start"
      },
      {
        "type": "any",
        "value": 1754438704394,
        "key": "step_35_start"
      },
      {
        "type": "any",
        "value": 1754438704508,
        "key": "step_Get Transaction_start"
      },
      {
        "type": "any",
        "value": 1754438704529,
        "key": "step_36_start"
      },
      {
        "type": "any",
        "value": 1754438704646,
        "key": "step_Update Transaction_start"
      },
      {
        "type": "any",
        "value": 1754438704672,
        "key": "step_37_start"
      },
      {
        "type": "any",
        "value": 1754438704786,
        "key": "step_List Transactions_start"
      },
      {
        "type": "any",
        "value": 1754438704805,
        "key": "step_38_start"
      },
      {
        "type": "any",
        "value": 1754438704918,
        "key": "step_Get Operation_start"
      },
      {
        "type": "any",
        "value": 1754438704933,
        "key": "step_39_start"
      },
      {
        "type": "any",
        "value": 1754438705048,
        "key": "step_List Operations by Account_start"
      },
      {
        "type": "any",
        "value": 1754438705060,
        "key": "step_40_start"
      },
      {
        "type": "any",
        "value": 1754438705175,
        "key": "step_Update Operation Metadata_start"
      },
      {
        "type": "any",
        "value": 1754438705192,
        "key": "step_41_start"
      },
      {
        "type": "any",
        "value": 1754438705305,
        "key": "step_Get Balance_start"
      },
      {
        "type": "any",
        "value": 1754438705322,
        "key": "step_42_start"
      },
      {
        "type": "any",
        "value": 1754438705439,
        "key": "step_List Balances by Account_start"
      },
      {
        "type": "any",
        "value": 1754438705459,
        "key": "step_43_start"
      },
      {
        "type": "any",
        "value": 1754438705574,
        "key": "step_List Balances by Account Alias_start"
      },
      {
        "type": "any",
        "value": 1754438705590,
        "key": "step_44_start"
      },
      {
        "type": "any",
        "value": 1754438705705,
        "key": "step_List Balances by External Code_start"
      },
      {
        "type": "any",
        "value": 1754438705721,
        "key": "step_45_start"
      },
      {
        "type": "any",
        "value": 1754438705838,
        "key": "step_Update Balance_start"
      },
      {
        "type": "any",
        "value": 1754438705862,
        "key": "step_46_start"
      },
      {
        "type": "any",
        "value": 1754438705977,
        "key": "step_List All Balances_start"
      },
      {
        "type": "any",
        "value": 1754438705989,
        "key": "step_47_start"
      },
      {
        "type": "any",
        "value": 1754438706105,
        "key": "step_Check Account Balance Before Zeroing_start"
      },
      {
        "type": "any",
        "value": 1754438706121,
        "key": "step_48_start"
      },
      {
        "type": "any",
        "value": 1754438706239,
        "key": "step_Zero Out Balance_start"
      },
      {
        "type": "any",
        "value": 1754438706270,
        "key": "step_49_start"
      },
      {
        "type": "any",
        "value": 1754438706389,
        "key": "step_Delete Balance_start"
      },
      {
        "type": "any",
        "value": 1754438706408,
        "key": "step_50_start"
      },
      {
        "type": "any",
        "value": 1754438706524,
        "key": "step_Delete Segment_start"
      },
      {
        "type": "any",
        "value": 1754438706545,
        "key": "step_51_start"
      },
      {
        "type": "any",
        "value": 1754438706662,
        "key": "step_Delete Portfolio_start"
      },
      {
        "type": "any",
        "value": 1754438706682,
        "key": "step_52_start"
      },
      {
        "type": "any",
        "value": 1754438706797,
        "key": "step_Delete Account_start"
      },
      {
        "type": "any",
        "value": 1754438706818,
        "key": "step_53_start"
      },
      {
        "type": "any",
        "value": 1754438706935,
        "key": "step_Delete Asset_start"
      },
      {
        "type": "any",
        "value": 1754438706958,
        "key": "step_54_start"
      },
      {
        "type": "any",
        "value": 1754438707080,
        "key": "step_Delete Ledger_start"
      },
      {
        "type": "any",
        "value": 1754438707098,
        "key": "step_55_start"
      },
      {
        "type": "any",
        "value": 1754438707211,
        "key": "step_Delete Organization_start"
      },
      {
        "type": "any",
        "value": 1754438707223,
        "key": "step_56_start"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 113,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 165,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 56,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 7.5964912280701755,
      "responseMin": 1,
      "responseMax": 23,
      "responseSd": 4.510648800427748,
      "dnsAverage": 0.5200669393939417,
      "dnsMin": 0.3302089999997406,
      "dnsMax": 0.5260000000000105,
      "dnsSd": 0.03356245910193603,
      "firstByteAverage": 6.3893450526316276,
      "firstByteMin": 0.5320419999998194,
      "firstByteMax": 20.261333000000377,
      "firstByteSd": 4.025260344796163,
      "started": 1754438699688,
      "completed": 1754438707340
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 57,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "49095e33-182d-43a5-af06-5f8dde91c9f6",
          "httpRequestId": "b9fe203f-5b32-495d-8e2d-e4368c7b44b9"
        },
        "item": {
          "id": "31459a5c-fd9d-4bd7-ad7c-34b7977dd925",
          "name": "1. Create Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "94e78e0f-2057-4c8c-a74a-75260a6d1b67",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Organization: /v1/organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Organization: /v1/organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Organization\");\n"
                ],
                "_lastExecutionId": "4b2d5aee-5042-4aff-8851-a7c2d4b16c83"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c7a7c893-915e-40a8-8b99-9d28f8d98d57",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "73f966fc-0f94-4dcf-af21-ae23ad6d429c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "909f560a-84b9-420d-ae58-6ce63fe83c93"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "562bcd95-85b2-48f8-bc0c-31a366eacc9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "406",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5f70203c-63a1-4b1f-b5f9-0dd33efe5757",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "490"
            },
            {
              "key": "X-Request-Id",
              "value": "411e14d9-1107-493c-a38e-db5b1d2c7308"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              48,
              55,
              54,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              48,
              56,
              52,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 19,
          "responseSize": 490
        },
        "id": "31459a5c-fd9d-4bd7-ad7c-34b7977dd925",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè¢ Business Logic: Organization has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4ea5cad3-f0d7-41e7-b457-ba3ef3f360d4",
          "length": 57,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "530455e2-353a-41e3-9dbe-cdb05c9ca951"
        },
        "item": {
          "id": "aa2d5ccf-0250-406c-9561-f7503cd31c8d",
          "name": "2. Get Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09f2e953-47c2-4d7b-821e-003e32870179",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Organization\");\n"
                ],
                "_lastExecutionId": "55fbab10-e754-45ba-a59b-56a7b0aa7310"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "28875edd-d3f6-4d3e-aae3-d61bcb8b4207",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "db556776-3300-49d6-b6e0-93ad70608d00"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "8b67d6b3-d55b-4c4e-adc2-7edb0398f05d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd6aff1c-83cb-47f3-aa1a-fdcce2093225",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "09283909-5e74-4c32-a4c9-c91cbc35dfac",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "482"
            },
            {
              "key": "X-Request-Id",
              "value": "0c1f4277-3447-4d94-8d02-943c1b1151c1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 482
        },
        "id": "aa2d5ccf-0250-406c-9561-f7503cd31c8d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f76a472e-cd62-4778-aef2-0950266d59ac",
          "length": 57,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ea09ca7-1580-48d8-b038-6594e2d7600e"
        },
        "item": {
          "id": "3e13bc51-5198-406f-a0a4-f555fc8bc89b",
          "name": "3. Update Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f4dcf4bb-8180-4fd3-a0ed-479f18fea3ad",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Organization\");\n"
                ],
                "_lastExecutionId": "9e67b8b6-a286-4909-bb9a-ca3ca942b656"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0cd10941-e399-4705-99b4-7fd36ca710e0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0a2a3665-67b8-44b2-b336-f9226a51976f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1c9405a1-8b81-4add-b94d-56ac07eb8707"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f4a5730-3a87-4b71-98d3-218d5f39edb8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "368",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8935b4f2-76d9-4667-b2db-9ef7b5142a4f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "483"
            },
            {
              "key": "X-Request-Id",
              "value": "a3646519-434e-46e0-a708-43009ebd3fa4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              71,
              114,
              111,
              117,
              112,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              48,
              56,
              57,
              55,
              56,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 483
        },
        "id": "3e13bc51-5198-406f-a0a4-f555fc8bc89b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "040dee6c-9b90-40db-a876-d44e3039a983",
          "length": 57,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "59d0a9eb-0793-43f6-b5cc-fb81cab19c3d"
        },
        "item": {
          "id": "b6a4b643-dbcd-4273-8b57-d9f73960f8e4",
          "name": "4. List Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter organizations by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6310ee1c-c764-4649-aa47-b7a9f85abfa6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Organizations: /v1/organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Organizations: /v1/organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Organizations_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Organizations\");\n"
                ],
                "_lastExecutionId": "5dfdc490-cb17-4b9b-8e8d-84078ce632e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d1ebb237-a23b-4dd8-bb84-b28e5e334eac",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0f79e9c4-2d1f-43dc-924c-2764d0da4e25"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d5787ff1-76b7-41ed-acd0-ef45184b1b32"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abaa1cd6-daa9-454f-bb15-f9a280f0b426",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "95bca9e8-52ca-4c63-a066-0a6714559913",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "515"
            },
            {
              "key": "X-Request-Id",
              "value": "42dcdab6-9135-4af5-866f-b674b8c14542"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              71,
              114,
              111,
              117,
              112,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              52,
              58,
              53,
              57,
              46,
              56,
              50,
              49,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              48,
              56,
              57,
              55,
              56,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 515
        },
        "id": "b6a4b643-dbcd-4273-8b57-d9f73960f8e4",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ce803a8a-7306-4b82-947f-decaada63020",
          "length": 57,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a13a1926-7867-40a3-aa1a-6945df1fbad0"
        },
        "item": {
          "id": "cf68535e-b044-4dd2-ba5e-78e7e1f7eedb",
          "name": "5. Create Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "96576ad6-c597-42d7-bc9f-ac1f7c2a2bb2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Ledger: /v1/organizations/{organizationId}/ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Ledger: /v1/organizations/{organizationId}/ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Ledger\");\n"
                ],
                "_lastExecutionId": "087e4666-4a3a-48d3-840f-bfaa9b7168da"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d5cea900-f562-409c-8960-52a2f5b413c4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "5c05135c-1560-4ab9-86df-8819d1dbaedb"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "de9a6ba9-0cfe-4c97-82b1-75e2c801a5cd"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61e70134-ba31-4af4-ab52-e8c298f6b991",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "108",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f8149c0d-7ddb-4410-8cfc-b5088263f403",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "303"
            },
            {
              "key": "X-Request-Id",
              "value": "feb23a58-6254-49c7-8cb7-ac892f752e63"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              55,
              50,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              56,
              48,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 303
        },
        "id": "cf68535e-b044-4dd2-ba5e-78e7e1f7eedb",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìí Business Logic: Ledger has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "386c4cce-6816-4f85-98db-2cabb3b51fd0",
          "length": 57,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f31541d7-e50f-44ac-ae7b-ceb02273f7a0"
        },
        "item": {
          "id": "11c2b1d2-5f42-4091-9854-8d96d466fb8f",
          "name": "6. Get Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f13edf87-fe6b-40b4-9f66-70e485da779f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Ledger\");\n"
                ],
                "_lastExecutionId": "36131594-ec60-4323-8a10-722d84b2fed4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3b5a79c4-f235-4a2f-9e34-b252b4925d0a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "cc00e104-5edf-48c5-aeb3-1e39d421e92d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "07378d88-0ec5-4d5d-927f-b211176709ca"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "959338f9-1760-4385-944f-b02bfc743bf4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bcca1459-4f49-487b-be8d-dec452700d03",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:04:59 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "297"
            },
            {
              "key": "X-Request-Id",
              "value": "72042174-77fe-410c-b9ac-c0420807f97b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 297
        },
        "id": "11c2b1d2-5f42-4091-9854-8d96d466fb8f",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "944d3807-9887-4c41-9ff2-335e58f98a75",
          "length": 57,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8519c5f4-e902-484b-8add-fd65433d9af9"
        },
        "item": {
          "id": "93609b3d-a8af-409a-b658-fd6cc57f3229",
          "name": "7. Update Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "dccb6946-ee03-4298-85e9-36b4a5f51673",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Ledger\");\n"
                ],
                "_lastExecutionId": "788c3c6a-4fab-4985-90fc-6611ef48f0d1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "be314d9d-f1d1-4b5f-8f9e-a01e9f9363ab",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "5f89d058-24b9-472c-9316-f415fcbc5c36"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "18dc34ea-26b4-45b1-a27f-a0759aaa8240"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ab4090a6-0ff5-49de-88d2-1e856960bfcf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "dde4c419-0402-4da4-8151-54dd60a718c1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "311"
            },
            {
              "key": "X-Request-Id",
              "value": "0aa95d6e-c943-4d33-a9c2-a2869d527fca"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              54,
              51,
              51,
              48,
              53,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 311
        },
        "id": "93609b3d-a8af-409a-b658-fd6cc57f3229",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "62658ea9-5e75-4931-98de-319ead29422a",
          "length": 57,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "25a2abef-19ac-4478-8ca2-29f80772b969"
        },
        "item": {
          "id": "6efe6954-6ca7-4fe1-8fcb-88cb6ff4d259",
          "name": "8. List Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter ledgers by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1245507d-243c-456a-ae1f-2d37cf93cb8c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Ledgers: /v1/organizations/{organizationId}/ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Ledgers: /v1/organizations/{organizationId}/ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Ledgers_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Ledgers\");\n"
                ],
                "_lastExecutionId": "6ff8932c-e165-4af4-8b7a-81d6f1b9ad1f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d523528b-e864-48a5-bb30-7eb1e921a47a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ff093b7d-a288-4e59-ab9b-c6ebb7697467"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "90fedeca-d236-4e47-938e-f2de6021186b"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3ba89d8-e235-4b75-96be-81d55f3e76ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f0607448-42ad-4e69-bab6-df97e67f4202",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "343"
            },
            {
              "key": "X-Request-Id",
              "value": "aca60060-4ee3-4a6a-8344-8bf36bbfef25"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              51,
              54,
              50,
              48,
              56,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              54,
              51,
              51,
              48,
              53,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 343
        },
        "id": "6efe6954-6ca7-4fe1-8fcb-88cb6ff4d259",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0be391c-cd26-463f-92f9-a03c28306928",
          "length": 57,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c72a0d21-448e-463d-8836-d9e169dae050"
        },
        "item": {
          "id": "30f09628-38df-4297-ad8c-4dbf9c2d8d70",
          "name": "9. Create Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "66c275a2-d725-4ec4-920a-1edaa4af2d7c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Asset\");\n"
                ],
                "_lastExecutionId": "7e2a3716-8678-4377-adc8-a936c373a743"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ab5a7f8-86df-415a-8517-b36be74669b6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "75091af5-b257-45e7-af19-403cdacb0a4a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3e71ebde-5446-4b20-94d7-12ac93f67d28"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0365a44a-23fc-4577-a10e-aa962b6e1611",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "144",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "191d7117-6aee-429b-a5d5-0911c128c281",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "380"
            },
            {
              "key": "X-Request-Id",
              "value": "06cf2e19-74bf-49f6-8ca6-7cb36c5477fb"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              54,
              98,
              45,
              55,
              50,
              99,
              97,
              45,
              97,
              53,
              56,
              102,
              45,
              53,
              56,
              97,
              50,
              53,
              57,
              50,
              97,
              101,
              99,
              51,
              55,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              50,
              54,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 380
        },
        "id": "30f09628-38df-4297-ad8c-4dbf9c2d8d70",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∞ Business Logic: Asset has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a36ca8a2-a3fe-43e6-ae90-a3adf345e39d",
          "length": 57,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7a537a68-6c2a-46eb-958d-7644d34c4237"
        },
        "item": {
          "id": "451c202d-1862-49bf-89fc-76c6b3174164",
          "name": "10. Get Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5b8469b9-82a2-4105-8db1-d1d6fba9dcca",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Asset\");\n"
                ],
                "_lastExecutionId": "a7742fec-8d20-44a0-a477-db58589b2a19"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a58815a0-64ae-4ab2-b88d-740a9ccb3c27",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ee17aa25-382b-40bb-994b-5fc3b0adc493"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets",
              "01987cb2-0f6b-72ca-a58f-58a2592aec37"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b9b28934-cce5-475a-9bf1-6d678210b77f"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26dc808a-38c8-4a33-afbb-c742a5b41220",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1193ce48-509b-47a4-90ab-83a8427e8a18",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "375"
            },
            {
              "key": "X-Request-Id",
              "value": "6af16018-3a85-47e0-9f55-e0ae7d10958b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              54,
              98,
              45,
              55,
              50,
              99,
              97,
              45,
              97,
              53,
              56,
              102,
              45,
              53,
              56,
              97,
              50,
              53,
              57,
              50,
              97,
              101,
              99,
              51,
              55,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 375
        },
        "id": "451c202d-1862-49bf-89fc-76c6b3174164",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b6511952-30c9-4d7d-8c92-550eb3571e8f",
          "length": 57,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ff7b3c63-f79d-4890-ab67-a4dd6f74d7d4"
        },
        "item": {
          "id": "3a7b2e32-3718-43c3-9525-e0e5d927936b",
          "name": "11. Update Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e0342398-9d29-4f06-8c47-7ea29ab5b478",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Asset\");\n"
                ],
                "_lastExecutionId": "e80af126-3fad-466a-86fe-dcf3be7562a6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e528653-ba4e-4ec3-b13d-8663c0ea03eb",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "deefb43a-755f-46e4-a2ac-8336150aea0c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets",
              "01987cb2-0f6b-72ca-a58f-58a2592aec37"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "cbb1a6fc-5c59-42e2-8453-cdf55bcbca75"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1e84af98-a17c-49d8-8271-64428dc1f9a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "103",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f8c777f2-4f88-437a-bdab-7c1026b60e88",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "373"
            },
            {
              "key": "X-Request-Id",
              "value": "6340ee1e-a2e0-465c-85ee-289b94afe144"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              54,
              98,
              45,
              55,
              50,
              99,
              97,
              45,
              97,
              53,
              56,
              102,
              45,
              53,
              56,
              97,
              50,
              53,
              57,
              50,
              97,
              101,
              99,
              51,
              55,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              49,
              55,
              52,
              56,
              52,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 373
        },
        "id": "3a7b2e32-3718-43c3-9525-e0e5d927936b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "45d0e315-c850-479a-ac6d-d53110e76774",
          "length": 57,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5030630c-834b-4d4e-8237-59bf040bf6b2"
        },
        "item": {
          "id": "aa92eafa-436c-4589-8e14-44b253949b2b",
          "name": "12. List Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter assets by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a5b90e08-33f2-4667-80e7-990a885bfa4b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Assets_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Assets\");\n"
                ],
                "_lastExecutionId": "a9771bf6-8116-43af-850c-d47f96a2e02c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7ecf2dcb-8cce-4608-bc2b-229cb86eca5e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "7416da51-e86b-46cf-8617-e9c2cf70fd1b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "067bb289-8991-4e8b-9886-7e456ab54eb8"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0ba927e-8dc3-46b0-b709-a4de839e8beb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0db23c7f-8776-448b-9d80-1505d1096521",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "405"
            },
            {
              "key": "X-Request-Id",
              "value": "99631340-9651-45c1-9645-b804a0dd8fce"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              54,
              98,
              45,
              55,
              50,
              99,
              97,
              45,
              97,
              53,
              56,
              102,
              45,
              53,
              56,
              97,
              50,
              53,
              57,
              50,
              97,
              101,
              99,
              51,
              55,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              48,
              55,
              49,
              55,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              49,
              55,
              52,
              56,
              52,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 405
        },
        "id": "aa92eafa-436c-4589-8e14-44b253949b2b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "556acb22-260d-47f4-ba68-35fc586f3ac4",
          "length": 57,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "234f2dca-e743-49a3-93c6-73b1cc3ce234"
        },
        "item": {
          "id": "7846130f-1283-4dbc-9faf-ad629578fc88",
          "name": "13. Create Account",
          "request": {
            "description": {
              "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ab979b2-6db5-4b5a-a587-d36c563c2aae",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Account\");\n"
                ],
                "_lastExecutionId": "1ffce2a8-de5b-4c9c-ad5d-35fdac042abc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "342d96c3-98dc-40af-9a94-d49424049151",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "41410340-3b7f-4cac-a6b5-ca6508981c92"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f5f607ff-3a5a-4c26-b7f4-89da7e59af0a"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "14fa80bd-d413-4706-9672-518e30c0b2bf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "300",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "38ba0c70-629a-4160-9cd0-cf35758c7472",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:00 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "517"
            },
            {
              "key": "X-Request-Id",
              "value": "bd48d2c5-3fc9-4685-911f-35e034221466"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              49,
              50,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              49,
              54,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 517
        },
        "id": "7846130f-1283-4dbc-9faf-ad629578fc88",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üë§ Business Logic: Account has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a5695e96-4853-4011-a21d-254cf83dac0e",
          "length": 57,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "781fa5a2-58a0-456e-a6f0-80f6e550d7e6"
        },
        "item": {
          "id": "f737aa3a-d4bc-4060-a2bf-062ed86403f9",
          "name": "14. Get Account",
          "request": {
            "description": {
              "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f70ae749-b9c9-47c8-8631-3d11b6c2b290",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account\");\n"
                ],
                "_lastExecutionId": "bd17a927-ab4b-4cda-bf35-6a1baee3847c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9a471cea-d033-47d6-8baa-afa432375e06",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "e933042f-856c-4753-99f8-c8d11f86237e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1da8e42e-113c-45e1-9c9f-1e5fc72fb8c2"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fc2cc318-1f06-4c44-8806-e4e8d0687c7d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "08fce5b5-1617-42bb-a56c-dce3dc93219b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "511"
            },
            {
              "key": "X-Request-Id",
              "value": "e43cf781-8772-414d-ad88-0915aa0b4207"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 511
        },
        "id": "f737aa3a-d4bc-4060-a2bf-062ed86403f9",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a05f487f-c332-422c-a364-7f0d708fdc90",
          "length": 57,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3e5be5c5-2c86-448f-abce-74a16b934b32"
        },
        "item": {
          "id": "3a9b9022-d067-44cc-a42d-996d0d17e1f7",
          "name": "15. Update Account",
          "request": {
            "description": {
              "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8bffd35-639f-4a78-ab91-5f1a91424211",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Account\");\n"
                ],
                "_lastExecutionId": "512d1821-095c-4b15-86eb-59dd2cfdaf74"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d0f755d2-f3f4-43cf-9573-89939185923c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "b3d9997b-7b46-4ebb-b292-58d8acc53512"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "56acdab1-04d9-4c3b-bcc4-adedde2cb685"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "59e4657e-fc2c-4448-9355-0bd67cf47c83",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "205",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ba29a027-dcb2-4e91-94c1-99fa44331856",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "519"
            },
            {
              "key": "X-Request-Id",
              "value": "0b7eeb4d-b7f3-4d00-9075-feec97fcf294"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              54,
              57,
              55,
              56,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 519
        },
        "id": "3a9b9022-d067-44cc-a42d-996d0d17e1f7",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6fba489a-4e73-4075-9185-f401f457f2a1",
          "length": 57,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0ce97bae-a0d1-4c0b-8585-7709fd3e28fe"
        },
        "item": {
          "id": "e6170a33-50a5-4b54-aec9-33eaa3c9ec5a",
          "name": "16. List Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter accounts by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d8bebafe-523e-43db-b825-f2b94c6de149",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Accounts_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Accounts\");\n"
                ],
                "_lastExecutionId": "5caaa87c-25b3-4a8a-87f0-a544d818390c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a463a3ac-59dd-400d-9c8f-70ecc707b7c5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "10b224f4-d6fd-4f12-865c-991065667f93"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ed87581b-1c7b-40d9-9084-75258108fb00"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4bd00d46-ddf9-4026-97a1-2dc102fe70e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f64a1fdf-f98c-4417-9831-c1c4f4d64005",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "1045"
            },
            {
              "key": "X-Request-Id",
              "value": "630d4265-2f5b-4620-bb5a-a7f016fd03b9"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              54,
              57,
              55,
              56,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              50,
              56,
              51,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              50,
              56,
              51,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 1045
        },
        "id": "e6170a33-50a5-4b54-aec9-33eaa3c9ec5a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "634cdcfc-af7d-4500-a72e-d8dd44d50ac2",
          "length": 57,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e5b5eed-82d8-4240-a7eb-14714ad893c1"
        },
        "item": {
          "id": "7e5077ae-a950-4738-ad14-076a39c6f7c4",
          "name": "17. Create Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6b2aa8d6-c012-430c-9759-10475f3735a4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Portfolio\");\n"
                ],
                "_lastExecutionId": "21635932-72c7-4cf6-b825-ef20243397f5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "21b926a7-1987-45a6-9abc-1a283ef29725",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "4d561c9c-13fb-4a28-9c76-d794cfb38a0d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d4d38888-f7db-4faa-a23d-efc9e4c1d20f"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9712c6dc-d7cf-48e2-8d31-b398f5d4950e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "162",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "792a3e8a-c9e7-474d-bca6-5c229669edbe",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "403"
            },
            {
              "key": "X-Request-Id",
              "value": "52cc2150-2f84-417a-a3a9-66f2840e8b36"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              51,
              56,
              101,
              45,
              55,
              100,
              56,
              56,
              45,
              97,
              97,
              51,
              102,
              45,
              54,
              56,
              101,
              49,
              51,
              101,
              57,
              98,
              99,
              54,
              54,
              52,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              48,
              49,
              50,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              48,
              50,
              48,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 403
        },
        "id": "7e5077ae-a950-4738-ad14-076a39c6f7c4",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìÅ Business Logic: Portfolio has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc43aba4-1d70-4c12-9adf-9bcacaaaa2c8",
          "length": 57,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c11bd6d-143e-4c04-8737-fa087715d20e"
        },
        "item": {
          "id": "38fe2fa2-4bab-4474-9dbe-65905850fb86",
          "name": "18. Get Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "94d3315d-931a-4fea-bac1-b789bffca7d0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Portfolio\");\n"
                ],
                "_lastExecutionId": "9c1e934f-6261-40a8-8f5a-6efb5d8095d1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "23a5202c-6d42-4885-9b0a-f84fb6b03459",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "509ec7fa-5643-42ed-9b93-869421ee0eb7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios",
              "01987cb2-138e-7d88-aa3f-68e13e9bc664"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "7d655317-a17b-46b8-9319-a8536cf2bd2d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1643feb5-2afb-4865-a446-694b915a1483",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "89c800c0-31b6-4359-85b1-67ea9249e9e7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "395"
            },
            {
              "key": "X-Request-Id",
              "value": "a1581f68-1d1e-4657-9359-ba3b9ad1e4d3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              51,
              56,
              101,
              45,
              55,
              100,
              56,
              56,
              45,
              97,
              97,
              51,
              102,
              45,
              54,
              56,
              101,
              49,
              51,
              101,
              57,
              98,
              99,
              54,
              54,
              52,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 395
        },
        "id": "38fe2fa2-4bab-4474-9dbe-65905850fb86",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "68051321-f0ca-48f1-b707-fa3327518929",
          "length": 57,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "97aebed5-3179-438e-95e9-c5fa38721e96"
        },
        "item": {
          "id": "4f30de4b-99c3-4d1e-8ca7-89449513e5b0",
          "name": "19. Update Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f2e4f52d-1ab3-4806-9559-db6f1705bea5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Portfolio\");\n"
                ],
                "_lastExecutionId": "0a838d4f-8b0c-47e7-a4b8-a9d8c037abab"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "900fe27f-2c09-455f-aadb-0bde8de6d6a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "a20eb758-1e87-4407-9316-9343e4dceec4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios",
              "01987cb2-138e-7d88-aa3f-68e13e9bc664"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "2f337f3a-47cd-437e-b714-8ec333849333"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "751ebff5-1f5d-4469-ba75-fa918d91ca7d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "800ace15-c0c8-46f3-95d8-eee3b046be86",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "404"
            },
            {
              "key": "X-Request-Id",
              "value": "0881d1d6-2983-4e07-95a8-29acdf6e90ee"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              51,
              56,
              101,
              45,
              55,
              100,
              56,
              56,
              45,
              97,
              97,
              51,
              102,
              45,
              54,
              56,
              101,
              49,
              51,
              101,
              57,
              98,
              99,
              54,
              54,
              52,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              50,
              51,
              55,
              54,
              54,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 404
        },
        "id": "4f30de4b-99c3-4d1e-8ca7-89449513e5b0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "68cfb832-048b-49db-b2a0-74117e6616ec",
          "length": 57,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "99328ce7-c6c5-4b69-94bd-c3ef4e0a2bce"
        },
        "item": {
          "id": "bbb48f65-bfdc-4728-b294-4f22ef4a43f6",
          "name": "20. List Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter portfolios by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6fc4b115-069c-4374-b8c6-3c096d7a39cd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Portfolios_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Portfolios\");\n"
                ],
                "_lastExecutionId": "c026b10b-e0b9-451a-af03-821e1d897c8a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "55bfc44e-3c6a-4ef0-8838-1dc385dbfe7f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "85697163-00e3-4df5-89dc-a89bbae3e39a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "45a50651-40c1-4795-a532-3a16e8661761"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e35a9cea-9f87-4e99-85d1-17d1b1f5cb63",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "adac051d-0801-433c-b223-16388d8cf361",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "436"
            },
            {
              "key": "X-Request-Id",
              "value": "141d550d-9593-49cb-9384-c4a5c7a60f07"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              51,
              56,
              101,
              45,
              55,
              100,
              56,
              56,
              45,
              97,
              97,
              51,
              102,
              45,
              54,
              56,
              101,
              49,
              51,
              101,
              57,
              98,
              99,
              54,
              54,
              52,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              57,
              54,
              54,
              56,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              50,
              51,
              55,
              54,
              54,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 436
        },
        "id": "bbb48f65-bfdc-4728-b294-4f22ef4a43f6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f5e9ccbd-0fcf-41a4-87f1-793c31477415",
          "length": 57,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8e70c77c-6ab4-47e3-85be-27672f82741e"
        },
        "item": {
          "id": "78ff8d69-d28c-484d-b97e-eeaf52e39893",
          "name": "21. Create Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d4457cd-c9e5-4fff-9cfa-86c5f583a4b3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Segment\");\n"
                ],
                "_lastExecutionId": "7d68870f-8ce4-4e00-89c8-25850815eeec"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bc52f2b2-417f-4cd3-88ec-adea8ac50886",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "371389a6-842a-4d9d-98b4-a16fbadb468e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "28d4a5c3-9d14-45a4-b1b4-5a768a8da50a"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d1431a2-8a27-41e4-94d3-69898434b22b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6c33979e-5e11-42e2-a276-22ea4a29452a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:01 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "348"
            },
            {
              "key": "X-Request-Id",
              "value": "5de0dcff-d79f-494a-8024-04bb46d65e0a"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              53,
              98,
              50,
              45,
              55,
              52,
              50,
              98,
              45,
              56,
              102,
              97,
              51,
              45,
              50,
              49,
              57,
              48,
              101,
              49,
              53,
              49,
              98,
              49,
              100,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              51,
              57,
              49,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 348
        },
        "id": "78ff8d69-d28c-484d-b97e-eeaf52e39893",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè∑Ô∏è Business Logic: Segment has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9da6f4b5-cf6a-4667-9899-536f343c5c40",
          "length": 57,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "250cb50e-e9e6-4c0c-899b-3d7cf8379a9f"
        },
        "item": {
          "id": "492787a3-1d7f-4026-8c32-8808c5e67c98",
          "name": "22. Get Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6cf30426-cd41-4b40-a6bb-5ec1ad6ca5a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Segment\");\n"
                ],
                "_lastExecutionId": "6fbb52e3-4877-4f3a-8e4d-792267e03a0d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f255e9b1-feb4-4bac-bec2-f676a737c731",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "c73ee65a-0e90-42c5-acd3-a76bc1ba09d5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments",
              "01987cb2-15b2-742b-8fa3-2190e151b1de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "5e9b615e-c705-40d3-bcad-bdf1da6751cb"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1641f947-80a0-402f-ba26-165c8f5539d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "be5750df-11bf-4452-b4a1-76443227c7fa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "345"
            },
            {
              "key": "X-Request-Id",
              "value": "eb2d1d43-dce7-40fa-bf64-542babe5a53c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              53,
              98,
              50,
              45,
              55,
              52,
              50,
              98,
              45,
              56,
              102,
              97,
              51,
              45,
              50,
              49,
              57,
              48,
              101,
              49,
              53,
              49,
              98,
              49,
              100,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 345
        },
        "id": "492787a3-1d7f-4026-8c32-8808c5e67c98",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ceef6060-c73f-423d-81c3-49908a95eb9a",
          "length": 57,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "07350787-6953-412d-a69c-8604407bddc3"
        },
        "item": {
          "id": "3e80f096-f051-4721-82d4-7c56610ae172",
          "name": "23. Update Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "13e16beb-cd8b-4628-8c3e-710d0e1b2941",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Segment\");\n"
                ],
                "_lastExecutionId": "eb08225e-2b34-47f5-b61e-e468e9662c6c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a2a6a24f-c4b5-4f4e-81ad-ddfe6ad03121",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "63642832-5b0c-49af-87ff-b155fef92f05"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments",
              "01987cb2-15b2-742b-8fa3-2190e151b1de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "021fe07f-d0bb-4a0b-b0a3-2f5ddcd07ba3"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "73a9d5c1-0ff3-46b8-b5ed-a4110c0cc6ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "114",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d60a40f6-5604-4953-8204-8da502c383f5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "353"
            },
            {
              "key": "X-Request-Id",
              "value": "70945e97-a6d0-4656-925d-9ebb8771215b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              53,
              98,
              50,
              45,
              55,
              52,
              50,
              98,
              45,
              56,
              102,
              97,
              51,
              45,
              50,
              49,
              57,
              48,
              101,
              49,
              53,
              49,
              98,
              49,
              100,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              55,
              56,
              49,
              53,
              51,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 353
        },
        "id": "3e80f096-f051-4721-82d4-7c56610ae172",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "deb66786-cb1e-4e72-83b7-7ebdbadf5540",
          "length": 57,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c7322412-e21e-4c89-b8b5-e573e51e4ac7"
        },
        "item": {
          "id": "67ec4afd-7e14-4c77-91f2-898fcb936703",
          "name": "24. List Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter segments by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8fd38821-63b2-48bd-b1b9-bbef12eec5c1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Segments_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Segments\");\n"
                ],
                "_lastExecutionId": "049d3ace-4569-4c14-b590-a68a42cd365e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f4304bf1-95ba-47fe-9cf0-696a850ad326",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "253cf0d4-af7f-4628-b95c-e393bd7af296"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ee3131bc-84d3-4cf6-87bb-c61ab56f7cf4"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0271d770-aa4d-446c-ab3b-23e95d0bde25",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7c838db9-9e69-4f8d-bb0c-3d2df267239b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "385"
            },
            {
              "key": "X-Request-Id",
              "value": "64d5d0ed-641e-4c72-9e5d-2add57fdf5c1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              53,
              98,
              50,
              45,
              55,
              52,
              50,
              98,
              45,
              56,
              102,
              97,
              51,
              45,
              50,
              49,
              57,
              48,
              101,
              49,
              53,
              49,
              98,
              49,
              100,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              53,
              49,
              51,
              50,
              51,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              50,
              46,
              55,
              56,
              49,
              53,
              51,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 385
        },
        "id": "67ec4afd-7e14-4c77-91f2-898fcb936703",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e66c87b8-b488-402f-8ed4-ac43cdf6531e",
          "length": 57,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c73456ed-7100-4452-adcb-81e4208d4f4b"
        },
        "item": {
          "id": "e5d4e928-df3c-4eac-ba81-d19f8b2b8024",
          "name": "25. Count Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2713c79a-4f78-46bc-a8d8-04e10364c0a7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Organizations: /v1/organizations/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Organizations: /v1/organizations/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Organizations_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Organizations\");\n"
                ],
                "_lastExecutionId": "e0dee76d-44f7-46a8-adf1-1ed5398e8052"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cdc3b84c-c602-47c0-a60b-02cd1a130768",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "0ce22744-eb98-40f0-a024-90b6d06262a6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d5088396-4bb4-4941-a0c5-6b8ce9709e09"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01f7d15c-14a5-4ba7-967f-1cdbc651327d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "554e006f-b3ca-4e9d-a635-e792726b35be",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "c8393a03-6f68-4325-85b3-85c30efc9125"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "e5d4e928-df3c-4eac-ba81-d19f8b2b8024",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba09267c-8692-498f-8bfb-f732f11849ef",
          "length": 57,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c7cf594a-c954-42c4-993d-ae740c75f076"
        },
        "item": {
          "id": "36fca075-76f3-4ff0-b600-5bce79cc68b5",
          "name": "26. Count Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1fa852c4-dcc6-4c8c-8d62-828c3f3067ef",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Ledgers: /v1/organizations/{organizationId}/ledgers/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Ledgers: /v1/organizations/{organizationId}/ledgers/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Ledgers_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Ledgers\");\n"
                ],
                "_lastExecutionId": "7c6a5392-379f-44b4-ac13-6cf00c7bed05"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f58989df-71ed-40de-95af-def041ad21f6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "7450d999-5adc-4910-9049-f2511ee835b5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c0b75862-33b6-4e18-9235-0fd80c77b36d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f494ac8-fa19-4ae9-a4ed-7a2a08aa6d0e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "f153b75a-faf7-4a0e-9468-3c9476a074de",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "48183268-b362-4d7e-838a-3bdcf8dd05f2"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "36fca075-76f3-4ff0-b600-5bce79cc68b5",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "673c1d22-6356-4f3d-a258-9020e5ff5cae",
          "length": 57,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0175584d-21cf-4248-b875-2cb4a1684cd8"
        },
        "item": {
          "id": "161c796b-02ff-4c32-9741-b00f7a55f526",
          "name": "27. Count Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cffa9937-b9e8-4386-a93c-e6907a43f906",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Accounts: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Accounts_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Accounts\");\n"
                ],
                "_lastExecutionId": "0f69a4d9-7944-4b46-adf9-7c7cdfefa7cd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5c105bf4-2598-4f83-b493-1ed7a5e07ef0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "407dedaa-0b80-4949-8ff3-b8bd9224443d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d6f0c2f2-756e-49b7-915e-773449bc8d38"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c42ad992-5262-4102-bdbc-47ed95f353f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "304f8872-112c-48a9-ba0e-2c7c43f87f5f",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "178e9c8c-0116-46f0-a663-2c797481d226"
            },
            {
              "key": "X-Total-Count",
              "value": "2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "161c796b-02ff-4c32-9741-b00f7a55f526",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd7e45a2-cf4f-4687-b15a-52dcf95c02d0",
          "length": 57,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "04031719-d4e1-4173-bb4f-66f5e085a884"
        },
        "item": {
          "id": "6aee505a-825b-4662-9707-fe6d26b1966a",
          "name": "28. Count Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "79c63f57-97b3-4f1c-9a78-866c83e8b48c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Assets: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Assets_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Assets\");\n"
                ],
                "_lastExecutionId": "10d4e0a2-14c3-48b1-a5a4-e7ba80afa94c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ff12bef5-06d0-42e2-a8fe-c4bd8551dfc9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "569db178-a4fa-4452-9444-718c9c816ce4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "eba33d2d-dace-4d6d-9c4b-eb608e5f476c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ddc144d8-3004-4c3c-9501-4c7a39309b41",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "f771a846-e4de-4066-82c4-099db3d784d2",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "45a54e37-4375-4fea-8a56-34f281139f7c"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "6aee505a-825b-4662-9707-fe6d26b1966a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e8cb5c91-44f7-4897-acfa-e20a1fb488ba",
          "length": 57,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "54ec1caa-4afe-47d8-a856-361568f02a6d"
        },
        "item": {
          "id": "ecc18558-a32e-46a4-b46a-c4ee6791580c",
          "name": "29. Count Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5e4c2af9-4129-40ff-910f-8c5aa1008089",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Portfolios: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Portfolios_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Portfolios\");\n"
                ],
                "_lastExecutionId": "9cb06845-2e9f-4a7d-9f2c-76823ee3c7c5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4f20bd7-891f-45ab-a732-fd423beb7302",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "7e93d6f1-5fd3-4f54-821b-9342c34e9c1c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "73e780d5-b2eb-4810-9973-949e454d6c49"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e11651da-75e4-4d29-b1d0-ac246ef3ac7e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "2588e4c2-d2e2-43ae-b49d-86ab2bf5391d",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:02 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "e4d79af8-918c-4fb0-988f-f742434fd593"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "ecc18558-a32e-46a4-b46a-c4ee6791580c",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3389914f-e79a-4d4d-89a4-75f88999f0aa",
          "length": 57,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "eb6c949c-7e17-4802-a721-cd38ef16f36f"
        },
        "item": {
          "id": "e91b59c8-acf8-453a-a918-9bcf8d1e8e30",
          "name": "30. Count Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6b8c6027-474b-4d27-853c-7d49f688d07f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Count Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/metrics/count =====\nconsole.log(\"‚öôÔ∏è Setting up Step Count Segments: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/metrics/count\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Count Segments_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Count Segments\");\n"
                ],
                "_lastExecutionId": "a6e2a0a8-55bd-4921-b51d-8743d77eaf97"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e5a97d11-a29c-46d9-a41d-32902573f14a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "ce76bc8b-1d1b-4c3e-b235-74994452cd7d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c797e28b-5c2e-46a9-9720-aa13528bd6c4"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be6a1966-5fc0-46d0-8d3b-98766d8506b1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "93bd5dbb-7f2b-4f0a-89d9-ffab31a79309",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "448344f3-0249-42d1-bf11-10bb58fa7f7f"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "e91b59c8-acf8-453a-a918-9bcf8d1e8e30",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cad0de2a-bd24-4c6c-a08d-ea3e218ebaee",
          "length": 57,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd5909b4-3163-4e80-a163-c054682ca272"
        },
        "item": {
          "id": "c76dbce2-e8d0-4a0d-b452-1753fce5dffe",
          "name": "31. Get Account by Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a777d895-22d7-4434-949f-c08f84ef007c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Account by Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account by Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account by Alias_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account by Alias\");\n"
                ],
                "_lastExecutionId": "abc4a34a-2bab-4fef-844b-10713b81d1aa"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3da96c7c-2001-49b3-b515-f27755fc27b7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "6149ed9a-7fc8-48af-9137-8d8e4086c87b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "alias",
              "@treasury_checking"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f56890c5-854a-41de-a3aa-bf48efcac9f2"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "59777d84-ac40-474d-889c-25e102f26ca4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6c89cd6d-9956-4cb8-9e36-a321efc990ce",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "492"
            },
            {
              "key": "X-Request-Id",
              "value": "40f22707-4e5d-48e3-960f-856b6d521618"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              49,
              55,
              48,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              54,
              57,
              55,
              56,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 492
        },
        "id": "c76dbce2-e8d0-4a0d-b452-1753fce5dffe",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "51431c40-192e-4106-aa47-ecca15aa3fce",
          "length": 57,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ed9a6d9f-37bc-42be-ae25-934239a71d78"
        },
        "item": {
          "id": "4757c4b4-54c9-4ed3-9718-0683855e4adc",
          "name": "32. Get Account by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account External Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "baf8e25d-e357-4482-9582-519520375980",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Account by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Account by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Account by External Code_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Account by External Code\");\n"
                ],
                "_lastExecutionId": "07086082-1c28-4c6c-8bbc-2ab5613baccf"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b40164ae-c623-4306-bea7-a3072697f938",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "63f93245-568a-47f4-a9cd-23c1d10c540d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "external",
              "USD"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "74ea0cea-0160-45b9-99b3-4e5e3200782d"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d879ceec-9659-4c42-8528-30d1cba9acb8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9efdb446-321c-4879-ab59-d108452bc58b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "493"
            },
            {
              "key": "X-Request-Id",
              "value": "f3d54159-628c-4259-96e8-a29a6e7547f3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              50,
              56,
              51,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              50,
              56,
              51,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 493
        },
        "id": "4757c4b4-54c9-4ed3-9718-0683855e4adc",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b0757a04-036b-48a0-be7c-87214795b157",
          "length": 57,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "25c3fcf4-dfdf-4a0d-aa9f-e14cda38662d"
        },
        "item": {
          "id": "c4d45bf2-f3e2-4838-ba03-652e2da2ef80",
          "name": "33. Create Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "619c4b1f-22c3-4b18-a956-d38a6afd4d7d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction\");\n"
                ],
                "_lastExecutionId": "602d7fc8-f65b-48b4-b4d5-3849a1bd0698"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d3637705-7146-46a8-b9f7-488a95630b59",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "529ea9c6-04ee-4af1-a8e6-eb672f7abf66"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "96d6b8be-0d7c-4c44-9ec7-cc6487b54f8d"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "77acf0df-7ad6-4a6d-ae33-acce8879cf9c"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c065521-a2e2-4a07-a42a-4fb47d4e83b4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "980",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d1534a2a-9e0d-4b45-a892-995acd559a65",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2069"
            },
            {
              "key": "X-Request-Id",
              "value": "e0cbae3a-9de2-44e6-b7b4-71168ee65fa6"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              49,
              54,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              50,
              57,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              97,
              97,
              45,
              57,
              51,
              48,
              50,
              45,
              54,
              97,
              57,
              102,
              99,
              99,
              98,
              54,
              98,
              99,
              99,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              56,
              55,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              57,
              53,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              50,
              57,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              51,
              55,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 23,
          "responseSize": 2069
        },
        "id": "c4d45bf2-f3e2-4838-ba03-652e2da2ef80",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "31dd519a-1818-4412-aa50-41a67b08cb0d",
          "length": 57,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c57138db-667c-44c8-b212-a7aa23f36c92"
        },
        "item": {
          "id": "eb1639d5-8de3-4868-acba-be32587479e8",
          "name": "34. Create Transaction (Inflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "inflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fb4b8be3-4d67-440b-90b3-5dab7b9b50b4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Transaction (Inflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/inflow =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction (Inflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/inflow\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction (Inflow)_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction (Inflow)\");\n"
                ],
                "_lastExecutionId": "332d8fc5-4aea-4e96-991a-5a1bcc195186"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2101bfa2-cedb-495a-87e7-ef7aa7eef3e0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "d0a35b96-0c46-41a9-80c0-4a798eeff6da"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "inflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "bcfe0c42-da9a-4b49-9bd0-2ce9487f1b11"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25b42a70-e47d-4cf6-a4c3-0941b254aac7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "610",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "630345ae-5946-4f36-ab5b-ea0465e72e3c",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2040"
            },
            {
              "key": "X-Request-Id",
              "value": "b7e1ec41-1f8e-492d-9819-23615c278eb1"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              49,
              56,
              53,
              51,
              55,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              49,
              56,
              53,
              53,
              48,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              51,
              51,
              102,
              45,
              57,
              53,
              51,
              102,
              45,
              56,
              57,
              48,
              55,
              100,
              97,
              99,
              102,
              53,
              51,
              56,
              55,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              49,
              51,
              52,
              53,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              49,
              51,
              53,
              56,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              51,
              56,
              49,
              45,
              56,
              54,
              57,
              51,
              45,
              57,
              97,
              52,
              99,
              52,
              56,
              98,
              97,
              97,
              97,
              48,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              48,
              50,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              48,
              51,
              51,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 2040
        },
        "id": "eb1639d5-8de3-4868-acba-be32587479e8",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "20cf0672-917d-46c5-8de3-3bbbbf1d2f15",
          "length": 57,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1f6286c8-b5dc-4d78-9522-f511f13ae818"
        },
        "item": {
          "id": "c8e75ed4-3af2-4e79-8f47-c6a1fa9c44cb",
          "name": "35. Create Transaction (Outflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "outflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a4917af3-857e-462e-b1b7-fbbf6439ef7c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Create Transaction (Outflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/outflow =====\nconsole.log(\"‚öôÔ∏è Setting up Step Create Transaction (Outflow): /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/outflow\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Create Transaction (Outflow)_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Create Transaction (Outflow)\");\n"
                ],
                "_lastExecutionId": "eaaa1102-d7ec-4025-87ed-5be42a369773"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "924a17fa-c0fd-46e8-9195-3bb84a0fe879",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "f19a42c1-2dcf-4f61-922e-249b5c9ed8ba"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "outflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a17bf0fa-7cc7-4f78-916b-e73e123870da"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b0b80900-bf8d-4a17-9168-bf0a5c1941de",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "608",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b0e0943c-a40b-4ffa-8255-f3cb85025496",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2040"
            },
            {
              "key": "X-Request-Id",
              "value": "7af50b98-4e40-45e5-a2c0-761f746da583"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              48,
              48,
              48,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              48,
              48,
              49,
              50,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              98,
              51,
              57,
              45,
              57,
              100,
              100,
              57,
              45,
              55,
              49,
              98,
              100,
              98,
              48,
              102,
              57,
              53,
              101,
              98,
              54,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              51,
              54,
              52,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              51,
              54,
              53,
              48,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              98,
              98,
              54,
              45,
              57,
              49,
              51,
              102,
              45,
              102,
              99,
              99,
              98,
              52,
              52,
              98,
              101,
              99,
              48,
              102,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              49,
              54,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              50,
              53,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 2040
        },
        "id": "c8e75ed4-3af2-4e79-8f47-c6a1fa9c44cb",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "12f38685-1d3c-4f0e-b22d-276f19a416c2",
          "length": 57,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "68be6deb-2bee-4b32-8e46-28c1f45e72c5"
        },
        "item": {
          "id": "bd1a2d06-c675-4487-8b06-d7fc82308c4e",
          "name": "36. Get Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "16821333-d8e9-4969-b8d1-ee8ee0053d29",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Transaction\");\n"
                ],
                "_lastExecutionId": "9475496c-b127-43de-be70-fa415d610315"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e73cd241-f54e-45b3-bf65-9097d53f4f75",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "fc753455-5ad1-443f-a817-af6439ea11fa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "01987cb2-1be0-7139-b30d-30da9a3928d3"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4dd8caec-1067-40b1-b30e-b3b0b9bf0776"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dff0647c-1e87-482a-a73e-02a752168e9d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a0c4ecc3-e504-486a-91cb-4c59bde91d2a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:03 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2053"
            },
            {
              "key": "X-Request-Id",
              "value": "5e1d521d-4926-412e-9497-e95d2dc9d4c8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              97,
              97,
              45,
              57,
              51,
              48,
              50,
              45,
              54,
              97,
              57,
              102,
              99,
              99,
              98,
              54,
              98,
              99,
              99,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 2053
        },
        "id": "bd1a2d06-c675-4487-8b06-d7fc82308c4e",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a68d5f32-472f-47cb-8d6d-358e4f518fe3",
          "length": 57,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "59d88e52-12dd-4a3b-8944-bc8b4ef8a7cf"
        },
        "item": {
          "id": "8df706fe-3e85-494a-a0b0-15e33729299d",
          "name": "37. Update Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "15e2328d-dc7a-4ede-b041-bc37965e8b8f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Transaction: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Transaction_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Transaction\");\n"
                ],
                "_lastExecutionId": "88778d74-5655-4666-acda-c090ebd9a2fa"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f922e23c-5e0b-4d99-b4d0-2098d2263ffa",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "33c42fc5-ae20-4a45-91b6-c36c36e202ca"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "01987cb2-1be0-7139-b30d-30da9a3928d3"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b8e0bb78-015a-4fef-a7db-2daef6c20b93"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3a3458d3-2b3a-41ca-bc88-5d456c625bed",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "86",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9ac422ca-e211-4419-a886-282b09234b7b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "530"
            },
            {
              "key": "X-Request-Id",
              "value": "3c2f38fa-c797-407a-bec0-21f5d36d1c4e"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              54,
              53,
              53,
              50,
              56,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 530
        },
        "id": "8df706fe-3e85-494a-a0b0-15e33729299d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7df4d449-b42e-4402-9010-d1854ba63aa9",
          "length": 57,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "79da7829-4ae6-4747-b613-9bdd5412ca7f"
        },
        "item": {
          "id": "02f24a87-2fde-4090-ac6d-07014de40cd0",
          "name": "38. List Transactions",
          "request": {
            "description": {
              "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cbb4a84f-8b91-48b5-9772-c2c1d4ad39e4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Transactions: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Transactions: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Transactions_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Transactions\");\n"
                ],
                "_lastExecutionId": "2648f124-f9e8-478e-963b-58c5b351bf56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e04b9c75-3ec1-48e3-92d9-9054748043c9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "3aa1f3c5-2c51-4ec5-afa2-4c43ad7241b8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "bb6e9d30-f961-4e6c-b0b4-ecf1f53e0950"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9cb7f514-f74d-413d-b751-785474fe14b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "07ab48bc-3cc9-44d0-83f4-5dcf70495956",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6080"
            },
            {
              "key": "X-Request-Id",
              "value": "a91113ee-84ba-4fd3-b931-5008573d050e"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              49,
              56,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              49,
              56,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              51,
              51,
              102,
              45,
              57,
              53,
              51,
              102,
              45,
              56,
              57,
              48,
              55,
              100,
              97,
              99,
              102,
              53,
              51,
              56,
              55,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              49,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              49,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              51,
              56,
              49,
              45,
              56,
              54,
              57,
              51,
              45,
              57,
              97,
              52,
              99,
              52,
              56,
              98,
              97,
              97,
              97,
              48,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              54,
              53,
              53,
              50,
              56,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              97,
              97,
              45,
              57,
              51,
              48,
              50,
              45,
              54,
              97,
              57,
              102,
              99,
              99,
              98,
              54,
              98,
              99,
              99,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              48,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              98,
              51,
              57,
              45,
              57,
              100,
              100,
              57,
              45,
              55,
              49,
              98,
              100,
              98,
              48,
              102,
              57,
              53,
              101,
              98,
              54,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              51,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              51,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              98,
              98,
              54,
              45,
              57,
              49,
              51,
              102,
              45,
              102,
              99,
              99,
              98,
              52,
              52,
              98,
              101,
              99,
              48,
              102,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 6080
        },
        "id": "02f24a87-2fde-4090-ac6d-07014de40cd0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b6d793a-3f58-4cd8-ba2e-e5faf40808d1",
          "length": 57,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0a9432b3-4494-410b-adce-d2e444e16fa5"
        },
        "item": {
          "id": "20ff6e4d-4bc5-42a7-ae21-c04ae76d7489",
          "name": "39. Get Operation",
          "request": {
            "description": {
              "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3993622e-9fd0-41a7-b205-eabcb16d58a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Operation: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations/{operationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Operation: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations/{operationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Operation_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Operation\");\n"
                ],
                "_lastExecutionId": "f9996c54-3d2c-4501-9921-40e2c8dd1ab6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "807c4e92-5064-49c4-93b2-4ca6e4c1500c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "bfaa2704-9e94-4ff8-97b9-953805448bb2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1",
              "operations",
              "01987cb2-1be0-71e0-be98-911bad540142"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "08ffa852-f3d2-4b80-a568-e06e785e228f"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b359ba31-016d-491f-a1a5-1e2477a43492",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "43ec37d6-a6ae-4bd6-b5be-53a7713162fa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "751"
            },
            {
              "key": "X-Request-Id",
              "value": "36b0b667-ef13-4e9e-8aba-d0dfd81e2faf"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 751
        },
        "id": "20ff6e4d-4bc5-42a7-ae21-c04ae76d7489",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ae69c22-983b-4693-8c37-944a23abf222",
          "length": 57,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "047580bc-701c-4a49-b42e-08648af17f02"
        },
        "item": {
          "id": "2edac4f2-6d84-4ae9-b313-cdd28e3366ee",
          "name": "40. List Operations by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "DEBIT, CREDIT",
                    "type": "text/plain"
                  },
                  "key": "type",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7a3d360b-9c68-43d3-91c6-8ae02e0bb6f3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Operations by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Operations by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/operations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Operations by Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Operations by Account\");\n"
                ],
                "_lastExecutionId": "238553c5-414a-457b-8fcd-530ba5850bbd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "215709a6-8076-41fa-a5b4-fbd6c1ba81fc",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "2c5f7ceb-5cda-4dc1-8ea3-2c05d7fafb8c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1",
              "operations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1df90e81-e730-4b20-a9ee-916a3bee8172"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8dba2cc5-ed46-4c2e-8af3-b7e6b8b0c851",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "16464060-bba7-4b1b-bee7-8c7129061327",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2279"
            },
            {
              "key": "X-Request-Id",
              "value": "482d0879-42a9-4360-96cc-d02503620562"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              98,
              98,
              54,
              45,
              57,
              49,
              51,
              102,
              45,
              102,
              99,
              99,
              98,
              52,
              52,
              98,
              101,
              99,
              48,
              102,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              102,
              97,
              45,
              55,
              97,
              97,
              97,
              45,
              98,
              53,
              97,
              56,
              45,
              101,
              102,
              98,
              50,
              49,
              51,
              54,
              57,
              100,
              98,
              52,
              102,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              56,
              55,
              54,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              51,
              56,
              49,
              45,
              56,
              54,
              57,
              51,
              45,
              57,
              97,
              52,
              99,
              52,
              56,
              98,
              97,
              97,
              97,
              48,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              99,
              54,
              102,
              45,
              55,
              50,
              100,
              49,
              45,
              57,
              57,
              101,
              53,
              45,
              99,
              52,
              57,
              57,
              102,
              98,
              98,
              100,
              51,
              102,
              49,
              99,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              50,
              51,
              57,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 2279
        },
        "id": "2edac4f2-6d84-4ae9-b313-cdd28e3366ee",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "03f090a1-67f5-4641-bde1-dc8e9cdc43ca",
          "length": 57,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0902e219-7621-4c56-9ec3-b636d11905ce"
        },
        "item": {
          "id": "7af47b6d-7bb6-4054-afdc-75f0cc25a9ef",
          "name": "41. Update Operation Metadata",
          "request": {
            "description": {
              "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2ca6546c-de4a-4931-b2ab-de01e5c5bcde",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Operation Metadata: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}/operations/{operationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Operation Metadata: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/{transactionId}/operations/{operationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Operation Metadata_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Operation Metadata\");\n"
                ],
                "_lastExecutionId": "be581dfe-b75e-4a14-b9dd-3705cedfafbd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e0ceb6d0-0bbd-4bb8-978a-ac71ddd28eb6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "32a6099c-f3a9-4393-b210-18263095631e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "01987cb2-1be0-7139-b30d-30da9a3928d3",
              "operations",
              "01987cb2-1be0-71e0-be98-911bad540142"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ec641a65-555a-4ac1-aca3-753540ce6d30"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0102d940-9698-463f-ac48-02f1ebf331a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1585d1fc-8cf4-49c1-bfdd-544d149be877",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "753"
            },
            {
              "key": "X-Request-Id",
              "value": "c06063eb-6fd4-4074-a999-f2c97acec0d7"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              101,
              48,
              45,
              98,
              101,
              57,
              56,
              45,
              57,
              49,
              49,
              98,
              97,
              100,
              53,
              52,
              48,
              49,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              98,
              101,
              48,
              45,
              55,
              49,
              51,
              57,
              45,
              98,
              51,
              48,
              100,
              45,
              51,
              48,
              100,
              97,
              57,
              97,
              51,
              57,
              50,
              56,
              100,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              100,
              105,
              116,
              32,
              99,
              97,
              114,
              100,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              48,
              57,
              54,
              49,
              50,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              53,
              46,
              49,
              56,
              51,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 753
        },
        "id": "7af47b6d-7bb6-4054-afdc-75f0cc25a9ef",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc0fc758-a1b5-49a4-91d5-3625d7a11cf9",
          "length": 57,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5a21ba3d-986b-4634-b7e6-c67ee1383823"
        },
        "item": {
          "id": "2951554b-c795-4de5-8561-4daf245fdf2b",
          "name": "42. Get Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "97b30751-58d9-400a-8609-27492abccffd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Get Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Get Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Get Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Get Balance\");\n"
                ],
                "_lastExecutionId": "c4169de8-2544-4e80-8de7-933dce270541"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bafe89d4-5965-4d12-9cf7-338c5211d6db",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "5cfe6792-a720-4a36-a210-d8808f308f32"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "balances",
              "01987cb2-1184-7e7e-8f45-38f9d47b54bc"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "be0de18f-11b4-45e8-b5c9-d13dbf3b63b8"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3497a041-2ac4-4063-b9d4-3da6fc0a0e0e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bb0b8111-84a1-430b-8a0e-3c7e3430ddcb",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "458"
            },
            {
              "key": "X-Request-Id",
              "value": "5af55ac8-b010-4e6f-8461-356de1161006"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              57,
              54,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 458
        },
        "id": "2951554b-c795-4de5-8561-4daf245fdf2b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d131ce9-852d-4bcf-90ec-75c49f2b91da",
          "length": 57,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5fac5b8a-4116-42cf-9da5-7b18dd126729"
        },
        "item": {
          "id": "f84ac438-6fea-44d1-82a5-28d06013d0d5",
          "name": "43. List Balances by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "05d59f4f-dc1b-4b12-844e-7545059ea1e8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Balances by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by Account\");\n"
                ],
                "_lastExecutionId": "bea37be4-8514-4e71-acb6-31ea76219a1b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0f113eba-14eb-4d2c-b357-874ef80704a3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "fa4771ee-a056-4835-b821-2e53678403f2"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3cc236c7-e3b1-46c9-b8ff-4a4bdb5c6690"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c739c9a2-91d9-432c-96b6-dde1b687ac4f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "43fbbd8f-64e6-4b1b-a32c-9a33a315c4cf",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "481"
            },
            {
              "key": "X-Request-Id",
              "value": "c12a262b-6541-499c-b911-35f3266f1e43"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              57,
              54,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 481
        },
        "id": "f84ac438-6fea-44d1-82a5-28d06013d0d5",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5c8a74f3-f13c-44c9-8bcc-a042225ba0bd",
          "length": 57,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ffddf704-e5fe-4bcd-a2cf-90bb6685d641"
        },
        "item": {
          "id": "54464db6-47bc-4741-bb44-356f059d6634",
          "name": "44. List Balances by Account Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0e5be257-186c-468c-bae6-7dd138be13dd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Balances by Account Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by Account Alias: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by Account Alias_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by Account Alias\");\n"
                ],
                "_lastExecutionId": "1f863374-5ec9-450d-8517-a11d125badd9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "675433e8-817a-498d-8fb0-49024922f9de",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "a53c7ce1-68e0-4ad2-8aa2-a41f07ab328d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1ab30a24-5a5e-47da-a96d-eca50df6a235"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "107d08e2-a741-4441-b5ec-dc466f3b2921",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dce94c3b-94b5-49bc-b55e-a27ef9af9c06",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "481"
            },
            {
              "key": "X-Request-Id",
              "value": "2f280783-ae2d-44c8-ba18-de2e2a92163b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              57,
              54,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 481
        },
        "id": "54464db6-47bc-4741-bb44-356f059d6634",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d8c2928-2f25-489f-8e06-6078d834f03d",
          "length": 57,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "01e4d635-70ad-4120-a9b4-889ee4d860c8"
        },
        "item": {
          "id": "159f9661-11ff-40fb-9a4b-8f6459af95a0",
          "name": "45. List Balances by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f023a7de-89e4-4668-8da4-77b1ebd3a081",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List Balances by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List Balances by External Code: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/external/{code}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List Balances by External Code_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List Balances by External Code\");\n"
                ],
                "_lastExecutionId": "37af67b9-de1e-41fe-967a-7caeb5ee3718"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3983a7d1-d854-443a-8616-bb789bd2509e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "dd48a6a5-6f96-4c27-a916-5de48704a833"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "external",
              "USD",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "999ab226-532a-4e9b-8f3b-94df91ec6621"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a6e0e859-ff40-4790-a9dc-63a6c33eb6db",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3b129115-fcbe-4273-9afb-cdcc43968dff",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "478"
            },
            {
              "key": "X-Request-Id",
              "value": "21deeb9c-af05-4086-8851-296ff1b0120b"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              53,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              52,
              52,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 478
        },
        "id": "159f9661-11ff-40fb-9a4b-8f6459af95a0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "78e0e272-7c73-4ca7-ba44-9c316bbbb468",
          "length": 57,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "18964c22-cefc-4b02-9983-c0f672c3a626"
        },
        "item": {
          "id": "0dc00a70-b95b-4baf-925b-c66d333f3f03",
          "name": "46. Update Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cbfe4ea6-c571-4505-b104-eaf6621fa427",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Update Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Update Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Update Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Update Balance\");\n"
                ],
                "_lastExecutionId": "ae80e37d-f721-4e2c-a4fb-016f52b239e4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "65d20787-902f-4151-9ccc-92934343c452",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "df51fdb5-05c3-4fe1-89e3-ee3d445efc25"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "balances",
              "01987cb2-1184-7e7e-8f45-38f9d47b54bc"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "828c98a1-b3e0-4373-ac4a-5af8e5e421df"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "51b4b466-a3d0-4d4a-a8f4-a08e3209632b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c9649f6f-ab36-41ee-805b-9d48ef8ca58b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "458"
            },
            {
              "key": "X-Request-Id",
              "value": "d29d7912-0b88-4ebb-a3ff-5ab0784a8723"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              57,
              54,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 458
        },
        "id": "0dc00a70-b95b-4baf-925b-c66d333f3f03",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd9ab538-0408-4a7a-8427-7610d5d19264",
          "length": 57,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "87e84275-ee32-49b0-9274-43c8819d45d0"
        },
        "item": {
          "id": "dc6451d9-1881-4bea-83a4-21bbc35f39f5",
          "name": "47. List All Balances",
          "request": {
            "description": {
              "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b33588a1-ff97-4a61-8762-621faf6584c7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP List All Balances: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step List All Balances: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_List All Balances_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step List All Balances\");\n"
                ],
                "_lastExecutionId": "2409c74c-c2b9-43f7-9ed8-8641937674e4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "df9111d3-bba5-40a0-8403-5e9dd1bf81e4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "7dc34722-4b4a-4ec1-8dc4-0058b5026db7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "587b3129-b9ef-44e5-a25d-ad1ea4ace166"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e00cdde-3f98-4b1c-89d5-ba04b046ccf5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a7557cd4-485e-4926-8d7e-2d5d6ad3794c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "937"
            },
            {
              "key": "X-Request-Id",
              "value": "119b8449-610b-4d10-8cb3-b3b889e07020"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              53,
              46,
              56,
              52,
              57,
              55,
              54,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              48,
              46,
              57,
              49,
              53,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              52,
              46,
              51,
              55,
              57,
              52,
              52,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 937
        },
        "id": "dc6451d9-1881-4bea-83a4-21bbc35f39f5",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9bd75da8-9a83-4694-a224-974c26841205",
          "length": 57,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c91bdb82-00c7-4424-a3e4-deedbfd92b78"
        },
        "item": {
          "id": "db488377-ecce-43b4-ba9c-7cbb0bd92b65",
          "name": "48. Check Account Balance Before Zeroing",
          "request": {
            "description": {
              "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a962cc3-6446-448f-8b54-ef127c70cc45",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Check Account Balance Before Zeroing: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step Check Account Balance Before Zeroing: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/alias/{alias}/balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Check Account Balance Before Zeroing_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Check Account Balance Before Zeroing\");\n"
                ],
                "_lastExecutionId": "41c19e9a-9772-4d2e-b357-4548a844fef7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ab50ca75-ea22-4afc-8ce4-a84f5ba43f38",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n                        if (responseJson.items && responseJson.items.length > 0) {\n                        // Get the first balance (USD balance for the account)\n                        const balance = responseJson.items[0];\n                        if (balance.available !== undefined) {\n                            const balanceAmount = Math.abs(balance.available); // Use absolute value of available balance\n                            \n                            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n                            \n                            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n                            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n                            console.log(\"üìã Balance object:\", JSON.stringify(balance, null, 2));\n                        } else {\n                            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n                            console.warn(\"‚ö†Ô∏è Balance object structure:\", JSON.stringify(balance, null, 2));\n                            // Set default values to prevent failures\n                            pm.environment.set(\"currentBalanceAmount\", 0);\n                        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        // Set default values to prevent failures\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                ],
                "_lastExecutionId": "6e9962df-57d2-4609-abf1-4f260122d80f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ca5e1f4e-8537-4e7d-9f32-b26af5009cb6"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "556c3715-bfc4-4655-8b25-69d638ace9c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f5003e92-2013-4186-ac56-30c37fdfb659",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "481"
            },
            {
              "key": "X-Request-Id",
              "value": "cf22a685-3887-421b-9c9b-2b45118e6062"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              49,
              46,
              52,
              52,
              52,
              57,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              53,
              46,
              56,
              52,
              57,
              55,
              54,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 481
        },
        "id": "db488377-ecce-43b4-ba9c-7cbb0bd92b65",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "803a89c2-9692-49bc-ad7d-11d8f40be753",
          "length": 57,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0792ae85-fe44-4660-9bfd-2880cccf4fd0"
        },
        "item": {
          "id": "b7b2518a-3d1a-45c3-863b-774fc18b496a",
          "name": "49. Zero Out Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ad2874ad-a614-4f3a-a520-50163ff5d8c5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Zero Out Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json =====\nconsole.log(\"‚öôÔ∏è Setting up Step Zero Out Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/transactions/json\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Zero Out Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Zero Out Balance\");\n"
                ],
                "_lastExecutionId": "cfbe92e9-073f-4a13-9a03-c9a219ebe26c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6197838e-4df2-4063-b9c4-792f9fa1dd16",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "245d1e5b-122d-426e-acc6-b0abecd1c545"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "59b139c6-206f-4c0c-a938-9e748169471c"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "4a7c4b23-9adf-4047-92fc-380eb6f08570"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1bea2da-1fa0-474f-84d9-920bb1a61682",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1145",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b943b25c-9c7d-417a-b763-655fa0b26c1a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2220"
            },
            {
              "key": "X-Request-Id",
              "value": "c972c077-5e30-4827-91dd-6d03c0f36020"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              50,
              52,
              52,
              99,
              45,
              55,
              57,
              52,
              49,
              45,
              56,
              99,
              53,
              49,
              45,
              50,
              49,
              101,
              100,
              56,
              100,
              97,
              55,
              54,
              51,
              101,
              97,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              118,
              101,
              114,
              115,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              122,
              101,
              114,
              111,
              32,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              117,
              97,
              108,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              54,
              48,
              55,
              56,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              54,
              48,
              55,
              57,
              49,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              34,
              58,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              95,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              95,
              115,
              116,
              101,
              112,
              34,
              58,
              34,
              52,
              56,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              50,
              52,
              52,
              99,
              45,
              55,
              98,
              102,
              49,
              45,
              57,
              97,
              50,
              56,
              45,
              97,
              98,
              98,
              49,
              56,
              55,
              52,
              100,
              100,
              48,
              55,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              50,
              52,
              52,
              99,
              45,
              55,
              57,
              52,
              49,
              45,
              56,
              99,
              53,
              49,
              45,
              50,
              49,
              101,
              100,
              56,
              100,
              97,
              55,
              54,
              51,
              101,
              97,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              48,
              45,
              55,
              99,
              97,
              99,
              45,
              98,
              97,
              52,
              98,
              45,
              52,
              55,
              48,
              49,
              55,
              98,
              100,
              100,
              97,
              50,
              56,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              102,
              55,
              51,
              45,
              55,
              50,
              98,
              102,
              45,
              57,
              102,
              55,
              51,
              45,
              98,
              56,
              56,
              48,
              54,
              100,
              51,
              97,
              54,
              51,
              55,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              55,
              56,
              56,
              55,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              55,
              56,
              56,
              56,
              51,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              50,
              52,
              52,
              99,
              45,
              55,
              99,
              100,
              56,
              45,
              98,
              54,
              57,
              51,
              45,
              102,
              99,
              54,
              56,
              97,
              101,
              101,
              51,
              51,
              49,
              98,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              50,
              52,
              52,
              99,
              45,
              55,
              57,
              52,
              49,
              45,
              56,
              99,
              53,
              49,
              45,
              50,
              49,
              101,
              100,
              56,
              100,
              97,
              55,
              54,
              51,
              101,
              97,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              49,
              45,
              55,
              56,
              97,
              56,
              45,
              56,
              49,
              51,
              99,
              45,
              54,
              102,
              57,
              52,
              57,
              50,
              55,
              99,
              100,
              97,
              98,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              49,
              49,
              56,
              52,
              45,
              55,
              101,
              55,
              101,
              45,
              56,
              102,
              52,
              53,
              45,
              51,
              56,
              102,
              57,
              100,
              52,
              55,
              98,
              53,
              52,
              98,
              99,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              98,
              50,
              100,
              45,
              55,
              101,
              99,
              99,
              45,
              57,
              97,
              53,
              52,
              45,
              97,
              99,
              48,
              50,
              49,
              97,
              54,
              99,
              50,
              97,
              50,
              51,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              56,
              55,
              99,
              98,
              50,
              45,
              48,
              100,
              52,
              97,
              45,
              55,
              50,
              52,
              55,
              45,
              98,
              97,
              101,
              54,
              45,
              55,
              98,
              51,
              99,
              101,
              98,
              101,
              56,
              51,
              53,
              52,
              100,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              56,
              52,
              50,
              54,
              50,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              54,
              84,
              48,
              48,
              58,
              48,
              53,
              58,
              48,
              54,
              46,
              50,
              53,
              50,
              56,
              52,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              98,
              105,
              116,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 2220
        },
        "id": "b7b2518a-3d1a-45c3-863b-774fc18b496a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ada2521b-11ea-4dd6-8533-9bc743f4c926",
          "length": 57,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6b411bf0-743c-43ff-90d3-563a6592b894"
        },
        "item": {
          "id": "b3b88d23-4ed9-4d4b-be21-52ad3a43a9ad",
          "name": "50. Delete Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ddaf536e-2f64-4e2c-a2a7-6e49031a7ccb",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Balance: /v1/organizations/{organizationId}/ledgers/{ledgerId}/balances/{balanceId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Balance_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Balance\");\n"
                ],
                "_lastExecutionId": "e2275d70-1c0c-4b99-b589-bf36ee8bc86c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "64c49925-d808-47ad-b366-d34c68a75a61",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "52661fa0-45ab-4e18-a1d1-9e6365757c07"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "balances",
              "01987cb2-1184-7e7e-8f45-38f9d47b54bc"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e81d3243-35d6-441d-8b81-bc240358bc67"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd963c23-3873-4f65-a105-207e9b937ecd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "23bd0bb5-423b-41f6-be53-f084551bbff4",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "99afdd9a-4762-4746-9a7f-3209d2b5b7b3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 0
        },
        "id": "b3b88d23-4ed9-4d4b-be21-52ad3a43a9ad",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cdddba7-8892-44eb-a71d-3e365697da55",
          "length": 57,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d395df40-b689-48f1-b00b-75b06722f296"
        },
        "item": {
          "id": "61f32aed-a28d-4c81-ab62-a7ab9b31a170",
          "name": "51. Delete Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bd8798de-d2e2-445e-8221-c8122a6213a0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Segment: /v1/organizations/{organizationId}/ledgers/{ledgerId}/segments/{segmentId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Segment_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Segment\");\n"
                ],
                "_lastExecutionId": "57489cd0-f9fe-473d-b2e0-9ff0a12ab0e1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "46dcc274-3a79-44da-8b85-73275a3187dd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "c6c7aa40-80b8-411f-97eb-4e6b451f726f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "segments",
              "01987cb2-15b2-742b-8fa3-2190e151b1de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c457e39a-c87c-48c5-8420-2e8dc708bb6c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "092cf932-be1f-42a1-bb32-5561ee24d884",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "a8938fb2-0988-462c-be30-2b5dc4e8a625",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:05 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "293f7d4e-6873-480b-8be1-a0c023f95d2e"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 0
        },
        "id": "61f32aed-a28d-4c81-ab62-a7ab9b31a170",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca3c7d58-4feb-4ec9-9afe-6a429ba5e6fd",
          "length": 57,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8a7e2e37-5d1e-41a3-b710-1a680d794332"
        },
        "item": {
          "id": "88d954d1-b16f-48ed-b350-2d398dd05c3a",
          "name": "52. Delete Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ca44ca02-7023-46fa-8968-b18f14100c5a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Portfolio: /v1/organizations/{organizationId}/ledgers/{ledgerId}/portfolios/{portfolioId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Portfolio_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Portfolio\");\n"
                ],
                "_lastExecutionId": "324a6113-c38d-4ded-99d6-c437a29d4d80"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c8f4d8e4-01b2-4bbf-a492-f50db33138e6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "f668a3f5-b8b3-4769-8ec5-efd949a411e1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "portfolios",
              "01987cb2-138e-7d88-aa3f-68e13e9bc664"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "42925075-9ee3-4bb0-a5e0-56da87e80f39"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0949a533-3914-429d-a434-16c00d4291da",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "487fc0ed-0298-4ccb-92c2-5a01ac00fa2c",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "0275ead5-d096-4402-8641-8d0394be8d72"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 0
        },
        "id": "88d954d1-b16f-48ed-b350-2d398dd05c3a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "271dde40-c9a7-4026-885b-3b84acc7eedc",
          "length": 57,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "046b7743-f859-4aa0-83de-d0db11c1c02d"
        },
        "item": {
          "id": "adfe09c7-dc39-4794-b4ad-53eb91758bda",
          "name": "53. Delete Account",
          "request": {
            "description": {
              "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c55d913e-643a-4613-bb2c-00cc1c67a689",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Account: /v1/organizations/{organizationId}/ledgers/{ledgerId}/accounts/{accountId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Account_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Account\");\n"
                ],
                "_lastExecutionId": "51359a80-6e3c-4a7f-8e5e-9afe3517964f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cd35670a-a751-48df-b080-ca641c15725e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "fa672099-5a07-43b5-9b6c-fb2a1b512b1d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "accounts",
              "01987cb2-1181-78a8-813c-6f94927cdab1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4729c6e7-6d58-4054-8e50-833d014045c0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b7c3103d-6354-41f6-9089-03366537c225",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "3959931a-1ebd-4fe0-9684-e6558c68b55f",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "25da3001-0e95-4744-b537-1be1a2001d9d"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 0
        },
        "id": "adfe09c7-dc39-4794-b4ad-53eb91758bda",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "499a1335-dfad-4809-9989-8c993f257087",
          "length": 57,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f20baa9a-8a3d-4054-9a57-a92ecb62e2fc"
        },
        "item": {
          "id": "c926a6ad-6bb0-4f75-800e-3d5bf832a887",
          "name": "54. Delete Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "53228d77-1e97-482e-a828-731f9356004f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Asset: /v1/organizations/{organizationId}/ledgers/{ledgerId}/assets/{assetId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Asset_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Asset\");\n"
                ],
                "_lastExecutionId": "d2d9c36f-b9fc-4967-aa4a-c98b7f43c6ac"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5573a22a-72ef-4493-90b0-675e37e395b9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "03b2890d-7618-401e-a9d1-b18a4868c739"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d",
              "assets",
              "01987cb2-0f6b-72ca-a58f-58a2592aec37"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "638f9ad5-b19d-4d2d-847c-91e038d5f40f"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7b59c226-8acd-4dfc-85f0-90783cf20e09",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "ed54cc5f-6189-4c21-88ed-70e9c0c3b03c",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "f9c56595-a36e-41bb-9a69-eaa78cdc1818"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 0
        },
        "id": "c926a6ad-6bb0-4f75-800e-3d5bf832a887",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2b74ce5-3be1-46fb-814a-173c0f2c29e4",
          "length": 57,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ece911a1-4527-4125-b907-3ae2ebfb63c7"
        },
        "item": {
          "id": "ae66d477-a1ee-4d38-bab4-bb755b6e3802",
          "name": "55. Delete Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "52299318-7d72-47f6-a7ff-7a425dee464a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Ledger: /v1/organizations/{organizationId}/ledgers/{ledgerId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Ledger_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Ledger\");\n"
                ],
                "_lastExecutionId": "905afd54-a2f2-458c-b9bc-12fc7c6c5974"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fca06acc-0d0a-4abd-ba02-0c26d099a5af",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "6078e247-afab-4635-b2d5-604b849eaf73"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `[object Object]`\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23",
              "ledgers",
              "01987cb2-0d4a-7247-bae6-7b3cebe8354d"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "9a5e727e-4fe4-4ec1-a39a-c583b4243c6e"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f5ad289-6e1b-48c1-890c-de7c96f7f6f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "148fbe6f-6764-4284-97a6-df98751d1829",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "478a9939-0b5b-4dda-be33-c516756b4998"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "ae66d477-a1ee-4d38-bab4-bb755b6e3802",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8369e0e9-c8f4-4c44-853f-9d8ea73495ba",
          "length": 57,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8369fa01-acaa-417c-9438-8a71aeca9f55"
        },
        "item": {
          "id": "77b4dd9a-5e63-4e5c-bc96-33a8e3c7778a",
          "name": "56. Delete Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `[object Object]`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9364c519-2345-4f9f-9aa6-cd4a8ef304b9",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP Delete Organization: /v1/organizations/{organizationId} =====\nconsole.log(\"‚öôÔ∏è Setting up Step Delete Organization: /v1/organizations/{organizationId}\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_Delete Organization_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step Delete Organization\");\n"
                ],
                "_lastExecutionId": "6bc21cf9-22ef-401b-ba98-c2f6ac37cb9a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "21811e51-8b6c-450e-870e-896e5cbc2ecf",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "bf4c8585-8bd3-4728-824b-ab2c1ac5e0fd"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `[object Object]`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01987cb2-0b2d-7ecc-9a54-ac021a6c2a23"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ef6d44bb-dd4c-4961-b1b2-e3fbfa2ec0aa"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e67491a-7df5-44e1-a88b-82992b8a842c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "d91fd5e8-7405-4886-aa9c-f22241660809",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "28ad8a79-f3d5-4b35-924a-4e96f0e61e03"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 0
        },
        "id": "77b4dd9a-5e63-4e5c-bc96-33a8e3c7778a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "acdcd5ad-e49b-4b0c-ad39-aac7470d876c",
          "length": 57,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ad29c3ba-7854-451f-8065-b4454f20fe36"
        },
        "item": {
          "id": "c106d42c-a9a7-4534-9d7f-7fa60788abdf",
          "name": "Workflow Summary & Report",
          "request": {
            "description": {
              "content": "Final step that generates comprehensive test summary for CI reporting",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f40938b-bb25-4204-b96c-72018d13cd1a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: undefined\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= undefined; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                ],
                "_lastExecutionId": "0bfe90bd-1b8a-4bc4-a5a4-210535dbe54f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Final step that generates comprehensive test summary for CI reporting",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7a82b207-c0fa-44a6-a83b-0f3c4c96e9a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6560770e-b0b2-46ff-a11f-1c166485bcb8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 06 Aug 2025 00:05:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              104,
              101,
              97,
              108,
              116,
              104,
              121
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 7
        },
        "id": "c106d42c-a9a7-4534-9d7f-7fa60788abdf"
      }
    ],
    "transfers": {
      "responseTotal": 35999
    },
    "failures": [],
    "error": null
  }
}