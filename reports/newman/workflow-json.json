{
  "collection": {
    "_": {
      "postman_id": "00b3869d-895d-49b2-a6b5-68b193471560"
    },
    "item": [
      {
        "_": {
          "postman_id": "03f97f16-f742-407a-a666-d7d56bae0682"
        },
        "id": "03f97f16-f742-407a-a666-d7d56bae0682",
        "name": "Complete API Workflow",
        "description": {
          "content": "A sequence of API calls representing a typical workflow, generated from WORKFLOW.md.",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations",
                "normalizedPath": "/v1/organizations",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations"
              }
            },
            "id": "78c7f9cf-4969-4324-8f80-e636ad65a9e8",
            "name": "1. Create Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4e54b720-99e5-4c9d-8215-9de44450b089",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "3be06d2f-56a2-4700-8715-06ad823a3209"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "88934037-b24c-4974-bcbd-ec1f878cf641",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 1: Create Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 1: Create Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 1\");\n"
                  ],
                  "_lastExecutionId": "bfc39237-04bf-470e-aaa1-5dd2d0d438e3"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "f5004389-58b3-4066-b17d-325d004f8df1",
            "name": "2. Get Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "723ec87e-fafc-4eab-b5e1-b6ded6b55450",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "30185ab8-8a41-4433-86fb-8a9a046fb353"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3ab6564-fc74-4463-a26a-7b2a841d5fa8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 2: Get Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 2: Get Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 2\");\n"
                  ],
                  "_lastExecutionId": "a4848658-ecd7-43b0-9972-8e5c65e4fbc4"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "a146b03d-4b14-4f41-a23a-df976823901d",
            "name": "3. Update Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bbf3c88e-7a43-4fe8-aa1f-3b35ecf6c58c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "2e6cdab1-c317-4119-b693-48a7c2fd7250"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d4dabe4-6fb6-4733-af1f-e3867fca8185",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 3: Update Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 3: Update Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 3\");\n"
                  ],
                  "_lastExecutionId": "0837d3bf-06d1-4ab6-818c-aaa7bb08bc82"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations",
                "normalizedPath": "/v1/organizations",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations"
              }
            },
            "id": "c0f2c60e-788e-4906-a25f-cb4f8821b2db",
            "name": "4. List Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5de77469-7721-48e9-b945-ff22b8427f6c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "e082972e-6895-41fe-a0bf-f9694ee38c7d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5328cf67-8d4d-4a58-8fc2-730e4aa2faff",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 4: List Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 4: List Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 4\");\n"
                  ],
                  "_lastExecutionId": "dd71a9e7-b9aa-429d-8789-0e7c5fa4f89b"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
                "normalizedPath": "/v1/organizations/{}/ledgers",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers"
              }
            },
            "id": "a8a0599b-3f08-4a12-957a-9b8d9934adbd",
            "name": "5. Create Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e3a2dfe8-02b9-4bde-8958-6380f0d22d3a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "109d5f18-c9e4-48ef-ba8f-51599cb1777c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "aabc8518-051e-42aa-80eb-8e18f6c13f54",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 5: Create Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 5: Create Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 5\");\n"
                  ],
                  "_lastExecutionId": "ad7ffb01-cb2b-4d56-b4c3-45b909927a31"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "2c96c931-258f-4d16-9573-0cc6dc8796f7",
            "name": "6. Get Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c15c2264-f885-4511-8b19-bd14dbbe8e6c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "768a5663-36c2-4a6e-8212-db05613698f5"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bc1c2ed-6505-431a-8454-0284c27d540c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 6: Get Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 6: Get Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 6\");\n"
                  ],
                  "_lastExecutionId": "99d64d15-13cf-47e1-b491-1876d070de4d"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "42e1d9de-82a1-4b42-a4d5-62b33bde0814",
            "name": "7. Update Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8e8215be-96c9-42f0-97c2-f77104061898",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0f7b0ceb-ea79-4525-9960-d8407c032173"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fc5c0e2-51c8-4e0c-9f1e-a72832d4a267",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 7: Update Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 7: Update Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 7\");\n"
                  ],
                  "_lastExecutionId": "78d06335-8220-4992-850c-3b2c5a71d780"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
                "normalizedPath": "/v1/organizations/{}/ledgers",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers"
              }
            },
            "id": "3b90dd88-36ea-4301-8a4e-13c096aa3c41",
            "name": "8. List Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "089b58a1-a3ea-4693-b0b7-196d4ed20cda",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "450b8baa-74f6-4492-adc3-e0060c881a22"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e349c21-f80a-4111-8f35-d6d51459f282",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 8: List Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 8: List Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 8\");\n"
                  ],
                  "_lastExecutionId": "70bacee0-d3da-48cf-997e-3d578af3b538"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
              }
            },
            "id": "911ad070-249f-44a2-add2-96be78bf24d6",
            "name": "9. Create Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3caa6c86-4863-4428-98c4-0c657b2b92a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "7951b36e-bddb-4ec6-88bf-5e59175e6e9a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6209deba-7753-40d7-af55-a6744c901bac",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 9: Create Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 9: Create Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 9\");\n"
                  ],
                  "_lastExecutionId": "8cacda9d-4db7-4a52-b0db-3c777a0bccd5"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "bf7902cd-8c30-4cef-9f80-b13f9b064321",
            "name": "10. Get Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "303692ed-fd8d-4c0c-abc0-fcfa1e91daec",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "df1a7e5b-4361-493b-a510-fc77e6105c3c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "9203b324-a8dd-4526-81c5-52540c632a74",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 10: Get Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 10: Get Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 10\");\n"
                  ],
                  "_lastExecutionId": "0f56fa3f-b847-4981-8595-3ea4a685f304"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "ec5b952a-cdaa-4a94-89a7-7072bf2f8165",
            "name": "11. Update Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cf45f93d-4e48-4d2e-a54d-51c97175184e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "938e0650-6806-4364-9e80-fa48cab9e7f1"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "553d934d-6963-4583-99eb-4335dfcdfe46",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 11: Update Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 11: Update Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 11\");\n"
                  ],
                  "_lastExecutionId": "c3b358ef-c3db-47b4-a702-d24174d82346"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
              }
            },
            "id": "afdd30a3-733c-4502-b98d-f24d130e72e4",
            "name": "12. List Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4de1bbc0-b533-4105-a2b5-da03f5fd89d2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "c6ff5168-543e-44aa-88fd-6190f1d1dc87"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "efe7dce0-e5db-4e2d-921a-3c11d93f88de",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 12: List Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 12: List Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 12\");\n"
                  ],
                  "_lastExecutionId": "a7d24938-eeda-43d4-a50d-10ca8329e29e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
              }
            },
            "id": "65e96904-4504-4126-bfdd-1c2c896bf80b",
            "name": "13. Create Account",
            "request": {
              "description": {
                "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c112b0aa-fd2c-46b9-918f-67a94c57c667",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "ca09759c-ac61-4770-9359-d9ab0d82597b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "80e97812-1274-4654-ab00-660e86931f82",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 13: Create Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 13: Create Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 13\");\n"
                  ],
                  "_lastExecutionId": "c8aad611-5336-4a2a-a158-16dd645b8667"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "8bb2d4c3-a731-4207-aeea-323f49794679",
            "name": "14. Get Account",
            "request": {
              "description": {
                "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9d97d25b-bc46-481a-9b3c-639f6cf56e60",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "9cdf2d2d-36af-4892-90b2-5ca11a8dbf16"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ba862fd-90f4-4211-ae99-ec989b1052a2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 14: Get Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 14: Get Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 14\");\n"
                  ],
                  "_lastExecutionId": "af6d820e-58af-4c18-9d11-da0a2e6f6808"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "a8fdf873-d159-4857-a68a-ea40392f0fe9",
            "name": "15. Update Account",
            "request": {
              "description": {
                "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "899f9aac-c1b4-460a-82e6-91b688592551",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "b184eb68-cf02-424c-9a25-e99290b79f18"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "75111242-abde-4260-b4b8-a88cc52d3e7c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 15: Update Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 15: Update Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 15\");\n"
                  ],
                  "_lastExecutionId": "3553ed4f-1b3f-4af8-b4f0-ffb79264a626"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
              }
            },
            "id": "167fe352-fa56-4d2c-a59c-1d68153b89ba",
            "name": "16. List Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad8ac924-020f-4577-8ed6-9a08d35d097b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ae0a8962-5109-4e6b-88b2-5bea78adad42"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "da68c2a7-4108-42e2-a648-48536e816fad",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 16: List Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 16: List Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 16\");\n"
                  ],
                  "_lastExecutionId": "aed9cd42-e110-4dd8-b9d0-27017ce38c74"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
              }
            },
            "id": "12fb18e8-ae2d-4b40-95ec-4b26c8ac9fdd",
            "name": "17. Create Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "93fea14b-2930-4640-b709-0469e35d21ac",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "c861ba64-c890-4a98-b131-3c24cbcbed7e"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f766afe-7e87-4eec-9a7e-38448666a3dd",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 17: Create Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 17: Create Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 17\");\n"
                  ],
                  "_lastExecutionId": "47f9bfa8-a52c-4dc8-8f65-eb58336e2f87"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "9c6684de-9a86-4353-9a7c-4e913954e4bd",
            "name": "18. Get Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "40bd3522-1d66-454d-a5e1-84262b450921",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "9978a19b-7ed9-4bb4-be41-9fdfa37e4c73"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fc59785-baba-4f74-9b13-167c1bbd3a85",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 18: Get Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 18: Get Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 18\");\n"
                  ],
                  "_lastExecutionId": "ebe6adf9-f73c-4d17-a5c4-e81a3357cc93"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "4e346ca6-5eb2-49c1-84ac-f71062e4c19c",
            "name": "19. Update Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b7971af9-14db-494f-b3a5-b39666df94b8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "eb803b4d-4448-4328-917e-d734f7a7d009"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2a18c9d-384d-4c01-8b39-2990667b4bfe",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 19: Update Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 19: Update Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 19\");\n"
                  ],
                  "_lastExecutionId": "2c6bfac5-12a2-425f-96e9-548154db39f4"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
              }
            },
            "id": "08d2652c-4077-49d6-b387-546df74640aa",
            "name": "20. List Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d9397679-8e50-490f-8f63-52199b04a16e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "147492af-960c-4eae-a06e-882c4cff8b95"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a5462ae-c213-4543-9b4e-8af788b78851",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 20: List Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 20: List Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 20\");\n"
                  ],
                  "_lastExecutionId": "3adda3b8-f099-40b3-b19d-d615d3d31e9e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
              }
            },
            "id": "50fb02b5-9426-4a42-a553-609f1a429085",
            "name": "21. Create Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b80f4a39-e5f9-4a01-9b7c-73f84ba57137",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                  ],
                  "_lastExecutionId": "07df28dd-89da-4a49-9a64-7fcaec4fc6bf"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f38c364-350b-406d-9401-be4173fe435c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 21: Create Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 21: Create Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 21\");\n"
                  ],
                  "_lastExecutionId": "dee41da4-1f9b-49ca-a028-5966b236be6c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "d9d267da-836e-4b4c-959e-06149b45757f",
            "name": "22. Get Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fe944087-89e5-4fa5-9029-18abfa634562",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "fad2af00-7a08-4251-a68b-56b08223f72a"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d09ea6ad-9ef4-4af8-bcd9-3000ff20a2fc",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 22: Get Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 22: Get Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 22\");\n"
                  ],
                  "_lastExecutionId": "435b21c2-2bc2-42d9-9dd2-e793c978999c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "4b0318db-c5e7-4952-81d6-d9d4440549e9",
            "name": "23. Update Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a8b61a92-6cd2-43f9-bdca-efd22d1cd7ec",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "3a2d09dd-28ad-44c3-a596-4fef905ae030"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "88b1f4e5-926c-4c87-89cc-c7a639d97467",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 23: Update Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 23: Update Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 23\");\n"
                  ],
                  "_lastExecutionId": "7db225e0-7d98-4ca3-a099-cc7df1984ad9"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
              }
            },
            "id": "a48525f4-cf73-49b2-8d4a-de3ef2803fa0",
            "name": "24. List Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d84e2aad-149b-4391-91cf-79b91d64a25a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "d0538f5a-915d-41cf-b8d5-1c0a6cc34944"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "339bac9e-0798-4437-b355-bab61251848b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 24: List Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 24: List Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 24\");\n"
                  ],
                  "_lastExecutionId": "59685913-6387-4cbb-a3b3-3966bb948a3b"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/metrics/count",
                "normalizedPath": "/v1/organizations/metrics/count",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/metrics/count"
              }
            },
            "id": "1a941997-cdb5-42d2-b40c-65cba1e41136",
            "name": "25. Count Organizations",
            "request": {
              "description": {
                "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3d0f613a-5379-4287-91af-83b5f914803b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "45f8f738-a926-4fb9-8d81-6c8b70f486a9"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d764839-9580-49bb-a394-4492cb3f8898",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 25: Count Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 25: Count Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 25\");\n"
                  ],
                  "_lastExecutionId": "2a68abec-0c38-4d42-9250-2d32033c9774"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/metrics/count",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/metrics/count"
              }
            },
            "id": "a2967683-4c77-4fc8-8728-c2c972cdb24e",
            "name": "26. Count Ledgers",
            "request": {
              "description": {
                "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "85520d28-71b9-4010-ab89-633084825cf4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "2f2883af-df14-4366-a71b-56f140029c4e"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "07d37448-e6ab-4f3c-b5ea-68a8c6e6ff97",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 26: Count Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 26: Count Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 26\");\n"
                  ],
                  "_lastExecutionId": "248f1d3b-133d-4d69-b628-61623edb9d8a"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count"
              }
            },
            "id": "6b5c292c-44e8-4de1-8530-e47487fb2876",
            "name": "27. Count Accounts",
            "request": {
              "description": {
                "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "77022bf1-36d5-41f1-a6b0-d6dcb226b401",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "df6b0329-9f33-40a5-aa16-4559303afcb3"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "94c245d0-36af-419d-b7e5-1dc1bbd31f60",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 27: Count Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 27: Count Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 27\");\n"
                  ],
                  "_lastExecutionId": "fda82ba3-9358-4f92-aedd-288fd0b18326"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count"
              }
            },
            "id": "3e7fd04e-5b3e-4aa0-a68c-2c47bf525c72",
            "name": "28. Count Assets",
            "request": {
              "description": {
                "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e396ffc1-2a47-4202-818e-1e734546fa52",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "c12ce3e2-3691-4f7a-bf9f-af07f6b6cd49"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5d5b18c5-c495-418c-81d5-d11e55bde0fc",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 28: Count Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 28: Count Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 28\");\n"
                  ],
                  "_lastExecutionId": "bc8c8b47-cc98-4041-b0d5-34a7a9d53bbd"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count"
              }
            },
            "id": "60c70344-866c-4b47-bce3-300284048664",
            "name": "29. Count Portfolios",
            "request": {
              "description": {
                "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6cdac9c9-4e1e-4add-9a53-6490b7ce5fba",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "48d03fe6-3af0-41a3-b772-9d8f86ddb416"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d10741a4-7d0a-4b0d-9ce0-96943955e0da",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 29: Count Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 29: Count Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 29\");\n"
                  ],
                  "_lastExecutionId": "9f901a8b-b9da-40bb-994d-69a37f0e4970"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count"
              }
            },
            "id": "a6b928c0-85d8-416b-a21c-d335a4f53576",
            "name": "30. Count Segments",
            "request": {
              "description": {
                "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b9d5375e-9265-475e-b12c-83037d73a35a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "be6de140-b94c-4c7a-8160-8f801a5ea2b8"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f914a6a8-394d-4558-81f4-6fe5613e531b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 30: Count Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 30: Count Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 30\");\n"
                  ],
                  "_lastExecutionId": "e4ab613a-dcc0-4d70-8145-5afc9490be0f"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}"
              }
            },
            "id": "a1915b3d-ab73-4027-8cc3-6f50fe7c1795",
            "name": "31. Get Account by Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "85b2cbf0-434b-41df-a9a3-7ed3c8541d17",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "feb2c51d-e5ff-43b4-9c3d-66149b8a4435"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "3bb0ca47-510f-4642-9016-05bc253a708b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 31: Get Account by Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 31: Get Account by Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 31\");\n"
                  ],
                  "_lastExecutionId": "e876f642-18f6-423e-a749-312312d567ba"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}"
              }
            },
            "id": "0e838ca2-504f-4b4d-9977-b4cc7346b3ce",
            "name": "32. Get Account by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a332dd9b-b1aa-428b-b76b-91ba31a946f5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "df967526-93bf-496a-84f5-fdb4c5e517ad"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "39cd4527-3521-4799-a4d9-52f3815ab26d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 32: Get Account by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 32: Get Account by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 32\");\n"
                  ],
                  "_lastExecutionId": "8fba7348-62d6-401a-9755-1adf7499160c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
              }
            },
            "id": "4f6e17a1-6062-464f-88f2-2fad67779c18",
            "name": "33. Create Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4e1da9ed-df4a-40b1-9c7d-9fa2310ef0e0",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "7068e361-fd5f-469d-9155-c42e020c7383"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "07577b63-ddb2-4c3b-a686-96b4640164b6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 33: Create Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 33: Create Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 33\");\n"
                  ],
                  "_lastExecutionId": "1eba03d9-669f-4b35-a7ff-a90d02fc4876"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow"
              }
            },
            "id": "420a1bfe-4363-42ac-931c-1b0db0c43b75",
            "name": "34. Create Transaction (Inflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a5e762f-4cac-452b-8a33-b58b85f3f38b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "6b8438cd-16ae-4806-9319-e14773207679"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a56c7d7-3a92-4fa3-9993-3115b0b3ab5c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 34: Create Transaction (Inflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 34\");\n"
                  ],
                  "_lastExecutionId": "2941b7ab-f46e-44ca-a91d-faef27332e44"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow"
              }
            },
            "id": "be987068-0620-4e8d-af9f-a4b3a25eb23a",
            "name": "35. Create Transaction (Outflow)",
            "request": {
              "description": {
                "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4ff7b8b7-6821-4086-9071-498839ce6ce5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "af3c564f-02b6-45e4-9d20-dbb6e4a6f4cc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fde67a94-d53a-4725-a87d-2db2864e5119",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 35: Create Transaction (Outflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 35\");\n"
                  ],
                  "_lastExecutionId": "068f7e1f-35d2-4ee6-b352-6eafdf962b6e"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
              }
            },
            "id": "4e4a12d0-4798-448b-8ae0-5d5b6d0275c8",
            "name": "36. Get Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "744b2288-fec7-40ea-9d17-3c418c74d52b",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "4b9d7595-fc74-454f-aee4-0b318e0208e2"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f465433e-d547-4470-8e04-fbb750c8b5f5",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 36: Get Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 36: Get Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 36\");\n"
                  ],
                  "_lastExecutionId": "90d86e14-32ec-4371-b05b-83a52f46d6e5"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
              }
            },
            "id": "eb65333e-962d-453f-a9d8-33f31df67eb1",
            "name": "37. Update Transaction",
            "request": {
              "description": {
                "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1455699e-3370-43ef-b385-ce38a1253290",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "0c9d7291-1d4d-4a05-a6ec-40d438542239"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdac2a67-f797-4c67-83c2-7d432ac854ea",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 37: Update Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 37: Update Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 37\");\n"
                  ],
                  "_lastExecutionId": "4b1be88a-2e5b-4138-b55d-a98689fabc47"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions"
              }
            },
            "id": "81ba5957-10e3-4d5f-9a56-f4bddea64ad1",
            "name": "38. List Transactions",
            "request": {
              "description": {
                "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "665b5e81-74c3-46e5-aee8-fb1f709f7e7d",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "cb3408f7-ea23-4f11-b4ee-f02b31c15df9"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "24d1ba24-1797-45e4-99b8-94b9b4fbff6c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 38: List Transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step 38: List Transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 38\");\n"
                  ],
                  "_lastExecutionId": "d305fa75-1371-493f-a446-40c4d5bfa992"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}"
              }
            },
            "id": "03d8f64c-05b9-4a60-b663-63b95072c0e2",
            "name": "39. Get Operation",
            "request": {
              "description": {
                "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fd4679a1-dd19-4ff8-adb2-9aba9594eee1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "4f520466-7acb-4ca2-bff1-0a7310b0ae95"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4c990eb-a965-4d98-b92a-11980a2de906",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 39: Get Operation =====\nconsole.log(\"‚öôÔ∏è Setting up Step 39: Get Operation\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 39\");\n"
                  ],
                  "_lastExecutionId": "40637503-8c8d-44e5-9bbc-b3c8e4b87814"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations"
              }
            },
            "id": "9c409dc9-de3b-4459-960b-a724e7f69531",
            "name": "40. List Operations by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3567a06f-b5f5-468f-a597-b169674c033c",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "87e51109-e6f7-4539-a301-9b71643d3532"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "7be03e4e-a6be-4d7c-9191-4197fb55cf19",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 40: List Operations by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 40: List Operations by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 40\");\n"
                  ],
                  "_lastExecutionId": "ae8152c4-775d-479a-8e3d-daf753bcfea9"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}",
                "folderPath": "Operations",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}"
              }
            },
            "id": "1b281bdf-2a89-487f-8323-470228d4a1b9",
            "name": "41. Update Operation Metadata",
            "request": {
              "description": {
                "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1d94b827-2282-49a5-99e6-522931895392",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "8b554d78-c7d3-41bc-9fea-c51e50058c74"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "78bbe9df-db42-4b93-9c9a-33fce17aad35",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 41: Update Operation Metadata =====\nconsole.log(\"‚öôÔ∏è Setting up Step 41: Update Operation Metadata\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 41\");\n"
                  ],
                  "_lastExecutionId": "05fe6cda-9519-4075-b062-7a54e78e8663"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "bb538588-fd81-4ccd-aa7d-d684f3616260",
            "name": "42. Get Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3beba441-21db-45ee-9ca2-88f566db87c3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ce9bb9f3-b6ef-4c03-b1d1-16dac32e181f"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e474fafc-5f8d-4b49-a893-766620a555f8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 42: Get Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 42: Get Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 42\");\n"
                  ],
                  "_lastExecutionId": "000e1af0-d444-4269-8410-60b5edfa9570"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances"
              }
            },
            "id": "a76112a0-44ba-45c6-9f67-d5214d95c64d",
            "name": "43. List Balances by Account",
            "request": {
              "description": {
                "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8561ecab-49ad-4f8e-9f71-8b0eaacff371",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "31934410-4a5f-4df9-b1d5-41bdee39f091"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "788b6829-be8e-4893-a0df-06e9cb410ba3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 43: List Balances by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 43: List Balances by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 43\");\n"
                  ],
                  "_lastExecutionId": "0615dd64-bbd2-4040-9e9d-ce0dd03efa0b"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
              }
            },
            "id": "11137ad7-3c44-4368-8458-f9567fe9f1c8",
            "name": "44. List Balances by Account Alias",
            "request": {
              "description": {
                "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ea4d88e0-03ac-47d8-93cd-a45473e21765",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "ac1d2309-4e05-4885-8f25-b438a663fc30"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "892779fc-9e05-48d6-9c26-0d1cbf65d490",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 44: List Balances by Account Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 44: List Balances by Account Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 44\");\n"
                  ],
                  "_lastExecutionId": "a63e7851-154b-481b-a43f-4c757d75604c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances"
              }
            },
            "id": "2a89be1f-6459-4bc4-be64-ce94c47b2e3f",
            "name": "45. List Balances by External Code",
            "request": {
              "description": {
                "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "793ce235-47aa-4ef2-8842-d47075ab57e6",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "5b0a58ad-120b-4e41-92af-6fbc8d104c09"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d00f6de0-cec2-4fd7-b5de-1dca471253f1",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 45: List Balances by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 45: List Balances by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 45\");\n"
                  ],
                  "_lastExecutionId": "efd7e171-af88-41e4-a208-078810f26f7d"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "cad1ad11-9f0f-4b57-a4a4-09556606d7d0",
            "name": "46. Update Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bec25652-ca3d-4299-a884-3ba4dc5ca520",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "7ff2e366-9e72-405e-b745-683d5ff59747"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "74988652-35db-4cfc-969c-e40c88bc0fab",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 46: Update Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 46: Update Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 46\");\n"
                  ],
                  "_lastExecutionId": "0218b62e-06c9-4582-b132-20f7df355e52"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances"
              }
            },
            "id": "871c7f3a-1a4a-403a-b9f5-abc331fc3c29",
            "name": "47. List All Balances",
            "request": {
              "description": {
                "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "091c0939-6f70-4999-b7fe-89aa014f7238",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                  ],
                  "_lastExecutionId": "9a4c9dd6-3d27-4695-9d66-c9d706017058"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "fa75f7e7-c28f-4bb6-8ad6-47b597610892",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 47: List All Balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step 47: List All Balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 47\");\n"
                  ],
                  "_lastExecutionId": "60e122bd-5180-4d87-94c6-db53a860c329"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
              }
            },
            "id": "631ccbc5-89fe-46e4-82d0-cc5b20a932f6",
            "name": "48. Check Account Balance Before Zeroing",
            "request": {
              "description": {
                "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "efcdb01e-7383-4d2c-bb59-8dbed0e8f9b8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n    if (responseJson.items && responseJson.items.length > 0) {\n        const balance = responseJson.items[0];\n        if (balance.available !== undefined) {\n            const balanceAmount = Math.abs(balance.available);\n            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n        } else {\n            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n            pm.environment.set(\"currentBalanceAmount\", 0);\n        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                  ],
                  "_lastExecutionId": "e462e7ac-69f7-4538-b78f-fba5c9c37513"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "35b88a06-bba6-4cd0-a03a-05832e6163a8",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"‚öôÔ∏è Setting up Step 48: Check Account Balance Before Zeroing\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 48\");\n"
                  ],
                  "_lastExecutionId": "b56dc852-9ed2-4ece-94fe-c080385b3250"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
                "folderPath": "Transactions",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
              }
            },
            "id": "ab4efb56-8d14-430a-897c-69cd78c59546",
            "name": "49. Zero Out Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "02bcd002-07af-4aae-828e-37d3edff232e",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                  ],
                  "_lastExecutionId": "cf0b5448-5d7d-4cff-8f33-5b8fad1ea363"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f019418-207e-4fc5-900f-319266208375",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 49: Zero Out Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 49: Zero Out Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 49\");\n"
                  ],
                  "_lastExecutionId": "6584fbdf-f711-4b23-ba07-728d26f154fa"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
                "folderPath": "Balances",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
              }
            },
            "id": "1f7edcb6-4979-455b-b780-86456376022c",
            "name": "50. Delete Balance",
            "request": {
              "description": {
                "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "379d8e0d-ee8f-4d00-8451-617d644cbb5f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "0de5d107-6015-4d1f-9483-89aa86857c00"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6a08ab0-f0c0-47e0-b6c9-3ca1421dc7cf",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 50: Delete Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 50: Delete Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 50\");\n"
                  ],
                  "_lastExecutionId": "6df3452f-dc8f-41ae-877f-ab6766362efe"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
                "folderPath": "Segments",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
              }
            },
            "id": "6b3e4ab7-a4fe-48b5-a479-79e0f3e52d54",
            "name": "51. Delete Segment",
            "request": {
              "description": {
                "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7c2e8a0b-4b2c-4d93-b597-28a36d4f7a91",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "c98d2c3c-5887-4096-ad43-405d196272e8"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f71358f4-f29a-4e37-8f6a-544f23ce979f",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 51: Delete Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 51: Delete Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 51\");\n"
                  ],
                  "_lastExecutionId": "84ae8546-f6e0-47d1-967d-191dfad5a285"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
                "folderPath": "Portfolios",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
              }
            },
            "id": "0eefcfba-945a-4581-9123-0e98caf92c5d",
            "name": "52. Delete Portfolio",
            "request": {
              "description": {
                "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7247d314-98e8-4cfa-9946-5a4bdb0ad9e7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "4ff46265-8b85-474c-a246-5a0c62881f1c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e18b4208-a8ac-458e-aa48-47a71ffb3fe7",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 52: Delete Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 52: Delete Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 52\");\n"
                  ],
                  "_lastExecutionId": "975f8e41-f696-40e3-89cc-7ae881636a99"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
                "folderPath": "Accounts",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
              }
            },
            "id": "8795afe6-8d57-4198-965f-82497bbc46d2",
            "name": "53. Delete Account",
            "request": {
              "description": {
                "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a4984aa-b287-4316-bca0-3cda4b1c8de4",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "e96f1331-e9fa-4f2b-b1e0-f662e876ca9e"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "27a7d83a-e50a-45bb-b5f4-396e3a5ecc45",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 53: Delete Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 53: Delete Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 53\");\n"
                  ],
                  "_lastExecutionId": "ae41939c-47c0-4c9f-b18e-96a682e0bbb4"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
                "folderPath": "Assets",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
              }
            },
            "id": "c53e0f71-c437-458e-99fe-6f2ab562e77f",
            "name": "54. Delete Asset",
            "request": {
              "description": {
                "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "581580bc-ec2f-407b-8e2f-ee9b3774b53a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "8adbf8d3-ef75-4035-af1e-74f7521e41fd"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "1457fa8a-0003-44ff-ad59-09fcf9a7adc3",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 54: Delete Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 54: Delete Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 54\");\n"
                  ],
                  "_lastExecutionId": "e955e934-afb6-48a9-9938-44baa0f3270c"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
                "normalizedPath": "/v1/organizations/{}/ledgers/{}",
                "folderPath": "Ledgers",
                "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
              }
            },
            "id": "c8a2e4f5-4cdd-4196-9bd4-a0468b65a840",
            "name": "55. Delete Ledger",
            "request": {
              "description": {
                "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cd65e625-4a98-4c68-b790-6926ee300389",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "5bdbec1c-2696-4a96-8a4b-1c9951502846"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "93faf0f6-e2d4-43c4-829d-a0606741a215",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 55: Delete Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 55: Delete Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 55\");\n"
                  ],
                  "_lastExecutionId": "21ff5491-aa40-491e-a01d-266ed1be3425"
                }
              }
            ]
          },
          {
            "_": {
              "matchInfo": {
                "originalPath": "/v1/organizations/{{organizationId}}",
                "normalizedPath": "/v1/organizations/{}",
                "folderPath": "Organizations",
                "matchedTargetPath": "/v1/organizations/{}"
              }
            },
            "id": "0a580e85-5ff0-4ce8-85f7-717e6a1d35aa",
            "name": "56. Delete Organization",
            "request": {
              "description": {
                "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bc080a91-fca8-492c-a249-2d4aec5e3fa2",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                  ],
                  "_lastExecutionId": "e97b54ad-891f-4721-9763-960070c97508"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f22c3717-54dd-4d99-b54f-7a54bbba500a",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== PRE-REQUEST STEP 56: Delete Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 56: Delete Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 56\");\n"
                  ],
                  "_lastExecutionId": "c6190483-0971-4b56-9be9-50b96ddc7117"
                }
              }
            ]
          },
          {
            "id": "60c52709-0a4b-45bc-bf56-09e812884cd0",
            "name": "Workflow Summary & Report",
            "request": {
              "description": {
                "content": "Final step that generates comprehensive test summary for CI reporting",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "health"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "74f745d8-3fdb-4497-a659-3e38b21d7214",
                  "type": "text/javascript",
                  "exec": [
                    "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: 56\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= 56; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                  ],
                  "_lastExecutionId": "f49b7681-8c7e-435d-ba22-baf1b8ca1e76"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "46d35466-781c-4e9d-8d37-4544322f75da",
        "name": "Organizations",
        "description": {
          "content": "Endpoints for managing organizations, which are the top-level entities in the MIDAZ system.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "a7969d06-a46f-4714-9721-493bd4e242b8",
            "name": "List all organizations",
            "request": {
              "description": {
                "content": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter organizations by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2e0f436-62a5-4f56-86b0-552f564c4576",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5720995-f19f-4155-a12a-6253e7f1c800",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b8aae48a-367f-4ce2-997c-b5e8b9b213af",
            "name": "Create a new organization",
            "request": {
              "description": {
                "content": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "179ad85c-3bd4-4cd8-b4a2-169d06ace56f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3cf8dcc-7617-49d9-b322-239d0d4822db",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"organizationId\", jsonData.id);",
                    "    console.log(\"organizationId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract organizationId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "cca0e500-25a7-48dd-9549-e690eb4dbdc2",
            "name": "Count total organizations",
            "request": {
              "description": {
                "content": "Returns the total count of organizations as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98f6cdd7-9234-4436-b28e-5e6a6a93bd12",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27532403-fae6-4f91-8889-283f15a87736",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f3cb5792-78e4-430d-881b-aff81139e76f",
            "name": "Retrieve a specific organization",
            "request": {
              "description": {
                "content": "Returns detailed information about an organization identified by its UUID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef301bb0-8cb9-4c6a-a6ae-4851a38199c1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b22c71b-7ec5-432e-a92a-7861bdff52ae",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "88e73051-94b7-4c5c-b614-2d03ab793754",
            "name": "Delete an organization",
            "request": {
              "description": {
                "content": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70b65370-7441-4ff2-a802-c1d5a48db48f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f6a45b2-215c-442c-bf70-39c9a83a5126",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "25b05002-fd24-425a-aa27-0caf13201afe",
            "name": "Update an existing organization",
            "request": {
              "description": {
                "content": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "db6feca9-527a-42c6-ae84-9d6484fb7c4e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "11d8dc12-873a-4941-9b54-1c24a1ea9889",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "49e4bc81-420c-4d9e-bd61-8ae6556daa88",
        "name": "Ledgers",
        "description": {
          "content": "Endpoints for managing ledgers, which are financial record-keeping systems for tracking assets, accounts, and transactions within an organization.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "bd0d0405-e621-473a-acd8-07957833705d",
            "name": "List all ledgers",
            "request": {
              "description": {
                "content": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter ledgers by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c496be05-bba2-4f03-84ad-36e726a51f9c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7d10d4e-8075-4122-bfe2-2cbe7ce67a27",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "17f39904-1862-489c-98aa-b2d466d61f2e",
            "name": "Create a new ledger",
            "request": {
              "description": {
                "content": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8d59685-628d-4430-a6f1-661381572972",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7685dfb-11ec-469d-84f8-fd74e7411d13",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"ledgerId\", jsonData.id);",
                    "    console.log(\"ledgerId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract ledgerId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "f4111b56-88a4-4923-bc25-c2a4b6a90861",
            "name": "Count total ledgers",
            "request": {
              "description": {
                "content": "Returns the total count of ledgers for a specific organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecd33935-8139-40ee-8614-6daaab4493d9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e8abdbd-2a6f-4a83-a2d0-6c56bedb214c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e7bcfd6b-9673-48d6-8a7b-16f59ad9e8e1",
            "name": "Retrieve a specific ledger",
            "request": {
              "description": {
                "content": "Returns detailed information about a ledger identified by its UUID within the specified organization",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81f1cf29-92d3-4d47-8c6c-fe77bffc559b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "850f6172-e099-43aa-bc00-88ea2c3113c8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "74db3942-2744-4c93-a7fe-8e593353dee7",
            "name": "Delete a ledger",
            "request": {
              "description": {
                "content": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e6212e2-7ebd-421d-b35a-eec68e3a5aaa",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9dfcb22c-032b-416a-b955-07212621d9f9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "64d67764-915c-4402-b0b9-3d256354b3ec",
            "name": "Update an existing ledger",
            "request": {
              "description": {
                "content": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b025b490-ebb4-49b9-a00f-3edf17bb62d9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0a3c7ef-3284-4926-b3a2-1489956ed3cf",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "437f2ea2-cb1e-4d8e-897c-e1ddccc5c880",
        "name": "Account Types",
        "description": {
          "content": "Endpoints related to Account Types.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d6b0d75a-ef11-478c-89de-134b0b8279fa",
            "name": "Get all account types",
            "request": {
              "description": {
                "content": "Returns a paginated list of all account types for the specified organization and ledger, optionally filtered by metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter account types by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit of account types per page (default: 10, max: 100)",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for offset pagination (default: 1)",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor for cursor-based pagination",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort order (asc or desc, default: asc)",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End date for filtering (YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2e2e5f14-2390-46bc-b2a5-b56de21f54ab",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39a2464c-d3a3-40e9-a92f-d1e00093d597",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f7d272c5-74b4-412d-815d-af1e50564aca",
            "name": "Create Account Type",
            "request": {
              "description": {
                "content": "Endpoint to create a new Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"keyValue\": \"current_assets\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "522aadf9-72d6-4340-b2b2-8bc78ba75760",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cf589803-ea58-46a2-bafc-efd4a3610d7f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "652f5c1e-2d42-4c62-a37a-6609d18c4281",
            "name": "Retrieve a specific account type",
            "request": {
              "description": {
                "content": "Returns detailed information about an account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76be5d5f-8e35-4c22-b468-4cb7e2fe620d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fc506f97-c082-42ee-b2d4-cf0c6df06ec4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "2da542cb-7d85-4933-a22c-a8a218a31dc4",
            "name": "Delete an account type",
            "request": {
              "description": {
                "content": "Deletes an existing account type identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dbf6672f-30c2-469c-89f2-e9e4ac087532",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27e04b1f-cbb6-4189-87f7-478a26e3b0a7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "f29afa3f-f2ce-407c-a52e-ebba0ee64852",
            "name": "Update Account Type",
            "request": {
              "description": {
                "content": "Endpoint to update an existing Account Type.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "account-types",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account Type ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e45d14d-5448-4cf9-a9fe-ab48a766a8a2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6be5cc37-aaef-4dd9-b070-63fbbb097719",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5016cb26-2b7c-42f8-9231-ff7936324ad8",
        "name": "Accounts",
        "description": {
          "content": "Endpoints for managing accounts, which represent individual financial entities like bank accounts, credit cards, or expense categories within a ledger.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "64e389bb-e93b-4113-b89c-ea6538db011b",
            "name": "List all accounts",
            "request": {
              "description": {
                "content": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter accounts by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50e7b73a-1c79-46d5-bef6-a2f7169ef612",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8703d44-0767-4bcd-a4d8-7136775e4892",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1d256722-e622-4482-98e6-61565bd19351",
            "name": "Create a new account",
            "request": {
              "description": {
                "content": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0017f315-dd60-4e05-8b85-633c126980e7",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48b501f5-623e-40cd-98a9-2089c8cdc8d9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"accountId\", jsonData.id);",
                    "    console.log(\"accountId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.alias) {",
                    "    pm.environment.set(\"accountAlias\", jsonData.alias);",
                    "    console.log(\"accountAlias set to: \" + jsonData.alias);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract accountAlias: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "a5eca629-3ce1-4c3b-aa27-72abfc61bc7a",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8932be8-fb10-4856-9d1e-e4cb4e4c4f63",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "082dc16f-d83d-4100-a9d5-3c36233c1316",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "ebd8daa9-e08d-4957-a3c0-338962c8431d",
            "name": "Retrieve an account by alias",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its alias within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account External Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0fd3c50e-8b3e-4716-9e49-3069afd2e861",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "905c74e4-d7be-49ab-bd1b-9e7b5991ff98",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "160b1b1d-93e2-478e-993a-0c89d1ba549b",
            "name": "Count accounts",
            "request": {
              "description": {
                "content": "Returns the total count of accounts for the specified organization, ledger, and optional portfolio",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "93a7c428-4bbc-4b25-b7b5-01d96f91cc47",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c2c62b46-1733-471c-b59e-98a4b17674fc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "803ddd65-ecda-4435-b83f-2b8f059b85bb",
            "name": "Retrieve a specific account",
            "request": {
              "description": {
                "content": "Returns detailed information about an account identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fdee770f-5c8d-4b40-9eab-e3a88181d84f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e43f54d-3860-496b-a6fd-7e3757c0ee8a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9a87ea8a-6aba-46a7-a165-c6dbff01c25f",
            "name": "Delete an account",
            "request": {
              "description": {
                "content": "Permanently removes an account from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dac9b6fa-305e-4c85-8ab7-3ea0f6749147",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "76d109f0-0b32-4b11-971c-f4af70787459",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "bfc28215-b7f4-4adb-b59c-ddb81476f43d",
            "name": "Update an account",
            "request": {
              "description": {
                "content": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46a8a474-2ce1-49a9-a3d3-38a12beba8a2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02774097-9bee-459a-97fa-ca214540e9d1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "04dd4e0e-f588-4484-8ac0-d7b429c50221",
        "name": "Assets",
        "description": {
          "content": "Endpoints for managing assets, which represent the types of value that can be transferred between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "20b9c8d1-b5b3-4f1b-aad6-73e161789606",
            "name": "List all assets",
            "request": {
              "description": {
                "content": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter assets by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd76f93d-fc95-4d5b-b467-97c957d6f08e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "87e143af-1c85-4d6d-b2f0-52689f3bdafa",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "b490128e-eb70-4bfe-b7c3-9eb3ef5e84c6",
            "name": "Create a new asset",
            "request": {
              "description": {
                "content": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe27f0fd-559f-4126-87bd-bc83def773a8",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "48c8b148-2a6e-4bae-8f8e-f0e6c7e9b10f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"assetId\", jsonData.id);",
                    "    console.log(\"assetId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract assetId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "e08fba52-6df1-42d9-8fd1-134b2c125eae",
            "name": "Count total assets",
            "request": {
              "description": {
                "content": "Returns the total count of assets for a specific ledger in an organization as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "482aa37e-6b39-4a61-86af-b225d2891a73",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4ea81208-08cc-4743-84e3-b529a726d021",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "24e2e126-bc21-45aa-9a38-0889774ce298",
            "name": "Retrieve a specific asset",
            "request": {
              "description": {
                "content": "Returns detailed information about an asset identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "350dccaf-a10c-4183-a523-7577bf9ee047",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2d2f21f8-c765-4e11-aa02-f7772eff65fd",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "82a3b621-599c-42cc-b984-cfcf39289412",
            "name": "Delete an asset",
            "request": {
              "description": {
                "content": "Permanently removes an asset from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf088def-5845-48db-9288-71e3a2dffa0e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"assetId\")) {",
                    "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "47e815b6-ba5a-4fd8-9dc7-389ce3247051",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "db5794ca-4f10-459d-8b81-941d6ea6e7a4",
            "name": "Update an asset",
            "request": {
              "description": {
                "content": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "assets",
                  "{{assetId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Asset ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{assetId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20211e50-87d9-48ff-867f-d5754807886a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0507cf90-1810-41af-8424-d5777daba871",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b82f3f02-ea4a-4234-a782-74b1c6c62379",
        "name": "Portfolios",
        "description": {
          "content": "Endpoints for managing portfolios, which are collections of accounts grouped for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "99073840-e1ac-44f7-a0bb-2f6d5ab0eaba",
            "name": "List all portfolios",
            "request": {
              "description": {
                "content": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter portfolios by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25c27f18-7a20-49dd-b7f1-7092c36269ec",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85054390-dc07-408c-861d-6d29d2e25269",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "c07f539c-0250-4347-a316-d460efa10ffe",
            "name": "Create a new portfolio",
            "request": {
              "description": {
                "content": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3758c02e-ba47-4a88-a8f1-b8802ab9f9c1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4b99c5a-02f4-4664-bbf3-c1f00d1e86af",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"portfolioId\", jsonData.id);",
                    "    console.log(\"portfolioId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract portfolioId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "38949c15-0e77-4545-bf0d-f07454cb88bb",
            "name": "Count total portfolios",
            "request": {
              "description": {
                "content": "Returns the total count of portfolios for a specific organization and ledger as a header without a response body",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6172ff0-9d1e-47b3-8835-92283380bda9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8bfe22e8-2e44-47dc-b17d-656061fd721d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e8d21b93-47c3-4fc9-b2d3-f936f8d2b766",
            "name": "Retrieve a specific portfolio",
            "request": {
              "description": {
                "content": "Returns detailed information about a portfolio identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1ddc890-1e78-4c75-8ce5-7757b93e42f2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f5c0932e-52e4-4687-9b22-fdbc87d1d229",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "d1f950de-5ccb-45b2-ba39-fd34856f72d6",
            "name": "Delete a portfolio",
            "request": {
              "description": {
                "content": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de35af7f-cbc8-4745-95b0-f3df987cb784",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"portfolioId\")) {",
                    "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2196a626-2ab1-4b44-8905-861407d2d8d0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "ea96433f-abe9-43d6-b0c3-2b6f6d674c52",
            "name": "Update a portfolio",
            "request": {
              "description": {
                "content": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "portfolios",
                  "{{portfolioId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Portfolio ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{portfolioId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b3a16d30-85c9-4d44-be1d-44ddf7621a79",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7232d68b-d406-426e-a70b-038ebef6cac5",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eec9357e-9a19-418c-90df-c15f8aa7bdfb",
        "name": "Segments",
        "description": {
          "content": "Endpoints for managing segments, which are used to categorize accounts for reporting or management purposes.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "618b15f5-6212-4ae6-bd8b-d7e11216ba2c",
            "name": "List all segments",
            "request": {
              "description": {
                "content": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "JSON string to filter segments by metadata fields",
                      "type": "text/plain"
                    },
                    "key": "metadata",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Maximum number of records to return per page",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Page number for pagination",
                      "type": "text/plain"
                    },
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort direction for results based on creation date",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cff8197f-78d5-4783-b900-1c76cb3434a0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0ea882d-c7cb-41c5-b8ea-e817ad64c759",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "eb8eda04-3935-4f65-8124-611039eb7d65",
            "name": "Create a new segment",
            "request": {
              "description": {
                "content": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3511821-448d-4967-a4fa-95e789e67e61",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "430ae8bd-1a0d-4054-93e2-5616e39929db",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"segmentId\", jsonData.id);",
                    "    console.log(\"segmentId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract segmentId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "d5d5f663-833e-4e5a-9857-e141b0c7827f",
            "name": "Count segments",
            "request": {
              "description": {
                "content": "Returns the total count of segments for the specified organization and ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "metrics",
                  "count"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6a623bd-8cf3-446b-8fdc-4661fe6db906",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "03759be2-001b-4f3d-b141-42049293e09a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  // HEAD responses have no body, skip JSON validation",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "57913c79-4cf9-47b1-a0a9-46999bb3dda7",
            "name": "Retrieve a specific segment",
            "request": {
              "description": {
                "content": "Returns detailed information about a segment identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f33acd5-943e-4d28-929b-ccf6ac83a07d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "269fbe66-bc3c-4155-9328-5e664f5bdef1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9de9ee53-a09f-494f-82bd-e0acf116228b",
            "name": "Delete a segment",
            "request": {
              "description": {
                "content": "Permanently removes a segment from the specified ledger. This operation cannot be undone.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1e90884-29f5-4100-9c4b-084d87a31f3b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"segmentId\")) {",
                    "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ea330851-6dc9-4875-9315-b0dfd906f243",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1367be82-1a0e-47fb-8ed1-cd16318a60d7",
            "name": "Update a segment",
            "request": {
              "description": {
                "content": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "segments",
                  "{{segmentId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Segment ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{segmentId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "293e8310-dc8d-4f03-95b2-7d6419af753e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20842288-c050-447d-9ac3-da5cabfa679f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "79a89b65-6af8-40b5-bc54-50750786703a",
        "name": "Balances",
        "description": {
          "content": "Endpoints for retrieving account balances, which represent the current value of an account.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "f70a3dce-ad36-4147-91d3-a97d398152e9",
            "name": "Get Balances using Alias",
            "request": {
              "description": {
                "content": "Get Balances with alias",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "alias",
                  "{{accountAlias}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Alias (e.g. @person1)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "alias"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e26e5dbe-08b4-4486-a9f2-9afa3f56193f",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5039964f-1df3-40fd-8ef1-686bdadd9421",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "3c6067b7-9525-47f0-a7d5-b25bbd0f411a",
            "name": "Get External balances using code",
            "request": {
              "description": {
                "content": "Get External balances with code",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "external",
                  "{{externalCode}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Code (e.g. BRL)",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "",
                    "key": "code"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82bf3652-34e2-4621-93e0-9441260f98a6",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "569a4f96-9ade-4737-bba1-f5487e396086",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "9b03d3da-ca86-4664-9625-13d57790dba9",
            "name": "Get all balances by account id",
            "request": {
              "description": {
                "content": "Get all balances by account id",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8438d5b5-10ab-414e-a6f0-0f80c4b69a59",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "74a351f4-f6b7-4531-8684-46e613c7193d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "77e6399d-13a4-4197-aa57-8fb01302a71c",
            "name": "Create Additional Balance",
            "request": {
              "description": {
                "content": "Create an Additional Balance with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true,\n  \"key\": \"asset-freeze\",\n  \"assetCode\": \"USD\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8298adf-8ff7-4dba-b0db-cfa035e7ee20",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d447050f-189a-4eaa-8970-fdeca6cc16bd",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "e0de7539-5516-4a74-83da-7946b07b73e6",
            "name": "Get all balances",
            "request": {
              "description": {
                "content": "Get all balances",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8af71b96-b29c-4ab1-953a-1767f63e8e9c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "670d6c09-8fb1-4603-b1d3-c54867c2ea95",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "13cd018d-aec7-4aa1-a733-6a36c9caec65",
            "name": "Get Balance by id",
            "request": {
              "description": {
                "content": "Get a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "435eb8b0-8516-4d5d-baa1-e78b9a8ab8b9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be3ea808-d1ab-4180-8ab2-c16deaf42341",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "2f4a5324-93a8-4538-86e2-baff88f53ded",
            "name": "Delete Balance by account",
            "request": {
              "description": {
                "content": "Delete a Balance with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5f08339-1856-45e9-aac5-cf99bf69a2cb",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f858c65-ce6c-4272-91d0-ff9ff36d0dc9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "5119cd22-6337-43f5-a03f-7d903decec06",
            "name": "Update Balance",
            "request": {
              "description": {
                "content": "Update a Balance with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "balances",
                  "{{balanceId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Balance ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{balanceId}}",
                    "key": "balance_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13267115-5cc5-4d35-b371-9e7ea82e9e15",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b1d772a-64e6-4c61-bb7b-6e3f1c8b09e1",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f232cbd8-ad1d-43fd-a11a-f9e5ac75aaf2",
        "name": "Operations",
        "description": {
          "content": "Endpoints for managing operations, which are the individual debit and credit entries that make up a transaction.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "2de51d8f-cdfe-4d89-b1cd-f2860fb9552b",
            "name": "Get all Operations by account",
            "request": {
              "description": {
                "content": "Get all Operations with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "DEBIT, CREDIT",
                      "type": "text/plain"
                    },
                    "key": "type",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "424f85a5-7636-477f-87d7-20ae5e0e51bf",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "382ed5d7-4418-48ad-923c-22f5125f8568",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "7f438ce4-6524-4264-9d16-6de16181cce0",
            "name": "Get Operation",
            "request": {
              "description": {
                "content": "Get an Operation with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "accounts",
                  "{{accountId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Account ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{accountId}}",
                    "key": "account_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eee03453-60bb-431b-94cc-f0b819bebd83",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountId\")) {",
                    "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be149a27-524b-4931-a1cd-cb59e2912b4a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "a92584dd-dd3c-497d-8f55-4380ed20e842",
            "name": "Update an Operation",
            "request": {
              "description": {
                "content": "Update an Operation with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}",
                  "operations",
                  "{{operationId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  },
                  {
                    "description": {
                      "content": "Operation ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationId}}",
                    "key": "operation_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4be987b3-4da4-46d6-a0a5-55ead935e622",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"transactionId\")) {",
                    "  console.log(\"Warning: transactionId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"operationId\")) {",
                    "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f084fc5a-7969-4fd1-ac36-62ae1594aebc",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e61f9fe0-c1d7-4cd6-82de-221f11f4c5c8",
        "name": "Operation Route",
        "description": {
          "content": "Endpoints related to Operation Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "e4173688-3d58-436c-8a6e-69883cba2f76",
            "name": "Retrieve all operation routes",
            "request": {
              "description": {
                "content": "Returns a list of all operation routes within the specified ledger with cursor-based pagination",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6f43f25-ea35-4938-af44-a09d4f47a623",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a114b815-06e3-48ae-afdc-607a5a822f92",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "684dd7ba-74f0-42e2-a3b4-744b31d1db04",
            "name": "Create Operation Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Operation Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5954aff-568a-4e5f-a26f-0b6bf365a063",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3f0eea6-dcb1-461b-8a24-674e2bec30a2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "3ce8d858-304b-4c07-95ab-fc23fe579b50",
            "name": "Retrieve a specific operation route",
            "request": {
              "description": {
                "content": "Returns detailed information about an operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{ledgerId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ba62483-63dc-4d4d-a5b6-292edade993e",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95eee9c7-cee0-47bf-8f9a-463440e69bd2",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "58ca1ed6-8105-4703-ba66-9a02b4eb3ef8",
            "name": "Delete an operation route",
            "request": {
              "description": {
                "content": "Deletes an existing operation route identified by its UUID within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2eb26599-60ee-44c5-a4fb-61df9945e5c3",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2da9933a-1a00-4cf0-a520-981c11eace4d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "14ebd6ba-7357-4063-9b24-15aa656cbebb",
            "name": "Update an operation route",
            "request": {
              "description": {
                "content": "Updates an existing operation route's properties such as title, description, and type within the specified ledger",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "operation-routes",
                  "{{operationRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Operation Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{operationRouteId}}",
                    "key": "operation_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"account\": null,\n  \"description\": \"This operation route handles cash-in transactions from service charge collections\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"title\": \"Cashin from service charge\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87c6c27c-3439-4dbd-a3da-98d4a87a25f0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c727b3ee-802e-486a-b05e-b630688c8920",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d153d4e1-5996-4db9-818a-b1bf2bcfda65",
        "name": "Transaction Route",
        "description": {
          "content": "Endpoints related to Transaction Route.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "af400b24-3330-4e15-ba8b-65a424cf7d3c",
            "name": "Get all Transaction Routes",
            "request": {
              "description": {
                "content": "Endpoint to get all Transaction Routes with optional metadata filtering.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9227ad8c-6515-42be-b985-bbe226b31bc5",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26bc0960-3f93-4b57-9b95-9819b2543885",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1653bd3b-7618-42a1-bb34-ba5b80a58cc3",
            "name": "Create Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to create a new Transaction Route.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b21eaae9-3c04-4826-b053-d7d9896f8823",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b33c223b-f23f-43b6-85ad-6bb33e40d50d",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "92c2e9fd-e2cf-4a9f-9a26-d1187818e818",
            "name": "Get Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to get a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f51b8cc1-55ff-4a6f-a6b9-e0ec6820e7ee",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c146ae68-02f8-4cb3-8249-2cfc33adb16a",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "5c51ca72-f13e-4666-b334-4ba850e83f5d",
            "name": "Delete Transaction Route by ID",
            "request": {
              "description": {
                "content": "Endpoint to delete a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67f8da3f-3ea6-4d9d-a2c0-54a6051d3914",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "70b261cf-e5a0-43ac-a120-fe8d824b938b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "6b866163-090f-4cfb-a7f4-a2ba645b59bb",
            "name": "Update Transaction Route",
            "request": {
              "description": {
                "content": "Endpoint to update a Transaction Route by its ID.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transaction-routes",
                  "{{transactionRouteId}}"
                ],
                "host": [
                  "{{onboardingUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction Route ID in UUID format",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionRouteId}}",
                    "key": "transaction_route_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token with format: Bearer {token}",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID for tracing",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b14c4ea-6d55-4eeb-ab50-6b7ca6b9fa8b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "55ebfce4-da61-4a2f-a0c2-9945415aac90",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5a951ba0-90e1-4e4b-8df3-15ce19acf7ec",
        "name": "Transactions",
        "description": {
          "content": "Endpoints for managing transactions, which represent the movement of value between accounts.",
          "type": "text/plain"
        },
        "item": [
          {
            "id": "d7ac5037-48e1-46cd-9532-99e03343295d",
            "name": "Get all Transactions",
            "request": {
              "description": {
                "content": "Get all Transactions with the input metadata or without metadata",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "description": {
                      "content": "Limit",
                      "type": "text/plain"
                    },
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Start Date",
                      "type": "text/plain"
                    },
                    "key": "start_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "End Date",
                      "type": "text/plain"
                    },
                    "key": "end_date",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Sort Order",
                      "type": "text/plain"
                    },
                    "key": "sort_order",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "description": {
                      "content": "Cursor",
                      "type": "text/plain"
                    },
                    "key": "cursor",
                    "value": ""
                  }
                ],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "009f28cc-c010-4f32-819e-cef51c62d324",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b996768f-7a3a-4f2b-af54-9dd302b345c0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "1e1f8308-3036-40ff-9b67-db47dba3cfc2",
            "name": "Create a Transaction Annotation using JSON",
            "request": {
              "description": {
                "content": "Create a Transaction Annotation with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "annotation"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c9de9758-2fb5-4bfe-87c9-39a6912292f9",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43747446-7c87-4982-872e-5a43ac536921",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "58a3c27e-1138-4267-9521-b180782ee441",
            "name": "Create a Transaction using DSL",
            "request": {
              "description": {
                "content": "Create a Transaction with the input DSL file",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "dsl"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "93253451-5436-4db7-aacb-a25da6012b50",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9d4b829d-856f-4aac-9c56-8407f0df39d4",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // DSL endpoint requires proper DSL format",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "6e5796a7-d50e-460c-b5a5-eee2c2fff029",
            "name": "Create a Transaction without passing from source",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "inflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5583bc4-f0e6-4fbc-98d6-17bf110390d0",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e5ddb9e-2655-413f-bd71-4124ed9cea38",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"inflowTransactionId\", jsonData.id);",
                    "    console.log(\"inflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract inflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "c413b60f-6574-40fc-b5bb-3036e9bb13b1",
            "name": "Create a Transaction using JSON",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "json"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                },
                {
                  "disabled": false,
                  "description": {
                    "content": "Unique key to prevent duplicate transactions",
                    "type": "text/plain"
                  },
                  "key": "X-Idempotency",
                  "value": "{{idempotencyKey}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60fb2861-c763-420d-afb9-ac1da885707a",
                  "type": "text/javascript",
                  "exec": [
                    "// Generate a unique idempotency key for this transaction",
                    "const timestamp = new Date().getTime();",
                    "const random = Math.floor(Math.random() * 1000000);",
                    "const stepId = pm.variables.get(\"$guid\") || \"\";",
                    "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                    "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                    "",
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fad219d0-96b6-4e7d-b3ab-f42007bea198",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"transactionId\", jsonData.id);",
                    "    console.log(\"transactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract transactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "470ad3e1-d700-45f8-a5ad-74b02c7f1c7d",
            "name": "Create a Transaction without passing to distribution",
            "request": {
              "description": {
                "content": "Create a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "outflow"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5449129a-93e9-439e-8197-3d2b182c261c",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    "",
                    "// Validate required variables",
                    "",
                    "if (!pm.environment.get(\"organizationId\")) {",
                    "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"ledgerId\")) {",
                    "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                    "}",
                    "if (!pm.environment.get(\"accountAlias\")) {",
                    "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                    "}"
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5129bf50-c5ca-42ee-bbfb-66f81c0e5513",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    "",
                    "// Extract variables from response for use in subsequent requests",
                    "",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  if (jsonData && jsonData.id) {",
                    "    pm.environment.set(\"outflowTransactionId\", jsonData.id);",
                    "    console.log(\"outflowTransactionId set to: \" + jsonData.id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract outflowTransactionId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                    "    // Find the destination operation (the one with account in the 'destination' array)",
                    "    var destinationOp = null;",
                    "    if (jsonData.destination && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                    "    }",
                    "    ",
                    "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                    "    if (!destinationOp) {",
                    "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // If we still couldn't find it, use the first operation",
                    "    if (!destinationOp && jsonData.operations.length > 0) {",
                    "      destinationOp = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (destinationOp && destinationOp.balanceId) {",
                    "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                    "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                    "    }",
                    "  }",
                    "  // Check if response is an array with at least one item",
                    "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                    "  } ",
                    "  // Check if response has a data array with at least one item",
                    "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                    "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                    "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract balanceId: \", error);",
                    "}",
                    "try {",
                    "  var jsonData = pm.response.json();",
                    "  // Check if this is a transaction response with operations",
                    "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                    "    var operationToUse = null;",
                    "    ",
                    "    // Try multiple strategies to find the right operation",
                    "    // Strategy 1: Find destination operation based on account alias",
                    "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                    "      const destAccount = jsonData.destination[0];",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.accountAlias === destAccount || ",
                    "        op.account === destAccount ||",
                    "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                    "    }",
                    "    ",
                    "    // Strategy 3: Find operation with non-zero positive amount",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => ",
                    "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                    "      );",
                    "    }",
                    "    ",
                    "    // Strategy 4: Use the first operation with valid ID",
                    "    if (!operationToUse) {",
                    "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                    "    }",
                    "    ",
                    "    // Strategy 5: Just use the first operation",
                    "    if (!operationToUse && jsonData.operations.length > 0) {",
                    "      operationToUse = jsonData.operations[0];",
                    "    }",
                    "    ",
                    "    if (operationToUse && operationToUse.id) {",
                    "      pm.environment.set(\"operationId\", operationToUse.id);",
                    "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                    "    } else {",
                    "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                    "    }",
                    "  } else {",
                    "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                    "  }",
                    "} catch (error) {",
                    "  console.error(\"Failed to extract operationId: \", error);",
                    "  console.error(\"Response data: \", pm.response.text());",
                    "}"
                  ]
                }
              }
            ]
          },
          {
            "id": "6f7c033e-256f-4124-bdcf-dd37ac1db609",
            "name": "Get a Transaction by ID",
            "request": {
              "description": {
                "content": "Get a Transaction with the input ID",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f02c3936-e0de-4153-b605-b3ac2105f731",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d7120644-3cbc-4c86-a29c-745f115d8c23",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          },
          {
            "id": "84734db8-1c1f-4106-8ba2-525686d36760",
            "name": "Update a Transaction",
            "request": {
              "description": {
                "content": "Update a Transaction with the input payload",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "v1",
                  "organizations",
                  "{{organizationId}}",
                  "ledgers",
                  "{{ledgerId}}",
                  "transactions",
                  "{{transactionId}}"
                ],
                "host": [
                  "{{transactionUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "Organization ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{organizationId}}",
                    "key": "organization_id"
                  },
                  {
                    "description": {
                      "content": "Ledger ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{ledgerId}}",
                    "key": "ledger_id"
                  },
                  {
                    "description": {
                      "content": "Transaction ID",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "{{transactionId}}",
                    "key": "transaction_id"
                  }
                ]
              },
              "header": [
                {
                  "disabled": false,
                  "description": {
                    "content": "Authorization Bearer Token",
                    "type": "text/plain"
                  },
                  "key": "Authorization",
                  "value": "Bearer {{authToken}}"
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Request ID",
                    "type": "text/plain"
                  },
                  "key": "X-Request-Id",
                  "value": "{{$guid}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "def3fd5c-ba9e-4e57-a9d3-74646ecfb26b",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Check for auth token",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "  console.log(\"Warning: authToken is not set in the environment\");",
                    "}",
                    "",
                    "// Set authorization header if it exists",
                    "if (pm.environment.get(\"authToken\")) {",
                    "  pm.request.headers.upsert({",
                    "    key: \"Authorization\",",
                    "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                    "  });",
                    "}",
                    "",
                    "// Set request ID for tracing",
                    "pm.request.headers.upsert({",
                    "  key: \"X-Request-Id\",",
                    "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                    "});",
                    ""
                  ]
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "235a936a-8c3b-4619-a12c-e951af23af32",
                  "type": "text/javascript",
                  "exec": [
                    "",
                    "// Test for successful response status",
                    "if (pm.request.method === \"POST\") {",
                    "  pm.test(\"Status code is 200 or 201\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                    "  });",
                    "} else if (pm.request.method === \"DELETE\") {",
                    "  pm.test(\"Status code is 204 No Content\", function () {",
                    "    pm.expect(pm.response.code).to.equal(204);",
                    "  });",
                    "} else {",
                    "  pm.test(\"Status code is 200 OK\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "  });",
                    "}",
                    "",
                    "// Validate response has the expected format",
                    "pm.test(\"Response has the correct structure\", function() {",
                    "  // For DELETE operations that return 204 No Content, the body is empty by design",
                    "  if (pm.response.code === 204) {",
                    "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                    "    return;",
                    "  }",
                    "  ",
                    "  // For responses with content, validate JSON structure",
                    "  pm.response.to.be.json;",
                    "  ",
                    "  // Add specific validation based on response schema here",
                    "});",
                    ""
                  ]
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "description": {
          "content": "This collection requires the MIDAZ environment to be selected for proper functionality.",
          "type": "text/plain"
        },
        "type": "string",
        "value": "MIDAZ",
        "key": "environment"
      }
    ],
    "info": {
      "_postman_id": "00b3869d-895d-49b2-a6b5-68b193471560",
      "name": "MIDAZ",
      "version": {
        "raw": "v1.48.0",
        "major": 1,
        "minor": 48,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.48.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "This is a swagger documentation for the Midaz Ledger API\n\n**IMPORTANT**: This collection requires the **MIDAZ Environment** to be selected for proper functionality. Please ensure you have imported and selected the MIDAZ environment before using this collection.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "midaz-environment-id",
    "name": "MIDAZ Environment",
    "values": [
      {
        "type": "any",
        "value": "@treasury_checking",
        "key": "accountAlias"
      },
      {
        "type": "any",
        "value": "01994569-92bd-7362-80d0-b1bb60c3fc5f",
        "key": "accountId"
      },
      {
        "type": "any",
        "value": "01994569-90a7-72a7-a722-78dd9ebd07b1",
        "key": "assetId"
      },
      {
        "type": "any",
        "value": "",
        "key": "assetRateId"
      },
      {
        "type": "any",
        "value": "",
        "key": "authToken"
      },
      {
        "type": "any",
        "value": "01994569-92c6-76e3-91b0-a2df000fce15",
        "key": "balanceId"
      },
      {
        "type": "any",
        "value": "http://localhost",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "USD",
        "key": "externalCode"
      },
      {
        "type": "any",
        "value": "7b0166dc-c431-4e62-b885-87be428046ec",
        "key": "idempotencyKey"
      },
      {
        "type": "any",
        "value": "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
        "key": "ledgerId"
      },
      {
        "type": "any",
        "value": "3000",
        "key": "onboardingPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{onboardingPort}}",
        "key": "onboardingUrl"
      },
      {
        "type": "any",
        "value": "01994569-a53c-7067-a947-5df52f6c916a",
        "key": "operationId"
      },
      {
        "type": "any",
        "value": "01994569-8c31-7481-b7fd-2ca7d0f8d220",
        "key": "organizationId"
      },
      {
        "type": "any",
        "value": "01994569-94ca-7753-8976-99330605271b",
        "key": "portfolioId"
      },
      {
        "type": "any",
        "value": "01994569-96e1-7963-b453-75c507f707fe",
        "key": "segmentId"
      },
      {
        "type": "any",
        "value": "01994569-a538-7c43-898e-2ae342edb845",
        "key": "transactionId"
      },
      {
        "type": "any",
        "value": "3001",
        "key": "transactionPort"
      },
      {
        "type": "any",
        "value": "{{baseUrl}}:{{transactionPort}}",
        "key": "transactionUrl"
      },
      {
        "type": "any",
        "value": 34,
        "key": "perf_step_1"
      },
      {
        "type": "any",
        "value": 24,
        "key": "perf_step_2"
      },
      {
        "type": "any",
        "value": 18,
        "key": "perf_step_3"
      },
      {
        "type": "any",
        "value": 15,
        "key": "perf_step_4"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_5"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_6"
      },
      {
        "type": "any",
        "value": 14,
        "key": "perf_step_7"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_8"
      },
      {
        "type": "any",
        "value": 22,
        "key": "perf_step_9"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_10"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_11"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_12"
      },
      {
        "type": "any",
        "value": 15,
        "key": "perf_step_13"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_14"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_15"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_16"
      },
      {
        "type": "any",
        "value": 9,
        "key": "perf_step_17"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_18"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_19"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_20"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_21"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_22"
      },
      {
        "type": "any",
        "value": 12,
        "key": "perf_step_23"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_24"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_25"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_26"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_27"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_28"
      },
      {
        "type": "any",
        "value": 2,
        "key": "perf_step_29"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_30"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_31"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_32"
      },
      {
        "type": "any",
        "value": 25,
        "key": "perf_step_33"
      },
      {
        "type": "any",
        "value": 10,
        "key": "perf_step_34"
      },
      {
        "type": "any",
        "value": "01994569-9d59-7521-ba83-613a78c503dd",
        "key": "inflowTransactionId"
      },
      {
        "type": "any",
        "value": "01994569-9d5b-7239-8c24-a8e60262c4d1",
        "key": "inflowOperationId"
      },
      {
        "type": "any",
        "value": "01994569-92c6-76e3-91b0-a2df000fce15",
        "key": "inflowBalanceId"
      },
      {
        "type": "any",
        "value": 15,
        "key": "perf_step_35"
      },
      {
        "type": "any",
        "value": "01994569-9dde-77a6-9d25-40ab80c43718",
        "key": "outflowTransactionId"
      },
      {
        "type": "any",
        "value": "01994569-9de1-7111-80fd-58002c754642",
        "key": "outflowOperationId"
      },
      {
        "type": "any",
        "value": "01994569-92c6-76e3-91b0-a2df000fce15",
        "key": "outflowBalanceId"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_36"
      },
      {
        "type": "any",
        "value": 30,
        "key": "perf_step_37"
      },
      {
        "type": "any",
        "value": 33,
        "key": "perf_step_38"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_39"
      },
      {
        "type": "any",
        "value": 8,
        "key": "perf_step_40"
      },
      {
        "type": "any",
        "value": 13,
        "key": "perf_step_41"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_42"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_43"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_44"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_45"
      },
      {
        "type": "any",
        "value": 7,
        "key": "perf_step_46"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_47"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_48"
      },
      {
        "type": "any",
        "value": 100,
        "key": "currentBalanceAmount"
      },
      {
        "type": "any",
        "value": 16,
        "key": "perf_step_49"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_50"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_51"
      },
      {
        "type": "any",
        "value": 4,
        "key": "perf_step_52"
      },
      {
        "type": "any",
        "value": 5,
        "key": "perf_step_53"
      },
      {
        "type": "any",
        "value": 11,
        "key": "perf_step_54"
      },
      {
        "type": "any",
        "value": 6,
        "key": "perf_step_55"
      },
      {
        "type": "any",
        "value": 3,
        "key": "perf_step_56"
      }
    ]
  },
  "globals": {
    "id": "c7779d4f-12d0-4833-b5fa-5e5e698ffbdc",
    "values": [
      {
        "type": "any",
        "value": 1757806169177,
        "key": "step_1_start"
      },
      {
        "type": "any",
        "value": 1757806169321,
        "key": "step_2_start"
      },
      {
        "type": "any",
        "value": 1757806169461,
        "key": "step_3_start"
      },
      {
        "type": "any",
        "value": 1757806169605,
        "key": "step_4_start"
      },
      {
        "type": "any",
        "value": 1757806169736,
        "key": "step_5_start"
      },
      {
        "type": "any",
        "value": 1757806169868,
        "key": "step_6_start"
      },
      {
        "type": "any",
        "value": 1757806170008,
        "key": "step_7_start"
      },
      {
        "type": "any",
        "value": 1757806170146,
        "key": "step_8_start"
      },
      {
        "type": "any",
        "value": 1757806170294,
        "key": "step_9_start"
      },
      {
        "type": "any",
        "value": 1757806170427,
        "key": "step_10_start"
      },
      {
        "type": "any",
        "value": 1757806170562,
        "key": "step_11_start"
      },
      {
        "type": "any",
        "value": 1757806170689,
        "key": "step_12_start"
      },
      {
        "type": "any",
        "value": 1757806170824,
        "key": "step_13_start"
      },
      {
        "type": "any",
        "value": 1757806170946,
        "key": "step_14_start"
      },
      {
        "type": "any",
        "value": 1757806171079,
        "key": "step_15_start"
      },
      {
        "type": "any",
        "value": 1757806171215,
        "key": "step_16_start"
      },
      {
        "type": "any",
        "value": 1757806171350,
        "key": "step_17_start"
      },
      {
        "type": "any",
        "value": 1757806171484,
        "key": "step_18_start"
      },
      {
        "type": "any",
        "value": 1757806171618,
        "key": "step_19_start"
      },
      {
        "type": "any",
        "value": 1757806171751,
        "key": "step_20_start"
      },
      {
        "type": "any",
        "value": 1757806171882,
        "key": "step_21_start"
      },
      {
        "type": "any",
        "value": 1757806172012,
        "key": "step_22_start"
      },
      {
        "type": "any",
        "value": 1757806172155,
        "key": "step_23_start"
      },
      {
        "type": "any",
        "value": 1757806172283,
        "key": "step_24_start"
      },
      {
        "type": "any",
        "value": 1757806172412,
        "key": "step_25_start"
      },
      {
        "type": "any",
        "value": 1757806172534,
        "key": "step_26_start"
      },
      {
        "type": "any",
        "value": 1757806172656,
        "key": "step_27_start"
      },
      {
        "type": "any",
        "value": 1757806172772,
        "key": "step_28_start"
      },
      {
        "type": "any",
        "value": 1757806172889,
        "key": "step_29_start"
      },
      {
        "type": "any",
        "value": 1757806173008,
        "key": "step_30_start"
      },
      {
        "type": "any",
        "value": 1757806173138,
        "key": "step_31_start"
      },
      {
        "type": "any",
        "value": 1757806173269,
        "key": "step_32_start"
      },
      {
        "type": "any",
        "value": 1757806173412,
        "key": "step_33_start"
      },
      {
        "type": "any",
        "value": 1757806173542,
        "key": "step_34_start"
      },
      {
        "type": "any",
        "value": 1757806173679,
        "key": "step_35_start"
      },
      {
        "type": "any",
        "value": 1757806173812,
        "key": "step_36_start"
      },
      {
        "type": "any",
        "value": 1757806173968,
        "key": "step_37_start"
      },
      {
        "type": "any",
        "value": 1757806174124,
        "key": "step_38_start"
      },
      {
        "type": "any",
        "value": 1757806174249,
        "key": "step_39_start"
      },
      {
        "type": "any",
        "value": 1757806174384,
        "key": "step_40_start"
      },
      {
        "type": "any",
        "value": 1757806174520,
        "key": "step_41_start"
      },
      {
        "type": "any",
        "value": 1757806174643,
        "key": "step_42_start"
      },
      {
        "type": "any",
        "value": 1757806174765,
        "key": "step_43_start"
      },
      {
        "type": "any",
        "value": 1757806174889,
        "key": "step_44_start"
      },
      {
        "type": "any",
        "value": 1757806175021,
        "key": "step_45_start"
      },
      {
        "type": "any",
        "value": 1757806175154,
        "key": "step_46_start"
      },
      {
        "type": "any",
        "value": 1757806175284,
        "key": "step_47_start"
      },
      {
        "type": "any",
        "value": 1757806175421,
        "key": "step_48_start"
      },
      {
        "type": "any",
        "value": 1757806175564,
        "key": "step_49_start"
      },
      {
        "type": "any",
        "value": 1757806175700,
        "key": "step_50_start"
      },
      {
        "type": "any",
        "value": 1757806175837,
        "key": "step_51_start"
      },
      {
        "type": "any",
        "value": 1757806175969,
        "key": "step_52_start"
      },
      {
        "type": "any",
        "value": 1757806176100,
        "key": "step_53_start"
      },
      {
        "type": "any",
        "value": 1757806176240,
        "key": "step_54_start"
      },
      {
        "type": "any",
        "value": 1757806176372,
        "key": "step_55_start"
      },
      {
        "type": "any",
        "value": 1757806176503,
        "key": "step_56_start"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 113,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 165,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 57,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 56,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 9.75438596491228,
      "responseMin": 2,
      "responseMax": 34,
      "responseSd": 7.618722786902188,
      "dnsAverage": 0.4985681818181657,
      "dnsMin": 0.1327499999997599,
      "dnsMax": 0.5099999999999909,
      "dnsSd": 0.06466812926128203,
      "firstByteAverage": 8.415559245614073,
      "firstByteMin": 0.925083000000086,
      "firstByteMax": 31.553499999999985,
      "firstByteSd": 7.049776788321162,
      "started": 1757806169002,
      "completed": 1757806176632
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 57,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8781357f-f85f-40e6-a675-9f0604a266bc",
          "httpRequestId": "785b783f-3a9f-4045-be24-b2b715977879"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations",
              "normalizedPath": "/v1/organizations",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations"
            }
          },
          "id": "78c7f9cf-4969-4324-8f80-e636ad65a9e8",
          "name": "1. Create Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e54b720-99e5-4c9d-8215-9de44450b089",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "3be06d2f-56a2-4700-8715-06ad823a3209"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "88934037-b24c-4974-bcbd-ec1f878cf641",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 1: Create Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 1: Create Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 1\");\n"
                ],
                "_lastExecutionId": "bfc39237-04bf-470e-aaa1-5dd2d0d438e3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f268a0d8-2ee0-48c6-8df5-e783e7c61150"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f00ac48b-af8e-45cf-9097-cc5127ec63cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "406",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5e0a589b-88d0-4a44-bb3e-28c63404eb79",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "490"
            },
            {
              "key": "X-Request-Id",
              "value": "cc4f3da6-045e-4be2-890b-28ba95232d18"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              49,
              51,
              55,
              50,
              55,
              49,
              49,
              55,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              49,
              51,
              55,
              50,
              55,
              49,
              51,
              48,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 34,
          "responseSize": 490
        },
        "id": "78c7f9cf-4969-4324-8f80-e636ad65a9e8",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè¢ Business Logic: Organization has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "68cf1519-31d4-40de-b3ca-61479fc82310",
          "length": 57,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8440fc6a-d77c-48b1-99ad-7b46977cd325"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "f5004389-58b3-4066-b17d-325d004f8df1",
          "name": "2. Get Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "723ec87e-fafc-4eab-b5e1-b6ded6b55450",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "30185ab8-8a41-4433-86fb-8a9a046fb353"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d3ab6564-fc74-4463-a26a-7b2a841d5fa8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 2: Get Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 2: Get Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 2\");\n"
                ],
                "_lastExecutionId": "a4848658-ecd7-43b0-9972-8e5c65e4fbc4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b039ecbe-3800-4911-b49d-452e0b857231"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f37d270b-4595-4d3c-ac8e-0f6e05c5722c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "24ae1f61-9cc9-46fa-9e06-b5b10498f3f3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "484"
            },
            {
              "key": "X-Request-Id",
              "value": "27c49a17-f1bc-4e62-9b0e-2c2d45be6714"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              83,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              49,
              51,
              55,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              49,
              51,
              55,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 484
        },
        "id": "f5004389-58b3-4066-b17d-325d004f8df1",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "10e45050-f954-4817-8204-a38669e02351",
          "length": 57,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7a89531a-b11d-4d5d-bfb8-fd101a233b05"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "a146b03d-4b14-4f41-a23a-df976823901d",
          "name": "3. Update Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bbf3c88e-7a43-4fe8-aa1f-3b35ecf6c58c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "2e6cdab1-c317-4119-b693-48a7c2fd7250"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0d4dabe4-6fb6-4733-af1f-e3867fca8185",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 3: Update Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 3: Update Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 3\");\n"
                ],
                "_lastExecutionId": "0837d3bf-06d1-4ab6-818c-aaa7bb08bc82"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "77c6fd66-ff53-434f-91bb-3c856192411a"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "931e8212-7b79-468e-8d6e-73fee15b938d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "368",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6f88a789-0499-4efa-b55a-41cef7d340f6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:28 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "484"
            },
            {
              "key": "X-Request-Id",
              "value": "2c3c07c1-5f39-4a15-9480-abbc15682d65"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              71,
              114,
              111,
              117,
              112,
              32,
              76,
              116,
              100,
              46,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              34,
              76,
              101,
              114,
              105,
              97,
              110,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              70,
              105,
              110,
              97,
              110,
              99,
              105,
              97,
              108,
              32,
              65,
              118,
              101,
              110,
              117,
              101,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              53,
              48,
              48,
              34,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              48,
              49,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              78,
              101,
              119,
              32,
              89,
              111,
              114,
              107,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              78,
              89,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              49,
              51,
              55,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              52,
              52,
              49,
              57,
              50,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 484
        },
        "id": "a146b03d-4b14-4f41-a23a-df976823901d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a4167e05-c473-40fe-a0a2-47db5431f063",
          "length": 57,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74aa3061-b7ed-4b2e-8ba4-0a8cdf102a93"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations",
              "normalizedPath": "/v1/organizations",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations"
            }
          },
          "id": "c0f2c60e-788e-4906-a25f-cb4f8821b2db",
          "name": "4. List Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter organizations by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5de77469-7721-48e9-b945-ff22b8427f6c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "e082972e-6895-41fe-a0bf-f9694ee38c7d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5328cf67-8d4d-4a58-8fc2-730e4aa2faff",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 4: List Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 4: List Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 4\");\n"
                ],
                "_lastExecutionId": "dd71a9e7-b9aa-429d-8789-0e7c5fa4f89b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 4: List Organizations**\n\nLists all organizations",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3dfc9877-a427-49be-8d52-a8d5fddcf58b"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c5e51ce7-f805-42f1-a997-22b460c066be",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "572ae980-708f-4edd-9833-fb8f61b64075",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "3892"
            },
            {
              "key": "X-Request-Id",
              "value": "fadedec1-fd3a-4754-88d9-7723ceee71f3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              50,
              45,
              48,
              56,
              52,
              53,
              45,
              55,
              55,
              54,
              54,
              45,
              56,
              100,
              48,
              53,
              45,
              52,
              101,
              57,
              53,
              48,
              100,
              56,
              57,
              99,
              98,
              56,
              57,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              72,
              56,
              117,
              81,
              57,
              120,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              110,
              57,
              56,
              120,
              104,
              98,
              83,
              77,
              74,
              50,
              87,
              101,
              48,
              113,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              51,
              46,
              51,
              52,
              57,
              52,
              52,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              51,
              46,
              51,
              52,
              57,
              52,
              52,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              52,
              45,
              50,
              53,
              101,
              57,
              45,
              55,
              48,
              49,
              49,
              45,
              98,
              49,
              56,
              57,
              45,
              97,
              48,
              55,
              99,
              53,
              49,
              98,
              55,
              97,
              101,
              102,
              52,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              122,
              65,
              82,
              53,
              100,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              103,
              75,
              74,
              103,
              121,
              71,
              69,
              54,
              120,
              75,
              70,
              87,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              49,
              50,
              46,
              48,
              48,
              56,
              57,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              49,
              50,
              46,
              48,
              48,
              56,
              57,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              52,
              45,
              52,
              100,
              48,
              98,
              45,
              55,
              100,
              98,
              50,
              45,
              97,
              52,
              98,
              52,
              45,
              55,
              98,
              98,
              50,
              97,
              49,
              49,
              55,
              99,
              55,
              102,
              49,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              52,
              108,
              89,
              48,
              113,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              68,
              84,
              97,
              87,
              113,
              78,
              98,
              73,
              108,
              55,
              107,
              48,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              50,
              50,
              46,
              48,
              50,
              55,
              56,
              57,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              50,
              50,
              46,
              48,
              50,
              55,
              56,
              57,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              52,
              45,
              54,
              55,
              100,
              52,
              45,
              55,
              57,
              49,
              54,
              45,
              57,
              49,
              99,
              97,
              45,
              102,
              99,
              51,
              100,
              56,
              56,
              98,
              99,
              100,
              48,
              98,
              56,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              120,
              87,
              48,
              70,
              108,
              49,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              88,
              79,
              54,
              77,
              101,
              51,
              65,
              106,
              53,
              65,
              76,
              73,
              111,
              104,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              50,
              56,
              46,
              56,
              56,
              52,
              53,
              57,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              50,
              56,
              58,
              50,
              56,
              46,
              56,
              56,
              52,
              53,
              57,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              98,
              45,
              99,
              55,
              53,
              49,
              45,
              55,
              99,
              49,
              52,
              45,
              97,
              97,
              49,
              99,
              45,
              49,
              52,
              48,
              101,
              100,
              101,
              100,
              102,
              101,
              100,
              55,
              56,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              105,
              89,
              48,
              74,
              49,
              81,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              103,
              49,
              105,
              74,
              117,
              73,
              57,
              89,
              112,
              109,
              75,
              114,
              81,
              90,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              54,
              58,
              51,
              50,
              46,
              48,
              56,
              49,
              55,
              56,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              54,
              58,
              51,
              50,
              46,
              48,
              56,
              49,
              55,
              56,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              100,
              45,
              48,
              56,
              97,
              57,
              45,
              55,
              55,
              51,
              53,
              45,
              98,
              54,
              48,
              97,
              45,
              48,
              48,
              53,
              55,
              100,
              98,
              98,
              51,
              52,
              53,
              56,
              56,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              97,
              52,
              90,
              102,
              105,
              52,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              65,
              77,
              121,
              83,
              54,
              49,
              100,
              108,
              112,
              53,
              99,
              71,
              84,
              112,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              55,
              58,
              53,
              52,
              46,
              51,
              52,
              53,
              52,
              51,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              55,
              58,
              53,
              52,
              46,
              51,
              52,
              53,
              52,
              51,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              101,
              45,
              50,
              51,
              52,
              53,
              45,
              55,
              99,
              57,
              101,
              45,
              97,
              101,
              56,
              53,
              45,
              52,
              101,
              100,
              98,
              56,
              56,
              102,
              99,
              52,
              53,
              97,
              53,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              110,
              56,
              82,
              53,
              52,
              118,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              72,
              115,
              120,
              72,
              49,
              57,
              70,
              69,
              74,
              54,
              102,
              82,
              81,
              54,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              48,
              54,
              46,
              54,
              57,
              51,
              56,
              50,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              48,
              54,
              46,
              54,
              57,
              51,
              56,
              50,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              101,
              45,
              54,
              99,
              56,
              101,
              45,
              55,
              97,
              52,
              49,
              45,
              57,
              49,
              52,
              51,
              45,
              55,
              101,
              57,
              53,
              53,
              48,
              51,
              50,
              57,
              54,
              54,
              97,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              56,
              57,
              89,
              103,
              103,
              100,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              116,
              66,
              65,
              118,
              100,
              90,
              71,
              101,
              90,
              86,
              85,
              81,
              68,
              104,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              50,
              53,
              46,
              52,
              53,
              52,
              54,
              54,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              50,
              53,
              46,
              52,
              53,
              52,
              54,
              54,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              101,
              45,
              99,
              102,
              50,
              50,
              45,
              55,
              48,
              97,
              56,
              45,
              57,
              56,
              51,
              55,
              45,
              101,
              101,
              52,
              55,
              55,
              102,
              97,
              52,
              101,
              56,
              102,
              101,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              119,
              100,
              66,
              71,
              48,
              73,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              56,
              73,
              85,
              68,
              103,
              97,
              116,
              97,
              85,
              52,
              89,
              115,
              56,
              74,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              53,
              48,
              46,
              54,
              57,
              48,
              48,
              51,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              51,
              57,
              58,
              53,
              48,
              46,
              54,
              57,
              48,
              48,
              51,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              51,
              102,
              100,
              102,
              45,
              57,
              54,
              97,
              98,
              45,
              55,
              52,
              48,
              97,
              45,
              56,
              101,
              97,
              53,
              45,
              55,
              49,
              97,
              97,
              97,
              97,
              54,
              49,
              102,
              56,
              101,
              99,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              114,
              103,
              32,
              100,
              54,
              50,
              69,
              122,
              34,
              44,
              34,
              100,
              111,
              105,
              110,
              103,
              66,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              65,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              103,
              97,
              108,
              68,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              100,
              82,
              69,
              111,
              107,
              66,
              98,
              119,
              87,
              70,
              50,
              34,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              123,
              34,
              108,
              105,
              110,
              101,
              49,
              34,
              58,
              34,
              34,
              44,
              34,
              108,
              105,
              110,
              101,
              50,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              122,
              105,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              34,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              85,
              83,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              52,
              48,
              58,
              52,
              49,
              46,
              55,
              55,
              49,
              50,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              50,
              84,
              50,
              49,
              58,
              52,
              48,
              58,
              52,
              49,
              46,
              55,
              55,
              49,
              50,
              48,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 3892
        },
        "id": "c0f2c60e-788e-4906-a25f-cb4f8821b2db",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "efb74b94-bb64-4feb-a3d9-47d64168dd10",
          "length": 57,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a972f3ba-d489-4812-aee8-25c8aff3ada6"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
              "normalizedPath": "/v1/organizations/{}/ledgers",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers"
            }
          },
          "id": "a8a0599b-3f08-4a12-957a-9b8d9934adbd",
          "name": "5. Create Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3a2dfe8-02b9-4bde-8958-6380f0d22d3a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "109d5f18-c9e4-48ef-ba8f-51599cb1777c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "aabc8518-051e-42aa-80eb-8e18f6c13f54",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 5: Create Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 5: Create Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 5\");\n"
                ],
                "_lastExecutionId": "ad7ffb01-cb2b-4d56-b4c3-45b909927a31"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e018509d-3655-4a13-99a0-ccb9075fa2ab"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d53fe5a5-e087-40c8-91d5-77901b80f2b9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "108",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "fa9f987f-cf00-407a-b2fa-0421aad0237c",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "303"
            },
            {
              "key": "X-Request-Id",
              "value": "86f0b7c7-d0e9-496c-86e0-bb6f2c48975c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              51,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              52,
              50,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 303
        },
        "id": "a8a0599b-3f08-4a12-957a-9b8d9934adbd",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìí Business Logic: Ledger has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b244ce08-9531-4dcb-8393-10614845fa3e",
          "length": 57,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "64f3bfac-57d5-4689-bd6c-bb3b305ae660"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "2c96c931-258f-4d16-9573-0cc6dc8796f7",
          "name": "6. Get Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c15c2264-f885-4511-8b19-bd14dbbe8e6c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "768a5663-36c2-4a6e-8212-db05613698f5"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5bc1c2ed-6505-431a-8454-0284c27d540c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 6: Get Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 6: Get Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 6\");\n"
                ],
                "_lastExecutionId": "99d64d15-13cf-47e1-b491-1876d070de4d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "645cfec8-d00f-4d26-8281-0fab5a7a0ad6"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "266371af-3c72-4b0f-b10e-d4ccb802c808",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fac377b6-d78f-4f2e-b1b9-d051500ecc08",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "297"
            },
            {
              "key": "X-Request-Id",
              "value": "3d5a39b8-b9df-49ad-9af1-c3a74fd26837"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 297
        },
        "id": "2c96c931-258f-4d16-9573-0cc6dc8796f7",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ada1cd7-3102-4cf5-b5e2-488c364b1654",
          "length": 57,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f34d5d1a-c0c5-4ea1-8fa2-49b327881169"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "42e1d9de-82a1-4b42-a4d5-62b33bde0814",
          "name": "7. Update Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e8215be-96c9-42f0-97c2-f77104061898",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0f7b0ceb-ea79-4525-9960-d8407c032173"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8fc5c0e2-51c8-4e0c-9f1e-a72832d4a267",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 7: Update Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 7: Update Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 7\");\n"
                ],
                "_lastExecutionId": "78d06335-8220-4992-850c-3b2c5a71d780"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d649f984-942b-4244-ace3-05bfa758bb9f"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0052077-c920-4c8d-b89c-c0789069d210",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9100b0e8-952b-40ad-8d68-bbc234555592",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "311"
            },
            {
              "key": "X-Request-Id",
              "value": "b74bde6d-10f3-45aa-a1ad-120e79ec2da4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              57,
              57,
              51,
              49,
              56,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 311
        },
        "id": "42e1d9de-82a1-4b42-a4d5-62b33bde0814",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "80f8789c-4b03-4ec3-b7b2-a8e16e4367d7",
          "length": 57,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cec114a0-07fe-49d3-b87e-6860bdb2cc9f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
              "normalizedPath": "/v1/organizations/{}/ledgers",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers"
            }
          },
          "id": "3b90dd88-36ea-4301-8a4e-13c096aa3c41",
          "name": "8. List Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter ledgers by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "089b58a1-a3ea-4693-b0b7-196d4ed20cda",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "450b8baa-74f6-4492-adc3-e0060c881a22"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0e349c21-f80a-4111-8f35-d6d51459f282",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 8: List Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 8: List Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 8\");\n"
                ],
                "_lastExecutionId": "70bacee0-d3da-48cf-997e-3d578af3b538"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "064d8398-337d-40aa-ab78-186d86090af6"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9be6c6c8-dd91-4d1e-b90f-acd997b4e20e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f8a7ed8d-3465-49c5-8108-333d634166fd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "343"
            },
            {
              "key": "X-Request-Id",
              "value": "f4b11cd8-9067-4d8f-9274-c3e82b22023c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              32,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              71,
              108,
              111,
              98,
              97,
              108,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              55,
              50,
              54,
              55,
              50,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              50,
              57,
              46,
              57,
              57,
              51,
              49,
              56,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 343
        },
        "id": "3b90dd88-36ea-4301-8a4e-13c096aa3c41",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "de96e26d-6163-44ba-b7f4-2dec43507aba",
          "length": 57,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1df22344-df37-4446-88a3-69f15a69a66d"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
            }
          },
          "id": "911ad070-249f-44a2-add2-96be78bf24d6",
          "name": "9. Create Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3caa6c86-4863-4428-98c4-0c657b2b92a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "7951b36e-bddb-4ec6-88bf-5e59175e6e9a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6209deba-7753-40d7-af55-a6744c901bac",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 9: Create Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 9: Create Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 9\");\n"
                ],
                "_lastExecutionId": "8cacda9d-4db7-4a52-b0db-3c777a0bccd5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4d650992-d2fb-4534-a060-1ef431e4693a"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f0650504-eb0b-4c76-9596-20d398a85965",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "144",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1844e516-9de6-45fe-b28b-6238f336d81e",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "381"
            },
            {
              "key": "X-Request-Id",
              "value": "5644e3aa-da82-479a-8ce9-d4091a19348a"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              55,
              45,
              55,
              50,
              97,
              55,
              45,
              97,
              55,
              50,
              50,
              45,
              55,
              56,
              100,
              100,
              57,
              101,
              98,
              100,
              48,
              55,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              49,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              50,
              50,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 381
        },
        "id": "911ad070-249f-44a2-add2-96be78bf24d6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∞ Business Logic: Asset has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8a9ec532-8ecb-44c4-9705-e444313dac8b",
          "length": 57,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c3a1402c-9b39-4a85-9a23-3f448a5ed5b0"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "bf7902cd-8c30-4cef-9f80-b13f9b064321",
          "name": "10. Get Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "303692ed-fd8d-4c0c-abc0-fcfa1e91daec",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "df1a7e5b-4361-493b-a510-fc77e6105c3c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9203b324-a8dd-4526-81c5-52540c632a74",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 10: Get Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 10: Get Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 10\");\n"
                ],
                "_lastExecutionId": "0f56fa3f-b847-4981-8595-3ea4a685f304"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets",
              "01994569-90a7-72a7-a722-78dd9ebd07b1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "3bb1fc68-c8f8-42c2-8b5b-ca710914c604"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a0a52e15-6f29-496e-90e2-839e2080092c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "37f1ac7f-01bd-4d04-b7d1-df0ca0fdcc49",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:29 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "375"
            },
            {
              "key": "X-Request-Id",
              "value": "d283ca62-b5f6-43a4-bad3-e99bbb82c7b3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              55,
              45,
              55,
              50,
              97,
              55,
              45,
              97,
              55,
              50,
              50,
              45,
              55,
              56,
              100,
              100,
              57,
              101,
              98,
              100,
              48,
              55,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              83,
              32,
              68,
              111,
              108,
              108,
              97,
              114,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 375
        },
        "id": "bf7902cd-8c30-4cef-9f80-b13f9b064321",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ec7ce69-7fd7-4216-9a6d-d3e2bc71e138",
          "length": 57,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f2192f02-faeb-40b7-9a77-44106b089ac4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "ec5b952a-cdaa-4a94-89a7-7072bf2f8165",
          "name": "11. Update Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf45f93d-4e48-4d2e-a54d-51c97175184e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "938e0650-6806-4364-9e80-fa48cab9e7f1"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "553d934d-6963-4583-99eb-4335dfcdfe46",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 11: Update Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 11: Update Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 11\");\n"
                ],
                "_lastExecutionId": "c3b358ef-c3db-47b4-a702-d24174d82346"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets",
              "01994569-90a7-72a7-a722-78dd9ebd07b1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f5760722-0b16-48d8-9ceb-e89c5173b7b6"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0c033222-225a-4084-bc08-b5cedfd9cb0d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "103",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b0f625e5-9fa9-4d98-b722-09f8a2882000",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "373"
            },
            {
              "key": "X-Request-Id",
              "value": "e714788b-c074-438e-9532-8b33e6a1c327"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              55,
              45,
              55,
              50,
              97,
              55,
              45,
              97,
              55,
              50,
              50,
              45,
              55,
              56,
              100,
              100,
              57,
              101,
              98,
              100,
              48,
              55,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              53,
              52,
              55,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 373
        },
        "id": "ec5b952a-cdaa-4a94-89a7-7072bf2f8165",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1a54611b-b278-4054-9ec7-1c95b43f5dca",
          "length": 57,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1659e239-f26d-45d8-aef9-86f2777b5297"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
            }
          },
          "id": "afdd30a3-733c-4502-b98d-f24d130e72e4",
          "name": "12. List Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter assets by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4de1bbc0-b533-4105-a2b5-da03f5fd89d2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "c6ff5168-543e-44aa-88fd-6190f1d1dc87"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "efe7dce0-e5db-4e2d-921a-3c11d93f88de",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 12: List Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 12: List Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 12\");\n"
                ],
                "_lastExecutionId": "a7d24938-eeda-43d4-a50d-10ca8329e29e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e089bfe2-e005-4542-abe7-1ca9f7de75bb"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c9e4b274-9bc9-4272-a8b6-8ce276ce16a1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f5350c7e-49f8-4a66-b676-915be5705417",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "405"
            },
            {
              "key": "X-Request-Id",
              "value": "e26335e6-3ebe-4d4b-b7a7-ea4f30cd9e6f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              55,
              45,
              55,
              50,
              97,
              55,
              45,
              97,
              55,
              50,
              50,
              45,
              55,
              56,
              100,
              100,
              57,
              101,
              98,
              100,
              48,
              55,
              98,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              105,
              116,
              99,
              111,
              105,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              99,
              121,
              34,
              44,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              55,
              57,
              49,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              53,
              52,
              55,
              48,
              56,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 405
        },
        "id": "afdd30a3-733c-4502-b98d-f24d130e72e4",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ace42332-1fb6-4fb7-a36d-f6df8bed5ddf",
          "length": 57,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2c8ad900-a5ae-4508-8647-ebd595c173e0"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
            }
          },
          "id": "65e96904-4504-4126-bfdd-1c2c896bf80b",
          "name": "13. Create Account",
          "request": {
            "description": {
              "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c112b0aa-fd2c-46b9-918f-67a94c57c667",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "ca09759c-ac61-4770-9359-d9ab0d82597b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "80e97812-1274-4654-ab00-660e86931f82",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 13: Create Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 13: Create Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 13\");\n"
                ],
                "_lastExecutionId": "c8aad611-5336-4a2a-a158-16dd645b8667"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "2c0bb91e-ba67-4bbc-ae65-aaa031525725"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b0fcb7d-6e68-42e1-acd5-7729c7641f6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "300",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d62a594d-7453-4112-95ee-02a8f72001db",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "517"
            },
            {
              "key": "X-Request-Id",
              "value": "c3ca684a-0042-437c-ae39-ae8eae88fe92"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              48,
              53,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              49,
              51,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 517
        },
        "id": "65e96904-4504-4126-bfdd-1c2c896bf80b",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üë§ Business Logic: Account has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b684f4c-98c5-49e6-bd38-9254ff1bdd7b",
          "length": 57,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "da1da6bc-abb7-415c-a530-ba57a83386d8"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "8bb2d4c3-a731-4207-aeea-323f49794679",
          "name": "14. Get Account",
          "request": {
            "description": {
              "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d97d25b-bc46-481a-9b3c-639f6cf56e60",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "9cdf2d2d-36af-4892-90b2-5ca11a8dbf16"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9ba862fd-90f4-4211-ae99-ec989b1052a2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 14: Get Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 14: Get Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 14\");\n"
                ],
                "_lastExecutionId": "af6d820e-58af-4c18-9d11-da0a2e6f6808"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "1e2453cc-3850-4ae8-afe2-fccc03b9ceba"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2819f25f-e918-4901-af85-12322633fd2e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ce147fec-689f-4e1d-a524-f5e3f68e400f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "511"
            },
            {
              "key": "X-Request-Id",
              "value": "f52e1870-f6cb-4422-a3fd-d5673bd42208"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 511
        },
        "id": "8bb2d4c3-a731-4207-aeea-323f49794679",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0a0ff3d-edf1-43b8-994e-baee63a22ee9",
          "length": 57,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5bbfacf1-0c7f-4991-b715-18b5236386b7"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "a8fdf873-d159-4857-a68a-ea40392f0fe9",
          "name": "15. Update Account",
          "request": {
            "description": {
              "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "899f9aac-c1b4-460a-82e6-91b688592551",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "b184eb68-cf02-424c-9a25-e99290b79f18"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "75111242-abde-4260-b4b8-a88cc52d3e7c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 15: Update Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 15: Update Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 15\");\n"
                ],
                "_lastExecutionId": "3553ed4f-1b3f-4af8-b4f0-ffb79264a626"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "cde406bc-ce4b-45e2-9a60-8cd39b611408"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ba7db899-3041-4e7a-ac9d-f8942b788c94",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "205",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bf0aba27-cb2c-4d82-b3d2-43f1e88e70b8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "519"
            },
            {
              "key": "X-Request-Id",
              "value": "12e62607-fc4b-477a-8b0d-806a31205228"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              48,
              54,
              53,
              55,
              57,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 519
        },
        "id": "a8fdf873-d159-4857-a68a-ea40392f0fe9",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a8fef58-c7dd-4cf2-ac90-781507e49779",
          "length": 57,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d99e43a2-f4dd-46c3-ad7b-7a034255da97"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
            }
          },
          "id": "167fe352-fa56-4d2c-a59c-1d68153b89ba",
          "name": "16. List Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter accounts by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad8ac924-020f-4577-8ed6-9a08d35d097b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ae0a8962-5109-4e6b-88b2-5bea78adad42"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "da68c2a7-4108-42e2-a648-48536e816fad",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 16: List Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 16: List Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 16\");\n"
                ],
                "_lastExecutionId": "aed9cd42-e110-4dd8-b9d0-27017ce38c74"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ec7361d9-4e87-4263-aea3-0cf0294648cf"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f254d36-304e-4329-8746-c5b27bae724d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "07ce1412-27d8-4919-a767-79a5129fd67d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "1045"
            },
            {
              "key": "X-Request-Id",
              "value": "e59183eb-d91c-47b3-bbc6-8de3676e3385"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              56,
              54,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              56,
              54,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              48,
              54,
              53,
              55,
              57,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 1045
        },
        "id": "167fe352-fa56-4d2c-a59c-1d68153b89ba",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e56d74bf-35d2-4d0c-881e-fd941c4ff9ae",
          "length": 57,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6fbeeb94-3e5f-4d98-8cb4-1b3d079bc18a"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
            }
          },
          "id": "12fb18e8-ae2d-4b40-95ec-4b26c8ac9fdd",
          "name": "17. Create Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "93fea14b-2930-4640-b709-0469e35d21ac",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "c861ba64-c890-4a98-b131-3c24cbcbed7e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9f766afe-7e87-4eec-9a7e-38448666a3dd",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 17: Create Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 17: Create Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 17\");\n"
                ],
                "_lastExecutionId": "47f9bfa8-a52c-4dc8-8f65-eb58336e2f87"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "13f5498e-06c7-4a63-9a2f-6cdee13f4f6c"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "13722a1c-1617-44f2-9f70-63ab67616511",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "162",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "25c741c0-19f8-4d80-9463-22ac1539827e",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "403"
            },
            {
              "key": "X-Request-Id",
              "value": "f5e359bc-6e3b-4725-842e-d0677888469f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              52,
              99,
              97,
              45,
              55,
              55,
              53,
              51,
              45,
              56,
              57,
              55,
              54,
              45,
              57,
              57,
              51,
              51,
              48,
              54,
              48,
              53,
              50,
              55,
              49,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              50,
              50,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              50,
              54,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 403
        },
        "id": "12fb18e8-ae2d-4b40-95ec-4b26c8ac9fdd",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üìÅ Business Logic: Portfolio has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0180bc6b-7c90-4b5c-a26f-cf0747fdcef8",
          "length": 57,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "95d36ff3-b00f-49da-8c43-c0e45b8bf78b"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "9c6684de-9a86-4353-9a7c-4e913954e4bd",
          "name": "18. Get Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40bd3522-1d66-454d-a5e1-84262b450921",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "9978a19b-7ed9-4bb4-be41-9fdfa37e4c73"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6fc59785-baba-4f74-9b13-167c1bbd3a85",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 18: Get Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 18: Get Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 18\");\n"
                ],
                "_lastExecutionId": "ebe6adf9-f73c-4d17-a5c4-e81a3357cc93"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios",
              "01994569-94ca-7753-8976-99330605271b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "c56f7225-3a85-4d74-8e85-5cee6b5610f0"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e268fb3-2798-49a3-bd03-fb74b47267ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5b2a05cb-1e1a-453d-ae61-1cae0ff7dc11",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:30 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "397"
            },
            {
              "key": "X-Request-Id",
              "value": "2a4d74cd-39c1-4128-b78c-e1101a894615"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              52,
              99,
              97,
              45,
              55,
              55,
              53,
              51,
              45,
              56,
              57,
              55,
              54,
              45,
              57,
              57,
              51,
              51,
              48,
              54,
              48,
              53,
              50,
              55,
              49,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 397
        },
        "id": "9c6684de-9a86-4353-9a7c-4e913954e4bd",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "889203a8-52a5-42c4-8645-82e1bd9ab8f5",
          "length": 57,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "30a8e41a-24f4-4dd4-a360-502bca727302"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "4e346ca6-5eb2-49c1-84ac-f71062e4c19c",
          "name": "19. Update Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b7971af9-14db-494f-b3a5-b39666df94b8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "eb803b4d-4448-4328-917e-d734f7a7d009"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e2a18c9d-384d-4c01-8b39-2990667b4bfe",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 19: Update Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 19: Update Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 19\");\n"
                ],
                "_lastExecutionId": "2c6bfac5-12a2-425f-96e9-548154db39f4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios",
              "01994569-94ca-7753-8976-99330605271b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "8ff1497e-6d35-4ff3-b2bb-d573911609da"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3125e898-6771-458e-bbda-656351fc8ac1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "170",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3023d744-9aaa-4aa1-9b9a-6bb711de0cd4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "405"
            },
            {
              "key": "X-Request-Id",
              "value": "b616bdb5-483f-4d51-baff-c5bbf7c9258c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              52,
              99,
              97,
              45,
              55,
              55,
              53,
              51,
              45,
              56,
              57,
              55,
              54,
              45,
              57,
              57,
              51,
              51,
              48,
              54,
              48,
              53,
              50,
              55,
              49,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              54,
              48,
              54,
              49,
              55,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 405
        },
        "id": "4e346ca6-5eb2-49c1-84ac-f71062e4c19c",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "858339b6-ef78-43de-924e-93098ae2f5b0",
          "length": 57,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "97ff7d3f-3dcc-4e33-8e4f-ce3d6596c7c3"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
            }
          },
          "id": "08d2652c-4077-49d6-b387-546df74640aa",
          "name": "20. List Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter portfolios by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9397679-8e50-490f-8f63-52199b04a16e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "147492af-960c-4eae-a06e-882c4cff8b95"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4a5462ae-c213-4543-9b4e-8af788b78851",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 20: List Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 20: List Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 20\");\n"
                ],
                "_lastExecutionId": "3adda3b8-f099-40b3-b19d-d615d3d31e9e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "303e533a-83c0-4ef4-800a-ece629d270c5"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d727eec-73e9-497b-829e-772a5839e030",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a8d5f50a-0ad5-4693-b1e1-899c7e29e129",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "437"
            },
            {
              "key": "X-Request-Id",
              "value": "3967e768-30d0-4c3a-89d8-218463ca06b4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              52,
              99,
              97,
              45,
              55,
              55,
              53,
              51,
              45,
              56,
              57,
              55,
              54,
              45,
              57,
              57,
              51,
              51,
              48,
              54,
              48,
              53,
              50,
              55,
              49,
              98,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              80,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              45,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              51,
              51,
              56,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              54,
              48,
              54,
              49,
              55,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 437
        },
        "id": "08d2652c-4077-49d6-b387-546df74640aa",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "201dc734-d989-4565-b89d-8eb50c00b2fe",
          "length": 57,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b2649b22-7c81-4a10-b3e0-a0a449fc4479"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
            }
          },
          "id": "50fb02b5-9426-4a42-a553-609f1a429085",
          "name": "21. Create Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80f4a39-e5f9-4a01-9b7c-73f84ba57137",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                ],
                "_lastExecutionId": "07df28dd-89da-4a49-9a64-7fcaec4fc6bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2f38c364-350b-406d-9401-be4173fe435c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 21: Create Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 21: Create Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 21\");\n"
                ],
                "_lastExecutionId": "dee41da4-1f9b-49ca-a028-5966b236be6c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "7bb81430-5f0e-491a-846c-97841ab784bb"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "21e5a37b-444c-4fcf-bfc7-b7699f41fde0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "dee0e089-be0c-4c26-b0d4-6441384baa68",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "351"
            },
            {
              "key": "X-Request-Id",
              "value": "a0d9c24c-0721-4a63-a071-dbb489588155"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              54,
              101,
              49,
              45,
              55,
              57,
              54,
              51,
              45,
              98,
              52,
              53,
              51,
              45,
              55,
              53,
              99,
              53,
              48,
              55,
              102,
              55,
              48,
              55,
              102,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              51,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              51,
              56,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 351
        },
        "id": "50fb02b5-9426-4a42-a553-609f1a429085",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üè∑Ô∏è Business Logic: Segment has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41f6366d-cbb5-4f82-882f-9d49ab912bc6",
          "length": 57,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "13592ded-6b76-4784-9f63-e4aeec7da86f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "d9d267da-836e-4b4c-959e-06149b45757f",
          "name": "22. Get Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe944087-89e5-4fa5-9029-18abfa634562",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "fad2af00-7a08-4251-a68b-56b08223f72a"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d09ea6ad-9ef4-4af8-bcd9-3000ff20a2fc",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 22: Get Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 22: Get Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 22\");\n"
                ],
                "_lastExecutionId": "435b21c2-2bc2-42d9-9dd2-e793c978999c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments",
              "01994569-96e1-7963-b453-75c507f707fe"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "83e5625d-89af-4a74-aabd-e64db80bb397"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84720249-82cb-4024-86c1-6da91a56ce7c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0dbc5090-25a2-4338-b331-af0927856867",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "345"
            },
            {
              "key": "X-Request-Id",
              "value": "257664b7-433b-4c70-9ad8-8899609d0566"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              54,
              101,
              49,
              45,
              55,
              57,
              54,
              51,
              45,
              98,
              52,
              53,
              51,
              45,
              55,
              53,
              99,
              53,
              48,
              55,
              102,
              55,
              48,
              55,
              102,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 345
        },
        "id": "d9d267da-836e-4b4c-959e-06149b45757f",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bdc0a30b-9a21-4c33-aa21-fdb39ed736d8",
          "length": 57,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7303fca9-cda0-4cce-9dd0-816d6a7101b4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "4b0318db-c5e7-4952-81d6-d9d4440549e9",
          "name": "23. Update Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a8b61a92-6cd2-43f9-bdca-efd22d1cd7ec",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "3a2d09dd-28ad-44c3-a596-4fef905ae030"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "88b1f4e5-926c-4c87-89cc-c7a639d97467",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 23: Update Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 23: Update Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 23\");\n"
                ],
                "_lastExecutionId": "7db225e0-7d98-4ca3-a099-cc7df1984ad9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments",
              "01994569-96e1-7963-b453-75c507f707fe"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4aacae6b-fc78-4880-9c8b-69a62ffa54b9"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f625fb98-a122-412b-b203-90ba8ff79321",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "114",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "fb68645d-4ffc-4291-b161-2889db604dd3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "353"
            },
            {
              "key": "X-Request-Id",
              "value": "6fc06835-b895-4cec-a0e3-852b36e34229"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              54,
              101,
              49,
              45,
              55,
              57,
              54,
              51,
              45,
              98,
              52,
              53,
              51,
              45,
              55,
              53,
              99,
              53,
              48,
              55,
              102,
              55,
              48,
              55,
              102,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              50,
              46,
              49,
              52,
              49,
              52,
              56,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 353
        },
        "id": "4b0318db-c5e7-4952-81d6-d9d4440549e9",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b8386eb-ff9a-48b7-85cc-385ca2a262fa",
          "length": 57,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f4e42792-4079-4285-a68c-d387020934cd"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
            }
          },
          "id": "a48525f4-cf73-49b2-8d4a-de3ef2803fa0",
          "name": "24. List Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "JSON string to filter segments by metadata fields",
                    "type": "text/plain"
                  },
                  "key": "metadata",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Maximum number of records to return per page",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Page number for pagination",
                    "type": "text/plain"
                  },
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort direction for results based on creation date",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d84e2aad-149b-4391-91cf-79b91d64a25a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "d0538f5a-915d-41cf-b8d5-1c0a6cc34944"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "339bac9e-0798-4437-b355-bab61251848b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 24: List Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 24: List Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 24\");\n"
                ],
                "_lastExecutionId": "59685913-6387-4cbb-a3b3-3966bb948a3b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "03cc159f-70be-4d96-b5c0-fd0f7721aaba"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d17fd69e-5fe5-418c-90d1-d977010647c5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5a692e11-b39e-4492-87ca-aa1c0160eb0a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "385"
            },
            {
              "key": "X-Request-Id",
              "value": "a259586a-c014-4ff0-92f8-585bbbe38b76"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              54,
              101,
              49,
              45,
              55,
              57,
              54,
              51,
              45,
              98,
              52,
              53,
              51,
              45,
              55,
              53,
              99,
              53,
              48,
              55,
              102,
              55,
              48,
              55,
              102,
              101,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              121,
              32,
              83,
              101,
              103,
              109,
              101,
              110,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              56,
              55,
              50,
              57,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              50,
              46,
              49,
              52,
              49,
              52,
              56,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 385
        },
        "id": "a48525f4-cf73-49b2-8d4a-de3ef2803fa0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bc99ef21-9808-431e-bf5b-66d74cbfe84f",
          "length": 57,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "33557267-95aa-4afe-9de9-11f8e4a10d2c"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/metrics/count",
              "normalizedPath": "/v1/organizations/metrics/count",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/metrics/count"
            }
          },
          "id": "1a941997-cdb5-42d2-b40c-65cba1e41136",
          "name": "25. Count Organizations",
          "request": {
            "description": {
              "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d0f613a-5379-4287-91af-83b5f914803b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "45f8f738-a926-4fb9-8d81-6c8b70f486a9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5d764839-9580-49bb-a394-4492cb3f8898",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 25: Count Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 25: Count Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 25\");\n"
                ],
                "_lastExecutionId": "2a68abec-0c38-4d42-9250-2d32033c9774"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f23965c3-c389-4f16-8daf-1eecbbc8e385"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a303e3d-56ce-49df-9bc9-b386034cf111",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "1bfd433c-88eb-436d-bc60-f2fa7074046e",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "a386827c-319f-40f9-8129-b26e63506e9c"
            },
            {
              "key": "X-Total-Count",
              "value": "1964"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "1a941997-cdb5-42d2-b40c-65cba1e41136",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed7ddfe1-7244-457e-beee-97ef2c6c92ad",
          "length": 57,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b035fb71-3809-4ade-ae34-c17deec7f46f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/metrics/count",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/metrics/count"
            }
          },
          "id": "a2967683-4c77-4fc8-8728-c2c972cdb24e",
          "name": "26. Count Ledgers",
          "request": {
            "description": {
              "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85520d28-71b9-4010-ab89-633084825cf4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "2f2883af-df14-4366-a71b-56f140029c4e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "07d37448-e6ab-4f3c-b5ea-68a8c6e6ff97",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 26: Count Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 26: Count Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 26\");\n"
                ],
                "_lastExecutionId": "248f1d3b-133d-4d69-b628-61623edb9d8a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "86a93ddc-ca79-4c79-8be0-1c9d8d96391b"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "836f88fc-438e-4841-92dc-40a23ebc52b3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "fa5210c5-6f0d-4cd5-905a-3255d90a3341",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:31 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "2320c2ce-80f2-4b77-92b1-5acc974a492d"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "a2967683-4c77-4fc8-8728-c2c972cdb24e",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "eb99af8b-b584-4392-bfb7-ec4b5eb58a2d",
          "length": 57,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f7b26d26-78ef-40e1-bf4d-00239d934fb1"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count"
            }
          },
          "id": "6b5c292c-44e8-4de1-8530-e47487fb2876",
          "name": "27. Count Accounts",
          "request": {
            "description": {
              "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77022bf1-36d5-41f1-a6b0-d6dcb226b401",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "df6b0329-9f33-40a5-aa16-4559303afcb3"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "94c245d0-36af-419d-b7e5-1dc1bbd31f60",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 27: Count Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 27: Count Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 27\");\n"
                ],
                "_lastExecutionId": "fda82ba3-9358-4f92-aedd-288fd0b18326"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "0d68274d-e774-4987-8249-41223b226648"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f5dde1f2-b4ac-48ef-aebb-6f63740a8f5a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "e6782921-0386-479d-bd80-1c4ce328ea0f",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "ea245f7d-91d5-46a7-ba78-0dad8afd5cc9"
            },
            {
              "key": "X-Total-Count",
              "value": "2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "6b5c292c-44e8-4de1-8530-e47487fb2876",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5720a15d-00c4-4c17-a670-0d7a5fa22b24",
          "length": 57,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8c919857-e228-4e9f-b9c6-1efdd57086ac"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count"
            }
          },
          "id": "3e7fd04e-5b3e-4aa0-a68c-2c47bf525c72",
          "name": "28. Count Assets",
          "request": {
            "description": {
              "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e396ffc1-2a47-4202-818e-1e734546fa52",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "c12ce3e2-3691-4f7a-bf9f-af07f6b6cd49"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5d5b18c5-c495-418c-81d5-d11e55bde0fc",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 28: Count Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 28: Count Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 28\");\n"
                ],
                "_lastExecutionId": "bc8c8b47-cc98-4041-b0d5-34a7a9d53bbd"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b8da4b0e-8b9f-4a8b-9a6b-e5da8aa485ef"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0863b7a6-cecd-49c7-9177-37eaa692c82c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "8c49fc7b-3bb5-41d9-8ed4-572524dd141a",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "997e5e85-e07f-494d-a1c8-839d14238934"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "3e7fd04e-5b3e-4aa0-a68c-2c47bf525c72",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1a8a7c9a-8d65-4e2a-ad7e-14f78d86e616",
          "length": 57,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "014cb0cb-bf0b-4847-b972-6e14c9cf72a9"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count"
            }
          },
          "id": "60c70344-866c-4b47-bce3-300284048664",
          "name": "29. Count Portfolios",
          "request": {
            "description": {
              "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cdac9c9-4e1e-4add-9a53-6490b7ce5fba",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "48d03fe6-3af0-41a3-b772-9d8f86ddb416"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d10741a4-7d0a-4b0d-9ce0-96943955e0da",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 29: Count Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 29: Count Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 29\");\n"
                ],
                "_lastExecutionId": "9f901a8b-b9da-40bb-994d-69a37f0e4970"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a51d2c47-c719-41a2-8681-f8f8151b0044"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4774366f-65c1-4e37-a536-b4b883d52f01",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "c5aed51d-b441-4a7d-bc47-2b0c1b6c0578",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "0adae9cb-040e-4b58-8290-315e86e775d5"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "60c70344-866c-4b47-bce3-300284048664",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d412a53b-a8a4-4fc9-90f8-507a226f9b80",
          "length": 57,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "91788af1-879e-4868-8190-b0a26bf27fe4"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count"
            }
          },
          "id": "a6b928c0-85d8-416b-a21c-d335a4f53576",
          "name": "30. Count Segments",
          "request": {
            "description": {
              "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "metrics",
                "count"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "HEAD"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b9d5375e-9265-475e-b12c-83037d73a35a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "be6de140-b94c-4c7a-8160-8f801a5ea2b8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f914a6a8-394d-4558-81f4-6fe5613e531b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 30: Count Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 30: Count Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 30\");\n"
                ],
                "_lastExecutionId": "e4ab613a-dcc0-4d70-8145-5afc9490be0f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments",
              "metrics",
              "count"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "6ceaa05c-2ae5-4e70-a68f-782a3005eae8"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a45ced1a-9ba7-4b8f-9725-06c1b91f4c0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "HEAD"
        },
        "response": {
          "id": "b312aa46-50a0-4b9b-849a-39711e50824c",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "X-Request-Id",
              "value": "c76f4126-7eaa-4690-a237-c75a92db21b3"
            },
            {
              "key": "X-Total-Count",
              "value": "1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "a6b928c0-85d8-416b-a21c-d335a4f53576",
        "assertions": [
          {
            "assertion": "‚úÖ Status: HEAD request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dec8aae2-8b52-44d8-a92a-573aeaa631d8",
          "length": 57,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "750d472f-558c-4516-83c7-1b70176db3f2"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}"
            }
          },
          "id": "a1915b3d-ab73-4027-8cc3-6f50fe7c1795",
          "name": "31. Get Account by Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "85b2cbf0-434b-41df-a9a3-7ed3c8541d17",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "feb2c51d-e5ff-43b4-9c3d-66149b8a4435"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3bb0ca47-510f-4642-9016-05bc253a708b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 31: Get Account by Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 31: Get Account by Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 31\");\n"
                ],
                "_lastExecutionId": "e876f642-18f6-423e-a749-312312d567ba"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "alias",
              "@treasury_checking"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "43aea674-66ec-4115-8cc9-b397b6452c77"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "579be270-99f0-4f77-9a1b-75e51bedba9f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dfc93d54-a760-4ded-bdcf-fe8125dc5017",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "492"
            },
            {
              "key": "X-Request-Id",
              "value": "5f871268-8660-4718-af66-f69dc8943966"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              67,
              111,
              114,
              112,
              111,
              114,
              97,
              116,
              101,
              32,
              67,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              32,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              34,
              69,
              88,
              84,
              45,
              65,
              67,
              67,
              45,
              49,
              50,
              51,
              52,
              53,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              67,
              84,
              73,
              86,
              69,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              49,
              52,
              55,
              57,
              55,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              49,
              46,
              48,
              54,
              53,
              55,
              57,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 492
        },
        "id": "a1915b3d-ab73-4027-8cc3-6f50fe7c1795",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9aecbef5-5948-456a-8048-bad8be6b6c77",
          "length": 57,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7812bded-187c-421a-a6bf-70aad9ec113f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}"
            }
          },
          "id": "0e838ca2-504f-4b4d-9977-b4cc7346b3ce",
          "name": "32. Get Account by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account External Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a332dd9b-b1aa-428b-b76b-91ba31a946f5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "df967526-93bf-496a-84f5-fdb4c5e517ad"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "39cd4527-3521-4799-a4d9-52f3815ab26d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 32: Get Account by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 32: Get Account by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 32\");\n"
                ],
                "_lastExecutionId": "8fba7348-62d6-401a-9755-1adf7499160c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "external",
              "USD"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "64108fde-ca6a-4b70-91ed-219a1c0873cb"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "55d2887d-89ab-48a6-9d9d-67ce5bc9f6dd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0d06f2a2-d282-4f8a-a768-90d479a6b65e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "493"
            },
            {
              "key": "X-Request-Id",
              "value": "0a3b4d4e-6d27-429c-8ff4-1da7102d41bc"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              85,
              83,
              68,
              34,
              44,
              34,
              112,
              97,
              114,
              101,
              110,
              116,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              110,
              116,
              105,
              116,
              121,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              112,
              111,
              114,
              116,
              102,
              111,
              108,
              105,
              111,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              103,
              109,
              101,
              110,
              116,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              115,
              115,
              101,
              116,
              58,
              32,
              85,
              83,
              68,
              34,
              125,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              56,
              54,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              56,
              54,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 493
        },
        "id": "0e838ca2-504f-4b4d-9977-b4cc7346b3ce",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7546bcba-e1b0-4798-bb42-9bec9306e71f",
          "length": 57,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f7428458-7d99-4c6d-b411-e3ed0ca3e47b"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
            }
          },
          "id": "4f6e17a1-6062-464f-88f2-2fad67779c18",
          "name": "33. Create Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e1da9ed-df4a-40b1-9c7d-9fa2310ef0e0",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "7068e361-fd5f-469d-9155-c42e020c7383"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "07577b63-ddb2-4c3b-a686-96b4640164b6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 33: Create Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 33: Create Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 33\");\n"
                ],
                "_lastExecutionId": "1eba03d9-669f-4b35-a7ff-a90d02fc4876"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "085dcc53-8a34-4acb-bcbc-759db81ffea2"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "2b915182-0dc0-472d-8ea5-c3ac3d7b0a59"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df448741-8b51-46ff-af61-1ebe0fbac4ea",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "980",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "168bbd1d-aace-4131-95d0-8737a68e0d10",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:32 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2161"
            },
            {
              "key": "X-Request-Id",
              "value": "bf18c9e4-f901-45c5-8e56-15f70b99f893"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              50,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              48,
              55,
              55,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              52,
              57,
              45,
              97,
              50,
              50,
              49,
              45,
              54,
              97,
              56,
              55,
              52,
              53,
              98,
              102,
              49,
              55,
              57,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              50,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              52,
              51,
              54,
              50,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              50,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              56,
              54,
              55,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 2161
        },
        "id": "4f6e17a1-6062-464f-88f2-2fad67779c18",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b783ec83-2add-4967-97ae-be1f922a0b4e",
          "length": 57,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2b2b968b-173c-43eb-bec8-dd4da14d221f"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow"
            }
          },
          "id": "420a1bfe-4363-42ac-931c-1b0db0c43b75",
          "name": "34. Create Transaction (Inflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "inflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a5e762f-4cac-452b-8a33-b58b85f3f38b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "6b8438cd-16ae-4806-9319-e14773207679"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5a56c7d7-3a92-4fa3-9993-3115b0b3ab5c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 34: Create Transaction (Inflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 34\");\n"
                ],
                "_lastExecutionId": "2941b7ab-f46e-44ca-a91d-faef27332e44"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "inflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "29586ecd-3259-4cbb-9a27-d78aa22e1e0d"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8faf112b-776d-482e-8446-2ded728d14a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "610",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b8674357-684a-4d8a-9b51-ac6ddaff421a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2132"
            },
            {
              "key": "X-Request-Id",
              "value": "184f5d71-d496-4a62-bac4-23e0bfc2c03a"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              52,
              53,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              48,
              57,
              50,
              57,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              98,
              45,
              55,
              49,
              102,
              101,
              45,
              98,
              100,
              55,
              55,
              45,
              97,
              54,
              50,
              101,
              52,
              48,
              99,
              50,
              52,
              100,
              97,
              99,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              52,
              53,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              51,
              49,
              48,
              56,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              98,
              45,
              55,
              50,
              51,
              57,
              45,
              56,
              99,
              50,
              52,
              45,
              97,
              56,
              101,
              54,
              48,
              50,
              54,
              50,
              99,
              52,
              100,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              52,
              53,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              52,
              54,
              50,
              48,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 2132
        },
        "id": "420a1bfe-4363-42ac-931c-1b0db0c43b75",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "38a0dd96-670c-45e0-842b-96a083509d01",
          "length": 57,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0bf253ba-7375-43be-9756-920da45c6897"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow"
            }
          },
          "id": "be987068-0620-4e8d-af9f-a4b3a25eb23a",
          "name": "35. Create Transaction (Outflow)",
          "request": {
            "description": {
              "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "outflow"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ff7b8b7-6821-4086-9071-498839ce6ce5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "af3c564f-02b6-45e4-9d20-dbb6e4a6f4cc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fde67a94-d53a-4725-a87d-2db2864e5119",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 35: Create Transaction (Outflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 35\");\n"
                ],
                "_lastExecutionId": "068f7e1f-35d2-4ee6-b352-6eafdf962b6e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "outflow"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e40be48d-7e12-49ea-8278-95a5a2aace2d"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44c2ce81-827b-4572-8fff-f6a529d2108c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "608",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f90c5517-9ff3-465d-880f-d92dd2bf8f2a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2125"
            },
            {
              "key": "X-Request-Id",
              "value": "ec52b63f-d22b-4bb9-b9e7-8d75d70b27cf"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              52,
              57,
              54,
              57,
              51,
              51,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              101,
              49,
              45,
              55,
              48,
              49,
              48,
              45,
              56,
              102,
              50,
              49,
              45,
              54,
              57,
              50,
              50,
              57,
              53,
              100,
              98,
              101,
              48,
              48,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              53,
              48,
              48,
              52,
              53,
              56,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              101,
              49,
              45,
              55,
              49,
              49,
              49,
              45,
              56,
              48,
              102,
              100,
              45,
              53,
              56,
              48,
              48,
              50,
              99,
              55,
              53,
              52,
              54,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              53,
              48,
              55,
              48,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 2125
        },
        "id": "be987068-0620-4e8d-af9f-a4b3a25eb23a",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0da41c98-0fa8-4b98-b938-95e3ebab314a",
          "length": 57,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7bd4fe54-36aa-40d4-9724-f76ab6c710ce"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
            }
          },
          "id": "4e4a12d0-4798-448b-8ae0-5d5b6d0275c8",
          "name": "36. Get Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "744b2288-fec7-40ea-9d17-3c418c74d52b",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "4b9d7595-fc74-454f-aee4-0b318e0208e2"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f465433e-d547-4470-8e04-fbb750c8b5f5",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 36: Get Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 36: Get Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 36\");\n"
                ],
                "_lastExecutionId": "90d86e14-32ec-4371-b05b-83a52f46d6e5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "01994569-9cca-76b6-a378-f522dba7eaf6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "27515b03-68d9-4a57-ae29-62fd380bde73"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "51c0b619-4c3a-4474-bd78-7a96fa542e6d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fa7c7128-c52a-454e-84dc-feea28f442e7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2145"
            },
            {
              "key": "X-Request-Id",
              "value": "f0d5ee76-6534-408a-acd7-5e6540e102d2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              48,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              52,
              57,
              45,
              97,
              50,
              50,
              49,
              45,
              54,
              97,
              56,
              55,
              52,
              53,
              98,
              102,
              49,
              55,
              57,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 2145
        },
        "id": "4e4a12d0-4798-448b-8ae0-5d5b6d0275c8",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "49a2908f-5b0e-422e-bdfe-3aa9b0c41f06",
          "length": 57,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "05f236ae-9eb1-4d6b-aac3-f0f3ae3a7e51"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
            }
          },
          "id": "eb65333e-962d-453f-a9d8-33f31df67eb1",
          "name": "37. Update Transaction",
          "request": {
            "description": {
              "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1455699e-3370-43ef-b385-ce38a1253290",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "0c9d7291-1d4d-4a05-a6ec-40d438542239"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fdac2a67-f797-4c67-83c2-7d432ac854ea",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 37: Update Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 37: Update Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 37\");\n"
                ],
                "_lastExecutionId": "4b1be88a-2e5b-4138-b55d-a98689fabc47"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "01994569-9cca-76b6-a378-f522dba7eaf6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "0c5d4e24-ff3a-4309-ae97-204ecef9965b"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b7356939-bf56-4cce-a44d-fd82a6c8f31b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "86",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "02c291a5-d8cd-46d9-a702-164984671d49",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "530"
            },
            {
              "key": "X-Request-Id",
              "value": "cbe4a0f6-42d5-44da-857b-7f331c29d6f1"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              57,
              51,
              54,
              56,
              55,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 530
        },
        "id": "eb65333e-962d-453f-a9d8-33f31df67eb1",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90d8d657-cda0-4b29-a270-217f80bdd04f",
          "length": 57,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4dc17281-3abd-4dfd-b918-3e3abc93c317"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions"
            }
          },
          "id": "81ba5957-10e3-4d5f-9a56-f4bddea64ad1",
          "name": "38. List Transactions",
          "request": {
            "description": {
              "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "665b5e81-74c3-46e5-aee8-fb1f709f7e7d",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "cb3408f7-ea23-4f11-b4ee-f02b31c15df9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "24d1ba24-1797-45e4-99b8-94b9b4fbff6c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 38: List Transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step 38: List Transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 38\");\n"
                ],
                "_lastExecutionId": "d305fa75-1371-493f-a446-40c4d5bfa992"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "68b0010e-82f7-4266-8f7f-b03f632571ef"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c27c4de6-5c21-4589-9a56-f7846a1f9e2b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c4e28f58-4fc9-4f5b-980c-3f916a85bea9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "6405"
            },
            {
              "key": "X-Request-Id",
              "value": "a8400cc5-251d-40a3-b36d-145a2caaaaa5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              57,
              51,
              54,
              56,
              55,
              50,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              52,
              57,
              45,
              97,
              50,
              50,
              49,
              45,
              54,
              97,
              56,
              55,
              52,
              53,
              98,
              102,
              49,
              55,
              57,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              48,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              98,
              45,
              55,
              49,
              102,
              101,
              45,
              98,
              100,
              55,
              55,
              45,
              97,
              54,
              50,
              101,
              52,
              48,
              99,
              50,
              52,
              100,
              97,
              99,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              51,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              98,
              45,
              55,
              50,
              51,
              57,
              45,
              56,
              99,
              50,
              52,
              45,
              97,
              56,
              101,
              54,
              48,
              50,
              54,
              50,
              99,
              52,
              100,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              80,
              80,
              82,
              79,
              86,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              52,
              57,
              54,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              101,
              49,
              45,
              55,
              48,
              49,
              48,
              45,
              56,
              102,
              50,
              49,
              45,
              54,
              57,
              50,
              50,
              57,
              53,
              100,
              98,
              101,
              48,
              48,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              53,
              48,
              48,
              52,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              101,
              49,
              45,
              55,
              49,
              49,
              49,
              45,
              56,
              48,
              102,
              100,
              45,
              53,
              56,
              48,
              48,
              50,
              99,
              55,
              53,
              52,
              54,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              53,
              48,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 33,
          "responseSize": 6405
        },
        "id": "81ba5957-10e3-4d5f-9a56-f4bddea64ad1",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a402690-4357-40d5-977c-8ebf065ac8b7",
          "length": 57,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b44f5b0a-00b2-4602-933d-09b5c5831067"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}"
            }
          },
          "id": "03d8f64c-05b9-4a60-b663-63b95072c0e2",
          "name": "39. Get Operation",
          "request": {
            "description": {
              "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd4679a1-dd19-4ff8-adb2-9aba9594eee1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "4f520466-7acb-4ca2-bff1-0a7310b0ae95"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d4c990eb-a965-4d98-b92a-11980a2de906",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 39: Get Operation =====\nconsole.log(\"‚öôÔ∏è Setting up Step 39: Get Operation\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 39\");\n"
                ],
                "_lastExecutionId": "40637503-8c8d-44e5-9bbc-b3c8e4b87814"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f",
              "operations",
              "01994569-9cd3-78f3-a1a4-d86cc7fa5820"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f3a09375-c94b-42e2-aa1c-dd6ff973cc68"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c3bdf4c9-e21d-4261-b653-d0549cf710bd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b1ccde78-efb1-4fdf-b5d2-034456be962a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "797"
            },
            {
              "key": "X-Request-Id",
              "value": "7c72ebae-aa46-498e-8206-9339c0ec9eb6"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 797
        },
        "id": "03d8f64c-05b9-4a60-b663-63b95072c0e2",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "06fb9ae7-5157-4667-85f6-1620a8c35e2e",
          "length": 57,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20003995-989f-4736-9ab0-b131cead7a19"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations"
            }
          },
          "id": "9c409dc9-de3b-4459-960b-a724e7f69531",
          "name": "40. List Operations by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "DEBIT, CREDIT",
                    "type": "text/plain"
                  },
                  "key": "type",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3567a06f-b5f5-468f-a597-b169674c033c",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "87e51109-e6f7-4539-a301-9b71643d3532"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7be03e4e-a6be-4d7c-9191-4197fb55cf19",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 40: List Operations by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 40: List Operations by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 40\");\n"
                ],
                "_lastExecutionId": "ae8152c4-775d-479a-8e3d-daf753bcfea9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f",
              "operations"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "4b525cdd-69d9-426c-9f87-8d3ad915630f"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e8210e8c-b114-4637-bdda-2ea7501c6784",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "19d37d8d-9b8d-4ec2-b6cf-d20e12c0b8e0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:33 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2418"
            },
            {
              "key": "X-Request-Id",
              "value": "ae5da542-b4cc-49f4-8c3f-43246581ba22"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              57,
              53,
              53,
              56,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              98,
              45,
              55,
              50,
              51,
              57,
              45,
              56,
              99,
              50,
              52,
              45,
              97,
              56,
              101,
              54,
              48,
              50,
              54,
              50,
              99,
              52,
              100,
              49,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              53,
              57,
              45,
              55,
              53,
              50,
              49,
              45,
              98,
              97,
              56,
              51,
              45,
              54,
              49,
              51,
              97,
              55,
              56,
              99,
              53,
              48,
              51,
              100,
              100,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              50,
              57,
              51,
              51,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              53,
              51,
              49,
              49,
              52,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              101,
              49,
              45,
              55,
              49,
              49,
              49,
              45,
              56,
              48,
              102,
              100,
              45,
              53,
              56,
              48,
              48,
              50,
              99,
              55,
              53,
              52,
              54,
              52,
              50,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              100,
              100,
              101,
              45,
              55,
              55,
              97,
              54,
              45,
              57,
              100,
              50,
              53,
              45,
              52,
              48,
              97,
              98,
              56,
              48,
              99,
              52,
              51,
              55,
              49,
              56,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              50,
              53,
              48,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              53,
              48,
              55,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 8,
          "responseSize": 2418
        },
        "id": "9c409dc9-de3b-4459-960b-a724e7f69531",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "04bb9fd9-b4eb-4182-a401-1e25af9622f2",
          "length": 57,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9ab39982-bc11-4f79-b2dc-27a6a5838d9a"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}",
              "folderPath": "Operations",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}"
            }
          },
          "id": "1b281bdf-2a89-487f-8323-470228d4a1b9",
          "name": "41. Update Operation Metadata",
          "request": {
            "description": {
              "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Transaction ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{transactionId}}",
                  "key": "transaction_id"
                },
                {
                  "description": {
                    "content": "Operation ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{operationId}}",
                  "key": "operation_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1d94b827-2282-49a5-99e6-522931895392",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "8b554d78-c7d3-41bc-9fea-c51e50058c74"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "78bbe9df-db42-4b93-9c9a-33fce17aad35",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 41: Update Operation Metadata =====\nconsole.log(\"‚öôÔ∏è Setting up Step 41: Update Operation Metadata\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 41\");\n"
                ],
                "_lastExecutionId": "05fe6cda-9519-4075-b062-7a54e78e8663"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "01994569-9cca-76b6-a378-f522dba7eaf6",
              "operations",
              "01994569-9cd3-78f3-a1a4-d86cc7fa5820"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "7c998248-502d-4a6f-af9a-0df7ee56a0b1"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9927ed94-8f63-44a8-903b-e3f3237390e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "84",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d16c07d7-91df-4905-93c6-2b72729a06f9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "799"
            },
            {
              "key": "X-Request-Id",
              "value": "fd1e1242-0cc1-4ea7-bf96-78afa3a8bb77"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              100,
              51,
              45,
              55,
              56,
              102,
              51,
              45,
              97,
              49,
              97,
              52,
              45,
              100,
              56,
              54,
              99,
              99,
              55,
              102,
              97,
              53,
              56,
              50,
              48,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              99,
              99,
              97,
              45,
              55,
              54,
              98,
              54,
              45,
              97,
              51,
              55,
              56,
              45,
              102,
              53,
              50,
              50,
              100,
              98,
              97,
              55,
              101,
              97,
              102,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              114,
              101,
              100,
              105,
              116,
              32,
              99,
              97,
              114,
              100,
              32,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              51,
              56,
              54,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              52,
              46,
              53,
              48,
              52,
              52,
              51,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 799
        },
        "id": "1b281bdf-2a89-487f-8323-470228d4a1b9",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6145096b-30a4-4ec7-a4b2-7ba650ad3eec",
          "length": 57,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c915ac6e-b78f-4053-8697-ba9cf604a74c"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "bb538588-fd81-4ccd-aa7d-d684f3616260",
          "name": "42. Get Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3beba441-21db-45ee-9ca2-88f566db87c3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ce9bb9f3-b6ef-4c03-b1d1-16dac32e181f"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e474fafc-5f8d-4b49-a893-766620a555f8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 42: Get Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 42: Get Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 42\");\n"
                ],
                "_lastExecutionId": "000e1af0-d444-4269-8410-60b5edfa9570"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "balances",
              "01994569-92c6-76e3-91b0-a2df000fce15"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "cb99fd59-294c-4295-98f1-5c69833e2485"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bb26ede-a849-4bf5-b42a-5494d9a31123",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c94c23d8-576e-46cb-98fb-d7bf6b49bb0f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "475"
            },
            {
              "key": "X-Request-Id",
              "value": "4a4f7450-af3f-45e9-9106-ad3da3708920"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 475
        },
        "id": "bb538588-fd81-4ccd-aa7d-d684f3616260",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7c85c91e-5409-46b6-99e9-9e7fe54990c2",
          "length": 57,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "db9e66a3-7e50-4852-8ca9-0d1112891b6e"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances"
            }
          },
          "id": "a76112a0-44ba-45c6-9f67-d5214d95c64d",
          "name": "43. List Balances by Account",
          "request": {
            "description": {
              "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "account_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8561ecab-49ad-4f8e-9f71-8b0eaacff371",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "31934410-4a5f-4df9-b1d5-41bdee39f091"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "788b6829-be8e-4893-a0df-06e9cb410ba3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 43: List Balances by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 43: List Balances by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 43\");\n"
                ],
                "_lastExecutionId": "0615dd64-bbd2-4040-9e9d-ce0dd03efa0b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "2df2e634-da09-4af6-b58f-902cd32435a1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9cab5d6c-5340-4a1a-a83b-ab7d9fa4a556",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "88ec6d00-1cd4-48c9-9f71-6b6536c550d7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "498"
            },
            {
              "key": "X-Request-Id",
              "value": "4d58cd3a-eee9-4280-b4df-a6a46a4480ba"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 498
        },
        "id": "a76112a0-44ba-45c6-9f67-d5214d95c64d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "62ae9c10-da83-4b81-8b84-cb34ac07f3f2",
          "length": 57,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ba85f7e4-c46b-4d48-9b7f-729b7e6383bf"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
            }
          },
          "id": "11137ad7-3c44-4368-8458-f9567fe9f1c8",
          "name": "44. List Balances by Account Alias",
          "request": {
            "description": {
              "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea4d88e0-03ac-47d8-93cd-a45473e21765",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "ac1d2309-4e05-4885-8f25-b438a663fc30"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "892779fc-9e05-48d6-9c26-0d1cbf65d490",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 44: List Balances by Account Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 44: List Balances by Account Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 44\");\n"
                ],
                "_lastExecutionId": "a63e7851-154b-481b-a43f-4c757d75604c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "f57861cb-96a0-4ec3-a864-04e754214eb5"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00fa5996-7b58-4a81-8640-1a14e983d949",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "03b10fab-c137-4b10-a86c-404868d6649c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "498"
            },
            {
              "key": "X-Request-Id",
              "value": "61bc5bc2-4b02-4975-94cd-0949f8a6245f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 498
        },
        "id": "11137ad7-3c44-4368-8458-f9567fe9f1c8",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3f0b35c-8712-4e53-8f43-60e2119af036",
          "length": 57,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "431698c1-7a8a-403a-9a8e-1a10c318f2c0"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances"
            }
          },
          "id": "2a89be1f-6459-4bc4-be64-ce94c47b2e3f",
          "name": "45. List Balances by External Code",
          "request": {
            "description": {
              "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Code (e.g. BRL)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "code"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "793ce235-47aa-4ef2-8842-d47075ab57e6",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "5b0a58ad-120b-4e41-92af-6fbc8d104c09"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d00f6de0-cec2-4fd7-b5de-1dca471253f1",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 45: List Balances by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 45: List Balances by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 45\");\n"
                ],
                "_lastExecutionId": "efd7e171-af88-41e4-a208-078810f26f7d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "external",
              "USD",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "ceeb1fe2-7a8f-4c13-815b-759801e2fdaf"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dbf6e9d0-59b9-4943-8088-b16d93d510a2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3d3b8d60-90ca-4765-b7d8-6d1816b9fc20",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "494"
            },
            {
              "key": "X-Request-Id",
              "value": "a79b3cbc-cceb-4d1f-a0c1-e4da57938256"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              57,
              51,
              54,
              56,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              49,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 494
        },
        "id": "2a89be1f-6459-4bc4-be64-ce94c47b2e3f",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fcf9b069-5acb-4ca2-976f-c9f8fbe972b1",
          "length": 57,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "43df9074-27d0-453c-8634-116515650656"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "cad1ad11-9f0f-4b57-a4a4-09556606d7d0",
          "name": "46. Update Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bec25652-ca3d-4299-a884-3ba4dc5ca520",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "7ff2e366-9e72-405e-b745-683d5ff59747"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "74988652-35db-4cfc-969c-e40c88bc0fab",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 46: Update Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 46: Update Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 46\");\n"
                ],
                "_lastExecutionId": "0218b62e-06c9-4582-b132-20f7df355e52"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "balances",
              "01994569-92c6-76e3-91b0-a2df000fce15"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "58fb27c1-e62f-43f1-bf81-954390455fa3"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b890e88-92c2-4bbe-8ea4-d50084938c7d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "52",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e05293bb-c677-4a49-87e9-74aff4a3fd22",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "475"
            },
            {
              "key": "X-Request-Id",
              "value": "c23c9c57-925f-4310-bdb6-7f67e32f486f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 475
        },
        "id": "cad1ad11-9f0f-4b57-a4a4-09556606d7d0",
        "assertions": [
          {
            "assertion": "‚úÖ Status: PATCH request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e243408a-af21-4db9-aff4-09c4f2ea8e71",
          "length": 57,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f43fc957-02d9-47b0-88d3-c040ae6d91fd"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances"
            }
          },
          "id": "871c7f3a-1a4a-403a-b9f5-abc331fc3c29",
          "name": "47. List All Balances",
          "request": {
            "description": {
              "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "description": {
                    "content": "Limit",
                    "type": "text/plain"
                  },
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Start Date",
                    "type": "text/plain"
                  },
                  "key": "start_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "End Date",
                    "type": "text/plain"
                  },
                  "key": "end_date",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Sort Order",
                    "type": "text/plain"
                  },
                  "key": "sort_order",
                  "value": ""
                },
                {
                  "disabled": true,
                  "description": {
                    "content": "Cursor",
                    "type": "text/plain"
                  },
                  "key": "cursor",
                  "value": ""
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "091c0939-6f70-4999-b7fe-89aa014f7238",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "_lastExecutionId": "9a4c9dd6-3d27-4695-9d66-c9d706017058"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "fa75f7e7-c28f-4bb6-8ad6-47b597610892",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 47: List All Balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step 47: List All Balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 47\");\n"
                ],
                "_lastExecutionId": "60e122bd-5180-4d87-94c6-db53a860c329"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "6f7f7c29-3911-469d-8e86-6dd8fdaf23e3"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44640359-8ed2-4cb7-ac09-326fbdde5860",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1152f62e-602c-4d6e-bc21-0a3c78e69c89",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "970"
            },
            {
              "key": "X-Request-Id",
              "value": "4b9999f5-2685-4cc7-ac9b-51aa36220c4f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              50,
              57,
              51,
              54,
              56,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              51,
              46,
              54,
              54,
              57,
              49,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              49,
              52,
              51,
              55,
              52,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 970
        },
        "id": "871c7f3a-1a4a-403a-b9f5-abc331fc3c29",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5893077-df50-4d82-81ca-b86cc0c2173d",
          "length": 57,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d4bd1fa2-9b78-4eb2-bdec-93f7721f5b80"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
            }
          },
          "id": "631ccbc5-89fe-46e4-82d0-cc5b20a932f6",
          "name": "48. Check Account Balance Before Zeroing",
          "request": {
            "description": {
              "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Alias (e.g. @person1)",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "",
                  "key": "alias"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efcdb01e-7383-4d2c-bb59-8dbed0e8f9b8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n    if (responseJson.items && responseJson.items.length > 0) {\n        const balance = responseJson.items[0];\n        if (balance.available !== undefined) {\n            const balanceAmount = Math.abs(balance.available);\n            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n        } else {\n            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n            pm.environment.set(\"currentBalanceAmount\", 0);\n        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                ],
                "_lastExecutionId": "e462e7ac-69f7-4538-b78f-fba5c9c37513"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "35b88a06-bba6-4cd0-a03a-05832e6163a8",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"‚öôÔ∏è Setting up Step 48: Check Account Balance Before Zeroing\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 48\");\n"
                ],
                "_lastExecutionId": "b56dc852-9ed2-4ece-94fe-c080385b3250"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "alias",
              "@treasury_checking",
              "balances"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "52ae1d3b-8fcf-4d4e-99f1-3a75012ba561"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1341a783-4123-41be-b60f-98f4802e2799",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "69bfc197-0c60-4b8a-a15e-bc8cc38f8261",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:34 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "498"
            },
            {
              "key": "X-Request-Id",
              "value": "ac487205-79de-44f9-9d09-15334004c788"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              107,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              34,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              83,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              82,
              101,
              99,
              101,
              105,
              118,
              105,
              110,
              103,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              48,
              46,
              56,
              50,
              50,
              52,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              49,
              52,
              51,
              55,
              52,
              49,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              44,
              34,
              108,
              105,
              109,
              105,
              116,
              34,
              58,
              49,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 498
        },
        "id": "631ccbc5-89fe-46e4-82d0-cc5b20a932f6",
        "assertions": [
          {
            "assertion": "‚úÖ Status: GET request successful (200)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b5f0d52-f524-4658-91dd-6a7af77b5a48",
          "length": 57,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b295df48-96a0-4ec3-829a-1bb3ffd6810e"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
              "folderPath": "Transactions",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
            }
          },
          "id": "ab4efb56-8d14-430a-897c-69cd78c59546",
          "name": "49. Zero Out Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              },
              {
                "disabled": false,
                "description": {
                  "content": "Unique key to prevent duplicate transactions",
                  "type": "text/plain"
                },
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02bcd002-07af-4aae-828e-37d3edff232e",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "_lastExecutionId": "cf0b5448-5d7d-4cff-8f33-5b8fad1ea363"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6f019418-207e-4fc5-900f-319266208375",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 49: Zero Out Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 49: Zero Out Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 49\");\n"
                ],
                "_lastExecutionId": "6584fbdf-f711-4b23-ba07-728d26f154fa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "transactions",
              "json"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "fd7fd065-c85e-447a-a44a-dfccac70bbbe"
            },
            {
              "disabled": false,
              "description": {
                "content": "Unique key to prevent duplicate transactions",
                "type": "text/plain"
              },
              "key": "X-Idempotency",
              "value": "7b0166dc-c431-4e62-b885-87be428046ec"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8cabc249-7f7e-4f74-b587-e34f15d54c8c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1145",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100\"\n  }\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9019806a-d9f1-469f-a9f3-e55811ab3083",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Content-Length",
              "value": "2313"
            },
            {
              "key": "X-Request-Id",
              "value": "49ec48b3-ffa7-4c58-b7bd-bb319945c638"
            },
            {
              "key": "X-Idempotency-Replayed",
              "value": "false"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              97,
              53,
              51,
              56,
              45,
              55,
              99,
              52,
              51,
              45,
              56,
              57,
              56,
              101,
              45,
              50,
              97,
              101,
              51,
              52,
              50,
              101,
              100,
              98,
              56,
              52,
              53,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              118,
              101,
              114,
              115,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              122,
              101,
              114,
              111,
              32,
              111,
              117,
              116,
              32,
              116,
              104,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              117,
              115,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              117,
              97,
              108,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              67,
              82,
              69,
              65,
              84,
              69,
              68,
              34,
              125,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              71,
              114,
              111,
              117,
              112,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              34,
              58,
              91,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              93,
              44,
              34,
              100,
              101,
              115,
              116,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              91,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              93,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              52,
              56,
              48,
              53,
              55,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              55,
              57,
              55,
              48,
              55,
              57,
              51,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              34,
              58,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              95,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              95,
              115,
              116,
              101,
              112,
              34,
              58,
              34,
              52,
              56,
              34,
              125,
              44,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              97,
              53,
              51,
              99,
              45,
              55,
              48,
              48,
              51,
              45,
              97,
              56,
              102,
              99,
              45,
              54,
              102,
              53,
              102,
              52,
              100,
              52,
              57,
              101,
              49,
              99,
              102,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              97,
              53,
              51,
              56,
              45,
              55,
              99,
              52,
              51,
              45,
              56,
              57,
              56,
              101,
              45,
              50,
              97,
              101,
              51,
              52,
              50,
              101,
              100,
              98,
              56,
              52,
              53,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              67,
              82,
              69,
              68,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              45,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              97,
              101,
              45,
              55,
              50,
              51,
              57,
              45,
              57,
              55,
              56,
              100,
              45,
              50,
              97,
              102,
              97,
              100,
              48,
              54,
              57,
              55,
              50,
              54,
              54,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              47,
              85,
              83,
              68,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              48,
              98,
              53,
              45,
              55,
              97,
              56,
              52,
              45,
              97,
              57,
              97,
              101,
              45,
              56,
              54,
              97,
              99,
              51,
              101,
              53,
              98,
              101,
              50,
              101,
              48,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              52,
              56,
              48,
              53,
              55,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              56,
              48,
              48,
              49,
              54,
              50,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              99,
              114,
              101,
              100,
              105,
              116,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              97,
              53,
              51,
              99,
              45,
              55,
              48,
              54,
              55,
              45,
              97,
              57,
              52,
              55,
              45,
              53,
              100,
              102,
              53,
              50,
              102,
              54,
              99,
              57,
              49,
              54,
              97,
              34,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              97,
              53,
              51,
              56,
              45,
              55,
              99,
              52,
              51,
              45,
              56,
              57,
              56,
              101,
              45,
              50,
              97,
              101,
              51,
              52,
              50,
              101,
              100,
              98,
              56,
              52,
              53,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              111,
              117,
              114,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              122,
              101,
              114,
              111,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              68,
              69,
              66,
              73,
              84,
              34,
              44,
              34,
              97,
              115,
              115,
              101,
              116,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              85,
              83,
              68,
              34,
              44,
              34,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              58,
              34,
              69,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              99,
              104,
              97,
              114,
              116,
              79,
              102,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              34,
              44,
              34,
              97,
              109,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              49,
              48,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              116,
              101,
              114,
              34,
              58,
              123,
              34,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              34,
              58,
              34,
              48,
              34,
              44,
              34,
              111,
              110,
              72,
              111,
              108,
              100,
              34,
              58,
              34,
              48,
              34,
              125,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              98,
              100,
              45,
              55,
              51,
              54,
              50,
              45,
              56,
              48,
              100,
              48,
              45,
              98,
              49,
              98,
              98,
              54,
              48,
              99,
              51,
              102,
              99,
              53,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              65,
              108,
              105,
              97,
              115,
              34,
              58,
              34,
              64,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              121,
              95,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              103,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              75,
              101,
              121,
              34,
              58,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              57,
              50,
              99,
              54,
              45,
              55,
              54,
              101,
              51,
              45,
              57,
              49,
              98,
              48,
              45,
              97,
              50,
              100,
              102,
              48,
              48,
              48,
              102,
              99,
              101,
              49,
              53,
              34,
              44,
              34,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              99,
              51,
              49,
              45,
              55,
              52,
              56,
              49,
              45,
              98,
              55,
              102,
              100,
              45,
              50,
              99,
              97,
              55,
              100,
              48,
              102,
              56,
              100,
              50,
              50,
              48,
              34,
              44,
              34,
              108,
              101,
              100,
              103,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              48,
              49,
              57,
              57,
              52,
              53,
              54,
              57,
              45,
              56,
              101,
              55,
              101,
              45,
              55,
              98,
              56,
              97,
              45,
              98,
              57,
              101,
              98,
              45,
              101,
              101,
              101,
              53,
              57,
              102,
              98,
              101,
              57,
              97,
              49,
              48,
              34,
              44,
              34,
              114,
              111,
              117,
              116,
              101,
              34,
              58,
              34,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              65,
              102,
              102,
              101,
              99,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              52,
              56,
              48,
              53,
              55,
              53,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              49,
              51,
              84,
              50,
              51,
              58,
              50,
              57,
              58,
              51,
              53,
              46,
              53,
              52,
              56,
              48,
              50,
              54,
              57,
              53,
              57,
              90,
              34,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              100,
              101,
              98,
              105,
              116,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 2313
        },
        "id": "ab4efb56-8d14-430a-897c-69cd78c59546",
        "assertions": [
          {
            "assertion": "‚úÖ Status: POST request successful (200/201)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          },
          {
            "assertion": "üìã Structure: Response has valid JSON structure",
            "skipped": false
          },
          {
            "assertion": "üí∏ Business Logic: Transaction has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1cf60cae-9cff-43f5-80e7-c4e3fadda05f",
          "length": 57,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1678a703-e39a-4ccb-9b8c-dbb84a7c59e2"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
              "folderPath": "Balances",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
            }
          },
          "id": "1f7edcb6-4979-455b-b780-86456376022c",
          "name": "50. Delete Balance",
          "request": {
            "description": {
              "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "host": [
                "{{transactionUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Balance ID",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{balanceId}}",
                  "key": "balance_id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "379d8e0d-ee8f-4d00-8451-617d644cbb5f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "0de5d107-6015-4d1f-9483-89aa86857c00"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f6a08ab0-f0c0-47e0-b6c9-3ca1421dc7cf",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 50: Delete Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 50: Delete Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 50\");\n"
                ],
                "_lastExecutionId": "6df3452f-dc8f-41ae-877f-ab6766362efe"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "balances",
              "01994569-92c6-76e3-91b0-a2df000fce15"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "b0f634a9-b047-46cb-80b4-1cb96df65b79"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b0781c0c-60d4-4478-9e59-aff2439c09f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "8adbe10e-7611-4418-96a3-d7a829b78ee7",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "603b577c-4638-4201-9edf-a793a869860c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 0
        },
        "id": "1f7edcb6-4979-455b-b780-86456376022c",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "72fe4449-21a0-4126-9574-540fee62c9c9",
          "length": 57,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a77ac401-9008-45b1-969c-853c4f5b4597"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
              "folderPath": "Segments",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
            }
          },
          "id": "6b3e4ab7-a4fe-48b5-a479-79e0f3e52d54",
          "name": "51. Delete Segment",
          "request": {
            "description": {
              "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Segment ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{segmentId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c2e8a0b-4b2c-4d93-b597-28a36d4f7a91",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "c98d2c3c-5887-4096-ad43-405d196272e8"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f71358f4-f29a-4e37-8f6a-544f23ce979f",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 51: Delete Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 51: Delete Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 51\");\n"
                ],
                "_lastExecutionId": "84ae8546-f6e0-47d1-967d-191dfad5a285"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "segments",
              "01994569-96e1-7963-b453-75c507f707fe"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "69568890-ed4a-4497-a18c-b9932b4d0764"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5b803b91-f9bc-4b96-bcaf-8bfbf6067a0c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "858ff47e-ed2b-482d-9f67-204a7d51868e",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "e8441f34-cfb5-4b83-b01d-9a53d08604d0"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 0
        },
        "id": "6b3e4ab7-a4fe-48b5-a479-79e0f3e52d54",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ec5676b2-0a2f-4630-8eb3-6a62110c64d4",
          "length": 57,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "91c75fa2-9a04-473b-ba9b-6c458c48c47b"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
              "folderPath": "Portfolios",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
            }
          },
          "id": "0eefcfba-945a-4581-9123-0e98caf92c5d",
          "name": "52. Delete Portfolio",
          "request": {
            "description": {
              "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Portfolio ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{portfolioId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7247d314-98e8-4cfa-9946-5a4bdb0ad9e7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "4ff46265-8b85-474c-a246-5a0c62881f1c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e18b4208-a8ac-458e-aa48-47a71ffb3fe7",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 52: Delete Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 52: Delete Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 52\");\n"
                ],
                "_lastExecutionId": "975f8e41-f696-40e3-89cc-7ae881636a99"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "portfolios",
              "01994569-94ca-7753-8976-99330605271b"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "d8274cb4-6767-4a12-968d-60bfc7d063a6"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c0a4de9e-4e93-4a28-beb5-dede6893ee8f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e56beb77-3597-4266-99ed-738f9fb4bac9",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "cc90e5aa-12c3-417c-9209-66c53f14835a"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 0
        },
        "id": "0eefcfba-945a-4581-9123-0e98caf92c5d",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2bec91fd-7bf7-4ed3-a347-45271c46fccf",
          "length": 57,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dcee4af4-2e02-4a29-b1d2-0c4455ca6233"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
              "folderPath": "Accounts",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
            }
          },
          "id": "8795afe6-8d57-4198-965f-82497bbc46d2",
          "name": "53. Delete Account",
          "request": {
            "description": {
              "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Account ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{accountId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a4984aa-b287-4316-bca0-3cda4b1c8de4",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "e96f1331-e9fa-4f2b-b1e0-f662e876ca9e"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "27a7d83a-e50a-45bb-b5f4-396e3a5ecc45",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 53: Delete Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 53: Delete Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 53\");\n"
                ],
                "_lastExecutionId": "ae41939c-47c0-4c9f-b18e-96a682e0bbb4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "accounts",
              "01994569-92bd-7362-80d0-b1bb60c3fc5f"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "a674faf4-812a-49af-8324-0ef9bb101f59"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b678adec-38f3-48f3-babb-1286151f62eb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e6a21beb-3373-40c7-8db6-e1a5dd0e8f37",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "6a6586d4-3096-4d28-8897-17c116c49e88"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 0
        },
        "id": "8795afe6-8d57-4198-965f-82497bbc46d2",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e61762ec-0c95-4f5c-a92f-ee24a4330e1c",
          "length": 57,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bb02f6cf-58d4-4f13-ace3-29f45257cbf0"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
              "folderPath": "Assets",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
            }
          },
          "id": "c53e0f71-c437-458e-99fe-6f2ab562e77f",
          "name": "54. Delete Asset",
          "request": {
            "description": {
              "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "ledger_id"
                },
                {
                  "description": {
                    "content": "Asset ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{assetId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "581580bc-ec2f-407b-8e2f-ee9b3774b53a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "8adbf8d3-ef75-4035-af1e-74f7521e41fd"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1457fa8a-0003-44ff-ad59-09fcf9a7adc3",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 54: Delete Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 54: Delete Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 54\");\n"
                ],
                "_lastExecutionId": "e955e934-afb6-48a9-9938-44baa0f3270c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10",
              "assets",
              "01994569-90a7-72a7-a722-78dd9ebd07b1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "fbc32840-7ab6-4f1a-9a35-4c6c2e0ea244"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b452fbc4-b26f-4f99-a533-795e9cd3014e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "9d4fc763-d2be-448b-815c-1773650ceaeb",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "0fe2eb03-0b4e-4eee-a9b5-ad2fb070d3df"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 0
        },
        "id": "c53e0f71-c437-458e-99fe-6f2ab562e77f",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "61b82d3a-8498-4a28-899a-adaa9878b522",
          "length": 57,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dd94edd6-5371-4a86-80e3-847889c2b488"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "normalizedPath": "/v1/organizations/{}/ledgers/{}",
              "folderPath": "Ledgers",
              "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
            }
          },
          "id": "c8a2e4f5-4cdd-4196-9bd4-a0468b65a840",
          "name": "55. Delete Ledger",
          "request": {
            "description": {
              "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "organization_id"
                },
                {
                  "description": {
                    "content": "Ledger ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{ledgerId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd65e625-4a98-4c68-b790-6926ee300389",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "5bdbec1c-2696-4a96-8a4b-1c9951502846"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "93faf0f6-e2d4-43c4-829d-a0606741a215",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 55: Delete Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 55: Delete Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 55\");\n"
                ],
                "_lastExecutionId": "21ff5491-aa40-491e-a01d-266ed1be3425"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220",
              "ledgers",
              "01994569-8e7e-7b8a-b9eb-eee59fbe9a10"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "e5e1112b-7aca-4b21-8157-e64d4633699c"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "36786ffd-1619-4082-87bb-1e4c22b7f2e0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "48de53d9-7501-4442-b245-550bea803b89",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "d7c69512-27c7-417b-800e-c777ade2af0a"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 0
        },
        "id": "c8a2e4f5-4cdd-4196-9bd4-a0468b65a840",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b6a27de-b804-4420-9828-53e75f8d27ff",
          "length": 57,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d2182bcb-7691-4156-bf1c-8ab13e7a4d55"
        },
        "item": {
          "_": {
            "matchInfo": {
              "originalPath": "/v1/organizations/{{organizationId}}",
              "normalizedPath": "/v1/organizations/{}",
              "folderPath": "Organizations",
              "matchedTargetPath": "/v1/organizations/{}"
            }
          },
          "id": "0a580e85-5ff0-4ce8-85f7-717e6a1d35aa",
          "name": "56. Delete Organization",
          "request": {
            "description": {
              "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "Organization ID in UUID format",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "{{organizationId}}",
                  "key": "id"
                }
              ]
            },
            "header": [
              {
                "disabled": false,
                "description": {
                  "content": "Authorization Bearer Token with format: Bearer {token}",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "disabled": true,
                "description": {
                  "content": "Request ID for tracing",
                  "type": "text/plain"
                },
                "key": "X-Request-Id",
                "value": "{{$guid}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc080a91-fca8-492c-a249-2d4aec5e3fa2",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "_lastExecutionId": "e97b54ad-891f-4721-9763-960070c97508"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f22c3717-54dd-4d99-b54f-7a54bbba500a",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 56: Delete Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 56: Delete Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 56\");\n"
                ],
                "_lastExecutionId": "c6190483-0971-4b56-9be9-50b96ddc7117"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "v1",
              "organizations",
              "01994569-8c31-7481-b7fd-2ca7d0f8d220"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "disabled": false,
              "description": {
                "content": "Authorization Bearer Token with format: Bearer {token}",
                "type": "text/plain"
              },
              "key": "Authorization",
              "value": "Bearer "
            },
            {
              "disabled": true,
              "description": {
                "content": "Request ID for tracing",
                "type": "text/plain"
              },
              "key": "X-Request-Id",
              "value": "764b3847-a11a-4499-bece-84fa6fe0cdcf"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8191c15a-1aa8-4b71-ad35-fa06d0ad6918",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "78a0b688-84a2-49b1-938f-0902905f1b44",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:35 GMT"
            },
            {
              "key": "X-Request-Id",
              "value": "9df76dc9-61c8-45b4-8885-46f3749bb7cc"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 0
        },
        "id": "0a580e85-5ff0-4ce8-85f7-717e6a1d35aa",
        "assertions": [
          {
            "assertion": "‚úÖ Status: DELETE request successful (204)",
            "skipped": false
          },
          {
            "assertion": "‚ö° Performance: Response time acceptable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1679ffe9-94f6-4308-9115-ea6f018fb53c",
          "length": 57,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3779d1d0-6cf2-4d32-84a5-34b4f3a5e64d"
        },
        "item": {
          "id": "60c52709-0a4b-45bc-bf56-09e812884cd0",
          "name": "Workflow Summary & Report",
          "request": {
            "description": {
              "content": "Final step that generates comprehensive test summary for CI reporting",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{onboardingUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f745d8-3fdb-4497-a659-3e38b21d7214",
                "type": "text/javascript",
                "exec": [
                  "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: 56\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= 56; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                ],
                "_lastExecutionId": "f49b7681-8c7e-435d-ba22-baf1b8ca1e76"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Final step that generates comprehensive test summary for CI reporting",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ca34292-5c4c-4161-95c5-d36953db7a0c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "53fc7785-995a-4f1f-8508-47cc7ff6bd42",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Sat, 13 Sep 2025 23:29:36 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "X-Request-Id",
              "value": "69573718-d2b4-4d75-9602-85e2e3645a37"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              104,
              101,
              97,
              108,
              116,
              104,
              121
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 7
        },
        "id": "60c52709-0a4b-45bc-bf56-09e812884cd0"
      }
    ],
    "transfers": {
      "responseTotal": 40531
    },
    "failures": [],
    "error": null
  }
}