// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gen

import (
	"fmt"
	"github.com/LerianStudio/midaz/common"
	"github.com/LerianStudio/midaz/common/mcasdoor"
	"github.com/LerianStudio/midaz/common/mmongo"
	"github.com/LerianStudio/midaz/common/mpostgres"
	"github.com/LerianStudio/midaz/common/mzap"
	"github.com/LerianStudio/midaz/components/ledger/internal/adapters/database/mongodb"
	"github.com/LerianStudio/midaz/components/ledger/internal/adapters/database/postgres"
	"github.com/LerianStudio/midaz/components/ledger/internal/app/command"
	"github.com/LerianStudio/midaz/components/ledger/internal/app/query"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/metadata"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/onboarding/ledger"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/onboarding/organization"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/portfolio/account"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/portfolio/asset"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/portfolio/portfolio"
	"github.com/LerianStudio/midaz/components/ledger/internal/domain/portfolio/product"
	"github.com/LerianStudio/midaz/components/ledger/internal/ports/grpc"
	"github.com/LerianStudio/midaz/components/ledger/internal/ports/http"
	"github.com/LerianStudio/midaz/components/ledger/internal/service"
	"github.com/google/wire"
	"sync"
)

// Injectors from inject.go:

// InitializeService the setup the dependencies and returns a new *service.Service instance
func InitializeService() *service.Service {
	config := service.NewConfig()
	casdoorConnection := setupCasdoorConnection(config)
	postgresConnection := setupPostgreSQLConnection(config)
	organizationPostgreSQLRepository := postgres.NewOrganizationPostgreSQLRepository(postgresConnection)
	ledgerPostgreSQLRepository := postgres.NewLedgerPostgreSQLRepository(postgresConnection)
	productPostgreSQLRepository := postgres.NewProductPostgreSQLRepository(postgresConnection)
	portfolioPostgreSQLRepository := postgres.NewPortfolioPostgreSQLRepository(postgresConnection)
	accountPostgreSQLRepository := postgres.NewAccountPostgreSQLRepository(postgresConnection)
	assetPostgreSQLRepository := postgres.NewAssetPostgreSQLRepository(postgresConnection)
	mongoConnection := setupMongoDBConnection(config)
	metadataMongoDBRepository := mongodb.NewMetadataMongoDBRepository(mongoConnection)
	useCase := &command.UseCase{
		OrganizationRepo: organizationPostgreSQLRepository,
		LedgerRepo:       ledgerPostgreSQLRepository,
		ProductRepo:      productPostgreSQLRepository,
		PortfolioRepo:    portfolioPostgreSQLRepository,
		AccountRepo:      accountPostgreSQLRepository,
		AssetRepo:        assetPostgreSQLRepository,
		MetadataRepo:     metadataMongoDBRepository,
	}
	queryUseCase := &query.UseCase{
		OrganizationRepo: organizationPostgreSQLRepository,
		LedgerRepo:       ledgerPostgreSQLRepository,
		ProductRepo:      productPostgreSQLRepository,
		PortfolioRepo:    portfolioPostgreSQLRepository,
		AccountRepo:      accountPostgreSQLRepository,
		AssetRepo:        assetPostgreSQLRepository,
		MetadataRepo:     metadataMongoDBRepository,
	}
	accountHandler := &http.AccountHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	portfolioHandler := &http.PortfolioHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	ledgerHandler := &http.LedgerHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	assetHandler := &http.AssetHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	organizationHandler := &http.OrganizationHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	productHandler := &http.ProductHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	app := http.NewRouter(casdoorConnection, accountHandler, portfolioHandler, ledgerHandler, assetHandler, organizationHandler, productHandler)
	logger := mzap.InitializeLogger()
	server := service.NewServer(config, app, logger)
	grpcServer := grpc.NewRouterGRPC(useCase, queryUseCase)
	serverGRPC := service.NewServerGRPC(config, grpcServer, logger)
	serviceService := &service.Service{
		Server:     server,
		ServerGRPC: serverGRPC,
		Logger:     logger,
	}
	return serviceService
}

// inject.go:

var onceConfig sync.Once

const prdEnvName = "production"

func setupPostgreSQLConnection(cfg *service.Config) *mpostgres.PostgresConnection {
	connStrPrimary := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.PrimaryDBHost, cfg.PrimaryDBUser, cfg.PrimaryDBPassword, cfg.PrimaryDBName, cfg.PrimaryDBPort)

	connStrReplica := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.ReplicaDBHost, cfg.ReplicaDBUser, cfg.ReplicaDBPassword, cfg.ReplicaDBName, cfg.ReplicaDBPort)

	return &mpostgres.PostgresConnection{
		ConnectionStringPrimary: connStrPrimary,
		ConnectionStringReplica: connStrReplica,
		PrimaryDBName:           cfg.PrimaryDBName,
		ReplicaDBName:           cfg.ReplicaDBName,
		Component:               "ledger",
	}
}

func setupMongoDBConnection(cfg *service.Config) *mmongo.MongoConnection {
	connStrSource := fmt.Sprintf("mongodb://%s:%s@%s:%s",
		cfg.MongoDBUser, cfg.MongoDBPassword, cfg.MongoDBHost, cfg.MongoDBPort)

	return &mmongo.MongoConnection{
		ConnectionStringSource: connStrSource,
		Database:               cfg.MongoDBName,
	}
}

func setupCasdoorConnection(cfg *service.Config) *mcasdoor.CasdoorConnection {
	casdoor := &mcasdoor.CasdoorConnection{
		JWKUri:           cfg.JWKAddress,
		Endpoint:         cfg.CasdoorAddress,
		ClientId:         cfg.CasdoorClientId,
		ClientSecret:     cfg.CasdoorClientSecret,
		OrganizationName: cfg.CasdoorOrganizationName,
		ApplicationName:  cfg.CasdoorApplicationName,
	}

	return casdoor
}

var (
	serviceSet = wire.NewSet(common.InitLocalEnvConfig, mzap.InitializeLogger, setupPostgreSQLConnection,
		setupMongoDBConnection,
		setupCasdoorConnection, grpc.NewRouterGRPC, service.NewServerGRPC, http.NewRouter, service.NewConfig, service.NewServer, postgres.NewOrganizationPostgreSQLRepository, postgres.NewLedgerPostgreSQLRepository, postgres.NewAssetPostgreSQLRepository, postgres.NewPortfolioPostgreSQLRepository, postgres.NewProductPostgreSQLRepository, postgres.NewAccountPostgreSQLRepository, mongodb.NewMetadataMongoDBRepository, wire.Struct(new(http.OrganizationHandler), "*"), wire.Struct(new(http.LedgerHandler), "*"), wire.Struct(new(http.AssetHandler), "*"), wire.Struct(new(http.PortfolioHandler), "*"), wire.Struct(new(http.ProductHandler), "*"), wire.Struct(new(http.AccountHandler), "*"), wire.Struct(new(command.UseCase), "*"), wire.Struct(new(query.UseCase), "*"), wire.Bind(new(organization.Repository), new(*postgres.OrganizationPostgreSQLRepository)), wire.Bind(new(ledger.Repository), new(*postgres.LedgerPostgreSQLRepository)), wire.Bind(new(asset.Repository), new(*postgres.AssetPostgreSQLRepository)), wire.Bind(new(portfolio.Repository), new(*postgres.PortfolioPostgreSQLRepository)), wire.Bind(new(product.Repository), new(*postgres.ProductPostgreSQLRepository)), wire.Bind(new(account.Repository), new(*postgres.AccountPostgreSQLRepository)), wire.Bind(new(metadata.Repository), new(*mongodb.MetadataMongoDBRepository)),
	)

	svcSet = wire.NewSet(wire.Struct(new(service.Service), "Server", "ServerGRPC", "Logger"))
)
