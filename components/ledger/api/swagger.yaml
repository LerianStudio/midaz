basePath: /
definitions:
  Account:
    description: Account is a struct designed to store account data.
    properties:
      alias:
        example: '@person1'
        type: string
      allowReceiving:
        example: true
        type: boolean
      allowSending:
        example: true
        type: boolean
      assetCode:
        example: BRL
        type: string
      balance:
        $ref: '#/definitions/Balance'
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      entityId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      ledgerId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Account
        type: string
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      parentAccountId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      portfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      productId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      type:
        example: creditCard
        type: string
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Address:
    description: Address is a struct designed to store the address data of an organization.
    properties:
      city:
        example: New York
        type: string
      country:
        description: According to ISO 3166-1 alpha-2
        example: US
        type: string
      line1:
        example: Street 1
        type: string
      line2:
        example: Street 2
        type: string
      state:
        example: NY
        type: string
      zipCode:
        example: 00000-000
        type: string
    type: object
  Asset:
    description: Asset is a struct designed to store asset data.
    properties:
      code:
        example: BRL
        type: string
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      ledgerId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Brazilian Real
        type: string
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      type:
        example: currency
        type: string
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Balance:
    description: Balance is the struct designed to represent the account balance.
    properties:
      available:
        example: 1500
        type: number
      onHold:
        example: 500
        type: number
      scale:
        example: 2
        type: number
    type: object
  CreateAccountInput:
    description: CreateAccountInput is the input payload to create an account.
    properties:
      alias:
        example: '@person1'
        maxLength: 100
        type: string
      allowReceiving:
        example: true
        type: boolean
      allowSending:
        example: true
        type: boolean
      assetCode:
        example: BRL
        maxLength: 100
        type: string
      entityId:
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 256
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Account
        maxLength: 256
        type: string
      parentAccountId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      portfolioId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      productId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      type:
        example: creditCard
        type: string
    required:
    - assetCode
    - type
    type: object
  CreateAssetInput:
    description: CreateAssetInput is the input payload to create an asset.
    properties:
      code:
        example: BRL
        maxLength: 100
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Brazilian Real
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
      type:
        example: currency
        type: string
    required:
    - code
    type: object
  CreateLedgerInput:
    description: CreateLedgerInput is the input payload to create a ledger.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Lerian Studio
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    required:
    - name
    type: object
  CreateOrganizationInput:
    description: CreateOrganizationInput is the input payload to create an organization.
    properties:
      address:
        $ref: '#/definitions/Address'
      doingBusinessAs:
        example: Lerian Studio
        maxLength: 256
        type: string
      legalDocument:
        example: "00000000000000"
        maxLength: 256
        type: string
      legalName:
        example: Lerian Studio
        maxLength: 256
        type: string
      metadata:
        additionalProperties: {}
        type: object
      parentOrganizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
    required:
    - legalDocument
    - legalName
    type: object
  CreatePortfolioInput:
    description: CreatePortfolioInput is the input payload to create a portfolio.
    properties:
      entityId:
        example: 00000000-0000-0000-0000-000000000000
        maxLength: 256
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Portfolio
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    required:
    - entityId
    - name
    type: object
  CreateProductInput:
    description: CreateProductInput is the input payload to create a product.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Product
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    required:
    - name
    type: object
  Ledger:
    description: Ledger is a struct designed to store ledger data.
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Lerian Studio
        type: string
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Organization:
    description: Organization is a struct designed to store organization data.
    properties:
      address:
        $ref: '#/definitions/Address'
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      doingBusinessAs:
        example: Lerian Studio
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      legalDocument:
        example: "00000000000000"
        type: string
      legalName:
        example: Lerian Studio
        type: string
      metadata:
        additionalProperties: {}
        type: object
      parentOrganizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Pagination:
    description: Pagination is the struct designed to store the pagination data of
      an entity list.
    properties:
      items: {}
      limit:
        example: 10
        type: integer
      next_cursor:
        example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        type: string
        x-omitempty: true
      page:
        example: 1
        type: integer
      prev_cursor:
        example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        type: string
        x-omitempty: true
    type: object
  Portfolio:
    description: Portfolio is a struct designed to store portfolio data.
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      entityId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      ledgerId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Portfolio
        type: string
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Product:
    description: Product is a struct designed to store product data.
    properties:
      createdAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      deletedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      ledgerId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Product
        type: string
      organizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
      updatedAt:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  Status:
    description: Status is the struct designed to store the status data of an entity.
    properties:
      code:
        example: ACTIVE
        maxLength: 100
        type: string
      description:
        example: Active status
        maxLength: 256
        type: string
    type: object
  UpdateAccountInput:
    description: UpdateAccountInput is the input payload to update an account.
    properties:
      alias:
        example: '@person1'
        maxLength: 100
        type: string
      allowReceiving:
        example: true
        type: boolean
      allowSending:
        example: true
        type: boolean
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Account Updated
        maxLength: 256
        type: string
      productId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
    type: object
  UpdateAssetInput:
    description: UpdateAssetInput is the input payload to update an asset.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Bitcoin
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    type: object
  UpdateLedgerInput:
    description: UpdateLedgerInput is the input payload to update a ledger.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: Lerian Studio Updated
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    type: object
  UpdateOrganizationInput:
    description: UpdateOrganizationInput is the input payload to update an organization.
    properties:
      address:
        $ref: '#/definitions/Address'
      doingBusinessAs:
        example: The ledger.io
        maxLength: 256
        type: string
      legalName:
        example: Lerian Studio Updated
        maxLength: 256
        type: string
      metadata:
        additionalProperties: {}
        type: object
      parentOrganizationId:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      status:
        $ref: '#/definitions/Status'
    required:
    - legalName
    type: object
  UpdatePortfolioInput:
    description: UpdatePortfolioInput is the input payload to update a portfolio.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Portfolio Updated
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    type: object
  UpdateProductInput:
    description: UpdateProductInput is the input payload to update a product.
    properties:
      metadata:
        additionalProperties: {}
        type: object
      name:
        example: My Product Updated
        maxLength: 256
        type: string
      status:
        $ref: '#/definitions/Status'
    type: object
host: localhost:3000
info:
  contact:
    name: Discord community
    url: https://discord.gg/DnhqKwkGv3
  description: This is a swagger documentation for the Midaz Ledger API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Midaz Ledger API
  version: 1.0.0
paths:
  /v1/organizations:
    get:
      description: Get all Organizations with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Metadata
        in: query
        name: metadata
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Organization'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Organizations
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create an Organization with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization Input
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/CreateOrganizationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Organization'
      summary: Create an Organization
      tags:
      - Organizations
  /v1/organizations/{id}:
    delete:
      description: Delete an Organization with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an Organization by ID
      tags:
      - Organizations
    get:
      description: Get an Organization with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Organization'
      summary: Get an Organization by ID
      tags:
      - Organizations
    patch:
      consumes:
      - application/json
      description: Update an Organization with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization Input
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/UpdateOrganizationInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Organization'
      summary: Update an Organization
      tags:
      - Organizations
  /v1/organizations/{organization_id}/ledgers:
    get:
      description: Get all Ledgers with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Ledger'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Ledgers
      tags:
      - Ledgers
    post:
      consumes:
      - application/json
      description: Create a Ledger with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger Input
        in: body
        name: ledger
        required: true
        schema:
          $ref: '#/definitions/CreateLedgerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Ledger'
      summary: Create a Ledger
      tags:
      - Ledgers
  /v1/organizations/{organization_id}/ledgers/{id}:
    delete:
      description: Delete a Ledger with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a Ledger by ID
      tags:
      - Ledgers
    get:
      description: Get a Ledger with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Ledger'
      summary: Get a Ledger by ID
      tags:
      - Ledgers
    patch:
      consumes:
      - application/json
      description: Update a Ledger with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        type: string
      - description: Ledger Input
        in: body
        name: ledger
        required: true
        schema:
          $ref: '#/definitions/UpdateLedgerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Ledger'
      summary: Update a Ledger
      tags:
      - Ledgers
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts:
    get:
      description: Get all Accounts with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Metadata
        in: query
        name: metadata
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Account'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Accounts
      tags:
      - Accounts
    post:
      consumes:
      - application/json
      description: Create an Account with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/CreateAccountInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Create an Account
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}:
    delete:
      description: Delete an Account with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an Account by ID
      tags:
      - Accounts
    get:
      description: Get an Account with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Get an Account by ID
      tags:
      - Accounts
    patch:
      consumes:
      - application/json
      description: Update an Account with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/UpdateAccountInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Update an Account
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets:
    get:
      description: Get all Assets with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Metadata
        in: query
        name: metadata
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Asset'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Assets
      tags:
      - Assets
    post:
      consumes:
      - application/json
      description: Create an Asset with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Asset Input
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/CreateAssetInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Asset'
      summary: Create an Asset
      tags:
      - Assets
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}:
    delete:
      description: Delete an Asset with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an Asset by ID
      tags:
      - Assets
    get:
      description: Get an Asset with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Asset'
      summary: Get an Asset by ID
      tags:
      - Assets
    patch:
      consumes:
      - application/json
      description: Update an Asset with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        type: string
      - description: Asset Input
        in: body
        name: asset
        required: true
        schema:
          $ref: '#/definitions/UpdateAssetInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Asset'
      summary: Update an Asset
      tags:
      - Assets
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios:
    get:
      description: Get all Portfolios with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Metadata query
        in: query
        name: metadata
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Portfolio'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Portfolios
      tags:
      - Portfolios
    post:
      consumes:
      - application/json
      description: Create a Portfolio with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio Payload
        in: body
        name: portfolio
        required: true
        schema:
          $ref: '#/definitions/CreatePortfolioInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Portfolio'
      summary: Create a Portfolio
      tags:
      - Portfolios
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}:
    delete:
      description: Delete a Portfolio with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a Portfolio by ID
      tags:
      - Portfolios
    get:
      description: Get a Portfolio with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Portfolio'
      summary: Get a Portfolio by ID
      tags:
      - Portfolios
    patch:
      consumes:
      - application/json
      description: Update a Portfolio with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        type: string
      - description: Portfolio Payload
        in: body
        name: portfolio
        required: true
        schema:
          $ref: '#/definitions/UpdatePortfolioInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Portfolio'
      summary: Update a Portfolio
      tags:
      - Portfolios
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}/accounts:
    get:
      description: |-
        ## This endpoint will be deprecated soon. Use Get all Accounts instead. ##
        ---
        Get all Accounts with the input metadata or without metadata from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        type: string
      - description: Metadata
        in: query
        name: metadata
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Account'
                  type: array
              type: object
      summary: Get all Accounts from Portfolio
      tags:
      - Accounts
    post:
      consumes:
      - application/json
      description: |-
        ## This endpoint will be deprecated soon. Use Create an Account instead. ##
        ---
        Create an Account with the input payload from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/CreateAccountInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Create an Account from Portfolio
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}/accounts/{id}:
    delete:
      description: |-
        ## This endpoint will be deprecated soon. Use Delete an Account by ID instead. ##
        ---
        Delete an Account with the input ID from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete an Account by ID from Portfolio
      tags:
      - Accounts
    get:
      description: |-
        ## This endpoint will be deprecated soon. Use Get an Account by ID instead. ##
        ---
        Get an Account with the input ID from a Portfolio.
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Get an Account by ID from Portfolio
      tags:
      - Accounts
    patch:
      consumes:
      - application/json
      description: |-
        ## This endpoint will be deprecated soon. Use Update an Account instead. ##
        ---
        Update an Account with the input payload from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/UpdateAccountInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Account'
      summary: Update an Account from Portfolio
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/products:
    get:
      description: Get all Products with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Metadata
        in: query
        name: metadata
        type: string
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 1
        description: Page
        in: query
        name: page
        type: integer
      - description: Start Date
        example: "2021-01-01"
        in: query
        name: start_date
        type: string
      - description: End Date
        example: "2021-01-01"
        in: query
        name: end_date
        type: string
      - description: Sort Order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/Pagination'
            - properties:
                items:
                  items:
                    $ref: '#/definitions/Product'
                  type: array
                limit:
                  type: integer
                page:
                  type: integer
              type: object
      summary: Get all Products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a Product with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/CreateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Product'
      summary: Create a Product
      tags:
      - Products
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/products/{id}:
    delete:
      description: Delete a Product with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete a Product by ID
      tags:
      - Products
    get:
      description: Get a Product with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Product'
      summary: Get a Product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update a Product with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/UpdateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Product'
      summary: Update a Product
      tags:
      - Products
swagger: "2.0"
