openapi: 3.0.1
info:
  contact:
    name: Discord community
    url: https://discord.gg/DnhqKwkGv3
  description: This is a swagger documentation for the Midaz Ledger API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Midaz Ledger API
  version: 1.0.0
servers:
- url: //localhost:3000/
paths:
  /v1/organizations:
    get:
      description: Get all Organizations with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Metadata
        in: query
        name: metadata
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
      summary: Get all Organizations
      tags:
      - Organizations
    post:
      description: Create an Organization with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationInput'
        description: Organization Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
      summary: Create an Organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/{id}:
    delete:
      description: Delete an Organization with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete an Organization by ID
      tags:
      - Organizations
    get:
      description: Get an Organization with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
      summary: Get an Organization by ID
      tags:
      - Organizations
    patch:
      description: Update an Organization with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationInput'
        description: Organization Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
      summary: Update an Organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/{organization_id}/ledgers:
    get:
      description: Get all Ledgers with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
      summary: Get all Ledgers
      tags:
      - Ledgers
    post:
      description: Create a Ledger with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLedgerInput'
        description: Ledger Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: OK
      summary: Create a Ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/{id}:
    delete:
      description: Delete a Ledger with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a Ledger by ID
      tags:
      - Ledgers
    get:
      description: Get a Ledger with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: OK
      summary: Get a Ledger by ID
      tags:
      - Ledgers
    patch:
      description: Update a Ledger with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLedgerInput'
        description: Ledger Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: OK
      summary: Update a Ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts:
    get:
      description: Get all Accounts with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Metadata
        in: query
        name: metadata
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      - description: Find alias
        in: query
        name: alias
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: OK
      summary: Get all Accounts
      tags:
      - Accounts
    post:
      description: Create an Account with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountInput'
        description: Account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Create an Account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}:
    delete:
      description: Delete an Account with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete an Account by ID
      tags:
      - Accounts
    get:
      description: Get an Account with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Get an Account by ID
      tags:
      - Accounts
    patch:
      description: Update an Account with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInput'
        description: Account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Update an Account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets:
    get:
      description: Get all Assets with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Metadata
        in: query
        name: metadata
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: OK
      summary: Get all Assets
      tags:
      - Assets
    post:
      description: Create an Asset with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetInput'
        description: Asset Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: OK
      summary: Create an Asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}:
    delete:
      description: Delete an Asset with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete an Asset by ID
      tags:
      - Assets
    get:
      description: Get an Asset with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: OK
      summary: Get an Asset by ID
      tags:
      - Assets
    patch:
      description: Update an Asset with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetInput'
        description: Asset Input
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: OK
      summary: Update an Asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios:
    get:
      description: Get all Portfolios with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Metadata query
        in: query
        name: metadata
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: OK
      summary: Get all Portfolios
      tags:
      - Portfolios
    post:
      description: Create a Portfolio with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioInput'
        description: Portfolio Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: OK
      summary: Create a Portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}:
    delete:
      description: Delete a Portfolio with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a Portfolio by ID
      tags:
      - Portfolios
    get:
      description: Get a Portfolio with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: OK
      summary: Get a Portfolio by ID
      tags:
      - Portfolios
    patch:
      description: Update a Portfolio with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioInput'
        description: Portfolio Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: OK
      summary: Update a Portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}/accounts:
    get:
      description: |-
        ## This endpoint will be deprecated soon. Use Get all Accounts instead. ##
        ---
        Get all Accounts with the input metadata or without metadata from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        schema:
          type: string
      - description: Metadata
        in: query
        name: metadata
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: OK
      summary: Get all Accounts from Portfolio
      tags:
      - Accounts
    post:
      description: |-
        ## This endpoint will be deprecated soon. Use Create an Account instead. ##
        ---
        Create an Account with the input payload from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountInput'
        description: Account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Create an Account from Portfolio
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}/accounts/{id}:
    delete:
      description: |-
        ## This endpoint will be deprecated soon. Use Delete an Account by ID instead. ##
        ---
        Delete an Account with the input ID from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete an Account by ID from Portfolio
      tags:
      - Accounts
    get:
      description: |-
        ## This endpoint will be deprecated soon. Use Get an Account by ID instead. ##
        ---
        Get an Account with the input ID from a Portfolio.
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Get an Account by ID from Portfolio
      tags:
      - Accounts
    patch:
      description: |-
        ## This endpoint will be deprecated soon. Use Update an Account instead. ##
        ---
        Update an Account with the input payload from a Portfolio
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID
        in: path
        name: portfolio_id
        required: true
        schema:
          type: string
      - description: Account ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInput'
        description: Account
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: OK
      summary: Update an Account from Portfolio
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/products:
    get:
      description: Get all Products with the input metadata or without metadata
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Metadata
        in: query
        name: metadata
        schema:
          type: string
      - description: Limit
        in: query
        name: limit
        schema:
          default: 10
          type: integer
      - description: Page
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Start Date
        in: query
        name: start_date
        schema:
          type: string
      - description: End Date
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort Order
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: OK
      summary: Get all Products
      tags:
      - Products
    post:
      description: Create a Product with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductInput'
        description: Product
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
      summary: Create a Product
      tags:
      - Products
      x-codegen-request-body-name: product
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/products/{id}:
    delete:
      description: Delete a Product with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Product ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      summary: Delete a Product by ID
      tags:
      - Products
    get:
      description: Get a Product with the input ID
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Product ID
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
      summary: Get a Product by ID
      tags:
      - Products
    patch:
      description: Update a Product with the input payload
      parameters:
      - description: Authorization Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID
        in: header
        name: Midaz-Id
        schema:
          type: string
      - description: Organization ID
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Product ID
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductInput'
        description: Product
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
      summary: Update a Product
      tags:
      - Products
      x-codegen-request-body-name: product
components:
  schemas:
    Account:
      description: Account is a struct designed to store account data.
      example:
        metadata:
          key: '{}'
        assetCode: BRL
        productId: 00000000-0000-0000-0000-000000000000
        allowReceiving: true
        entityId: 00000000-0000-0000-0000-000000000000
        allowSending: true
        type: creditCard
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        parentAccountId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        portfolioId: 00000000-0000-0000-0000-000000000000
        balance:
          onHold: 500.0
          available: 1500.0
          scale: 2.0
        name: My Account
        alias: '@person1'
        id: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        alias:
          example: '@person1'
          type: string
        allowReceiving:
          example: true
          type: boolean
        allowSending:
          example: true
          type: boolean
        assetCode:
          example: BRL
          type: string
        balance:
          $ref: '#/components/schemas/Balance'
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        entityId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        ledgerId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Account
          type: string
        organizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        parentAccountId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        portfolioId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        productId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        type:
          example: creditCard
          type: string
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Address:
      description: Address is a struct designed to store the address data of an organization.
      example:
        country: US
        zipCode: 00000-000
        city: New York
        state: NY
        line2: Street 2
        line1: Street 1
      properties:
        city:
          example: New York
          type: string
        country:
          description: According to ISO 3166-1 alpha-2
          example: US
          type: string
        line1:
          example: Street 1
          type: string
        line2:
          example: Street 2
          type: string
        state:
          example: NY
          type: string
        zipCode:
          example: 00000-000
          type: string
      type: object
    Asset:
      description: Asset is a struct designed to store asset data.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        code: BRL
        name: Brazilian Real
        id: 00000000-0000-0000-0000-000000000000
        type: currency
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        code:
          example: BRL
          type: string
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        ledgerId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Brazilian Real
          type: string
        organizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        type:
          example: currency
          type: string
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Balance:
      description: Balance is the struct designed to represent the account balance.
      example:
        onHold: 500.0
        available: 1500.0
        scale: 2.0
      properties:
        available:
          example: 1500.0
          type: number
        onHold:
          example: 500.0
          type: number
        scale:
          example: 2.0
          type: number
      type: object
    CreateAccountInput:
      description: CreateAccountInput is the input payload to create an account.
      example:
        parentAccountId: 00000000-0000-0000-0000-000000000000
        metadata:
          key: '{}'
        assetCode: BRL
        portfolioId: 00000000-0000-0000-0000-000000000000
        productId: 00000000-0000-0000-0000-000000000000
        allowReceiving: true
        name: My Account
        alias: '@person1'
        entityId: 00000000-0000-0000-0000-000000000000
        allowSending: true
        type: creditCard
        status:
          code: ACTIVE
          description: Active status
      properties:
        alias:
          example: '@person1'
          maxLength: 100
          type: string
        allowReceiving:
          example: true
          type: boolean
        allowSending:
          example: true
          type: boolean
        assetCode:
          example: BRL
          maxLength: 100
          type: string
        entityId:
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Account
          maxLength: 256
          type: string
        parentAccountId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        portfolioId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        productId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        type:
          example: creditCard
          type: string
      required:
      - assetCode
      - type
      type: object
    CreateAssetInput:
      description: CreateAssetInput is the input payload to create an asset.
      example:
        metadata:
          key: '{}'
        code: BRL
        name: Brazilian Real
        type: currency
        status:
          code: ACTIVE
          description: Active status
      properties:
        code:
          example: BRL
          maxLength: 100
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Brazilian Real
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
        type:
          example: currency
          type: string
      required:
      - code
      type: object
    CreateLedgerInput:
      description: CreateLedgerInput is the input payload to create a ledger.
      example:
        metadata:
          key: '{}'
        name: Lerian Studio
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Lerian Studio
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - name
      type: object
    CreateOrganizationInput:
      description: CreateOrganizationInput is the input payload to create an organization.
      example:
        legalName: Lerian Studio
        metadata:
          key: '{}'
        address:
          country: US
          zipCode: 00000-000
          city: New York
          state: NY
          line2: Street 2
          line1: Street 1
        doingBusinessAs: Lerian Studio
        legalDocument: "00000000000000"
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
      properties:
        address:
          $ref: '#/components/schemas/Address'
        doingBusinessAs:
          example: Lerian Studio
          maxLength: 256
          type: string
        legalDocument:
          example: "00000000000000"
          maxLength: 256
          type: string
        legalName:
          example: Lerian Studio
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        parentOrganizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - legalDocument
      - legalName
      type: object
    CreatePortfolioInput:
      description: CreatePortfolioInput is the input payload to create a portfolio.
      example:
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
      properties:
        entityId:
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Portfolio
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - entityId
      - name
      type: object
    CreateProductInput:
      description: CreateProductInput is the input payload to create a product.
      example:
        metadata:
          key: '{}'
        name: My Product
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Product
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - name
      type: object
    Ledger:
      description: Ledger is a struct designed to store ledger data.
      example:
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: Lerian Studio
        id: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Lerian Studio
          type: string
        organizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Organization:
      description: Organization is a struct designed to store organization data.
      example:
        legalName: Lerian Studio
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        address:
          country: US
          zipCode: 00000-000
          city: New York
          state: NY
          line2: Street 2
          line1: Street 1
        doingBusinessAs: Lerian Studio
        id: 00000000-0000-0000-0000-000000000000
        legalDocument: "00000000000000"
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        doingBusinessAs:
          example: Lerian Studio
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        legalDocument:
          example: "00000000000000"
          type: string
        legalName:
          example: Lerian Studio
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        parentOrganizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Pagination:
      description: Pagination is the struct designed to store the pagination data
        of an entity list.
      example:
        prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        limit: 10
        page: 1
        items: '{}'
      properties:
        items:
          type: object
        limit:
          example: 10
          type: integer
        next_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
        page:
          example: 1
          type: integer
        prev_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
      type: object
    Portfolio:
      description: Portfolio is a struct designed to store portfolio data.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        id: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        entityId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        ledgerId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Portfolio
          type: string
        organizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Product:
      description: Product is a struct designed to store product data.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Product
        id: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          example: 2021-01-01T00:00:00Z
          type: string
        deletedAt:
          example: 2021-01-01T00:00:00Z
          type: string
        id:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        ledgerId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Product
          type: string
        organizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
        updatedAt:
          example: 2021-01-01T00:00:00Z
          type: string
      type: object
    Status:
      description: Status is the struct designed to store the status data of an entity.
      example:
        code: ACTIVE
        description: Active status
      properties:
        code:
          example: ACTIVE
          maxLength: 100
          type: string
        description:
          example: Active status
          maxLength: 256
          type: string
      type: object
    UpdateAccountInput:
      description: UpdateAccountInput is the input payload to update an account.
      example:
        metadata:
          key: '{}'
        productId: 00000000-0000-0000-0000-000000000000
        allowReceiving: true
        name: My Account Updated
        alias: '@person1'
        allowSending: true
        status:
          code: ACTIVE
          description: Active status
      properties:
        alias:
          example: '@person1'
          maxLength: 100
          type: string
        allowReceiving:
          example: true
          type: boolean
        allowSending:
          example: true
          type: boolean
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Account Updated
          maxLength: 256
          type: string
        productId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
      type: object
    UpdateAssetInput:
      description: UpdateAssetInput is the input payload to update an asset.
      example:
        metadata:
          key: '{}'
        name: Bitcoin
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Bitcoin
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      type: object
    UpdateLedgerInput:
      description: UpdateLedgerInput is the input payload to update a ledger.
      example:
        metadata:
          key: '{}'
        name: Lerian Studio Updated
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: Lerian Studio Updated
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      type: object
    UpdateOrganizationInput:
      description: UpdateOrganizationInput is the input payload to update an organization.
      example:
        legalName: Lerian Studio Updated
        metadata:
          key: '{}'
        address:
          country: US
          zipCode: 00000-000
          city: New York
          state: NY
          line2: Street 2
          line1: Street 1
        doingBusinessAs: The ledger.io
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status:
          code: ACTIVE
          description: Active status
      properties:
        address:
          $ref: '#/components/schemas/Address'
        doingBusinessAs:
          example: The ledger.io
          maxLength: 256
          type: string
        legalName:
          example: Lerian Studio Updated
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        parentOrganizationId:
          example: 00000000-0000-0000-0000-000000000000
          type: string
        status:
          $ref: '#/components/schemas/Status'
      required:
      - legalName
      type: object
    UpdatePortfolioInput:
      description: UpdatePortfolioInput is the input payload to update a portfolio.
      example:
        metadata:
          key: '{}'
        name: My Portfolio Updated
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Portfolio Updated
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      type: object
    UpdateProductInput:
      description: UpdateProductInput is the input payload to update a product.
      example:
        metadata:
          key: '{}'
        name: My Product Updated
        status:
          code: ACTIVE
          description: Active status
      properties:
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          example: My Product Updated
          maxLength: 256
          type: string
        status:
          $ref: '#/components/schemas/Status'
      type: object
    inline_response_200:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - legalName: Lerian Studio
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address:
            country: US
            zipCode: 00000-000
            city: New York
            state: NY
            line2: Street 2
            line1: Street 1
          doingBusinessAs: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "00000000000000"
          parentOrganizationId: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - legalName: Lerian Studio
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address:
            country: US
            zipCode: 00000-000
            city: New York
            state: NY
            line2: Street 2
            line1: Street 1
          doingBusinessAs: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "00000000000000"
          parentOrganizationId: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_1:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Ledger'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_2:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - metadata:
            key: '{}'
          assetCode: BRL
          productId: 00000000-0000-0000-0000-000000000000
          allowReceiving: true
          entityId: 00000000-0000-0000-0000-000000000000
          allowSending: true
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          balance:
            onHold: 500.0
            available: 1500.0
            scale: 2.0
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - metadata:
            key: '{}'
          assetCode: BRL
          productId: 00000000-0000-0000-0000-000000000000
          allowReceiving: true
          entityId: 00000000-0000-0000-0000-000000000000
          allowSending: true
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          balance:
            onHold: 500.0
            available: 1500.0
            scale: 2.0
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Account'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_3:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: BRL
          name: Brazilian Real
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: BRL
          name: Brazilian Real
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_4:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Portfolio'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_5:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        items:
        - metadata:
            key: '{}'
          assetCode: BRL
          productId: 00000000-0000-0000-0000-000000000000
          allowReceiving: true
          entityId: 00000000-0000-0000-0000-000000000000
          allowSending: true
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          balance:
            onHold: 500.0
            available: 1500.0
            scale: 2.0
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - metadata:
            key: '{}'
          assetCode: BRL
          productId: 00000000-0000-0000-0000-000000000000
          allowReceiving: true
          entityId: 00000000-0000-0000-0000-000000000000
          allowSending: true
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          balance:
            onHold: 500.0
            available: 1500.0
            scale: 2.0
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    inline_response_200_6:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Product
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Product
          id: 00000000-0000-0000-0000-000000000000
          status:
            code: ACTIVE
            description: Active status
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Product'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
x-original-swagger-version: "2.0"
