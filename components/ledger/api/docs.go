// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Discord community",
            "url": "https://discord.gg/DnhqKwkGv3"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/organizations": {
            "get": {
                "description": "Get all Organizations with the input metadata or without metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get all Organizations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metadata",
                        "name": "metadata",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/mpostgres.Pagination"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/mmodel.Organization"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an Organization with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create an Organization",
                "parameters": [
                    {
                        "description": "Organization Input",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.CreateOrganizationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Organization"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}": {
            "get": {
                "description": "Get an Organization with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Get an Organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Organization"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an Organization with the input ID",
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete an Organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "description": "Update an Organization with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update an Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization Input",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.UpdateOrganizationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Organization"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers": {
            "get": {
                "description": "Get all Ledgers with the input metadata or without metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Get all Ledgers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/mpostgres.Pagination"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/mmodel.Ledger"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Ledger with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Create a Ledger",
                "parameters": [
                    {
                        "description": "Ledger Input",
                        "name": "ledger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.CreateLedgerInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Ledger"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{id}": {
            "get": {
                "description": "Get a Ledger with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Get a Ledger by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Ledger"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Ledger with the input ID",
                "tags": [
                    "Ledgers"
                ],
                "summary": "Delete a Ledger by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "description": "Update a Ledger with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Update a Ledger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ledger Input",
                        "name": "ledger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.UpdateLedgerInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Ledger"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets": {
            "get": {
                "description": "Get all Assets with the input metadata or without metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get all Assets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metadata",
                        "name": "metadata",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/mpostgres.Pagination"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/mmodel.Asset"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create an Asset with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Create an Asset",
                "parameters": [
                    {
                        "description": "Asset Input",
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.CreateAssetInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Asset"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}": {
            "get": {
                "description": "Get an Asset with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Get an Asset by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Asset"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an Asset with the input ID",
                "tags": [
                    "Assets"
                ],
                "summary": "Delete an Asset by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "description": "Update an Asset with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Update an Asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Asset Input",
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.UpdateAssetInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Asset"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios": {
            "get": {
                "description": "Get all Portfolios with the input metadata or without metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Get all Portfolios",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Metadata query",
                        "name": "metadata",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/mpostgres.Pagination"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/mmodel.Portfolio"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Portfolio with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Create a Portfolio",
                "parameters": [
                    {
                        "description": "Portfolio Payload",
                        "name": "portfolio",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.CreatePortfolioInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Portfolio"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a Portfolio with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Update a Portfolio",
                "parameters": [
                    {
                        "description": "Portfolio Payload",
                        "name": "portfolio",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.UpdatePortfolioInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Portfolio"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}": {
            "get": {
                "description": "Get a Portfolio with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Get a Portfolio by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Portfolio ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Portfolio"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Portfolio with the input ID",
                "tags": [
                    "Portfolios"
                ],
                "summary": "Delete a Portfolio by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Portfolio ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        }
    },
    "definitions": {
        "mmodel.Address": {
            "description": "Address structure for marshaling/unmarshalling JSON.",
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "description": "According to ISO 3166-1 alpha-2",
                    "type": "string"
                },
                "line1": {
                    "type": "string"
                },
                "line2": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "mmodel.Asset": {
            "description": "Asset is a struct designed to encapsulate payload data.",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ledgerId": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "mmodel.CreateAssetInput": {
            "description": "CreateAssetInput is a struct design to encapsulate request create payload data.",
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 100
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "mmodel.CreateLedgerInput": {
            "description": "CreateLedgerInput is a struct design to encapsulate request create payload data for ledger.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.CreateOrganizationInput": {
            "description": "CreateOrganizationInput is a struct design to encapsulate request create payload data for organization.",
            "type": "object",
            "required": [
                "legalDocument",
                "legalName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/mmodel.Address"
                },
                "doingBusinessAs": {
                    "type": "string",
                    "maxLength": 256
                },
                "legalDocument": {
                    "type": "string",
                    "maxLength": 256
                },
                "legalName": {
                    "type": "string",
                    "maxLength": 256
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.CreatePortfolioInput": {
            "type": "object",
            "required": [
                "entityId",
                "name"
            ],
            "properties": {
                "entityId": {
                    "type": "string",
                    "maxLength": 256
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.Ledger": {
            "description": "Ledger is a struct designed to encapsulate payload data.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "mmodel.Organization": {
            "description": "Organization is a struct designed to encapsulate response payload data.",
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/mmodel.Address"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "doingBusinessAs": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "legalDocument": {
                    "type": "string"
                },
                "legalName": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "mmodel.Portfolio": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ledgerId": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "mmodel.Status": {
            "description": "Status structure for marshaling/unmarshalling JSON.",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string",
                    "maxLength": 256
                }
            }
        },
        "mmodel.UpdateAssetInput": {
            "description": "UpdateAssetInput is a struct design to encapsulate request update payload data.",
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.UpdateLedgerInput": {
            "description": "UpdateLedgerInput is a struct design to encapsulate request update payload data for ledger.",
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.UpdateOrganizationInput": {
            "description": "UpdateOrganizationInput is a struct design to encapsulate request update payload data for organization.",
            "type": "object",
            "required": [
                "legalName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/mmodel.Address"
                },
                "doingBusinessAs": {
                    "type": "string",
                    "maxLength": 256
                },
                "legalName": {
                    "type": "string",
                    "maxLength": 256
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mmodel.UpdatePortfolioInput": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "type": "string",
                    "maxLength": 256
                },
                "status": {
                    "$ref": "#/definitions/mmodel.Status"
                }
            }
        },
        "mpostgres.Pagination": {
            "type": "object",
            "properties": {
                "items": {},
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Midaz Ledger API",
	Description:      "This is a swagger documentation for the Midaz Ledger API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
