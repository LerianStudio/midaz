// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/components/transaction/internal/domain/rabbitmq (interfaces: ConsumerRepository)
//
// Generated by this command:
//
//	mockgen --destination=../../gen/mock/rabbitmq/consumer_repository_mock.go --package=mock . ConsumerRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConsumerRepository is a mock of ConsumerRepository interface.
type MockConsumerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerRepositoryMockRecorder
}

// MockConsumerRepositoryMockRecorder is the mock recorder for MockConsumerRepository.
type MockConsumerRepositoryMockRecorder struct {
	mock *MockConsumerRepository
}

// NewMockConsumerRepository creates a new mock instance.
func NewMockConsumerRepository(ctrl *gomock.Controller) *MockConsumerRepository {
	mock := &MockConsumerRepository{ctrl: ctrl}
	mock.recorder = &MockConsumerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerRepository) EXPECT() *MockConsumerRepositoryMockRecorder {
	return m.recorder
}

// Consumer mocks base method.
func (m *MockConsumerRepository) Consumer(arg0 context.Context, arg1 string, arg2 chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consumer", arg0, arg1, arg2)
}

// Consumer indicates an expected call of Consumer.
func (mr *MockConsumerRepositoryMockRecorder) Consumer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockConsumerRepository)(nil).Consumer), arg0, arg1, arg2)
}
