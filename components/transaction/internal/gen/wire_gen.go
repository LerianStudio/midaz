// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gen

import (
	"fmt"
	"github.com/LerianStudio/midaz/common"
	"github.com/LerianStudio/midaz/common/mgrpc"
	"github.com/LerianStudio/midaz/common/mmongo"
	"github.com/LerianStudio/midaz/common/mpostgres"
	"github.com/LerianStudio/midaz/common/mzap"
	"github.com/LerianStudio/midaz/components/transaction/internal/adapters/database/mongodb"
	"github.com/LerianStudio/midaz/components/transaction/internal/adapters/database/postgres"
	"github.com/LerianStudio/midaz/components/transaction/internal/adapters/grpc"
	"github.com/LerianStudio/midaz/components/transaction/internal/app/command"
	"github.com/LerianStudio/midaz/components/transaction/internal/app/query"
	"github.com/LerianStudio/midaz/components/transaction/internal/domain/account"
	"github.com/LerianStudio/midaz/components/transaction/internal/domain/metadata"
	"github.com/LerianStudio/midaz/components/transaction/internal/domain/operation"
	"github.com/LerianStudio/midaz/components/transaction/internal/domain/transaction"
	"github.com/LerianStudio/midaz/components/transaction/internal/ports"
	"github.com/LerianStudio/midaz/components/transaction/internal/ports/http"
	"github.com/LerianStudio/midaz/components/transaction/internal/service"
	"github.com/google/wire"
	"sync"
)

// Injectors from inject.go:

// InitializeService the setup the dependencies and returns a new *service.Service instance
func InitializeService() *service.Service {
	config := service.NewConfig()
	postgresConnection := setupPostgreSQLConnection(config)
	transactionPostgreSQLRepository := postgres.NewTransactionPostgreSQLRepository(postgresConnection)
	grpcConnection := setupGRPCConnection(config)
	accountGRPCRepository := grpc.NewAccountGRPC(grpcConnection)
	operationPostgreSQLRepository := postgres.NewOperationPostgreSQLRepository(postgresConnection)
	mongoConnection := setupMongoDBConnection(config)
	metadataMongoDBRepository := mongodb.NewMetadataMongoDBRepository(mongoConnection)
	useCase := &command.UseCase{
		TransactionRepo: transactionPostgreSQLRepository,
		AccountGRPCRepo: accountGRPCRepository,
		OperationRepo:   operationPostgreSQLRepository,
		MetadataRepo:    metadataMongoDBRepository,
	}
	queryUseCase := &query.UseCase{
		TransactionRepo: transactionPostgreSQLRepository,
		AccountGRPCRepo: accountGRPCRepository,
		OperationRepo:   operationPostgreSQLRepository,
		MetadataRepo:    metadataMongoDBRepository,
	}
	transactionHandler := &ports.TransactionHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	operationHandler := &ports.OperationHandler{
		Command: useCase,
		Query:   queryUseCase,
	}
	app := http.NewRouter(transactionHandler, operationHandler)
	logger := mzap.InitializeLogger()
	server := service.NewServer(config, app, logger)
	serviceService := &service.Service{
		Server: server,
		Logger: logger,
	}
	return serviceService
}

// inject.go:

var onceConfig sync.Once

const prdEnvName = "production"

func setupPostgreSQLConnection(cfg *service.Config) *mpostgres.PostgresConnection {
	connStrPrimary := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.PrimaryDBHost, cfg.PrimaryDBUser, cfg.PrimaryDBPassword, cfg.PrimaryDBName, cfg.PrimaryDBPort)

	connStrReplica := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable",
		cfg.ReplicaDBHost, cfg.ReplicaDBUser, cfg.ReplicaDBPassword, cfg.ReplicaDBName, cfg.ReplicaDBPort)

	return &mpostgres.PostgresConnection{
		ConnectionStringPrimary: connStrPrimary,
		ConnectionStringReplica: connStrReplica,
		PrimaryDBName:           cfg.PrimaryDBName,
		ReplicaDBName:           cfg.ReplicaDBName,
		Component:               "transaction",
	}
}

func setupMongoDBConnection(cfg *service.Config) *mmongo.MongoConnection {
	connStrSource := fmt.Sprintf("mongodb://%s:%s@%s:%s",
		cfg.MongoDBUser, cfg.MongoDBPassword, cfg.MongoDBHost, cfg.MongoDBPort)

	return &mmongo.MongoConnection{
		ConnectionStringSource: connStrSource,
		Database:               cfg.MongoDBName,
	}
}

func setupGRPCConnection(cfg *service.Config) *mgrpc.GRPCConnection {
	addr := fmt.Sprintf("%s:%s", cfg.LedgerGRPCAddr, cfg.LedgerGRPCPort)

	return &mgrpc.GRPCConnection{
		Addr: addr,
	}
}

var (
	serviceSet = wire.NewSet(common.InitLocalEnvConfig, mzap.InitializeLogger, setupPostgreSQLConnection,
		setupMongoDBConnection,
		setupGRPCConnection, service.NewConfig, http.NewRouter, service.NewServer, postgres.NewTransactionPostgreSQLRepository, postgres.NewOperationPostgreSQLRepository, mongodb.NewMetadataMongoDBRepository, grpc.NewAccountGRPC, wire.Struct(new(ports.TransactionHandler), "*"), wire.Struct(new(ports.OperationHandler), "*"), wire.Struct(new(command.UseCase), "*"), wire.Struct(new(query.UseCase), "*"), wire.Bind(new(transaction.Repository), new(*postgres.TransactionPostgreSQLRepository)), wire.Bind(new(operation.Repository), new(*postgres.OperationPostgreSQLRepository)), wire.Bind(new(account.Repository), new(*grpc.AccountGRPCRepository)), wire.Bind(new(metadata.Repository), new(*mongodb.MetadataMongoDBRepository)),
	)

	svcSet = wire.NewSet(wire.Struct(new(service.Service), "Server", "Logger"))
)
