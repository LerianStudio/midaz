// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/v3/components/transaction/internal/adapters/redis (interfaces: RedisRepository)
//
// Generated by this command:
//
//	mockgen --destination=consumer.redis_mock.go --package=redis . RedisRepository
//

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"
	time "time"

	mmodel "github.com/LerianStudio/midaz/v3/pkg/mmodel"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// AddMessageToQueue mocks base method.
func (m *MockRedisRepository) AddMessageToQueue(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToQueue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageToQueue indicates an expected call of AddMessageToQueue.
func (mr *MockRedisRepositoryMockRecorder) AddMessageToQueue(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToQueue", reflect.TypeOf((*MockRedisRepository)(nil).AddMessageToQueue), arg0, arg1, arg2)
}

// AddSumBalancesRedis mocks base method.
func (m *MockRedisRepository) AddSumBalancesRedis(arg0 context.Context, arg1, arg2, arg3 uuid.UUID, arg4 string, arg5 bool, arg6 []mmodel.BalanceOperation) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSumBalancesRedis", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSumBalancesRedis indicates an expected call of AddSumBalancesRedis.
func (mr *MockRedisRepositoryMockRecorder) AddSumBalancesRedis(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSumBalancesRedis", reflect.TypeOf((*MockRedisRepository)(nil).AddSumBalancesRedis), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Del mocks base method.
func (m *MockRedisRepository) Del(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisRepositoryMockRecorder) Del(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisRepository)(nil).Del), arg0, arg1)
}

// Get mocks base method.
func (m *MockRedisRepository) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisRepository)(nil).Get), arg0, arg1)
}

// GetBytes mocks base method.
func (m *MockRedisRepository) GetBytes(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockRedisRepositoryMockRecorder) GetBytes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockRedisRepository)(nil).GetBytes), arg0, arg1)
}

// Incr mocks base method.
func (m *MockRedisRepository) Incr(arg0 context.Context, arg1 string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockRedisRepositoryMockRecorder) Incr(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockRedisRepository)(nil).Incr), arg0, arg1)
}

// MGet mocks base method.
func (m *MockRedisRepository) MGet(arg0 context.Context, arg1 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockRedisRepositoryMockRecorder) MGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockRedisRepository)(nil).MGet), arg0, arg1)
}

// ReadAllMessagesFromQueue mocks base method.
func (m *MockRedisRepository) ReadAllMessagesFromQueue(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllMessagesFromQueue", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllMessagesFromQueue indicates an expected call of ReadAllMessagesFromQueue.
func (mr *MockRedisRepositoryMockRecorder) ReadAllMessagesFromQueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllMessagesFromQueue", reflect.TypeOf((*MockRedisRepository)(nil).ReadAllMessagesFromQueue), arg0)
}

// ReadMessageFromQueue mocks base method.
func (m *MockRedisRepository) ReadMessageFromQueue(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessageFromQueue", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessageFromQueue indicates an expected call of ReadMessageFromQueue.
func (mr *MockRedisRepositoryMockRecorder) ReadMessageFromQueue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessageFromQueue", reflect.TypeOf((*MockRedisRepository)(nil).ReadMessageFromQueue), arg0, arg1)
}

// RemoveMessageFromQueue mocks base method.
func (m *MockRedisRepository) RemoveMessageFromQueue(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMessageFromQueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMessageFromQueue indicates an expected call of RemoveMessageFromQueue.
func (mr *MockRedisRepositoryMockRecorder) RemoveMessageFromQueue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMessageFromQueue", reflect.TypeOf((*MockRedisRepository)(nil).RemoveMessageFromQueue), arg0, arg1)
}

// Set mocks base method.
func (m *MockRedisRepository) Set(arg0 context.Context, arg1, arg2 string, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisRepositoryMockRecorder) Set(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisRepository)(nil).Set), arg0, arg1, arg2, arg3)
}

// SetBytes mocks base method.
func (m *MockRedisRepository) SetBytes(arg0 context.Context, arg1 string, arg2 []byte, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBytes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBytes indicates an expected call of SetBytes.
func (mr *MockRedisRepositoryMockRecorder) SetBytes(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBytes", reflect.TypeOf((*MockRedisRepository)(nil).SetBytes), arg0, arg1, arg2, arg3)
}

// SetNX mocks base method.
func (m *MockRedisRepository) SetNX(arg0 context.Context, arg1, arg2 string, arg3 time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockRedisRepositoryMockRecorder) SetNX(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockRedisRepository)(nil).SetNX), arg0, arg1, arg2, arg3)
}
