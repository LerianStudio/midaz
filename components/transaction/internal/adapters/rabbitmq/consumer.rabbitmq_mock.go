// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/transaction/internal/adapters/rabbitmq/consumer.rabbitmq.go
//
// Generated by this command:
//
//	mockgen -source=./components/transaction/internal/adapters/rabbitmq/consumer.rabbitmq.go -destination=./components/transaction/internal/adapters/rabbitmq/consumer.rabbitmq_mock.go -package=rabbitmq
//

// Package rabbitmq is a generated GoMock package.
package rabbitmq

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConsumerRepository is a mock of ConsumerRepository interface.
type MockConsumerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerRepositoryMockRecorder
	isgomock struct{}
}

// MockConsumerRepositoryMockRecorder is the mock recorder for MockConsumerRepository.
type MockConsumerRepositoryMockRecorder struct {
	mock *MockConsumerRepository
}

// NewMockConsumerRepository creates a new mock instance.
func NewMockConsumerRepository(ctrl *gomock.Controller) *MockConsumerRepository {
	mock := &MockConsumerRepository{ctrl: ctrl}
	mock.recorder = &MockConsumerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerRepository) EXPECT() *MockConsumerRepositoryMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockConsumerRepository) Register(queueName string, handler QueueHandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", queueName, handler)
}

// Register indicates an expected call of Register.
func (mr *MockConsumerRepositoryMockRecorder) Register(queueName, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockConsumerRepository)(nil).Register), queueName, handler)
}

// RunConsumers mocks base method.
func (m *MockConsumerRepository) RunConsumers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunConsumers")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConsumers indicates an expected call of RunConsumers.
func (mr *MockConsumerRepositoryMockRecorder) RunConsumers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConsumers", reflect.TypeOf((*MockConsumerRepository)(nil).RunConsumers))
}
