// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/components/transaction/internal/adapters/postgres/operation (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen --destination=operation.mock.go --package=operation . Repository
//

// Package operation is a generated GoMock package.
package operation

import (
	context "context"
	reflect "reflect"

	http "github.com/LerianStudio/midaz/pkg/net/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, operation *Operation) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, operation)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, operation)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, organizationID, ledgerID, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, organizationID, ledgerID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, organizationID, ledgerID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, organizationID, ledgerID, id)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context, organizationID, ledgerID, transactionID, id uuid.UUID) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, organizationID, ledgerID, transactionID, id)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx, organizationID, ledgerID, transactionID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx, organizationID, ledgerID, transactionID, id)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, organizationID, ledgerID, transactionID uuid.UUID, filter http.Pagination) ([]*Operation, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, organizationID, ledgerID, transactionID, filter)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, organizationID, ledgerID, transactionID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, organizationID, ledgerID, transactionID, filter)
}

// FindAllByAccount mocks base method.
func (m *MockRepository) FindAllByAccount(ctx context.Context, organizationID, ledgerID, accountID uuid.UUID, filter http.Pagination) ([]*Operation, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByAccount", ctx, organizationID, ledgerID, accountID, filter)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByAccount indicates an expected call of FindAllByAccount.
func (mr *MockRepositoryMockRecorder) FindAllByAccount(ctx, organizationID, ledgerID, accountID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByAccount", reflect.TypeOf((*MockRepository)(nil).FindAllByAccount), ctx, organizationID, ledgerID, accountID, filter)
}

// FindAllByPortfolio mocks base method.
func (m *MockRepository) FindAllByPortfolio(ctx context.Context, organizationID, ledgerID, portfolioID uuid.UUID, filter http.Pagination) ([]*Operation, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByPortfolio", ctx, organizationID, ledgerID, portfolioID, filter)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByPortfolio indicates an expected call of FindAllByPortfolio.
func (mr *MockRepositoryMockRecorder) FindAllByPortfolio(ctx, organizationID, ledgerID, portfolioID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByPortfolio", reflect.TypeOf((*MockRepository)(nil).FindAllByPortfolio), ctx, organizationID, ledgerID, portfolioID, filter)
}

// FindByAccount mocks base method.
func (m *MockRepository) FindByAccount(ctx context.Context, organizationID, ledgerID, accountID, id uuid.UUID) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccount", ctx, organizationID, ledgerID, accountID, id)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccount indicates an expected call of FindByAccount.
func (mr *MockRepositoryMockRecorder) FindByAccount(ctx, organizationID, ledgerID, accountID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccount", reflect.TypeOf((*MockRepository)(nil).FindByAccount), ctx, organizationID, ledgerID, accountID, id)
}

// FindByPortfolio mocks base method.
func (m *MockRepository) FindByPortfolio(ctx context.Context, organizationID, ledgerID, portfolioID, id uuid.UUID) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPortfolio", ctx, organizationID, ledgerID, portfolioID, id)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPortfolio indicates an expected call of FindByPortfolio.
func (mr *MockRepositoryMockRecorder) FindByPortfolio(ctx, organizationID, ledgerID, portfolioID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPortfolio", reflect.TypeOf((*MockRepository)(nil).FindByPortfolio), ctx, organizationID, ledgerID, portfolioID, id)
}

// ListByIDs mocks base method.
func (m *MockRepository) ListByIDs(ctx context.Context, organizationID, ledgerID uuid.UUID, ids []uuid.UUID) ([]*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIDs", ctx, organizationID, ledgerID, ids)
	ret0, _ := ret[0].([]*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIDs indicates an expected call of ListByIDs.
func (mr *MockRepositoryMockRecorder) ListByIDs(ctx, organizationID, ledgerID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIDs", reflect.TypeOf((*MockRepository)(nil).ListByIDs), ctx, organizationID, ledgerID, ids)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, organizationID, ledgerID, transactionID, id uuid.UUID, operation *Operation) (*Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, organizationID, ledgerID, transactionID, id, operation)
	ret0, _ := ret[0].(*Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, organizationID, ledgerID, transactionID, id, operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, organizationID, ledgerID, transactionID, id, operation)
}
