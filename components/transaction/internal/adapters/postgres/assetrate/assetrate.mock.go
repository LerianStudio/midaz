// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/components/transaction/internal/adapters/postgres/assetrate (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen --destination=assetrate.mock.go --package=assetrate . Repository
//

// Package assetrate is a generated GoMock package.
package assetrate

import (
	context "context"
	reflect "reflect"

	http "github.com/LerianStudio/midaz/pkg/net/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, assetRate *AssetRate) (*AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, assetRate)
	ret0, _ := ret[0].(*AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, assetRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, assetRate)
}

// FindAllByAssetCodes mocks base method.
func (m *MockRepository) FindAllByAssetCodes(ctx context.Context, organizationID, ledgerID uuid.UUID, fromAssetCode string, toAssetCodes []string, filter http.Pagination) ([]*AssetRate, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByAssetCodes", ctx, organizationID, ledgerID, fromAssetCode, toAssetCodes, filter)
	ret0, _ := ret[0].([]*AssetRate)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAllByAssetCodes indicates an expected call of FindAllByAssetCodes.
func (mr *MockRepositoryMockRecorder) FindAllByAssetCodes(ctx, organizationID, ledgerID, fromAssetCode, toAssetCodes, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByAssetCodes", reflect.TypeOf((*MockRepository)(nil).FindAllByAssetCodes), ctx, organizationID, ledgerID, fromAssetCode, toAssetCodes, filter)
}

// FindByCurrencyPair mocks base method.
func (m *MockRepository) FindByCurrencyPair(ctx context.Context, organizationID, ledgerID uuid.UUID, from, to string) (*AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCurrencyPair", ctx, organizationID, ledgerID, from, to)
	ret0, _ := ret[0].(*AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCurrencyPair indicates an expected call of FindByCurrencyPair.
func (mr *MockRepositoryMockRecorder) FindByCurrencyPair(ctx, organizationID, ledgerID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCurrencyPair", reflect.TypeOf((*MockRepository)(nil).FindByCurrencyPair), ctx, organizationID, ledgerID, from, to)
}

// FindByExternalID mocks base method.
func (m *MockRepository) FindByExternalID(ctx context.Context, organizationID, ledgerID, id uuid.UUID) (*AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExternalID", ctx, organizationID, ledgerID, id)
	ret0, _ := ret[0].(*AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExternalID indicates an expected call of FindByExternalID.
func (mr *MockRepositoryMockRecorder) FindByExternalID(ctx, organizationID, ledgerID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExternalID", reflect.TypeOf((*MockRepository)(nil).FindByExternalID), ctx, organizationID, ledgerID, id)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, organizationID, ledgerID, id uuid.UUID, assetRate *AssetRate) (*AssetRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, organizationID, ledgerID, id, assetRate)
	ret0, _ := ret[0].(*AssetRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, organizationID, ledgerID, id, assetRate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, organizationID, ledgerID, id, assetRate)
}
