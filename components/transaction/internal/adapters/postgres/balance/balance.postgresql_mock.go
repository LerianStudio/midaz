// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/transaction/internal/adapters/postgres/balance/balance.postgresql.go
//
// Generated by this command:
//
//	mockgen -source=./components/transaction/internal/adapters/postgres/balance/balance.postgresql.go -destination=./components/transaction/internal/adapters/postgres/balance/balance.postgresql_mock.go -package=balance
//

// Package balance is a generated GoMock package.
package balance

import (
	context "context"
	reflect "reflect"

	http "github.com/LerianStudio/lib-commons/commons/net/http"
	transaction "github.com/LerianStudio/lib-commons/commons/transaction"
	mmodel "github.com/LerianStudio/midaz/pkg/mmodel"
	http0 "github.com/LerianStudio/midaz/pkg/net/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BalancesUpdate mocks base method.
func (m *MockRepository) BalancesUpdate(ctx context.Context, organizationID, ledgerID uuid.UUID, balances []*mmodel.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalancesUpdate", ctx, organizationID, ledgerID, balances)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalancesUpdate indicates an expected call of BalancesUpdate.
func (mr *MockRepositoryMockRecorder) BalancesUpdate(ctx, organizationID, ledgerID, balances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalancesUpdate", reflect.TypeOf((*MockRepository)(nil).BalancesUpdate), ctx, organizationID, ledgerID, balances)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, balance *mmodel.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, balance)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, organizationID, ledgerID, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, organizationID, ledgerID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, organizationID, ledgerID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, organizationID, ledgerID, id)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context, organizationID, ledgerID, id uuid.UUID) (*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, organizationID, ledgerID, id)
	ret0, _ := ret[0].(*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx, organizationID, ledgerID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx, organizationID, ledgerID, id)
}

// ListAll mocks base method.
func (m *MockRepository) ListAll(ctx context.Context, organizationID, ledgerID uuid.UUID, filter http0.Pagination) ([]*mmodel.Balance, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, organizationID, ledgerID, filter)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRepositoryMockRecorder) ListAll(ctx, organizationID, ledgerID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRepository)(nil).ListAll), ctx, organizationID, ledgerID, filter)
}

// ListAllByAccountID mocks base method.
func (m *MockRepository) ListAllByAccountID(ctx context.Context, organizationID, ledgerID, accountID uuid.UUID, filter http0.Pagination) ([]*mmodel.Balance, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllByAccountID", ctx, organizationID, ledgerID, accountID, filter)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllByAccountID indicates an expected call of ListAllByAccountID.
func (mr *MockRepositoryMockRecorder) ListAllByAccountID(ctx, organizationID, ledgerID, accountID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllByAccountID", reflect.TypeOf((*MockRepository)(nil).ListAllByAccountID), ctx, organizationID, ledgerID, accountID, filter)
}

// ListByAccountIDs mocks base method.
func (m *MockRepository) ListByAccountIDs(ctx context.Context, organizationID, ledgerID uuid.UUID, ids []uuid.UUID) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountIDs", ctx, organizationID, ledgerID, ids)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountIDs indicates an expected call of ListByAccountIDs.
func (mr *MockRepositoryMockRecorder) ListByAccountIDs(ctx, organizationID, ledgerID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountIDs", reflect.TypeOf((*MockRepository)(nil).ListByAccountIDs), ctx, organizationID, ledgerID, ids)
}

// ListByAliases mocks base method.
func (m *MockRepository) ListByAliases(ctx context.Context, organizationID, ledgerID uuid.UUID, aliases []string) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAliases", ctx, organizationID, ledgerID, aliases)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAliases indicates an expected call of ListByAliases.
func (mr *MockRepositoryMockRecorder) ListByAliases(ctx, organizationID, ledgerID, aliases any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAliases", reflect.TypeOf((*MockRepository)(nil).ListByAliases), ctx, organizationID, ledgerID, aliases)
}

// SelectForUpdate mocks base method.
func (m *MockRepository) SelectForUpdate(ctx context.Context, organizationID, ledgerID uuid.UUID, aliases []string, fromTo map[string]transaction.Amount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectForUpdate", ctx, organizationID, ledgerID, aliases, fromTo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectForUpdate indicates an expected call of SelectForUpdate.
func (mr *MockRepositoryMockRecorder) SelectForUpdate(ctx, organizationID, ledgerID, aliases, fromTo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectForUpdate", reflect.TypeOf((*MockRepository)(nil).SelectForUpdate), ctx, organizationID, ledgerID, aliases, fromTo)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, organizationID, ledgerID, id uuid.UUID, balance mmodel.UpdateBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, organizationID, ledgerID, id, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, organizationID, ledgerID, id, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, organizationID, ledgerID, id, balance)
}
