// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LerianStudio/midaz/v3/components/transaction/internal/adapters/postgres/balance (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen --destination=balance.postgresql_mock.go --package=balance . Repository
//

// Package balance is a generated GoMock package.
package balance

import (
	context "context"
	reflect "reflect"

	http "github.com/LerianStudio/lib-commons/v2/commons/net/http"
	mmodel "github.com/LerianStudio/midaz/v3/pkg/mmodel"
	http0 "github.com/LerianStudio/midaz/v3/pkg/net/http"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BalancesUpdate mocks base method.
func (m *MockRepository) BalancesUpdate(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 []*mmodel.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalancesUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalancesUpdate indicates an expected call of BalancesUpdate.
func (mr *MockRepositoryMockRecorder) BalancesUpdate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalancesUpdate", reflect.TypeOf((*MockRepository)(nil).BalancesUpdate), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 *mmodel.Balance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepository) Delete(arg0 context.Context, arg1, arg2, arg3 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Find mocks base method.
func (m *MockRepository) Find(arg0 context.Context, arg1, arg2, arg3 uuid.UUID) (*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), arg0, arg1, arg2, arg3)
}

// FindByAccountIDAndKey mocks base method.
func (m *MockRepository) FindByAccountIDAndKey(arg0 context.Context, arg1, arg2, arg3 uuid.UUID, arg4 string) (*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountIDAndKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountIDAndKey indicates an expected call of FindByAccountIDAndKey.
func (mr *MockRepositoryMockRecorder) FindByAccountIDAndKey(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountIDAndKey", reflect.TypeOf((*MockRepository)(nil).FindByAccountIDAndKey), arg0, arg1, arg2, arg3, arg4)
}

// ListAll mocks base method.
func (m *MockRepository) ListAll(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 http0.Pagination) ([]*mmodel.Balance, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockRepositoryMockRecorder) ListAll(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockRepository)(nil).ListAll), arg0, arg1, arg2, arg3)
}

// ListAllByAccountID mocks base method.
func (m *MockRepository) ListAllByAccountID(arg0 context.Context, arg1, arg2, arg3 uuid.UUID, arg4 http0.Pagination) ([]*mmodel.Balance, http.CursorPagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllByAccountID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(http.CursorPagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllByAccountID indicates an expected call of ListAllByAccountID.
func (mr *MockRepositoryMockRecorder) ListAllByAccountID(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllByAccountID", reflect.TypeOf((*MockRepository)(nil).ListAllByAccountID), arg0, arg1, arg2, arg3, arg4)
}

// ListByAccountIDs mocks base method.
func (m *MockRepository) ListByAccountIDs(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 []uuid.UUID) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountIDs indicates an expected call of ListByAccountIDs.
func (mr *MockRepositoryMockRecorder) ListByAccountIDs(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountIDs", reflect.TypeOf((*MockRepository)(nil).ListByAccountIDs), arg0, arg1, arg2, arg3)
}

// ListByAliases mocks base method.
func (m *MockRepository) ListByAliases(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 []string) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAliases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAliases indicates an expected call of ListByAliases.
func (mr *MockRepositoryMockRecorder) ListByAliases(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAliases", reflect.TypeOf((*MockRepository)(nil).ListByAliases), arg0, arg1, arg2, arg3)
}

// ListByAliasesWithKeys mocks base method.
func (m *MockRepository) ListByAliasesWithKeys(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 []string) ([]*mmodel.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAliasesWithKeys", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*mmodel.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAliasesWithKeys indicates an expected call of ListByAliasesWithKeys.
func (mr *MockRepositoryMockRecorder) ListByAliasesWithKeys(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAliasesWithKeys", reflect.TypeOf((*MockRepository)(nil).ListByAliasesWithKeys), arg0, arg1, arg2, arg3)
}

// Sync mocks base method.
func (m *MockRepository) Sync(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 mmodel.BalanceRedis) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockRepositoryMockRecorder) Sync(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockRepository)(nil).Sync), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 context.Context, arg1, arg2, arg3 uuid.UUID, arg4 mmodel.UpdateBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}
