// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Discord community",
            "url": "https://discord.gg/DnhqKwkGv3"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/balances": {
            "get": {
                "description": "Get all balances by account id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get all balances by account id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort Order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        " next_cursor": {
                                            "type": "string"
                                        },
                                        " prev_cursor": {
                                            "type": "string"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/mmodel.Balance"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations": {
            "get": {
                "description": "Get all Operations with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Get all Operations by account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort Order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        " next_cursor": {
                                            "type": "string"
                                        },
                                        " prev_cursor": {
                                            "type": "string"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Operation"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations/{operation_id}": {
            "get": {
                "description": "Get an Operation with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Get an Operation by account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "account_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Operation ID",
                        "name": "operation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Operation not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates": {
            "put": {
                "description": "Create or Update an AssetRate with the input details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Rates"
                ],
                "summary": "Create or Update an AssetRate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AssetRate Input",
                        "name": "asset-rate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAssetRateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssetRate"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Ledger or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/from/{asset_code}": {
            "get": {
                "description": "Get an AssetRate by the Asset Code with the input details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Rates"
                ],
                "summary": "Get an AssetRate by the Asset Code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "From Asset Code",
                        "name": "asset_code",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "To Asset Codes",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort Order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/AssetRate"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "next_cursor": {
                                            "type": "string"
                                        },
                                        "prev_cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Asset code not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/{external_id}": {
            "get": {
                "description": "Get an AssetRate by External ID with the input details",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset Rates"
                ],
                "summary": "Get an AssetRate by External ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AssetRate"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Asset rate not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances": {
            "get": {
                "description": "Get all balances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get all balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort Order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        " next_cursor": {
                                            "type": "string"
                                        },
                                        " prev_cursor": {
                                            "type": "string"
                                        },
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/mmodel.Balance"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}": {
            "get": {
                "description": "Get a Balance with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Get Balance by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Balance ID",
                        "name": "balance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Balance"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Balance not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Balance with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Delete Balance by account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Balance ID",
                        "name": "balance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Balance successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Balance not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Cannot delete balance with active operations",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a Balance with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balances"
                ],
                "summary": "Update Balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Balance ID",
                        "name": "balance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Balance Input",
                        "name": "balance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mmodel.UpdateBalance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mmodel.Balance"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Balance not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions": {
            "get": {
                "description": "Get all Transactions with the input metadata or without metadata",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get all Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start Date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End Date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort Order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Transaction"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "next_cursor": {
                                            "type": "string"
                                        },
                                        "page": {
                                            "type": "object"
                                        },
                                        "prev_cursor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl": {
            "post": {
                "description": "Create a Transaction with the input DSL file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a Transaction using DSL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Transaction DSL file",
                        "name": "transaction",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid DSL file format or validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json": {
            "post": {
                "description": "Create a Transaction with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a Transaction using JSON",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction Input",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateTransactionInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/templates": {
            "post": {
                "description": "Create a Transaction with the input template",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a Transaction Template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction Template Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_LerianStudio_midaz_components_transaction_internal_adapters_postgres_transaction.InputDSL"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_LerianStudio_midaz_components_transaction_internal_adapters_postgres_transaction.InputDSL"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}": {
            "get": {
                "description": "Get a Transaction with the input ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Get a Transaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a Transaction with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Update a Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transaction Input",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateTransactionInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit": {
            "post": {
                "description": "Commit a previously created transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Commit a Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/operations/{operation_id}": {
            "patch": {
                "description": "Update an Operation with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Operations"
                ],
                "summary": "Update an Operation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Operation ID",
                        "name": "operation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Operation Input",
                        "name": "operation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOperationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Operation not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert": {
            "post": {
                "description": "Revert a Transaction with Transaction ID only",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Revert a Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "transaction_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "400": {
                        "description": "Invalid request or transaction cannot be reverted",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Transaction already has a parent transaction",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Amount": {
            "description": "Amount is the struct designed to represent the amount of an operation.",
            "type": "object",
            "required": [
                "asset",
                "value"
            ],
            "properties": {
                "asset": {
                    "type": "string",
                    "example": "BRL"
                },
                "operation": {
                    "type": "string"
                },
                "scale": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2
                },
                "value": {
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "AssetRate": {
            "description": "AssetRate is a struct designed to store asset rate data.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "externalId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "from": {
                    "type": "string",
                    "example": "USD"
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "organizationId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "rate": {
                    "type": "number",
                    "example": 100
                },
                "scale": {
                    "type": "number",
                    "example": 2
                },
                "source": {
                    "type": "string",
                    "example": "External System"
                },
                "to": {
                    "type": "string",
                    "example": "BRL"
                },
                "ttl": {
                    "type": "integer",
                    "example": 3600
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Balance": {
            "description": "Balance is the struct designed to represent the account balance.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer",
                    "example": 1500
                },
                "onHold": {
                    "type": "integer",
                    "example": 500
                },
                "scale": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "CreateAssetRateInput": {
            "description": "CreateAssetRateInput is the input payload to create an asset rate.",
            "type": "object",
            "required": [
                "from",
                "rate",
                "to"
            ],
            "properties": {
                "externalId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "from": {
                    "type": "string",
                    "example": "USD"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "rate": {
                    "type": "integer",
                    "example": 100
                },
                "scale": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2
                },
                "source": {
                    "type": "string",
                    "example": "External System"
                },
                "to": {
                    "type": "string",
                    "example": "BRL"
                },
                "ttl": {
                    "type": "integer",
                    "example": 3600
                }
            }
        },
        "CreateTransactionInput": {
            "description": "CreateTransactionInput is the input payload to create a transaction.",
            "type": "object",
            "required": [
                "send"
            ],
            "properties": {
                "chartOfAccountsGroupName": {
                    "type": "string",
                    "maxLength": 256
                },
                "code": {
                    "type": "string",
                    "maxLength": 100
                },
                "description": {
                    "type": "string",
                    "maxLength": 256
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "pending": {
                    "type": "boolean"
                },
                "send": {
                    "$ref": "#/definitions/Send"
                }
            }
        },
        "Distribute": {
            "description": "Distribute is the struct designed to represent the distribution fields of an operation.",
            "type": "object",
            "required": [
                "to"
            ],
            "properties": {
                "remaining": {
                    "type": "string"
                },
                "to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FromTo"
                    }
                }
            }
        },
        "Error": {
            "description": "Standardized error response format used across all API endpoints for error situations",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code identifying the specific error condition\nexample: ERR_INVALID_INPUT",
                    "type": "string"
                },
                "entityType": {
                    "description": "Optional type of entity associated with the error\nexample: Organization",
                    "type": "string"
                },
                "fields": {
                    "description": "Optional detailed field validations for client-side handling\nexample: {\"name\": \"Field 'name' is required\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Detailed error message explaining the issue\nexample: The request contains invalid fields. Please check the field 'name' and try again.",
                    "type": "string"
                },
                "title": {
                    "description": "Short, human-readable error title\nexample: Bad Request",
                    "type": "string"
                }
            }
        },
        "FromTo": {
            "description": "FromTo is the struct designed to represent the from/to fields of an operation.",
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "example": "@person1"
                },
                "amount": {
                    "$ref": "#/definitions/Amount"
                },
                "chartOfAccounts": {
                    "type": "string",
                    "example": "1000"
                },
                "description": {
                    "type": "string",
                    "example": "description"
                },
                "isFrom": {
                    "type": "boolean",
                    "example": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "rate": {
                    "$ref": "#/definitions/Rate"
                },
                "remaining": {
                    "type": "string",
                    "example": "remaining"
                },
                "share": {
                    "$ref": "#/definitions/Share"
                }
            }
        },
        "Operation": {
            "description": "Operation is a struct designed to store operation data.",
            "type": "object",
            "properties": {
                "accountAlias": {
                    "type": "string",
                    "example": "@person1"
                },
                "accountId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "amount": {
                    "$ref": "#/definitions/Amount"
                },
                "assetCode": {
                    "type": "string",
                    "example": "BRL"
                },
                "balance": {
                    "$ref": "#/definitions/Balance"
                },
                "balanceAfter": {
                    "$ref": "#/definitions/Balance"
                },
                "balanceId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "chartOfAccounts": {
                    "type": "string",
                    "example": "1000"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Credit card operation"
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "organizationId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "$ref": "#/definitions/Status"
                },
                "transactionId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "type": {
                    "type": "string",
                    "example": "creditCard"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Pagination": {
            "description": "Pagination is the struct designed to store the pagination data of an entity list.",
            "type": "object",
            "properties": {
                "items": {},
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "next_cursor": {
                    "type": "string",
                    "x-omitempty": true,
                    "example": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "prev_cursor": {
                    "type": "string",
                    "x-omitempty": true,
                    "example": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
                }
            }
        },
        "Rate": {
            "description": "Rate is the struct designed to represent the rate fields of an operation.",
            "type": "object",
            "required": [
                "externalId",
                "from",
                "to",
                "value"
            ],
            "properties": {
                "externalId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "from": {
                    "type": "string",
                    "example": "BRL"
                },
                "scale": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2
                },
                "to": {
                    "type": "string",
                    "example": "USDe"
                },
                "value": {
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "Send": {
            "description": "Send is the struct designed to represent the sending fields of an operation.",
            "type": "object",
            "required": [
                "asset",
                "distribute",
                "source",
                "value"
            ],
            "properties": {
                "asset": {
                    "type": "string",
                    "example": "BRL"
                },
                "distribute": {
                    "$ref": "#/definitions/Distribute"
                },
                "scale": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 2
                },
                "source": {
                    "$ref": "#/definitions/Source"
                },
                "value": {
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "Share": {
            "description": "Share is the struct designed to represent the sharing fields of an operation.",
            "type": "object",
            "required": [
                "percentage"
            ],
            "properties": {
                "percentage": {
                    "type": "integer"
                },
                "percentageOfPercentage": {
                    "type": "integer"
                }
            }
        },
        "Source": {
            "description": "Source is the struct designed to represent the source fields of an operation.",
            "type": "object",
            "required": [
                "from"
            ],
            "properties": {
                "from": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FromTo"
                    }
                },
                "remaining": {
                    "type": "string",
                    "example": "remaining"
                }
            }
        },
        "Status": {
            "description": "Status is the struct designed to represent the status of a transaction.",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 100,
                    "example": "ACTIVE"
                },
                "description": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "Active status"
                }
            }
        },
        "Transaction": {
            "description": "Transaction is a struct designed to store transaction data.",
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 1500
                },
                "amountScale": {
                    "type": "integer",
                    "example": 2
                },
                "assetCode": {
                    "type": "string",
                    "example": "BRL"
                },
                "chartOfAccountsGroupName": {
                    "type": "string",
                    "example": "Chart of accounts group name"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Transaction description"
                },
                "destination": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "@person2"
                    ]
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Operation"
                    }
                },
                "organizationId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "parentTransactionId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "source": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "@person1"
                    ]
                },
                "status": {
                    "$ref": "#/definitions/Status"
                },
                "template": {
                    "type": "string",
                    "example": "Transaction template"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "UpdateOperationInput": {
            "description": "UpdateOperationInput is the input payload to update an operation.",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "Credit card operation"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "UpdateTransactionInput": {
            "description": "UpdateTransactionInput is the input payload to update a transaction.",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 256,
                    "example": "Transaction description"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "github_com_LerianStudio_midaz_components_transaction_internal_adapters_postgres_transaction.InputDSL": {
            "type": "object",
            "properties": {
                "transactionType": {
                    "type": "string"
                },
                "transactionTypeCode": {
                    "type": "string"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "mmodel.Balance": {
            "description": "Balance is a struct designed to store balance data.",
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "accountType": {
                    "type": "string",
                    "example": "creditCard"
                },
                "alias": {
                    "type": "string",
                    "example": "@person1"
                },
                "allowReceiving": {
                    "type": "boolean",
                    "example": true
                },
                "allowSending": {
                    "type": "boolean",
                    "example": true
                },
                "assetCode": {
                    "type": "string",
                    "example": "BRL"
                },
                "available": {
                    "type": "integer",
                    "example": 1500
                },
                "createdAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "onHold": {
                    "type": "integer",
                    "example": 500
                },
                "organizationId": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "scale": {
                    "type": "integer",
                    "example": 2
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "version": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "mmodel.UpdateBalance": {
            "type": "object",
            "properties": {
                "allowReceiving": {
                    "type": "boolean",
                    "example": true
                },
                "allowSending": {
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1.48.0",
	Host:             "localhost:3001",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Midaz Transaction API",
	Description:      "This is a swagger documentation for the Midaz Transaction API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
