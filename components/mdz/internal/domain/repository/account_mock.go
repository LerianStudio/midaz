// Code generated by MockGen. DO NOT EDIT.
// Source: /home/max/Workspace/midaz/components/mdz/internal/domain/repository/account.go
//
// Generated by this command:
//
//	mockgen -source=/home/max/Workspace/midaz/components/mdz/internal/domain/repository/account.go -destination=/home/max/Workspace/midaz/components/mdz/internal/domain/repository/account_mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	mmodel "github.com/LerianStudio/midaz/pkg/mmodel"
	gomock "go.uber.org/mock/gomock"
)

// MockAccount is a mock of Account interface.
type MockAccount struct {
	ctrl     *gomock.Controller
	recorder *MockAccountMockRecorder
	isgomock struct{}
}

// MockAccountMockRecorder is the mock recorder for MockAccount.
type MockAccountMockRecorder struct {
	mock *MockAccount
}

// NewMockAccount creates a new mock instance.
func NewMockAccount(ctrl *gomock.Controller) *MockAccount {
	mock := &MockAccount{ctrl: ctrl}
	mock.recorder = &MockAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccount) EXPECT() *MockAccountMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccount) Create(organizationID, ledgerID, portfolioID string, inp mmodel.CreateAccountInput) (*mmodel.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", organizationID, ledgerID, portfolioID, inp)
	ret0, _ := ret[0].(*mmodel.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountMockRecorder) Create(organizationID, ledgerID, portfolioID, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccount)(nil).Create), organizationID, ledgerID, portfolioID, inp)
}

// Delete mocks base method.
func (m *MockAccount) Delete(organizationID, ledgerID, portfolioID, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", organizationID, ledgerID, portfolioID, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountMockRecorder) Delete(organizationID, ledgerID, portfolioID, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccount)(nil).Delete), organizationID, ledgerID, portfolioID, accountID)
}

// Get mocks base method.
func (m *MockAccount) Get(organizationID, ledgerID, portfolioID string, limit, page int, SortOrder, StartDate, EndDate string) (*mmodel.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", organizationID, ledgerID, portfolioID, limit, page, SortOrder, StartDate, EndDate)
	ret0, _ := ret[0].(*mmodel.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountMockRecorder) Get(organizationID, ledgerID, portfolioID, limit, page, SortOrder, StartDate, EndDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccount)(nil).Get), organizationID, ledgerID, portfolioID, limit, page, SortOrder, StartDate, EndDate)
}

// GetByID mocks base method.
func (m *MockAccount) GetByID(organizationID, ledgerID, portfolioID, accountID string) (*mmodel.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", organizationID, ledgerID, portfolioID, accountID)
	ret0, _ := ret[0].(*mmodel.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountMockRecorder) GetByID(organizationID, ledgerID, portfolioID, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccount)(nil).GetByID), organizationID, ledgerID, portfolioID, accountID)
}

// Update mocks base method.
func (m *MockAccount) Update(organizationID, ledgerID, portfolioID, accountID string, inp mmodel.UpdateAccountInput) (*mmodel.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", organizationID, ledgerID, portfolioID, accountID, inp)
	ret0, _ := ret[0].(*mmodel.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountMockRecorder) Update(organizationID, ledgerID, portfolioID, accountID, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccount)(nil).Update), organizationID, ledgerID, portfolioID, accountID, inp)
}
