// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/mdz/internal/domain/repository/segment.go
//
// Generated by this command:
//
//	mockgen -source=./components/mdz/internal/domain/repository/segment.go -destination=./components/mdz/internal/domain/repository/segment_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	mmodel "github.com/LerianStudio/midaz/pkg/mmodel"
	gomock "go.uber.org/mock/gomock"
)

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
	isgomock struct{}
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSegment) Create(organizationID, ledgerID string, inp mmodel.CreateSegmentInput) (*mmodel.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", organizationID, ledgerID, inp)
	ret0, _ := ret[0].(*mmodel.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSegmentMockRecorder) Create(organizationID, ledgerID, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegment)(nil).Create), organizationID, ledgerID, inp)
}

// Delete mocks base method.
func (m *MockSegment) Delete(organizationID, ledgerID, segmentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", organizationID, ledgerID, segmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSegmentMockRecorder) Delete(organizationID, ledgerID, segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSegment)(nil).Delete), organizationID, ledgerID, segmentID)
}

// Get mocks base method.
func (m *MockSegment) Get(organizationID, ledgerID string, limit, page int, SortOrder, StartDate, EndDate string) (*mmodel.Segments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", organizationID, ledgerID, limit, page, SortOrder, StartDate, EndDate)
	ret0, _ := ret[0].(*mmodel.Segments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSegmentMockRecorder) Get(organizationID, ledgerID, limit, page, SortOrder, StartDate, EndDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegment)(nil).Get), organizationID, ledgerID, limit, page, SortOrder, StartDate, EndDate)
}

// GetByID mocks base method.
func (m *MockSegment) GetByID(organizationID, ledgerID, segmentID string) (*mmodel.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", organizationID, ledgerID, segmentID)
	ret0, _ := ret[0].(*mmodel.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSegmentMockRecorder) GetByID(organizationID, ledgerID, segmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSegment)(nil).GetByID), organizationID, ledgerID, segmentID)
}

// Update mocks base method.
func (m *MockSegment) Update(organizationID, ledgerID, segmentID string, inp mmodel.UpdateSegmentInput) (*mmodel.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", organizationID, ledgerID, segmentID, inp)
	ret0, _ := ret[0].(*mmodel.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSegmentMockRecorder) Update(organizationID, ledgerID, segmentID, inp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSegment)(nil).Update), organizationID, ledgerID, segmentID, inp)
}
