// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/mdz/pkg/output/output.go
//
// Generated by this command:
//
//	mockgen -source=./components/mdz/pkg/output/output.go -destination=./components/mdz/pkg/output/output_mock.go -package=output
//

// Package output is a generated GoMock package.
package output

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
	isgomock struct{}
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockOutput) Output() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output")
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockOutputMockRecorder) Output() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockOutput)(nil).Output))
}
