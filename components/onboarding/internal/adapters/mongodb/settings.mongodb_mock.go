// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/onboarding/internal/adapters/mongodb/settings.mongodb.go
//
// Generated by this command:
//
//	mockgen -source=./components/onboarding/internal/adapters/mongodb/settings.mongodb.go -destination=./components/onboarding/internal/adapters/mongodb/settings.mongodb_mock.go -package=mongodb
//

// Package mongodb is a generated GoMock package.
package mongodb

import (
	context "context"
	reflect "reflect"

	mmodel "github.com/LerianStudio/midaz/pkg/mmodel"
	gomock "go.uber.org/mock/gomock"
)

// MockSettingsRepository is a mock of SettingsRepository interface.
type MockSettingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsRepositoryMockRecorder
	isgomock struct{}
}

// MockSettingsRepositoryMockRecorder is the mock recorder for MockSettingsRepository.
type MockSettingsRepositoryMockRecorder struct {
	mock *MockSettingsRepository
}

// NewMockSettingsRepository creates a new mock instance.
func NewMockSettingsRepository(ctrl *gomock.Controller) *MockSettingsRepository {
	mock := &MockSettingsRepository{ctrl: ctrl}
	mock.recorder = &MockSettingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsRepository) EXPECT() *MockSettingsRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSettingsRepository) Delete(ctx context.Context, organizationID, ledgerID, applicationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, organizationID, ledgerID, applicationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSettingsRepositoryMockRecorder) Delete(ctx, organizationID, ledgerID, applicationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSettingsRepository)(nil).Delete), ctx, organizationID, ledgerID, applicationName)
}

// Find mocks base method.
func (m *MockSettingsRepository) Find(ctx context.Context, organizationID, ledgerID, applicationName string) (*mmodel.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, organizationID, ledgerID, applicationName)
	ret0, _ := ret[0].(*mmodel.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSettingsRepositoryMockRecorder) Find(ctx, organizationID, ledgerID, applicationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSettingsRepository)(nil).Find), ctx, organizationID, ledgerID, applicationName)
}

// Upsert mocks base method.
func (m *MockSettingsRepository) Upsert(ctx context.Context, upsert bool, settings *mmodel.Settings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, upsert, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSettingsRepositoryMockRecorder) Upsert(ctx, upsert, settings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSettingsRepository)(nil).Upsert), ctx, upsert, settings)
}
