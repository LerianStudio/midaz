openapi: 3.0.1
info:
  contact:
    name: Discord community
    url: https://discord.gg/DnhqKwkGv3
  description: This is a swagger documentation for the Midaz Ledger API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Midaz Onboarding API
  version: v1.48.0
servers:
- url: //localhost:3000/
paths:
  /v1/organizations:
    get:
      description: Returns a paginated list of organizations, optionally filtered
        by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: JSON string to filter organizations by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter organizations created on or after this date (format:
          YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter organizations created on or before this date (format:
          YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Successfully retrieved organizations list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all organizations
      tags:
      - Organizations
    post:
      description: Creates a new organization with the provided details including
        legal name, legal document, and optional address information
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationInput'
        description: Organization details including legal name, legal document, and
          optional address information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully created organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/{id}:
    delete:
      description: 'Permanently removes an organization identified by its UUID. Note:
        This operation is not available in production environments.'
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: Organization successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden action or not permitted in production environment
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Cannot delete organization with dependent resources'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an organization
      tags:
      - Organizations
    get:
      description: Returns detailed information about an organization identified by
        its UUID
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully retrieved organization
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific organization
      tags:
      - Organizations
    patch:
      description: Updates an organization's information such as legal name, address,
        or status. Only supplied fields will be updated.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationInput'
        description: Organization fields to update. Only supplied fields will be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully updated organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an existing organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/{organization_id}/ledgers:
    get:
      description: Returns a paginated list of ledgers within the specified organization,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: JSON string to filter ledgers by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter ledgers created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter ledgers created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Successfully retrieved ledgers list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all ledgers
      tags:
      - Ledgers
    post:
      description: Creates a new ledger within the specified organization. A ledger
        is a financial record-keeping system for tracking assets, accounts, and transactions.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLedgerInput'
        description: Ledger details including name, status, and optional metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully created ledger
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/{id}:
    delete:
      description: 'Permanently removes a ledger identified by its UUID. Note: This
        operation is not available in production environments.'
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: Ledger successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden action or not permitted in production environment
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Cannot delete ledger with dependent resources'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a ledger
      tags:
      - Ledgers
    get:
      description: Returns detailed information about a ledger identified by its UUID
        within the specified organization
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully retrieved ledger
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific ledger
      tags:
      - Ledgers
    patch:
      description: Updates a ledger's information such as name, status, or metadata.
        Only supplied fields will be updated.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLedgerInput'
        description: Ledger fields to update. Only supplied fields will be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully updated ledger
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an existing ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts:
    get:
      description: Returns a paginated list of accounts within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter accounts by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter accounts created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter accounts created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Successfully retrieved accounts list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all accounts
      tags:
      - Accounts
    post:
      description: Creates a new account within the specified ledger. Accounts represent
        individual financial entities like bank accounts, credit cards, or expense
        categories.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountInput'
        description: Account details including name, type, asset code, and optional
          parent account, portfolio, segment, and metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully created account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization, ledger, parent account, portfolio, or segment
            not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account with the same alias already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}:
    get:
      description: Returns detailed information about an account identified by its
        alias within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account alias (e.g. @person1)
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully retrieved account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account with the specified alias, ledger, or organization not
            found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve an account by alias
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}:
    delete:
      description: Permanently removes an account from the specified ledger. This
        operation cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Account successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an account
      tags:
      - Accounts
    get:
      description: Returns detailed information about an account identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully retrieved account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific account
      tags:
      - Accounts
    patch:
      description: Updates an existing account's properties such as name, status,
        portfolio, segment, and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInput'
        description: Account properties to update including name, status, portfolio,
          segment, and optional metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully updated account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, organization, portfolio, or segment not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets:
    get:
      description: Returns a paginated list of assets within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter assets by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter assets created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter assets created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Successfully retrieved assets list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all assets
      tags:
      - Assets
    post:
      description: Creates a new asset within the specified ledger. Assets represent
        currencies, cryptocurrencies, commodities, or other financial instruments
        tracked in the ledger.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetInput'
        description: Asset details including name, code, type, status, and optional
          metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully created asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset with the same name or code already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}:
    delete:
      description: Permanently removes an asset from the specified ledger. This operation
        cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Asset successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an asset
      tags:
      - Assets
    get:
      description: Returns detailed information about an asset identified by its UUID
        within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully retrieved asset
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific asset
      tags:
      - Assets
    patch:
      description: Updates an existing asset's properties such as name, status, and
        metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetInput'
        description: Asset properties to update including name, status, and optional
          metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully updated asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios:
    get:
      description: Returns a paginated list of portfolios within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter portfolios by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter portfolios created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter portfolios created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Successfully retrieved portfolios list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all portfolios
      tags:
      - Portfolios
    post:
      description: Creates a new portfolio within the specified ledger. Portfolios
        represent collections of accounts grouped for specific purposes such as business
        units, departments, or client portfolios.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioInput'
        description: Portfolio details including name, optional entity ID, status,
          and metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully created portfolio
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}:
    delete:
      description: Permanently removes a portfolio from the specified ledger. This
        operation cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Portfolio successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a portfolio
      tags:
      - Portfolios
    get:
      description: Returns detailed information about a portfolio identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully retrieved portfolio
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific portfolio
      tags:
      - Portfolios
    patch:
      description: Updates an existing portfolio's properties such as name, entity
        ID, status, and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioInput'
        description: Portfolio properties to update including name, entity ID, status,
          and optional metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully updated portfolio
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update a portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/segments:
    get:
      description: Returns a paginated list of segments within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter segments by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter segments created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter segments created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Successfully retrieved segments list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all segments
      tags:
      - Segments
    post:
      description: Creates a new segment within the specified ledger. Segments represent
        logical divisions within a ledger, such as business areas, product lines,
        or customer categories.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentInput'
        description: Segment details including name, status, and optional metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully created segment
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new segment
      tags:
      - Segments
      x-codegen-request-body-name: segment
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}:
    delete:
      description: Permanently removes a segment from the specified ledger. This operation
        cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Segment successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a segment
      tags:
      - Segments
    get:
      description: Returns detailed information about a segment identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully retrieved segment
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific segment
      tags:
      - Segments
    patch:
      description: Updates an existing segment's properties such as name, status,
        and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSegmentInput'
        description: Segment properties to update including name, status, and optional
          metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully updated segment
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update a segment
      tags:
      - Segments
      x-codegen-request-body-name: segment
components:
  schemas:
    Account:
      description: Account represents an individual financial entity within a ledger,
        such as a bank account, credit card, or expense category.
      example:
        metadata:
          key: '{}'
        assetCode: BRL
        entityId: 00000000-0000-0000-0000-000000000000
        type: creditCard
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        parentAccountId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        portfolioId: 00000000-0000-0000-0000-000000000000
        segmentId: 00000000-0000-0000-0000-000000000000
        name: My Account
        alias: '@person1'
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        alias:
          description: Unique alias for the account (max length 100 characters)
          example: '@person1'
          maxLength: 100
          type: string
        assetCode:
          description: Asset code associated with this account (max length 100 characters)
          example: BRL
          maxLength: 100
          type: string
        createdAt:
          description: Timestamp when the account was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the account was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        id:
          description: Unique identifier for the account (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this account belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the account
          type: object
        name:
          description: Name of the account (max length 256 characters)
          example: My Account
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this account (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        parentAccountId:
          description: ID of the parent account if this is a sub-account (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        portfolioId:
          description: ID of the portfolio this account belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        segmentId:
          description: ID of the segment this account belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the account (active, inactive, pending)
          type: object
        type:
          description: Type of the account (e.g., checking, savings, creditCard, expense)
          example: creditCard
          type: string
        updatedAt:
          description: Timestamp when the account was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Address:
      description: Structured address information following standard postal address
        format. Country field follows ISO 3166-1 alpha-2 standard (2-letter country
        codes).
      properties:
        city:
          description: City or locality name
          example: New York
          maxLength: 100
          type: string
        country:
          description: Country code in ISO 3166-1 alpha-2 format (two-letter country
            code)
          example: US
          maxLength: 2
          minLength: 2
          type: string
        line1:
          description: Primary address line (street address or PO Box)
          example: Street 1
          maxLength: 256
          type: string
        line2:
          description: Secondary address information like apartment number, suite,
            or floor
          example: Street 2
          maxLength: 256
          type: string
        state:
          description: State, province, or region name or code
          example: NY
          maxLength: 100
          type: string
        zipCode:
          description: Postal code or ZIP code
          example: 00000-000
          maxLength: 20
          type: string
      type: object
    Asset:
      description: Asset represents a financial instrument within a ledger, such as
        a currency, cryptocurrency, commodity, or other asset type.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        code: BRL
        name: Brazilian Real
        id: 00000000-0000-0000-0000-000000000000
        type: currency
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        code:
          description: Unique code/symbol for the asset (max length 100 characters)
          example: BRL
          maxLength: 100
          type: string
        createdAt:
          description: Timestamp when the asset was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the asset was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the asset (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this asset belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the asset
          type: object
        name:
          description: Name of the asset (max length 256 characters)
          example: Brazilian Real
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this asset (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the asset (active, inactive, pending)
          type: object
        type:
          description: Type of the asset (e.g., currency, cryptocurrency, commodity,
            stock)
          example: currency
          type: string
        updatedAt:
          description: Timestamp when the asset was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    CreateAccountInput:
      description: CreateAccountInput is the input payload to create an account within
        a ledger, representing an individual financial entity like a bank account,
        credit card, or expense category.
      example:
        parentAccountId: 00000000-0000-0000-0000-000000000000
        metadata:
          key: '{}'
        assetCode: BRL
        portfolioId: 00000000-0000-0000-0000-000000000000
        segmentId: 00000000-0000-0000-0000-000000000000
        name: My Account
        alias: '@person1'
        entityId: 00000000-0000-0000-0000-000000000000
        type: creditCard
        status: '{}'
      properties:
        alias:
          description: Unique alias for the account (optional, max length 100 characters,
            must follow alias format rules)
          example: '@person1'
          maxLength: 100
          type: string
        assetCode:
          description: Asset code that this account will use (required, max length
            100 characters)
          example: BRL
          maxLength: 100
          type: string
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the account
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the account (optional, max length 256 characters)
          example: My Account
          maxLength: 256
          type: string
        parentAccountId:
          description: ID of the parent account if this is a sub-account (optional,
            UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        portfolioId:
          description: ID of the portfolio this account belongs to (optional, UUID
            format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        segmentId:
          description: ID of the segment this account belongs to (optional, UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the account (active, inactive, pending)
          type: object
        type:
          description: Type of the account (e.g., checking, savings, creditCard, expense)
          example: creditCard
          type: string
      required:
      - assetCode
      - type
      type: object
    CreateAssetInput:
      description: CreateAssetInput is the input payload to create an asset within
        a ledger, such as a currency, cryptocurrency, or other financial instrument.
      example:
        metadata:
          key: '{}'
        code: BRL
        name: Brazilian Real
        type: currency
        status: '{}'
      properties:
        code:
          description: Unique code/symbol for the asset (required, max length 100
            characters)
          example: BRL
          maxLength: 100
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the asset
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the asset (required, max length 256 characters)
          example: Brazilian Real
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the asset (active, inactive, pending)
          type: object
        type:
          description: Type of the asset (e.g., currency, cryptocurrency, commodity,
            stock)
          example: currency
          type: string
      required:
      - code
      - name
      type: object
    CreateLedgerInput:
      description: Request payload for creating a new ledger. Contains the ledger
        name (required), status, and optional metadata.
      example:
        metadata:
          key: '{}'
        name: Lerian Studio
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: Custom key-value pairs for extending the ledger information
          type: object
        name:
          description: Display name of the ledger (required)
          example: Lerian Studio
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the ledger (defaults to ACTIVE
            if not specified)
          type: object
      required:
      - name
      type: object
    CreateOrganizationInput:
      description: Request payload for creating a new organization. Contains all the
        necessary fields for organization creation, with required fields marked as
        such.
      example:
        legalName: Lerian Studio
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: Lerian Studio
        legalDocument: "00000000000000"
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: Physical address of the organization (optional)
          type: object
        doingBusinessAs:
          description: Trading or brand name of the organization, if different from
            legal name (optional)
          example: Lerian Studio
          maxLength: 256
          type: string
        legalDocument:
          description: Official tax ID, company registration number, or other legal
            identification (required)
          example: "00000000000000"
          maxLength: 256
          type: string
        legalName:
          description: Official legal name of the organization (required)
          example: Lerian Studio
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Custom key-value pairs for extending the organization information
          type: object
        parentOrganizationId:
          description: UUID of the parent organization if this is a child organization
            (optional)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the organization (defaults to ACTIVE
            if not specified)
          type: object
      required:
      - legalDocument
      - legalName
      type: object
    CreatePortfolioInput:
      description: CreatePortfolioInput is the input payload to create a portfolio
        within a ledger, representing a collection of accounts grouped for specific
        purposes.
      example:
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the portfolio
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the portfolio (required, max length 256 characters)
          example: My Portfolio
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the portfolio (active, inactive, pending)
          type: object
      required:
      - name
      type: object
    CreateSegmentInput:
      description: CreateSegmentInput is the input payload to create a segment within
        a ledger, representing a logical division such as a business area, product
        line, or customer category.
      example:
        metadata:
          key: '{}'
        name: My Segment
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the segment
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the segment (required, max length 256 characters)
          example: My Segment
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the segment (active, inactive, pending)
          type: object
      required:
      - name
      type: object
    Error:
      description: Standardized error response format used across all API endpoints
        for error situations
      properties:
        code:
          description: |-
            Error code identifying the specific error condition
            example: ERR_INVALID_INPUT
          type: string
        entityType:
          description: |-
            Optional type of entity associated with the error
            example: Organization
          type: string
        fields:
          additionalProperties:
            type: string
          description: |-
            Optional detailed field validations for client-side handling
            example: {"name": "Field 'name' is required"}
          type: object
        message:
          description: |-
            Detailed error message explaining the issue
            example: The request contains invalid fields. Please check the field 'name' and try again.
          type: string
        title:
          description: |-
            Short, human-readable error title
            example: Bad Request
          type: string
      type: object
    Ledger:
      description: Complete ledger entity containing all fields including system-generated
        fields like ID, creation timestamps, and metadata. This is the response format
        for ledger operations.
      example:
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: Lerian Studio
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: Timestamp when the ledger was created (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the ledger was soft deleted, null if not deleted
            (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the ledger (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Custom key-value pairs for extending the ledger information
          type: object
        name:
          description: Display name of the ledger
          example: Lerian Studio
          maxLength: 256
          type: string
        organizationId:
          description: Reference to the organization that owns this ledger
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the ledger
          type: object
        updatedAt:
          description: Timestamp when the ledger was last updated (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Organization:
      description: Complete organization entity containing all fields including system-generated
        fields like ID, creation timestamps, and metadata. This is the response format
        for organization operations.
      example:
        legalName: Lerian Studio
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: Lerian Studio
        id: 00000000-0000-0000-0000-000000000000
        legalDocument: "00000000000000"
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: Physical address of the organization
          type: object
        createdAt:
          description: Timestamp when the organization was created (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the organization was soft deleted, null if not
            deleted (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        doingBusinessAs:
          description: Trading or brand name of the organization, if different from
            legal name
          example: Lerian Studio
          maxLength: 256
          type: string
        id:
          description: Unique identifier for the organization (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        legalDocument:
          description: Official tax ID, company registration number, or other legal
            identification
          example: "00000000000000"
          maxLength: 256
          type: string
        legalName:
          description: Official legal name of the organization
          example: Lerian Studio
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Custom key-value pairs for extending the organization information
          type: object
        parentOrganizationId:
          description: Reference to the parent organization, if this is a child organization
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the organization
          type: object
        updatedAt:
          description: Timestamp when the organization was last updated (RFC3339 format)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Pagination:
      description: Pagination is the struct designed to store the pagination data
        of an entity list.
      example:
        prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        limit: 10
        page: 1
        items: '{}'
      properties:
        items:
          type: object
        limit:
          example: 10
          type: integer
        next_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
        page:
          example: 1
          type: integer
        prev_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
      type: object
    Portfolio:
      description: Portfolio represents a collection of accounts grouped for specific
        purposes such as business units, departments, or client portfolios.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: Timestamp when the portfolio was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the portfolio was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        id:
          description: Unique identifier for the portfolio (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this portfolio belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the portfolio
          type: object
        name:
          description: Name of the portfolio (max length 256 characters)
          example: My Portfolio
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this portfolio (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the portfolio (active, inactive, pending)
          type: object
        updatedAt:
          description: Timestamp when the portfolio was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Segment:
      description: Segment represents a logical division within a ledger such as a
        business area, product line, or customer category.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Segment
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: Timestamp when the segment was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the segment was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the segment (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this segment belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the segment
          type: object
        name:
          description: Name of the segment (max length 256 characters)
          example: My Segment
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this segment (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the segment (active, inactive, pending)
          type: object
        updatedAt:
          description: Timestamp when the segment was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Status:
      description: 'Entity status information with a standardized code and optional
        description. Common status codes include: ACTIVE, INACTIVE, PENDING, SUSPENDED,
        DELETED.'
      properties:
        code:
          description: 'Status code identifier, common values include: ACTIVE, INACTIVE,
            PENDING, SUSPENDED, DELETED'
          example: ACTIVE
          maxLength: 100
          type: string
        description:
          description: Optional human-readable description of the status
          example: Active status
          maxLength: 256
          type: string
      type: object
    UpdateAccountInput:
      description: UpdateAccountInput is the input payload to update an existing account's
        properties such as name, status, portfolio, segment, and metadata.
      example:
        metadata:
          key: '{}'
        portfolioId: 00000000-0000-0000-0000-000000000000
        segmentId: 00000000-0000-0000-0000-000000000000
        name: My Account Updated
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the account
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the account (optional, max length 256 characters)
          example: My Account Updated
          maxLength: 256
          type: string
        portfolioId:
          description: Updated portfolio ID for the account (optional, UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        segmentId:
          description: Updated segment ID for the account (optional, UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the account (active, inactive, pending)
          type: object
      type: object
    UpdateAssetInput:
      description: UpdateAssetInput is the input payload to update an existing asset's
        properties such as name, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: Bitcoin
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the asset
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the asset (optional, max length 256 characters)
          example: Bitcoin
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the asset (active, inactive, pending)
          type: object
      type: object
    UpdateLedgerInput:
      description: Request payload for updating an existing ledger. All fields are
        optional - only specified fields will be updated. Omitted fields will remain
        unchanged.
      example:
        metadata:
          key: '{}'
        name: Lerian Studio Updated
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: Updated custom key-value pairs for extending the ledger information
            (optional)
          type: object
        name:
          description: Updated display name of the ledger (optional)
          example: Lerian Studio Updated
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the ledger (optional)
          type: object
      type: object
    UpdateOrganizationInput:
      description: Request payload for updating an existing organization. All fields
        are optional - only specified fields will be updated. Omitted fields will
        remain unchanged.
      example:
        legalName: Lerian Studio Updated
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: The ledger.io
        parentOrganizationId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: Updated physical address of the organization (optional)
          type: object
        doingBusinessAs:
          description: Updated trading or brand name of the organization (optional)
          example: The ledger.io
          maxLength: 256
          type: string
        legalName:
          description: Updated legal name of the organization (optional)
          example: Lerian Studio Updated
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Updated custom key-value pairs for extending the organization
            information (optional)
          type: object
        parentOrganizationId:
          description: UUID of the parent organization if this is a child organization
            (optional)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the organization (optional)
          type: object
      type: object
    UpdatePortfolioInput:
      description: UpdatePortfolioInput is the input payload to update an existing
        portfolio's properties such as name, entity ID, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: My Portfolio Updated
        entityId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        entityId:
          description: Updated external entity identifier (optional, max length 256
            characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the portfolio
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the portfolio (optional, max length 256 characters)
          example: My Portfolio Updated
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the portfolio (active, inactive, pending)
          type: object
      type: object
    UpdateSegmentInput:
      description: UpdateSegmentInput is the input payload to update an existing segment's
        properties such as name, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: My Segment Updated
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the segment
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the segment (optional, max length 256 characters)
          example: My Segment Updated
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the segment (active, inactive, pending)
          type: object
      type: object
    inline_response_200:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - legalName: Lerian Studio
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address: '{}'
          doingBusinessAs: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "00000000000000"
          parentOrganizationId: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - legalName: Lerian Studio
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address: '{}'
          doingBusinessAs: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "00000000000000"
          parentOrganizationId: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_1:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Lerian Studio
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Ledger'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_2:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - metadata:
            key: '{}'
          assetCode: BRL
          entityId: 00000000-0000-0000-0000-000000000000
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          segmentId: 00000000-0000-0000-0000-000000000000
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - metadata:
            key: '{}'
          assetCode: BRL
          entityId: 00000000-0000-0000-0000-000000000000
          type: creditCard
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          segmentId: 00000000-0000-0000-0000-000000000000
          name: My Account
          alias: '@person1'
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Account'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_3:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: BRL
          name: Brazilian Real
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: BRL
          name: Brazilian Real
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_4:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Portfolio'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_5:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Segment
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Segment
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Segment'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
x-original-swagger-version: "2.0"
