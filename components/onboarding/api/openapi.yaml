openapi: 3.0.1
info:
  contact:
    name: Discord community
    url: https://discord.gg/DnhqKwkGv3
  description: This is a swagger documentation for the Midaz Ledger API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Midaz Onboarding API
  version: v1.48.0
servers:
- url: //localhost:3000/
paths:
  /v1/organizations:
    get:
      description: Returns a paginated list of organizations, optionally filtered
        by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: JSON string to filter organizations by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter organizations created on or after this date (format:
          YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter organizations created on or before this date (format:
          YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: Successfully retrieved organizations list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all organizations
      tags:
      - Organizations
    post:
      description: Creates a new organization with the provided details including
        legal name, legal document, and optional address information
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationInput'
        description: Organization details including legal name, legal document, and
          optional address information
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully created organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/metrics/count:
    head:
      description: Returns the total count of organizations as a header without a
        response body
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: No content with X-Total-Count header containing the count
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count total organizations
      tags:
      - Organizations
  /v1/organizations/{id}:
    delete:
      description: 'Permanently removes an organization identified by its UUID. Note:
        This operation is not available in production environments.'
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: Organization successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden action or not permitted in production environment
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Cannot delete organization with dependent resources'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an organization
      tags:
      - Organizations
    get:
      description: Returns detailed information about an organization identified by
        its UUID
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully retrieved organization
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific organization
      tags:
      - Organizations
    patch:
      description: Updates an organization's information such as legal name, address,
        or status. Only supplied fields will be updated.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationInput'
        description: Organization fields to update. Only supplied fields will be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully updated organization
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an existing organization
      tags:
      - Organizations
      x-codegen-request-body-name: organization
  /v1/organizations/{organization_id}/ledgers:
    get:
      description: Returns a paginated list of ledgers within the specified organization,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: JSON string to filter ledgers by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter ledgers created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter ledgers created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Successfully retrieved ledgers list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all ledgers
      tags:
      - Ledgers
    post:
      description: Creates a new ledger within the specified organization. A ledger
        is a financial record-keeping system for tracking assets, accounts, and transactions.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLedgerInput'
        description: Ledger details including name, status, and optional metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully created ledger
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/metrics/count:
    head:
      description: Returns the total count of ledgers for a specific organization
        as a header without a response body
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: No content with X-Total-Count header containing the count
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count total ledgers
      tags:
      - Ledgers
  /v1/organizations/{organization_id}/ledgers/{id}:
    delete:
      description: 'Permanently removes a ledger identified by its UUID. Note: This
        operation is not available in production environments.'
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: Ledger successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden action or not permitted in production environment
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Cannot delete ledger with dependent resources'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a ledger
      tags:
      - Ledgers
    get:
      description: Returns detailed information about a ledger identified by its UUID
        within the specified organization
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully retrieved ledger
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific ledger
      tags:
      - Ledgers
    patch:
      description: Updates a ledger's information such as name, status, or metadata.
        Only supplied fields will be updated.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLedgerInput'
        description: Ledger fields to update. Only supplied fields will be modified.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ledger'
          description: Successfully updated ledger
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Ledger or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an existing ledger
      tags:
      - Ledgers
      x-codegen-request-body-name: ledger
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts:
    get:
      description: Returns a paginated list of accounts within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter accounts by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter accounts created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter accounts created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Successfully retrieved accounts list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all accounts
      tags:
      - Accounts
    post:
      description: Creates a new account within the specified ledger. Accounts represent
        individual financial entities like bank accounts, credit cards, or expense
        categories.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountInput'
        description: Account details including name, type, asset code, and optional
          parent account, portfolio, segment, and metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully created account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization, ledger, parent account, portfolio, or segment
            not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account with the same alias already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}:
    get:
      description: Returns detailed information about an account identified by its
        alias within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account alias (e.g. @person1)
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully retrieved account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account with the specified alias, ledger, or organization not
            found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve an account by alias
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/external/{code}:
    get:
      description: Returns detailed information about an account identified by its
        alias within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account External Code (e.g. BRL)
        in: path
        name: code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully retrieved account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account with the specified alias, ledger, or organization not
            found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve an account by alias
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/metrics/count:
    head:
      description: Returns the total count of accounts for the specified organization,
        ledger, and optional portfolio
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successfully retrieved accounts count
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count accounts
      tags:
      - Accounts
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}:
    delete:
      description: Permanently removes an account from the specified ledger. This
        operation cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Account successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an account
      tags:
      - Accounts
    get:
      description: Returns detailed information about an account identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully retrieved account
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific account
      tags:
      - Accounts
    patch:
      description: Updates an existing account's properties such as name, status,
        portfolio, segment, and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Account ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInput'
        description: Account properties to update including name, status, portfolio,
          segment, and optional metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Successfully updated account
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Account, ledger, organization, portfolio, or segment not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Account with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an account
      tags:
      - Accounts
      x-codegen-request-body-name: account
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets:
    get:
      description: Returns a paginated list of assets within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter assets by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter assets created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter assets created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Successfully retrieved assets list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all assets
      tags:
      - Assets
    post:
      description: Creates a new asset within the specified ledger. Assets represent
        currencies, cryptocurrencies, commodities, or other financial instruments
        tracked in the ledger.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetInput'
        description: Asset details including name, code, type, status, and optional
          metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully created asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset with the same name or code already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/metrics/count:
    head:
      description: Returns the total count of assets for a specific ledger in an organization
        as a header without a response body
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                type: string
          description: No content with X-Total-Count header containing the count
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count total assets
      tags:
      - Assets
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}:
    delete:
      description: Permanently removes an asset from the specified ledger. This operation
        cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Asset successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete an asset
      tags:
      - Assets
    get:
      description: Returns detailed information about an asset identified by its UUID
        within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully retrieved asset
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific asset
      tags:
      - Assets
    patch:
      description: Updates an existing asset's properties such as name, status, and
        metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Asset ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetInput'
        description: Asset properties to update including name, status, and optional
          metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Successfully updated asset
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Asset, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Asset with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update an asset
      tags:
      - Assets
      x-codegen-request-body-name: asset
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios:
    get:
      description: Returns a paginated list of portfolios within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter portfolios by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter portfolios created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter portfolios created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Successfully retrieved portfolios list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all portfolios
      tags:
      - Portfolios
    post:
      description: Creates a new portfolio within the specified ledger. Portfolios
        represent collections of accounts grouped for specific purposes such as business
        units, departments, or client portfolios.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioInput'
        description: Portfolio details including name, optional entity ID, status,
          and metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully created portfolio
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/metrics/count:
    head:
      description: Returns the total count of portfolios for a specific organization
        and ledger as a header without a response body
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Successfully counted portfolios, total count available in X-Total-Count
            header
        "400":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid UUID format
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count total portfolios
      tags:
      - Portfolios
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}:
    delete:
      description: Permanently removes a portfolio from the specified ledger. This
        operation cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Portfolio successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a portfolio
      tags:
      - Portfolios
    get:
      description: Returns detailed information about a portfolio identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully retrieved portfolio
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific portfolio
      tags:
      - Portfolios
    patch:
      description: Updates an existing portfolio's properties such as name, entity
        ID, status, and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Portfolio ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioInput'
        description: Portfolio properties to update including name, entity ID, status,
          and optional metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
          description: Successfully updated portfolio
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Portfolio, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Portfolio with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update a portfolio
      tags:
      - Portfolios
      x-codegen-request-body-name: portfolio
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/segments:
    get:
      description: Returns a paginated list of segments within the specified ledger,
        optionally filtered by metadata, date range, and other criteria
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: JSON string to filter segments by metadata fields
        in: query
        name: metadata
        schema:
          type: string
      - description: Maximum number of records to return per page
        in: query
        name: limit
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: Page number for pagination
        in: query
        name: page
        schema:
          default: 1
          minimum: 1
          type: integer
      - description: 'Filter segments created on or after this date (format: YYYY-MM-DD)'
        in: query
        name: start_date
        schema:
          type: string
      - description: 'Filter segments created on or before this date (format: YYYY-MM-DD)'
        in: query
        name: end_date
        schema:
          type: string
      - description: Sort direction for results based on creation date
        in: query
        name: sort_order
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Successfully retrieved segments list
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid query parameters
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: List all segments
      tags:
      - Segments
    post:
      description: Creates a new segment within the specified ledger. Segments represent
        logical divisions within a ledger, such as business areas, product lines,
        or customer categories.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentInput'
        description: Segment details including name, status, and optional metadata
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully created segment
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new segment
      tags:
      - Segments
      x-codegen-request-body-name: segment
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/metrics/count:
    head:
      description: Returns the total count of segments for the specified organization
        and ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Successfully retrieved segments count
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization or ledger not found
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Count segments
      tags:
      - Segments
  /v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}:
    delete:
      description: Permanently removes a segment from the specified ledger. This operation
        cannot be undone.
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Segment successfully deleted
        "401":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "409":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment cannot be deleted due to existing dependencies'
        "500":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Delete a segment
      tags:
      - Segments
    get:
      description: Returns detailed information about a segment identified by its
        UUID within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully retrieved segment
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve a specific segment
      tags:
      - Segments
    patch:
      description: Updates an existing segment's properties such as name, status,
        and metadata within the specified ledger
      parameters:
      - description: 'Authorization Bearer Token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Request ID for tracing
        in: header
        name: X-Request-Id
        schema:
          type: string
      - description: Organization ID in UUID format
        in: path
        name: organization_id
        required: true
        schema:
          type: string
      - description: Ledger ID in UUID format
        in: path
        name: ledger_id
        required: true
        schema:
          type: string
      - description: Segment ID in UUID format
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSegmentInput'
        description: Segment properties to update including name, status, and optional
          metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Segment'
          description: Successfully updated segment
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input, validation errors
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Segment, ledger, or organization not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 'Conflict: Segment with the same name already exists'
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Update a segment
      tags:
      - Segments
      x-codegen-request-body-name: segment
components:
  schemas:
    Account:
      description: Complete account entity containing all fields including system-generated
        fields like ID, creation timestamps, and metadata. This is the response format
        for account operations. Accounts represent individual financial entities (bank
        accounts, cards, expense categories, etc.) within a ledger and are the primary
        structures for tracking balances and transactions.
      example:
        metadata:
          key: '{}'
        assetCode: USD
        entityId: EXT-ACC-12345
        type: deposit
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        parentAccountId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        portfolioId: 00000000-0000-0000-0000-000000000000
        segmentId: 00000000-0000-0000-0000-000000000000
        name: Corporate Checking Account
        alias: '@treasury_checking'
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        alias:
          description: |-
            Unique alias for the account (makes referencing easier)
            example: @treasury_checking
            maxLength: 100
          example: '@treasury_checking'
          maxLength: 100
          type: string
        assetCode:
          description: |-
            Asset code associated with this account (determines currency/asset type)
            example: USD
            maxLength: 100
          example: USD
          maxLength: 100
          type: string
        createdAt:
          description: |-
            Timestamp when the account was created (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: |-
            Timestamp when the account was soft deleted, null if not deleted (RFC3339 format)
            example: null
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        entityId:
          description: |-
            Optional external identifier for linking to external systems
            example: EXT-ACC-12345
            maxLength: 256
          example: EXT-ACC-12345
          maxLength: 256
          type: string
        id:
          description: |-
            Unique identifier for the account (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: |-
            ID of the ledger this account belongs to (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the account information
            example: {"department": "Treasury", "purpose": "Operating Expenses", "region": "Global"}
          type: object
        name:
          description: |-
            Human-readable name of the account
            example: Corporate Checking Account
            maxLength: 256
          example: Corporate Checking Account
          maxLength: 256
          type: string
        organizationId:
          description: |-
            ID of the organization that owns this account (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        parentAccountId:
          description: |-
            ID of the parent account if this is a sub-account (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        portfolioId:
          description: |-
            ID of the portfolio this account belongs to (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        segmentId:
          description: |-
            ID of the segment this account belongs to (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the account
          type: object
        type:
          description: |-
            Type of the account.
            example: deposit
          example: deposit
          type: string
        updatedAt:
          description: |-
            Timestamp when the account was last updated (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Address:
      description: Structured address information following standard postal address
        format. Country field follows ISO 3166-1 alpha-2 standard (2-letter country
        codes). Used for organization physical locations and other address needs.
      properties:
        city:
          description: |-
            City or locality name
            example: New York
            maxLength: 100
          example: New York
          maxLength: 100
          type: string
        country:
          description: |-
            Country code in ISO 3166-1 alpha-2 format (two-letter country code)
            example: US
            minLength: 2
            maxLength: 2
          example: US
          maxLength: 2
          minLength: 2
          type: string
        line1:
          description: |-
            Primary address line (street address or PO Box)
            example: 123 Financial Avenue
            maxLength: 256
          example: 123 Financial Avenue
          maxLength: 256
          type: string
        line2:
          description: |-
            Secondary address information like apartment number, suite, or floor
            example: Suite 1500
            maxLength: 256
          example: Suite 1500
          maxLength: 256
          type: string
        state:
          description: |-
            State, province, or region name or code
            example: NY
            maxLength: 100
          example: NY
          maxLength: 100
          type: string
        zipCode:
          description: |-
            Postal code or ZIP code
            example: 10001
            maxLength: 20
          example: "10001"
          maxLength: 20
          type: string
      type: object
    Asset:
      description: Asset represents a financial instrument within a ledger, such as
        a currency, cryptocurrency, commodity, or other asset type.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        code: USD
        name: US Dollar
        id: 00000000-0000-0000-0000-000000000000
        type: currency
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        code:
          description: Unique code/symbol for the asset (max length 100 characters)
          example: USD
          maxLength: 100
          type: string
        createdAt:
          description: Timestamp when the asset was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the asset was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the asset (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this asset belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the asset
          type: object
        name:
          description: Name of the asset (max length 256 characters)
          example: US Dollar
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this asset (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the asset (active, inactive, pending)
          type: object
        type:
          description: Type of the asset (e.g., currency, cryptocurrency, commodity,
            stock)
          example: currency
          type: string
        updatedAt:
          description: Timestamp when the asset was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    CreateAccountInput:
      description: Request payload for creating a new account within a ledger. Accounts
        represent individual financial entities such as bank accounts, credit cards,
        expense categories, or any other financial buckets within a ledger. Accounts
        are identified by a unique ID, can have aliases for easy reference, and are
        associated with a specific asset type.
      example:
        parentAccountId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        metadata:
          key: '{}'
        assetCode: USD
        portfolioId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        segmentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: Corporate Checking Account
        alias: '@treasury_checking'
        entityId: EXT-ACC-12345
        type: deposit
        status: '{}'
      properties:
        alias:
          description: |-
            Unique alias for the account (optional, must follow alias format rules)
            required: false
            example: @treasury_checking
            maxLength: 100
          example: '@treasury_checking'
          maxLength: 100
          type: string
        assetCode:
          description: |-
            Asset code that this account will use for balances and transactions
            required: true
            example: USD
            maxLength: 100
          example: USD
          maxLength: 100
          type: string
        entityId:
          description: |-
            Optional external identifier for linking to external systems
            required: false
            example: EXT-ACC-12345
            maxLength: 256
          example: EXT-ACC-12345
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the account information
            required: false
            example: {"department": "Treasury", "purpose": "Operating Expenses", "region": "Global"}
          type: object
        name:
          description: |-
            Human-readable name of the account
            required: false
            example: Corporate Checking Account
            maxLength: 256
          example: Corporate Checking Account
          maxLength: 256
          type: string
        parentAccountId:
          description: |-
            ID of the parent account if this is a subaccount (optional)
            required: false
            format: uuid
          format: uuid
          type: string
        portfolioId:
          description: |-
            ID of the portfolio this account belongs to (optional)
            required: false
            format: uuid
          format: uuid
          type: string
        segmentId:
          description: |-
            ID of the segment this account belongs to (optional)
            required: false
            format: uuid
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Current operating status of the account
            required: false
          type: object
        type:
          description: |-
            Type of the account
            required: true
            example: deposit
            maxLength: 256
          example: deposit
          maxLength: 256
          type: string
      required:
      - assetCode
      - type
      type: object
    CreateAssetInput:
      description: CreateAssetInput is the input payload to create an asset within
        a ledger, such as a currency, cryptocurrency, or other financial instrument.
      example:
        metadata:
          key: '{}'
        code: USD
        name: US Dollar
        type: currency
        status: '{}'
      properties:
        code:
          description: Unique code/symbol for the asset (required, max length 100
            characters)
          example: USD
          maxLength: 100
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the asset
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the asset (required, max length 256 characters)
          example: US Dollar
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the asset (active, inactive, pending)
          type: object
        type:
          description: Type of the asset (e.g., currency, cryptocurrency, commodity,
            stock)
          example: currency
          type: string
      required:
      - code
      - name
      - type
      type: object
    CreateLedgerInput:
      description: Request payload for creating a new ledger. Contains the ledger
        name (required), status, and optional metadata. Ledgers are organizational
        units within an organization that group related financial accounts and assets
        together.
      example:
        metadata:
          key: '{}'
        name: name
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the ledger information
            required: false
            example: {"department": "Finance", "currency": "USD", "region": "North America"}
          type: object
        name:
          description: |-
            Display name of the ledger
            required: true
            maxLength: 256
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Current operating status of the ledger (defaults to ACTIVE if not specified)
            required: false
          type: object
      required:
      - name
      type: object
    CreateOrganizationInput:
      description: Request payload for creating a new organization. Contains all the
        necessary fields for organization creation, with required fields marked as
        such. Organizations are the top-level entities in the hierarchy and contain
        ledgers, which in turn contain accounts and assets.
      example:
        legalName: Lerian Financial Services Ltd.
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: Lerian FS
        legalDocument: "123456789012345"
        parentOrganizationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: '{}'
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: |-
            Physical address of the organization
            required: false
          type: object
        doingBusinessAs:
          description: |-
            Trading or brand name of the organization, if different from legal name
            required: false
            example: Lerian FS
            maxLength: 256
          example: Lerian FS
          maxLength: 256
          type: string
        legalDocument:
          description: |-
            Official tax ID, company registration number, or other legal identification
            required: true
            example: 123456789012345
            maxLength: 256
          example: "123456789012345"
          maxLength: 256
          type: string
        legalName:
          description: |-
            Official legal name of the organization
            required: true
            example: Lerian Financial Services Ltd.
            maxLength: 256
          example: Lerian Financial Services Ltd.
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the organization information
            required: false
            example: {"industry": "Financial Services", "founded": 2020, "employees": 150}
          type: object
        parentOrganizationId:
          description: |-
            UUID of the parent organization if this is a child organization
            required: false
            format: uuid
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Current operating status of the organization (defaults to ACTIVE if not specified)
            required: false
          type: object
      required:
      - legalDocument
      - legalName
      type: object
    CreatePortfolioInput:
      description: CreatePortfolioInput is the input payload to create a portfolio
        within a ledger, representing a collection of accounts grouped for specific
        purposes.
      example:
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the portfolio
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the portfolio (required, max length 256 characters)
          example: My Portfolio
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the portfolio (active, inactive, pending)
          type: object
      required:
      - name
      type: object
    CreateSegmentInput:
      description: CreateSegmentInput is the input payload to create a segment within
        a ledger, representing a logical division such as a business area, product
        line, or customer category.
      example:
        metadata:
          key: '{}'
        name: My Segment
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Additional custom attributes for the segment
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Name of the segment (required, max length 256 characters)
          example: My Segment
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the segment (active, inactive, pending)
          type: object
      required:
      - name
      type: object
    Error:
      description: Standardized error response format used across all API endpoints
        for error situations. Provides structured information about errors including
        codes, messages, and field-specific validation details.
      properties:
        code:
          description: |-
            Error code identifying the specific error condition
            example: ERR_INVALID_INPUT
            maxLength: 50
          example: ERR_INVALID_INPUT
          maxLength: 50
          type: string
        entityType:
          description: |-
            Optional type of entity associated with the error
            example: Organization
            maxLength: 100
          example: Organization
          maxLength: 100
          type: string
        fields:
          additionalProperties:
            type: string
          description: |-
            Optional detailed field validations for client-side handling
            example: {"name": "Field 'name' is required"}
          example:
            '{"name"': ' "Field ''name'' is required"}'
          type: object
        message:
          description: |-
            Detailed error message explaining the issue
            example: The request contains invalid fields. Please check the field 'name' and try again.
            maxLength: 500
          example: The request contains invalid fields. Please check the field 'name'
            and try again.
          maxLength: 500
          type: string
        title:
          description: |-
            Short, human-readable error title
            example: Bad Request
            maxLength: 100
          example: Bad Request
          maxLength: 100
          type: string
      type: object
    Ledger:
      description: Complete ledger entity containing all fields including system-generated
        fields like ID, creation timestamps, and metadata. This is the response format
        for ledger operations. Ledgers are organizational units within an organization
        that group related financial accounts and assets together.
      example:
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: Treasury Operations
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: |-
            Timestamp when the ledger was created (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: |-
            Timestamp when the ledger was soft deleted, null if not deleted (RFC3339 format)
            example: null
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: |-
            Unique identifier for the ledger (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the ledger information
            example: {"department": "Finance", "currency": "USD", "region": "North America"}
          type: object
        name:
          description: |-
            Display name of the ledger
            example: Treasury Operations
            maxLength: 256
          example: Treasury Operations
          maxLength: 256
          type: string
        organizationId:
          description: |-
            Reference to the organization that owns this ledger (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the ledger
          type: object
        updatedAt:
          description: |-
            Timestamp when the ledger was last updated (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Organization:
      description: Complete organization entity containing all fields including system-generated
        fields like ID, creation timestamps, and metadata. This is the response format
        for organization operations. Organizations are the top-level entities in the
        Midaz platform hierarchy.
      example:
        legalName: Lerian Financial Services Ltd.
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: Lerian FS
        id: 00000000-0000-0000-0000-000000000000
        legalDocument: "123456789012345"
        parentOrganizationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: Physical address of the organization
          type: object
        createdAt:
          description: |-
            Timestamp when the organization was created (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: |-
            Timestamp when the organization was soft deleted, null if not deleted (RFC3339 format)
            example: null
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        doingBusinessAs:
          description: |-
            Trading or brand name of the organization, if different from legal name
            example: Lerian FS
            maxLength: 256
          example: Lerian FS
          maxLength: 256
          type: string
        id:
          description: |-
            Unique identifier for the organization (UUID format)
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        legalDocument:
          description: |-
            Official tax ID, company registration number, or other legal identification
            example: 123456789012345
            maxLength: 256
          example: "123456789012345"
          maxLength: 256
          type: string
        legalName:
          description: |-
            Official legal name of the organization
            example: Lerian Financial Services Ltd.
            maxLength: 256
          example: Lerian Financial Services Ltd.
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Custom key-value pairs for extending the organization information
            example: {"industry": "Financial Services", "founded": 2020, "employees": 150}
          type: object
        parentOrganizationId:
          description: |-
            Reference to the parent organization, if this is a child organization
            example: 00000000-0000-0000-0000-000000000000
            format: uuid
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Current operating status of the organization
          type: object
        updatedAt:
          description: |-
            Timestamp when the organization was last updated (RFC3339 format)
            example: 2021-01-01T00:00:00Z
            format: date-time
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Pagination:
      description: Pagination is the struct designed to store the pagination data
        of an entity list.
      example:
        prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
        limit: 10
        page: 1
        items: '{}'
      properties:
        items:
          type: object
        limit:
          example: 10
          type: integer
        next_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
        page:
          example: 1
          type: integer
        prev_cursor:
          example: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          type: string
          x-omitempty: true
      type: object
    Portfolio:
      description: Portfolio represents a collection of accounts grouped for specific
        purposes such as business units, departments, or client portfolios.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Portfolio
        entityId: 00000000-0000-0000-0000-000000000000
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: Timestamp when the portfolio was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the portfolio was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        entityId:
          description: Optional external entity identifier (max length 256 characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        id:
          description: Unique identifier for the portfolio (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this portfolio belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the portfolio
          type: object
        name:
          description: Name of the portfolio (max length 256 characters)
          example: My Portfolio
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this portfolio (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the portfolio (active, inactive, pending)
          type: object
        updatedAt:
          description: Timestamp when the portfolio was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Segment:
      description: Segment represents a logical division within a ledger such as a
        business area, product line, or customer category.
      example:
        ledgerId: 00000000-0000-0000-0000-000000000000
        organizationId: 00000000-0000-0000-0000-000000000000
        createdAt: 2021-01-01T00:00:00Z
        deletedAt: 2021-01-01T00:00:00Z
        metadata:
          key: '{}'
        name: My Segment
        id: 00000000-0000-0000-0000-000000000000
        status: '{}'
        updatedAt: 2021-01-01T00:00:00Z
      properties:
        createdAt:
          description: Timestamp when the segment was created
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        deletedAt:
          description: Timestamp when the segment was deleted (null if not deleted)
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
        id:
          description: Unique identifier for the segment (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        ledgerId:
          description: ID of the ledger this segment belongs to (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        metadata:
          additionalProperties:
            type: object
          description: Additional custom attributes for the segment
          type: object
        name:
          description: Name of the segment (max length 256 characters)
          example: My Segment
          maxLength: 256
          type: string
        organizationId:
          description: ID of the organization that owns this segment (UUID format)
          example: 00000000-0000-0000-0000-000000000000
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Status of the segment (active, inactive, pending)
          type: object
        updatedAt:
          description: Timestamp when the segment was last updated
          example: 2021-01-01T00:00:00Z
          format: date-time
          type: string
      type: object
    Status:
      description: 'Entity status information with a standardized code and optional
        description. Common status codes include: ACTIVE, INACTIVE, PENDING, SUSPENDED,
        DELETED.'
      properties:
        code:
          description: 'Status code identifier, common values include: ACTIVE, INACTIVE,
            PENDING, SUSPENDED, DELETED'
          example: ACTIVE
          maxLength: 100
          type: string
        description:
          description: Optional human-readable description of the status
          example: Active status
          maxLength: 256
          type: string
      type: object
    UpdateAccountInput:
      description: Request payload for updating an existing account. All fields are
        optional - only specified fields will be updated. Omitted fields will remain
        unchanged. This allows partial updates to account properties such as name,
        status, portfolio, segment, and metadata.
      example:
        metadata:
          key: '{}'
        portfolioId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        segmentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: Primary Corporate Checking Account
        entityId: EXT-ACC-12345
        status: '{}'
      properties:
        entityId:
          description: |-
            Optional external identifier for linking to external systems
            required: false
            example: EXT-ACC-12345
            maxLength: 256
          example: EXT-ACC-12345
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated custom key-value pairs for extending the account information
            required: false
            example: {"department": "Global Treasury", "purpose": "Primary Operations", "region": "Global"}
          type: object
        name:
          description: |-
            Updated name of the account
            required: false
            example: Primary Corporate Checking Account
            maxLength: 256
          example: Primary Corporate Checking Account
          maxLength: 256
          type: string
        portfolioId:
          description: |-
            Updated portfolio ID for the account
            required: false
            format: uuid
          format: uuid
          type: string
        segmentId:
          description: |-
            Updated segment ID for the account
            required: false
            format: uuid
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Updated status of the account
            required: false
          type: object
      type: object
    UpdateAssetInput:
      description: UpdateAssetInput is the input payload to update an existing asset's
        properties such as name, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: Bitcoin
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the asset
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the asset (optional, max length 256 characters)
          example: Bitcoin
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the asset (active, inactive, pending)
          type: object
      type: object
    UpdateLedgerInput:
      description: Request payload for updating an existing ledger. All fields are
        optional - only specified fields will be updated. Omitted fields will remain
        unchanged.
      example:
        metadata:
          key: '{}'
        name: Treasury Operations Global
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated custom key-value pairs for extending the ledger information
            required: false
            example: {"department": "Global Finance", "currency": "USD", "region": "Global"}
          type: object
        name:
          description: |-
            Updated display name of the ledger
            required: false
            example: Treasury Operations Global
            maxLength: 256
          example: Treasury Operations Global
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Updated status of the ledger
            required: false
          type: object
      type: object
    UpdateOrganizationInput:
      description: Request payload for updating an existing organization. All fields
        are optional - only specified fields will be updated. Omitted fields will
        remain unchanged.
      example:
        legalName: Lerian Financial Group Ltd.
        metadata:
          key: '{}'
        address: '{}'
        doingBusinessAs: Lerian Group
        parentOrganizationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        status: '{}'
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: |-
            Updated physical address of the organization
            required: false
          type: object
        doingBusinessAs:
          description: |-
            Updated trading or brand name of the organization
            required: false
            example: Lerian Group
            maxLength: 256
          example: Lerian Group
          maxLength: 256
          type: string
        legalName:
          description: |-
            Updated legal name of the organization
            required: false
            example: Lerian Financial Group Ltd.
            maxLength: 256
          example: Lerian Financial Group Ltd.
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated custom key-value pairs for extending the organization information
            required: false
            example: {"industry": "Financial Technology", "founded": 2020, "employees": 200, "headquarters": "New York"}
          type: object
        parentOrganizationId:
          description: |-
            Updated UUID of the parent organization if this is a child organization
            required: false
            format: uuid
          format: uuid
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: |-
            Updated status of the organization
            required: false
          type: object
      type: object
    UpdatePortfolioInput:
      description: UpdatePortfolioInput is the input payload to update an existing
        portfolio's properties such as name, entity ID, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: My Portfolio Updated
        entityId: 00000000-0000-0000-0000-000000000000
        status: '{}'
      properties:
        entityId:
          description: Updated external entity identifier (optional, max length 256
            characters)
          example: 00000000-0000-0000-0000-000000000000
          maxLength: 256
          type: string
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the portfolio
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the portfolio (optional, max length 256 characters)
          example: My Portfolio Updated
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the portfolio (active, inactive, pending)
          type: object
      type: object
    UpdateSegmentInput:
      description: UpdateSegmentInput is the input payload to update an existing segment's
        properties such as name, status, and metadata.
      example:
        metadata:
          key: '{}'
        name: My Segment Updated
        status: '{}'
      properties:
        metadata:
          additionalProperties:
            type: object
          description: |-
            Updated or additional custom attributes for the segment
            Keys max length: 100 characters, Values max length: 2000 characters
          type: object
        name:
          description: Updated name of the segment (optional, max length 256 characters)
          example: My Segment Updated
          maxLength: 256
          type: string
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: Updated status of the segment (active, inactive, pending)
          type: object
      type: object
    inline_response_200:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - legalName: Lerian Financial Services Ltd.
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address: '{}'
          doingBusinessAs: Lerian FS
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "123456789012345"
          parentOrganizationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - legalName: Lerian Financial Services Ltd.
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          address: '{}'
          doingBusinessAs: Lerian FS
          id: 00000000-0000-0000-0000-000000000000
          legalDocument: "123456789012345"
          parentOrganizationId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_1:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Treasury Operations
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: Treasury Operations
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Ledger'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_2:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - metadata:
            key: '{}'
          assetCode: USD
          entityId: EXT-ACC-12345
          type: deposit
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          segmentId: 00000000-0000-0000-0000-000000000000
          name: Corporate Checking Account
          alias: '@treasury_checking'
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - metadata:
            key: '{}'
          assetCode: USD
          entityId: EXT-ACC-12345
          type: deposit
          ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          parentAccountId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          portfolioId: 00000000-0000-0000-0000-000000000000
          segmentId: 00000000-0000-0000-0000-000000000000
          name: Corporate Checking Account
          alias: '@treasury_checking'
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Account'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_3:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: USD
          name: US Dollar
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          code: USD
          name: US Dollar
          id: 00000000-0000-0000-0000-000000000000
          type: currency
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_4:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Portfolio
          entityId: 00000000-0000-0000-0000-000000000000
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Portfolio'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
    inline_response_200_5:
      example:
        Pagination:
          prev_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          next_cursor: MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==
          limit: 10
          page: 1
          items: '{}'
        limit: 0
        page: 6
        items:
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Segment
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
        - ledgerId: 00000000-0000-0000-0000-000000000000
          organizationId: 00000000-0000-0000-0000-000000000000
          createdAt: 2021-01-01T00:00:00Z
          deletedAt: 2021-01-01T00:00:00Z
          metadata:
            key: '{}'
          name: My Segment
          id: 00000000-0000-0000-0000-000000000000
          status: '{}'
          updatedAt: 2021-01-01T00:00:00Z
      properties:
        Pagination:
          $ref: '#/components/schemas/Pagination'
        items:
          items:
            $ref: '#/components/schemas/Segment'
          type: array
        limit:
          type: integer
        page:
          type: integer
      type: object
x-original-swagger-version: "2.0"
