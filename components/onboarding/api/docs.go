// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Discord community",
            "url": "https://discord.gg/DnhqKwkGv3"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/organizations": {
            "get": {
                "description": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List all organizations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter organizations by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved organizations list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Organization"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "description": "Organization details including legal name, legal document, and optional address information",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created organization",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}": {
            "get": {
                "description": "Returns detailed information about an organization identified by its UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Retrieve a specific organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved organization",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments.",
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Organization successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden action or not permitted in production environment",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Cannot delete organization with dependent resources",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update an existing organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization fields to update. Only supplied fields will be modified.",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrganizationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated organization",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers": {
            "get": {
                "description": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "List all ledgers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter ledgers by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved ledgers list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Ledger"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Create a new ledger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ledger details including name, status, and optional metadata",
                        "name": "ledger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateLedgerInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created ledger",
                        "schema": {
                            "$ref": "#/definitions/Ledger"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{id}": {
            "get": {
                "description": "Returns detailed information about a ledger identified by its UUID within the specified organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Retrieve a specific ledger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved ledger",
                        "schema": {
                            "$ref": "#/definitions/Ledger"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Ledger or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments.",
                "tags": [
                    "Ledgers"
                ],
                "summary": "Delete a ledger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Ledger successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden action or not permitted in production environment",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Ledger or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Cannot delete ledger with dependent resources",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ledgers"
                ],
                "summary": "Update an existing ledger",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ledger fields to update. Only supplied fields will be modified.",
                        "name": "ledger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateLedgerInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated ledger",
                        "schema": {
                            "$ref": "#/definitions/Ledger"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Ledger or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts": {
            "get": {
                "description": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List all accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter accounts by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved accounts list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Account"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Create a new account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Account details including name, type, asset code, and optional parent account, portfolio, segment, and metadata",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAccountInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization, ledger, parent account, portfolio, or segment not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Account with the same alias already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}": {
            "get": {
                "description": "Returns detailed information about an account identified by its alias within the specified ledger",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Retrieve an account by alias",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account alias (e.g. @person1)",
                        "name": "alias",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account with the specified alias, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}": {
            "get": {
                "description": "Returns detailed information about an account identified by its UUID within the specified ledger",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Retrieve a specific account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes an account from the specified ledger. This operation cannot be undone.",
                "tags": [
                    "Accounts"
                ],
                "summary": "Delete an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Account successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Account cannot be deleted due to existing dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Update an account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Account ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Account properties to update including name, status, portfolio, segment, and optional metadata",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAccountInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Account, ledger, organization, portfolio, or segment not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Account with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets": {
            "get": {
                "description": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "List all assets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter assets by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved assets list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Asset"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Create a new asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Asset details including name, code, type, status, and optional metadata",
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateAssetInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Asset with the same name or code already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}": {
            "get": {
                "description": "Returns detailed information about an asset identified by its UUID within the specified ledger",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Retrieve a specific asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Asset ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Asset, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes an asset from the specified ledger. This operation cannot be undone.",
                "tags": [
                    "Assets"
                ],
                "summary": "Delete an asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Asset ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Asset successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Asset, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Asset cannot be deleted due to existing dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assets"
                ],
                "summary": "Update an asset",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Asset ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Asset properties to update including name, status, and optional metadata",
                        "name": "asset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAssetInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated asset",
                        "schema": {
                            "$ref": "#/definitions/Asset"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Asset, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Asset with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios": {
            "get": {
                "description": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "List all portfolios",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter portfolios by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved portfolios list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Portfolio"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Create a new portfolio",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Portfolio details including name, optional entity ID, status, and metadata",
                        "name": "portfolio",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreatePortfolioInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Portfolio with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}": {
            "get": {
                "description": "Returns detailed information about a portfolio identified by its UUID within the specified ledger",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Retrieve a specific portfolio",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Portfolio ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Portfolio, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone.",
                "tags": [
                    "Portfolios"
                ],
                "summary": "Delete a portfolio",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Portfolio ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Portfolio successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Portfolio, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Portfolio cannot be deleted due to existing dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Portfolios"
                ],
                "summary": "Update a portfolio",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Portfolio ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Portfolio properties to update including name, entity ID, status, and optional metadata",
                        "name": "portfolio",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdatePortfolioInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Portfolio, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Portfolio with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments": {
            "get": {
                "description": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "List all segments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON string to filter segments by metadata fields",
                        "name": "metadata",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Maximum number of records to return per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort direction for results based on creation date",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved segments list",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/Pagination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/Segment"
                                            }
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "page": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Create a new segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Segment details including name, status, and optional metadata",
                        "name": "segment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateSegmentInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created segment",
                        "schema": {
                            "$ref": "#/definitions/Segment"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Organization or ledger not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Segment with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}": {
            "get": {
                "description": "Returns detailed information about a segment identified by its UUID within the specified ledger",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Retrieve a specific segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Segment ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved segment",
                        "schema": {
                            "$ref": "#/definitions/Segment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Segment, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently removes a segment from the specified ledger. This operation cannot be undone.",
                "tags": [
                    "Segments"
                ],
                "summary": "Delete a segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Segment ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Segment successfully deleted"
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Segment, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Segment cannot be deleted due to existing dependencies",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Segments"
                ],
                "summary": "Update a segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Bearer Token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID for tracing",
                        "name": "X-Request-Id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID in UUID format",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ledger ID in UUID format",
                        "name": "ledger_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Segment ID in UUID format",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Segment properties to update including name, status, and optional metadata",
                        "name": "segment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateSegmentInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated segment",
                        "schema": {
                            "$ref": "#/definitions/Segment"
                        }
                    },
                    "400": {
                        "description": "Invalid input, validation errors",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden access",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Segment, ledger, or organization not found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict: Segment with the same name already exists",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Account": {
            "description": "Account represents an individual financial entity within a ledger, such as a bank account, credit card, or expense category.",
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Unique alias for the account (max length 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "@person1"
                },
                "assetCode": {
                    "description": "Asset code associated with this account (max length 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "BRL"
                },
                "createdAt": {
                    "description": "Timestamp when the account was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the account was deleted (null if not deleted)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "entityId": {
                    "description": "Optional external entity identifier (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "id": {
                    "description": "Unique identifier for the account (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "description": "ID of the ledger this account belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the account",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the account (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Account"
                },
                "organizationId": {
                    "description": "ID of the organization that owns this account (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "parentAccountId": {
                    "description": "ID of the parent account if this is a sub-account (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "portfolioId": {
                    "description": "ID of the portfolio this account belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "segmentId": {
                    "description": "ID of the segment this account belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Status of the account (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "type": {
                    "description": "Type of the account (e.g., checking, savings, creditCard, expense)",
                    "type": "string",
                    "example": "creditCard"
                },
                "updatedAt": {
                    "description": "Timestamp when the account was last updated",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Address": {
            "description": "Structured address information following standard postal address format. Country field follows ISO 3166-1 alpha-2 standard (2-letter country codes).",
            "type": "object",
            "properties": {
                "city": {
                    "description": "City or locality name",
                    "type": "string",
                    "maxLength": 100,
                    "example": "New York"
                },
                "country": {
                    "description": "Country code in ISO 3166-1 alpha-2 format (two-letter country code)",
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 2,
                    "example": "US"
                },
                "line1": {
                    "description": "Primary address line (street address or PO Box)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Street 1"
                },
                "line2": {
                    "description": "Secondary address information like apartment number, suite, or floor",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Street 2"
                },
                "state": {
                    "description": "State, province, or region name or code",
                    "type": "string",
                    "maxLength": 100,
                    "example": "NY"
                },
                "zipCode": {
                    "description": "Postal code or ZIP code",
                    "type": "string",
                    "maxLength": 20,
                    "example": "00000-000"
                }
            }
        },
        "Asset": {
            "description": "Asset represents a financial instrument within a ledger, such as a currency, cryptocurrency, commodity, or other asset type.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Unique code/symbol for the asset (max length 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "BRL"
                },
                "createdAt": {
                    "description": "Timestamp when the asset was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the asset was deleted (null if not deleted)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the asset (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "description": "ID of the ledger this asset belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the asset",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the asset (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Brazilian Real"
                },
                "organizationId": {
                    "description": "ID of the organization that owns this asset (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Status of the asset (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "type": {
                    "description": "Type of the asset (e.g., currency, cryptocurrency, commodity, stock)",
                    "type": "string",
                    "example": "currency"
                },
                "updatedAt": {
                    "description": "Timestamp when the asset was last updated",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "CreateAccountInput": {
            "description": "CreateAccountInput is the input payload to create an account within a ledger, representing an individual financial entity like a bank account, credit card, or expense category.",
            "type": "object",
            "required": [
                "assetCode",
                "type"
            ],
            "properties": {
                "alias": {
                    "description": "Unique alias for the account (optional, max length 100 characters, must follow alias format rules)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "@person1"
                },
                "assetCode": {
                    "description": "Asset code that this account will use (required, max length 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "BRL"
                },
                "entityId": {
                    "description": "Optional external entity identifier (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the account\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the account (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Account"
                },
                "parentAccountId": {
                    "description": "ID of the parent account if this is a sub-account (optional, UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "portfolioId": {
                    "description": "ID of the portfolio this account belongs to (optional, UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "segmentId": {
                    "description": "ID of the segment this account belongs to (optional, UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Status of the account (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "type": {
                    "description": "Type of the account (e.g., checking, savings, creditCard, expense)",
                    "type": "string",
                    "example": "creditCard"
                }
            }
        },
        "CreateAssetInput": {
            "description": "CreateAssetInput is the input payload to create an asset within a ledger, such as a currency, cryptocurrency, or other financial instrument.",
            "type": "object",
            "required": [
                "code",
                "name"
            ],
            "properties": {
                "code": {
                    "description": "Unique code/symbol for the asset (required, max length 100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "example": "BRL"
                },
                "metadata": {
                    "description": "Additional custom attributes for the asset\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the asset (required, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Brazilian Real"
                },
                "status": {
                    "description": "Status of the asset (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "type": {
                    "description": "Type of the asset (e.g., currency, cryptocurrency, commodity, stock)",
                    "type": "string",
                    "example": "currency"
                }
            }
        },
        "CreateLedgerInput": {
            "description": "Request payload for creating a new ledger. Contains the ledger name (required), status, and optional metadata.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "metadata": {
                    "description": "Custom key-value pairs for extending the ledger information",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Display name of the ledger (required)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "status": {
                    "description": "Current operating status of the ledger (defaults to ACTIVE if not specified)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "CreateOrganizationInput": {
            "description": "Request payload for creating a new organization. Contains all the necessary fields for organization creation, with required fields marked as such.",
            "type": "object",
            "required": [
                "legalDocument",
                "legalName"
            ],
            "properties": {
                "address": {
                    "description": "Physical address of the organization (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Address"
                        }
                    ]
                },
                "doingBusinessAs": {
                    "description": "Trading or brand name of the organization, if different from legal name (optional)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "legalDocument": {
                    "description": "Official tax ID, company registration number, or other legal identification (required)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000000000"
                },
                "legalName": {
                    "description": "Official legal name of the organization (required)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "metadata": {
                    "description": "Custom key-value pairs for extending the organization information",
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "description": "UUID of the parent organization if this is a child organization (optional)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Current operating status of the organization (defaults to ACTIVE if not specified)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "CreatePortfolioInput": {
            "description": "CreatePortfolioInput is the input payload to create a portfolio within a ledger, representing a collection of accounts grouped for specific purposes.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "entityId": {
                    "description": "Optional external entity identifier (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the portfolio\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the portfolio (required, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Portfolio"
                },
                "status": {
                    "description": "Status of the portfolio (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "CreateSegmentInput": {
            "description": "CreateSegmentInput is the input payload to create a segment within a ledger, representing a logical division such as a business area, product line, or customer category.",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "metadata": {
                    "description": "Additional custom attributes for the segment\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the segment (required, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Segment"
                },
                "status": {
                    "description": "Status of the segment (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "Error": {
            "description": "Standardized error response format used across all API endpoints for error situations",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code identifying the specific error condition\nexample: ERR_INVALID_INPUT",
                    "type": "string"
                },
                "entityType": {
                    "description": "Optional type of entity associated with the error\nexample: Organization",
                    "type": "string"
                },
                "fields": {
                    "description": "Optional detailed field validations for client-side handling\nexample: {\"name\": \"Field 'name' is required\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Detailed error message explaining the issue\nexample: The request contains invalid fields. Please check the field 'name' and try again.",
                    "type": "string"
                },
                "title": {
                    "description": "Short, human-readable error title\nexample: Bad Request",
                    "type": "string"
                }
            }
        },
        "Ledger": {
            "description": "Complete ledger entity containing all fields including system-generated fields like ID, creation timestamps, and metadata. This is the response format for ledger operations.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp when the ledger was created (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the ledger was soft deleted, null if not deleted (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the ledger (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Custom key-value pairs for extending the ledger information",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Display name of the ledger",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "organizationId": {
                    "description": "Reference to the organization that owns this ledger",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Current operating status of the ledger",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "Timestamp when the ledger was last updated (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Organization": {
            "description": "Complete organization entity containing all fields including system-generated fields like ID, creation timestamps, and metadata. This is the response format for organization operations.",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Physical address of the organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Address"
                        }
                    ]
                },
                "createdAt": {
                    "description": "Timestamp when the organization was created (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the organization was soft deleted, null if not deleted (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "doingBusinessAs": {
                    "description": "Trading or brand name of the organization, if different from legal name",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "id": {
                    "description": "Unique identifier for the organization (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "legalDocument": {
                    "description": "Official tax ID, company registration number, or other legal identification",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000000000"
                },
                "legalName": {
                    "description": "Official legal name of the organization",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio"
                },
                "metadata": {
                    "description": "Custom key-value pairs for extending the organization information",
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "description": "Reference to the parent organization, if this is a child organization",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Current operating status of the organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "Timestamp when the organization was last updated (RFC3339 format)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Pagination": {
            "description": "Pagination is the struct designed to store the pagination data of an entity list.",
            "type": "object",
            "properties": {
                "items": {},
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "next_cursor": {
                    "type": "string",
                    "x-omitempty": true,
                    "example": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "prev_cursor": {
                    "type": "string",
                    "x-omitempty": true,
                    "example": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
                }
            }
        },
        "Portfolio": {
            "description": "Portfolio represents a collection of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp when the portfolio was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the portfolio was deleted (null if not deleted)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "entityId": {
                    "description": "Optional external entity identifier (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "id": {
                    "description": "Unique identifier for the portfolio (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "description": "ID of the ledger this portfolio belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the portfolio",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the portfolio (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Portfolio"
                },
                "organizationId": {
                    "description": "ID of the organization that owns this portfolio (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Status of the portfolio (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "Timestamp when the portfolio was last updated",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Segment": {
            "description": "Segment represents a logical division within a ledger such as a business area, product line, or customer category.",
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "Timestamp when the segment was created",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "deletedAt": {
                    "description": "Timestamp when the segment was deleted (null if not deleted)",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                },
                "id": {
                    "description": "Unique identifier for the segment (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "ledgerId": {
                    "description": "ID of the ledger this segment belongs to (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Additional custom attributes for the segment",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Name of the segment (max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Segment"
                },
                "organizationId": {
                    "description": "ID of the organization that owns this segment (UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Status of the segment (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                },
                "updatedAt": {
                    "description": "Timestamp when the segment was last updated",
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00Z"
                }
            }
        },
        "Status": {
            "description": "Entity status information with a standardized code and optional description. Common status codes include: ACTIVE, INACTIVE, PENDING, SUSPENDED, DELETED.",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code identifier, common values include: ACTIVE, INACTIVE, PENDING, SUSPENDED, DELETED",
                    "type": "string",
                    "maxLength": 100,
                    "example": "ACTIVE"
                },
                "description": {
                    "description": "Optional human-readable description of the status",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Active status"
                }
            }
        },
        "UpdateAccountInput": {
            "description": "UpdateAccountInput is the input payload to update an existing account's properties such as name, status, portfolio, segment, and metadata.",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Updated or additional custom attributes for the account\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Updated name of the account (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Account Updated"
                },
                "portfolioId": {
                    "description": "Updated portfolio ID for the account (optional, UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "segmentId": {
                    "description": "Updated segment ID for the account (optional, UUID format)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Updated status of the account (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "UpdateAssetInput": {
            "description": "UpdateAssetInput is the input payload to update an existing asset's properties such as name, status, and metadata.",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Updated or additional custom attributes for the asset\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Updated name of the asset (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Bitcoin"
                },
                "status": {
                    "description": "Updated status of the asset (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "UpdateLedgerInput": {
            "description": "Request payload for updating an existing ledger. All fields are optional - only specified fields will be updated. Omitted fields will remain unchanged.",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Updated custom key-value pairs for extending the ledger information (optional)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Updated display name of the ledger (optional)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio Updated"
                },
                "status": {
                    "description": "Updated status of the ledger (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "UpdateOrganizationInput": {
            "description": "Request payload for updating an existing organization. All fields are optional - only specified fields will be updated. Omitted fields will remain unchanged.",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Updated physical address of the organization (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Address"
                        }
                    ]
                },
                "doingBusinessAs": {
                    "description": "Updated trading or brand name of the organization (optional)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "The ledger.io"
                },
                "legalName": {
                    "description": "Updated legal name of the organization (optional)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "Lerian Studio Updated"
                },
                "metadata": {
                    "description": "Updated custom key-value pairs for extending the organization information (optional)",
                    "type": "object",
                    "additionalProperties": {}
                },
                "parentOrganizationId": {
                    "description": "UUID of the parent organization if this is a child organization (optional)",
                    "type": "string",
                    "format": "uuid",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "status": {
                    "description": "Updated status of the organization (optional)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "UpdatePortfolioInput": {
            "description": "UpdatePortfolioInput is the input payload to update an existing portfolio's properties such as name, entity ID, status, and metadata.",
            "type": "object",
            "properties": {
                "entityId": {
                    "description": "Updated external entity identifier (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "metadata": {
                    "description": "Updated or additional custom attributes for the portfolio\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Updated name of the portfolio (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Portfolio Updated"
                },
                "status": {
                    "description": "Updated status of the portfolio (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        },
        "UpdateSegmentInput": {
            "description": "UpdateSegmentInput is the input payload to update an existing segment's properties such as name, status, and metadata.",
            "type": "object",
            "properties": {
                "metadata": {
                    "description": "Updated or additional custom attributes for the segment\nKeys max length: 100 characters, Values max length: 2000 characters",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Updated name of the segment (optional, max length 256 characters)",
                    "type": "string",
                    "maxLength": 256,
                    "example": "My Segment Updated"
                },
                "status": {
                    "description": "Updated status of the segment (active, inactive, pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Status"
                        }
                    ]
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v1.48.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Midaz Onboarding API",
	Description:      "This is a swagger documentation for the Midaz Ledger API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
