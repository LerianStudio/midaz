receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  # Add host metrics collector
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu:
      memory:
      disk:
      network:
      process:
  
  # Add Docker metrics collector
  dockerstats:
    collection_interval: 30s
    endpoint: unix:///var/run/docker.sock
    timeout: 20s
    container_labels_to_metric_labels:
      com.docker.compose.service: service_name

processors:
  batch:
    send_batch_size: 1000
    timeout: 10s
  
  # Enhanced resource detection for more context
  resourcedetection:
    detectors: [env, system, docker]
    timeout: 5s
    override: true
    system:
      hostname_sources: [os, dns, cname]
    docker:
      enabled_attributes: [container.id, container.image.name, container.name]
  
  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_percentage: 80
    spike_limit_percentage: 25
  
  # Enhanced attribute processing
  attributes:
    actions:
      # Ensure service name is present
      - key: service.name
        action: upsert
        value: "midaz-service"
        from_attribute: service_name
      
      # Extract and normalize HTTP path for better grouping
      - key: http.route
        action: extract_pattern
        pattern: "^/v\\d+/[^/]+/[^/]+/[^/]+/?.*$"
        from_attribute: http.target
      
      # Add deployment environment if missing
      - key: deployment.environment
        action: upsert
        value: "unknown"
        from_attribute: OTEL_RESOURCE_DEPLOYMENT_ENVIRONMENT
      
      # Add transaction type tag for business metrics
      - key: transaction.type
        action: upsert
        value: "${transaction_type}"
        from_attribute: business.transaction.type
      
      # Extract status code ranges for easier filtering
      - key: http.status_class
        action: insert
        value: "2xx"
        pattern_match: "^2\\d\\d$"
        from_attribute: http.status_code
      - key: http.status_class
        action: insert
        value: "3xx"
        pattern_match: "^3\\d\\d$"
        from_attribute: http.status_code
      - key: http.status_class
        action: insert
        value: "4xx"
        pattern_match: "^4\\d\\d$"
        from_attribute: http.status_code
      - key: http.status_class
        action: insert
        value: "5xx"
        pattern_match: "^5\\d\\d$"
        from_attribute: http.status_code

exporters:
  # Local debug exporter - helps troubleshoot
  debug:
    verbosity: detailed
  
  # OTLP exporter - This handles all telemetry signals in the LGTM container
  otlp:
    endpoint: "localhost:4317"
    tls:
      insecure: true
  
  # Add direct exporters to each backend
  prometheus:
    endpoint: "localhost:9090"
    namespace: "otel"
    send_timestamps: true
    metric_expiration: 180m
    enable_open_metrics: true
  
  otlphttp/logs:
    endpoint: "http://localhost:3100/loki/api/v1/push"
    tls:
      insecure: true
  
  otlphttp/traces:
    endpoint: "http://localhost:4317"
    tls:
      insecure: true

service:
  pipelines:
    # Single pipeline for all telemetry data in the LGTM container
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resourcedetection, attributes]
      exporters: [otlp, otlphttp/traces, debug]
    
    metrics:
      receivers: [otlp, hostmetrics, dockerstats]
      processors: [memory_limiter, batch, resourcedetection, attributes]
      exporters: [otlp, prometheus, debug]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resourcedetection, attributes]
      exporters: [otlp, otlphttp/logs, debug]
  
  telemetry:
    logs:
      level: "debug"
    
  # Note: No need to configure internal metrics endpoint as it's handled by the LGTM container itself