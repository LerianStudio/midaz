x-midaz-postgres-common:
  &midaz-postgres-common
  image: postgres:latest
  restart: always
  user: ${USER_EXECUTE_COMMAND}
  healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -p ${DB_PORT}" ]
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - infra_network

x-midaz-mongodb-common:
  &midaz-mongodb-common
  image: mongo:latest
  restart: always
  healthcheck:
    test: echo 'db.runCommand("ping").ok'
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - infra_network

x-midaz-redis-common:
  &midaz-redis-common
  image: redis:latest
  restart: always
  env_file:
    - .env
  networks:
    - infra_network

services:
  midaz-mongodb:
    <<: *midaz-mongodb-common
    container_name: midaz-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    command: mongod --port ${MONGO_PORT}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - mongodb_data_container:/data/db

  midaz-redis:
    <<: *midaz-redis-common
    container_name: midaz-redis
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--user", "${REDIS_USER}",  "--port ${REDIS_PORT}"]
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis-data:/data

  midaz-postgres-primary:
    <<: *midaz-postgres-common
    container_name: midaz-postgres-primary
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  midaz-postgres-replica:
    <<: *midaz-postgres-common
    container_name: midaz-postgres-replica
    ports:
      - ${DB_REPLICA_PORT}:${DB_REPLICA_PORT}
    environment:
      PGPORT: ${DB_REPLICA_PORT}
      PGUSER: ${REPLICATION_USER}
      PGPASSWORD: ${REPLICATION_PASSWORD}
    command: |
      bash -c "
      if [ ! -d \"/var/lib/postgresql/data\" ] || [ ! -f \"/var/lib/postgresql/data/postgresql.conf\" ]; then
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=midaz-postgres-primary --port=${DB_PORT}
        do
          echo 'Waiting for midaz-postgres-primary to connect...'
          sleep 1s
        done
        echo 'Backup done..., starting midaz-postgres-replica...'
        chmod 0700 /var/lib/postgresql/data
        # Ensure the port is set to use for the replica
        sed -i 's/^#port.*/port = ${DB_REPLICA_PORT}/' /var/lib/postgresql/data/postgresql.conf
      fi
      exec postgres -c config_file=/var/lib/postgresql/data/postgresql.conf
      "
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_REPLICA_USER} -p ${DB_REPLICA_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      midaz-postgres-primary:
        condition: service_healthy

  midaz-otel-lgtm:
    container_name: midaz-otel-lgtm
    image: grafana/otel-lgtm:latest
    restart: always
    ports:
      - ${OTEL_LGTM_EXTERNAL_PORT}:${OTEL_LGTM_INTERNAL_PORT}
      - ${OTEL_LGTM_RECEIVER_GRPC_PORT}:${OTEL_LGTM_RECEIVER_GRPC_PORT}
      - ${OTEL_LGTM_RECEIVER_HTTP_PORT}:${OTEL_LGTM_RECEIVER_HTTP_PORT}
    networks:
      - infra_network

  midaz-rabbitmq:
    image: rabbitmq:4.0-management-alpine
    container_name: midaz-rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${RABBITMQ_PORT_HOST}:${RABBITMQ_PORT_HOST}
      - ${RABBITMQ_PORT_AMPQ}:${RABBITMQ_PORT_AMPQ}
    volumes:
      - ./rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - infra_network

volumes:
  mongodb_data_container:
  redis-data:

networks:
  infra_network:
    name: infra_network
    driver: bridge