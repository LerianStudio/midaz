services:
  midaz-mongodb:
    container_name: midaz-mongodb
    image: mongo:latest
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    command: mongod --port ${MONGO_PORT}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - mongodb-data:/data/db
      - mongodb-data:/data/configdb
    networks:
      - infra_network

  midaz-redis:
    container_name: midaz-redis
    image: valkey/valkey:latest
    restart: always
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}", "--port", "${REDIS_PORT}" ]
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis-data:/data
    networks:
      - infra_network

  midaz-postgres-primary:
    container_name: midaz-postgres-primary
    image: postgres:latest
    restart: always
    user: ${USER_EXECUTE_COMMAND}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -p ${DB_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256

        host replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c max_connections=${MAX_CONNECTIONS}
      -c shared_buffers=${SHARED_BUFFERS}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - infra_network

  midaz-postgres-replica:
    container_name: midaz-postgres-replica
    image: postgres:latest
    restart: always
    user: ${USER_EXECUTE_COMMAND}
    ports:
      - ${DB_REPLICA_PORT}:${DB_REPLICA_PORT}
    environment:
      PGPORT: ${DB_REPLICA_PORT}
      PGUSER: ${REPLICATION_USER}
      PGPASSWORD: ${REPLICATION_PASSWORD}
    command: |
      bash -c "
      if [ ! -d \"/var/lib/postgresql/data\" ] || [ ! -f \"/var/lib/postgresql/data/postgresql.conf\" ]; then
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=midaz-postgres-primary --port=${DB_PORT}
        do
          echo 'Waiting for midaz-postgres-primary to connect...'
          sleep 1s
        done

        echo 'Backup done..., starting midaz-postgres-replica...'
        chmod 0700 /var/lib/postgresql/data

        # Ensure the port is set to use for the replica
        sed -i 's/^#port.*/port = ${DB_REPLICA_PORT}/' /var/lib/postgresql/data/postgresql.conf

        # Define database max conn
        sed -i 's/^#*max_connections.*/max_connections = ${MAX_CONNECTIONS}/' /var/lib/postgresql/data/postgresql.conf      

        # Define database shared buffers
        sed -i 's/^#*shared_buffers.*/shared_buffers = ${SHARED_BUFFERS}/' /var/lib/postgresql/data/postgresql.conf      
      fi
      exec postgres -c config_file=/var/lib/postgresql/data/postgresql.conf
      "
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_REPLICA_USER} -p ${DB_REPLICA_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      midaz-postgres-primary:
        condition: service_healthy
    networks:
      - infra_network

  midaz-otel-lgtm:
    container_name: midaz-otel-lgtm
    image: grafana/otel-lgtm:latest
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - GF_SECURITY_ADMIN_USER=${OTEL_LGTM_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${OTEL_LGTM_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=${GF_AUTH_ANONYMOUS_ENABLED}
      - GF_AUTH_DISABLE_LOGIN_FORM=${GF_AUTH_DISABLE_LOGIN_FORM}
      - GF_FEATURE_TOGGLES_ENABLE=${GF_FEATURE_TOGGLES_ENABLE}
      - GF_PATHS_PROVISIONING=${GF_PATHS_PROVISIONING}
    ports:
      - ${OTEL_LGTM_EXTERNAL_PORT}:${OTEL_LGTM_INTERNAL_PORT}
      - ${OTEL_LGTM_RECEIVER_GRPC_PORT}:${OTEL_LGTM_RECEIVER_GRPC_PORT}
      - ${OTEL_LGTM_RECEIVER_HTTP_PORT}:${OTEL_LGTM_RECEIVER_HTTP_PORT}
      - ${OTEL_TEMPO_PORT}:${OTEL_TEMPO_PORT}
      - ${OTEL_PROMETHEUS_PORT}:${OTEL_PROMETHEUS_PORT}
      - ${OTEL_GRAFANA_DEBUG_PORT}:${OTEL_GRAFANA_DEBUG_PORT}
    volumes:
      - grafana-data:/otel-lgtm/grafana/data
      - ./grafana/run-grafana.sh:/otel-lgtm/run-grafana.sh
      - ./grafana/init-grafana.sh:/otel-lgtm/grafana/init-grafana.sh
      - ./grafana/dashboards:/otel-lgtm/grafana/dashboards
      - ./grafana/provisioning:/otel-lgtm/grafana/provisioning
      - ./otel/config/otel-collector-config.yaml:/otel-lgtm/etc/otelcol/config.yaml
      - ./otel/scripts/check-telemetry-health.sh:/otel-lgtm/check-telemetry-health.sh
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: [ "CMD-SHELL", "/otel-lgtm/check-telemetry-health.sh" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - infra_network

  midaz-rabbitmq:
    image: rabbitmq:4.0-management-alpine
    container_name: midaz-rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - ${RABBITMQ_PORT_HOST}:${RABBITMQ_PORT_HOST}
      - ${RABBITMQ_PORT_AMPQ}:${RABBITMQ_PORT_AMPQ}
    volumes:
      - ./rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - infra_network

volumes:
  postgres-data:
    name: midaz_postgres-data
  postgres-replica-data:
    name: midaz_postgres-replica-data
  mongodb-data:
    name: midaz_mongodb-data
  redis-data:
    name: midaz_redis-data
  grafana-data:
    name: midaz_grafana-data

networks:
  infra_network:
    name: midaz_infra-network
    driver: bridge
