x-postgres-ledger-common:
  &postgres-ledger-common
  image: postgres:16-alpine
  user: ${USER_EXECUTE_COMMAND}
  restart: always
  healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -p ${DB_PORT}" ]
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - infra_network

x-mongodb-common:
  &mongodb-common
  image: mongo:latest
  restart: always
  healthcheck:
    test: echo 'db.runCommand("ping").ok'
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - infra_network

x-redis-common:
  &redis-common
  image: redis:latest
  env_file:
    - .env
  networks:
    - infra_network

services:
  mongodb:
    <<: *mongodb-common
    container_name: midaz-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    command: mongod --port ${MONGO_PORT}
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - mongodb_data_container:/data/db

  redis:
    <<: *redis-common
    container_name: midaz-redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}

  primary-ledger:
    <<: *postgres-ledger-common
    container_name: midaz-postgres-primary
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      PGPORT: ${DB_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  replica-ledger:
    <<: *postgres-ledger-common
    container_name: midaz-postgres-replica
    ports:
      - ${DB_REPLICA_PORT}:${DB_REPLICA_PORT}
    environment:
      PGPORT: ${DB_REPLICA_PORT}
      PGUSER: ${REPLICATION_USER}
      PGPASSWORD: ${REPLICATION_PASSWORD}
    command: |
      bash -c "
      if [ ! -d \"/var/lib/postgresql/data\" ] || [ ! -f \"/var/lib/postgresql/data/postgresql.conf\" ]; then
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=primary-ledger --port=${DB_PORT}
        do
          echo 'Waiting for primary-ledger to connect...'
          sleep 1s
        done
        echo 'Backup done..., starting replica-ledger...'
        chmod 0700 /var/lib/postgresql/data
        # Ensure the port is set to use for the replica
        sed -i 's/^#port.*/port = ${DB_REPLICA_PORT}/' /var/lib/postgresql/data/postgresql.conf
      fi
      exec postgres -c config_file=/var/lib/postgresql/data/postgresql.conf
      "
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_REPLICA_USER} -p ${DB_REPLICA_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      primary-ledger:
        condition: service_healthy

#  grafana-lgtm:
#    container_name: grafana
#    image: grafana/otel-lgtm:0.7.1
#    ports:
#      - "3100:3000"
#    networks:
#      - infra_network
#
#  otel-collector
#    depends_on:
#      - grafana-lgtm
#    container_name: otel-collector
#    image: otel/opentelemetry-collector-contrib
#    volumes:
#      - ./otelcol/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
#    ports:
#      - 4317:4317 # OTLP gRPC receiver
#      - 4318:4318 # OTLP http receiver
#      - 13133:13133 # health_check extension
#      - 55679:55679 # zpages extension for debugging and performance monitoring [Reference](https://github.com/open-telemetry/opentelemetry-collector/blob/main/extension/zpagesextension/README.md)
#    networks:
#      - infra_network

volumes:
  mongodb_data_container:

networks:
  infra_network:
    name: infra_network
    driver: bridge