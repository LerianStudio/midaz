name: "Release Pipeline"

on:
  push:
    branches:
      - develop
      - main
      - hotfix/*
    paths-ignore:
      - '.gitignore'
      - '**/*.env'   # Ignores all .env files
      - '*.env'      # Ignores .env files in the root directory
      - '**/*.md'    # Ignores all .md files
      - '*.md'       # Ignores .md files in the root directory
      - '**/*.txt'   # Ignores all .env files
      - '*.txt'      # Ignores .env files in the root directory
    tags-ignore: ['**']

permissions:
  id-token: write       # Needed for authentication
  contents: write       # Needed to create releases and tags
  pull-requests: write  # Needed to create/update PRs

jobs:
  integration_tests_go:
    name: Go Integration test
    runs-on: ubuntu-24.04
    steps:
      # Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Run unit tests for the Onboarding component
      - name: Unit Tests - Onboarding
        working-directory: components/onboarding
        shell: bash
        run: make test

      # Run unit tests for the Transaction component
      - name: Unit Tests - Transaction
        working-directory: components/transaction
        shell: bash
        run: make test

  publish_release:
    runs-on: ubuntu-24.04
    needs: [integration_tests_go]
    environment:
      name: create_release
    name: üè∑Ô∏è Create release to Midaz
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
    
      - name: Sync with remote branch
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          passphrase: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          git_committer_name: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          git_committer_email: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Init package.json
        run: npm init -y

      - name: Install missing plugin @semantic-release/exec
        run: npm install --save-dev @semantic-release/exec

      - name: Set releaserc path based on branch
        id: releaserc
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/hotfix/* ]]; then
            echo "path=.releaserc.hotfix" >> $GITHUB_OUTPUT
          else
            echo "path=.releaserc" >> $GITHUB_OUTPUT
          fi

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          ci: false
          semantic_version: 23.0.8
          config_file: ${{ steps.releaserc.outputs.path }}
          extra_plugins: |
            conventional-changelog-conventionalcommits@v7.0.2
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false
    
      - name: Clean repo (reset + clean)
        run: |
          git reset --hard
          git clean -fd

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: v2.8.2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
  
  generate_changelog:
    name: üìù Generate AI-powered Changelog
    runs-on: ubuntu-22.04
    needs: publish_release
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      - uses: LerianStudio/github-actions-gptchangelog@develop
        with:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LERIAN_CI_CD_USER_GPG_KEY: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          LERIAN_CI_CD_USER_GPG_KEY_PASSWORD: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          LERIAN_CI_CD_USER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          LERIAN_CI_CD_USER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}
