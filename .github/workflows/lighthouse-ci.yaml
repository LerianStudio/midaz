name: Lighthouse CI

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'components/console/**'

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: components/console
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js environment with version 22
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Cache Node.js modules to speed up subsequent runs
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install project dependencies using npm
      - name: Install dependencies
        run: npm install

      # Build the project for production
      - name: Build the project
        run: npm run build

      # Start the application in background mode on port 8081
      - name: Start app
        run: npm run start &
        env:
          PORT: 8081

      # Wait for the application to be fully ready before proceeding
      # Timeout after 60 seconds if the app doesn't respond
      - name: Wait for app to be ready
        run: npx wait-on http://localhost:8081 --timeout 60000

      # Step 1: Run Lighthouse CI for public upload to temporary storage
      # This makes the results publicly accessible via a Lighthouse CI URL
      - name: Run Lighthouse CI for Public Upload
        run: npm run lhci -- --ci
        env:
          LHCI_TARGET: 'temporary-public-storage'

      # Step 2: Run Lighthouse CI to save results as an artifact
      # This saves the results to the local filesystem for later processing
      - name: Run Lighthouse CI for Artifact
        run: npm run lhci -- --ci
        env:
          LHCI_TARGET: 'filesystem'

      # Verify the current directory and files generated by Lighthouse
      # This helps with debugging by showing the working directory contents
      - name: Check current directory
        run: |
          echo "Current directory is: $(pwd)"
          echo "Listing files in the current directory:"
          ls -al

      # Check if the Lighthouse CI output directory exists
      # This verifies that the Lighthouse CI run created output files
      - name: Check if .lighthouseci directory exists
        run: |
          echo "Checking for .lighthouseci directory..."
          if [ -d ".lighthouseci" ]; then
            echo ".lighthouseci directory exists."
            ls -alR .lighthouseci
          else
            echo ".lighthouseci directory does not exist."
          fi

      # Check if HTML and JSON report files were generated
      # This ensures we have the expected output formats before proceeding
      - name: Check if reports exist in the directory
        run: |
          echo "Checking for report files in .lighthouseci..."
          ls -al .lighthouseci/*.html || echo "No .html files found"
          ls -al .lighthouseci/*.json || echo "No .json files found"

      # Move reports to the 'reports' directory
      # This organizes the output files into a dedicated directory for artifacts
      - name: Move Lighthouse reports to 'reports' directory
        run: |
          mkdir -p reports
          mv .lighthouseci/*.html reports/
          mv .lighthouseci/*.json reports/
          pwd
          ls -lah
          echo ${{ github.workspace }}

      # Upload HTML reports as artifacts
      # This makes the human-readable HTML reports available for download from the GitHub Actions UI
      - name: Upload Lighthouse HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-html-report
          path: ${{ github.workspace }}/components/console/reports/*.html
          if-no-files-found: error

      # Upload JSON reports as artifacts
      # This makes the machine-readable JSON reports available for programmatic analysis
      - name: Upload Lighthouse JSON Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-json-report
          path: reports/*.json
          if-no-files-found: error

      # Clean up by killing the Node.js server process
      # This ensures no processes are left running after the workflow completes
      - name: Cleanup
        run: kill $(lsof -t -i:8081) || true
