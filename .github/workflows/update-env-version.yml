name: Update Envs Version With TAG Release

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - edited
      - synchronize
      - reopened

permissions:
  id-token: write       # Needed for authentication
  contents: write       # Needed to update files
  pull-requests: write  # Needed to update the PR

jobs:
  update-env-release:
    if: github.event.pull_request.head.repo.fork == false
    name: Run update VERSION in every ENV on components
    runs-on: ubuntu-24.04
    steps:
      # Create a GitHub App token for authentication with higher rate limits
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_APP_ID }}
          private-key: ${{ secrets.LERIAN_STUDIO_MIDAZ_PUSH_BOT_PRIVATE_KEY }}

      # Import GPG key for signing commits
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY }}
          passphrase: ${{ secrets.LERIAN_CI_CD_USER_GPG_KEY_PASSWORD }}
          git_committer_name: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          git_committer_email: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Checkout the PR branch code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}  # Checkout the head branch of the PR

      # Install GitHub CLI for interacting with GitHub API
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      # Get the latest release tag from GitHub
      - name: Fetch Latest Release
        id: latest_release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Get the most recent release tag
          RAW_RELEASE=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 --json tagName --jq '.[0].tagName')
          # Remove any suffix after a hyphen (e.g., -beta)
          FORMATTED_RELEASE=$(echo "$RAW_RELEASE" | sed -E 's/-[a-zA-Z0-9.]+//')
          echo "Raw release: $RAW_RELEASE"
          echo "Formatted release: $FORMATTED_RELEASE"
          echo "tag=$FORMATTED_RELEASE" >> $GITHUB_OUTPUT

      # Get the current version from the environment file
      - name: Fetch Env Release
        id: env_release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          # Extract the current version from the .env.example file
          VERSION=$(grep '^VERSION=' ./components/onboarding/.env.example | cut -d '=' -f2)
          echo "LEDGER version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Update the version in the Onboarding component's .env.example file
      - name: Update ONBOARDING Env
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          sed -i "s/^VERSION=.*/VERSION=${{ steps.latest_release.outputs.tag }}/" ./components/onboarding/.env.example

      # Update the version in the Transaction component's .env.example file
      - name: Update TRANSACTION Env
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          sed -i "s/^VERSION=.*/VERSION=${{ steps.latest_release.outputs.tag }}/" ./components/transaction/.env.example

      # Update the version in the MDZ component's .env.example file
      - name: Update MDZ Env
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          sed -i "s/^VERSION=.*/VERSION=${{ steps.latest_release.outputs.tag }}/" ./components/mdz/.env.example
      
      # Update the version in the Console component's .env.example file
      - name: Update CONSOLE Env
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          sed -i "s/^VERSION=.*/VERSION=${{ steps.latest_release.outputs.tag }}/" ./components/console/.env.example

      # Update the version in the Chocolatey installation script
      - name: Update Version Choco version file install.ps1
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          TAG=${{ steps.latest_release.outputs.tag }}
          sed -i "s/\$version *= *'[^']*'/\$version = '$TAG'/g" "./chocolatey/tools/chocolateyinstall.ps1"

      # Show the changes made to the files
      - name: Git Diff
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        run: |
          git diff

      # Commit and push the version updates to the PR branch
      - name: Commit Changes
        if: steps.latest_release.outputs.tag != steps.env_release.outputs.version  # Only run if versions differ
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GIT_AUTHOR_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.LERIAN_CI_CD_USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.LERIAN_CI_CD_USER_EMAIL }}
        run: |
          git add .
          git commit -m "chore(release): update version in .env.example to ${{ steps.latest_release.outputs.tag }}"
          git push origin ${{ github.head_ref }}  # Push to the PR branch
