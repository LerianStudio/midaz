diff --git a/all_changes.patch b/all_changes.patch
new file mode 100644
index 00000000..e69de29b
diff --git a/docs/README.md b/docs/README.md
new file mode 100644
index 00000000..3f5cfd64
--- /dev/null
+++ b/docs/README.md
@@ -0,0 +1,23 @@
+# Midaz Documentation
+
+**Navigation:** [Home](../) > Documentation
+
+Welcome to the Midaz documentation. This documentation provides comprehensive information about the Midaz architecture, components, and usage.
+
+## Main Sections
+
+- [Getting Started](./getting-started/) - Installation and quickstart guides
+- [Architecture](./architecture/) - System architecture and design principles
+- [Components](./components/) - Individual component documentation
+- [Domain Models](./domain-models/) - Core domain models and entities
+- [Developer Guide](./developer-guide/) - Guidelines for developers
+- [API Reference](./api-reference/) - API documentation
+- [Tutorials](./tutorials/) - Step-by-step tutorials
+
+## Additional Resources
+
+- [Reference Materials](./reference/) - Glossary, status codes, error codes, and configuration
+- [FAQ](./faq.md) - Frequently asked questions
+- [Troubleshooting](./troubleshooting.md) - Common issues and solutions
+- [Version History](./versions.md) - Documentation version history
+- [Contributing to Documentation](./contributing-to-docs.md) - Guidelines for contributing
\ No newline at end of file
diff --git a/docs/api-reference/README.md b/docs/api-reference/README.md
new file mode 100644
index 00000000..e2ec4e5b
--- /dev/null
+++ b/docs/api-reference/README.md
@@ -0,0 +1,97 @@
+# API Reference
+
+**Navigation:** [Home](../) > API Reference
+
+This section provides comprehensive documentation for the Midaz platform APIs, detailing the endpoints, request/response formats, authentication, and usage patterns.
+
+## API Services
+
+The Midaz platform uses a microservices architecture with two primary API services:
+
+### [Onboarding API](./onboarding-api/)
+
+The Onboarding API handles the creation and management of all financial entities within the Midaz platform. It provides endpoints for:
+
+- **Organizations**: Managing top-level organizational entities
+- **Ledgers**: Creating and managing financial ledgers within organizations
+- **Assets**: Defining currencies and other financial instruments
+- **Segments**: Managing business segments for categorization
+- **Portfolios**: Creating collections of related accounts
+- **Accounts**: Managing individual financial accounts
+
+[Go to Onboarding API Documentation](./onboarding-api/)
+
+### [Transaction API](./transaction-api/)
+
+The Transaction API handles all financial transactions and balance operations within the Midaz platform. It provides endpoints for:
+
+- **Transactions**: Creating, retrieving, and managing financial transactions
+- **Operations**: Managing individual debit and credit operations within transactions
+- **Balances**: Tracking and manipulating account balances
+- **Asset Rates**: Managing exchange rates between different assets
+
+[Go to Transaction API Documentation](./transaction-api/)
+
+### [Transaction DSL](./transaction-dsl/)
+
+The Transaction DSL (Domain-Specific Language) provides a concise, readable way to define complex financial transactions within the Midaz platform:
+
+- **Grammar**: Specialized syntax for defining transactions
+- **Templates**: Reusable transaction patterns with variables
+- **Validation**: Built-in validation for transaction integrity
+
+[Go to Transaction DSL Documentation](./transaction-dsl/)
+
+## Common Features
+
+Both APIs share the following common characteristics:
+
+### Authentication
+
+Authentication in Midaz is handled by a separate plugin that can be enabled or disabled through configuration. When enabled (`PLUGIN_AUTH_ENABLED=true`), all API requests require authentication using OAuth 2.0 Bearer tokens. Include the token in the `Authorization` header:
+
+```
+Authorization: Bearer YOUR_ACCESS_TOKEN
+```
+
+If authentication is disabled (`PLUGIN_AUTH_ENABLED=false`), API endpoints can be accessed without authentication. This configuration is typically used for development and testing environments only.
+
+> **Note:** Detailed authentication documentation, including token acquisition and permissions management, is available in the separate Auth Plugin repository. The Auth Plugin is a modular component that provides centralized authentication and authorization services for Midaz.
+
+### Error Handling
+
+All APIs use a standardized error format:
+
+```json
+{
+  "code": "ERROR_CODE",
+  "title": "Human-readable error title",
+  "message": "Detailed error message explaining the issue",
+  "entityType": "Optional entity type (e.g., 'Organization')",
+  "fields": {
+    "fieldName": "Field-specific error message"
+  }
+}
+```
+
+### Content Type
+
+All APIs use JSON (`application/json`) for both request and response payloads.
+
+### Metadata Support
+
+Most resources support a `metadata` field that allows for flexible extension of attributes with custom key-value pairs.
+
+## API Integration Guides
+
+For detailed guides on integrating with the Midaz APIs, refer to:
+
+- [Error Handling Best Practices](../developer-guide/error-handling.md)
+
+## Support
+
+For API support or questions, please reach out through:
+- GitHub Issues: [File an issue on GitHub](https://github.com/LerianStudio/midaz/issues)
+- GitHub Discussions: [Start a discussion](https://github.com/LerianStudio/midaz/discussions)
+- Discord: [Join our community](https://discord.gg/qtKU6Zwq5b)
+- Email: contact@lerian.studio
\ No newline at end of file
diff --git a/docs/api-reference/onboarding-api/README.md b/docs/api-reference/onboarding-api/README.md
new file mode 100644
index 00000000..ae13cd36
--- /dev/null
+++ b/docs/api-reference/onboarding-api/README.md
@@ -0,0 +1,922 @@
+# Onboarding API
+
+**Navigation:** [Home](../../) > [API Reference](../) > Onboarding API
+
+This documentation provides a comprehensive reference for the Midaz Onboarding API, which handles the creation and management of all financial entities in the platform, including organizations, ledgers, assets, segments, portfolios, and accounts.
+
+## Overview
+
+The Onboarding API is a RESTful API that manages the financial entity hierarchy within the Midaz platform. It follows a structured entity model where organizations contain ledgers, which then contain various financial entities like assets, segments, portfolios, and accounts.
+
+- **Base URL**: 
+  - Production: `https://api.midaz.io/onboarding/v1`
+  - Development: `http://localhost:3000/onboarding/v1`
+- **Content Type**: JSON (`application/json`)
+- **API Version**: v2.0.0
+
+## Authentication
+
+Authentication in Midaz is handled by a separate plugin that can be enabled or disabled through configuration. When enabled (`PLUGIN_AUTH_ENABLED=true`), all API requests require authentication using OAuth 2.0 Bearer tokens:
+
+```
+Authorization: Bearer YOUR_ACCESS_TOKEN
+```
+
+If authentication is disabled (`PLUGIN_AUTH_ENABLED=false`), API endpoints can be accessed without authentication. This configuration is typically used for development and testing environments only.
+
+## Common Headers
+
+| Header Name | Required | Description |
+|-------------|----------|-------------|
+| Authorization | Yes | OAuth 2.0 Bearer token |
+| X-Request-Id | No | Unique request identifier for tracing (recommended) |
+
+## Common Response Codes
+
+| Status Code | Description |
+|-------------|-------------|
+| 200 | Success - The request was processed successfully |
+| 201 | Created - The resource was created successfully |
+| 204 | No Content - The request was successful, but no content is returned |
+| 400 | Bad Request - The request contains invalid parameters or validation errors |
+| 401 | Unauthorized - Missing or invalid authentication |
+| 403 | Forbidden - Authentication succeeded but the user lacks permissions |
+| 404 | Not Found - The requested resource does not exist |
+| 409 | Conflict - A conflict occurred with the current state of the resource |
+| 422 | Unprocessable Entity - The request was well-formed but cannot be processed |
+| 500 | Internal Server Error - An error occurred on the server |
+
+## Error Response Structure
+
+All error responses follow a standardized format:
+
+```json
+{
+  "code": "ERROR_CODE",
+  "title": "Human-readable error title",
+  "message": "Detailed error message explaining the issue",
+  "entityType": "Optional entity type (e.g., 'Organization')",
+  "fields": {
+    "fieldName": "Field-specific error message"
+  }
+}
+```
+
+## Resource Categories
+
+The Onboarding API is organized into the following hierarchical resource categories:
+
+- [Organizations](#organizations): Top-level entities that group ledgers and other resources
+- [Ledgers](#ledgers): Financial ledgers within organizations that contain financial entities
+- [Assets](#assets): Currencies or financial instruments used within ledgers
+- [Segments](#segments): Business segments used to categorize accounts
+- [Portfolios](#portfolios): Collections of accounts for financial grouping
+- [Accounts](#accounts): Individual financial accounts that can hold balances
+
+## Entity Hierarchy
+
+The Midaz entity hierarchy follows this structure:
+
+```
+Organization
+├── Ledger
+│   ├── Asset
+│   ├── Segment
+│   ├── Portfolio
+│   └── Account
+```
+
+Each entity can have metadata associated with it for flexible extension of attributes.
+
+## Organizations
+
+Organizations are the top-level entities in the Midaz platform hierarchy.
+
+### List Organizations
+
+Retrieves a paginated list of organizations.
+
+**Endpoint**: `GET /organizations`
+
+**Query Parameters**:
+- `metadata` (string, optional): JSON string to filter organizations by metadata fields
+- `limit` (integer, optional): Maximum number of records per page (default: 10, max: 100)
+- `page` (integer, optional): Page number for pagination (default: 1)
+- `start_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+- `end_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "name": "Example Organization",
+      "code": "EXO",
+      "description": "This is an example organization",
+      "metadata": {
+        "industry": "Financial Services",
+        "region": "North America"
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Organization
+
+Creates a new organization.
+
+**Endpoint**: `POST /organizations`
+
+**Request Body**:
+```json
+{
+  "name": "Example Organization",
+  "code": "EXO",
+  "description": "This is an example organization",
+  "metadata": {
+    "industry": "Financial Services",
+    "region": "North America"
+  }
+}
+```
+
+**Response**:
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Example Organization",
+  "code": "EXO",
+  "description": "This is an example organization",
+  "metadata": {
+    "industry": "Financial Services",
+    "region": "North America"
+  },
+  "created_at": "2021-01-01T00:00:00Z",
+  "updated_at": "2021-01-01T00:00:00Z"
+}
+```
+
+### Get Organization
+
+Retrieves a specific organization by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+
+**Response**: Returns a single organization object
+
+### Update Organization
+
+Updates an existing organization.
+
+**Endpoint**: `PATCH /organizations/{organization_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Organization Name",
+  "description": "Updated organization description",
+  "metadata": {
+    "industry": "Financial Services",
+    "region": "Europe"
+  }
+}
+```
+
+**Response**: Returns the updated organization object
+
+### Delete Organization
+
+Deletes an organization.
+
+**Endpoint**: `DELETE /organizations/{organization_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+
+**Response**: Returns 204 No Content on success
+
+## Ledgers
+
+Ledgers are financial books within organizations, containing various financial entities.
+
+### List Ledgers
+
+Retrieves a paginated list of ledgers for an organization.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+
+**Query Parameters**:
+- `metadata` (string, optional): JSON string to filter ledgers by metadata fields
+- `limit` (integer, optional): Maximum number of records per page (default: 10, max: 100)
+- `page` (integer, optional): Page number for pagination (default: 1)
+- `start_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+- `end_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organization_id": "00000000-0000-0000-0000-000000000000",
+      "name": "Main Ledger",
+      "code": "MAIN",
+      "description": "Main financial ledger",
+      "metadata": {
+        "type": "General",
+        "fiscal_year": "2025"
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Ledger
+
+Creates a new ledger within an organization.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+
+**Request Body**:
+```json
+{
+  "name": "Main Ledger",
+  "code": "MAIN",
+  "description": "Main financial ledger",
+  "metadata": {
+    "type": "General",
+    "fiscal_year": "2025"
+  }
+}
+```
+
+**Response**: Returns the created ledger object
+
+### Get Ledger
+
+Retrieves a specific ledger by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Response**: Returns a single ledger object
+
+### Update Ledger
+
+Updates an existing ledger.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Ledger Name",
+  "description": "Updated ledger description",
+  "metadata": {
+    "type": "General",
+    "fiscal_year": "2026"
+  }
+}
+```
+
+**Response**: Returns the updated ledger object
+
+### Delete Ledger
+
+Deletes a ledger.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Response**: Returns 204 No Content on success
+
+## Assets
+
+Assets represent currencies or financial instruments used within ledgers.
+
+### List Assets
+
+Retrieves a paginated list of assets for a ledger.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/assets`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**:
+- `metadata` (string, optional): JSON string to filter assets by metadata fields
+- `limit` (integer, optional): Maximum number of records per page (default: 10, max: 100)
+- `page` (integer, optional): Page number for pagination (default: 1)
+- `start_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+- `end_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organization_id": "00000000-0000-0000-0000-000000000000",
+      "ledger_id": "00000000-0000-0000-0000-000000000000",
+      "code": "USD",
+      "name": "US Dollar",
+      "symbol": "$",
+      "decimals": 2,
+      "description": "United States Dollar",
+      "metadata": {
+        "country": "United States",
+        "type": "fiat"
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Asset
+
+Creates a new asset within a ledger.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/assets`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "code": "USD",
+  "name": "US Dollar",
+  "symbol": "$",
+  "decimals": 2,
+  "description": "United States Dollar",
+  "metadata": {
+    "country": "United States",
+    "type": "fiat"
+  }
+}
+```
+
+**Response**: Returns the created asset object
+
+### Get Asset
+
+Retrieves a specific asset by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `asset_id` (string, required): Asset identifier
+
+**Response**: Returns a single asset object
+
+### Update Asset
+
+Updates an existing asset.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `asset_id` (string, required): Asset identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Asset Name",
+  "description": "Updated asset description",
+  "metadata": {
+    "country": "United States",
+    "type": "fiat",
+    "status": "active"
+  }
+}
+```
+
+**Response**: Returns the updated asset object
+
+### Delete Asset
+
+Deletes an asset.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}/assets/{asset_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `asset_id` (string, required): Asset identifier
+
+**Response**: Returns 204 No Content on success
+
+## Segments
+
+Segments represent business segments used to categorize accounts.
+
+### List Segments
+
+Retrieves a paginated list of segments for a ledger.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/segments`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**: Similar to other list endpoints
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organization_id": "00000000-0000-0000-0000-000000000000",
+      "ledger_id": "00000000-0000-0000-0000-000000000000",
+      "name": "Retail Banking",
+      "code": "RETAIL",
+      "description": "Retail banking segment",
+      "metadata": {
+        "risk_level": "low",
+        "customer_type": "individual"
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Segment
+
+Creates a new segment within a ledger.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/segments`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "name": "Retail Banking",
+  "code": "RETAIL",
+  "description": "Retail banking segment",
+  "metadata": {
+    "risk_level": "low",
+    "customer_type": "individual"
+  }
+}
+```
+
+**Response**: Returns the created segment object
+
+### Get Segment
+
+Retrieves a specific segment by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/segments/{segment_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `segment_id` (string, required): Segment identifier
+
+**Response**: Returns a single segment object
+
+### Update Segment
+
+Updates an existing segment.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/segments/{segment_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `segment_id` (string, required): Segment identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Segment Name",
+  "description": "Updated segment description",
+  "metadata": {
+    "risk_level": "medium",
+    "customer_type": "individual"
+  }
+}
+```
+
+**Response**: Returns the updated segment object
+
+### Delete Segment
+
+Deletes a segment.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}/segments/{segment_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `segment_id` (string, required): Segment identifier
+
+**Response**: Returns 204 No Content on success
+
+## Portfolios
+
+Portfolios represent collections of accounts for financial grouping.
+
+### List Portfolios
+
+Retrieves a paginated list of portfolios for a ledger.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/portfolios`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**: Similar to other list endpoints
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organization_id": "00000000-0000-0000-0000-000000000000",
+      "ledger_id": "00000000-0000-0000-0000-000000000000",
+      "segment_id": "00000000-0000-0000-0000-000000000000",
+      "name": "High-Value Customers",
+      "code": "HVC",
+      "description": "Portfolio for high-value customers",
+      "metadata": {
+        "investment_strategy": "balanced",
+        "min_value": 100000
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Portfolio
+
+Creates a new portfolio within a ledger.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/portfolios`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "segment_id": "00000000-0000-0000-0000-000000000000",
+  "name": "High-Value Customers",
+  "code": "HVC",
+  "description": "Portfolio for high-value customers",
+  "metadata": {
+    "investment_strategy": "balanced",
+    "min_value": 100000
+  }
+}
+```
+
+**Response**: Returns the created portfolio object
+
+### Get Portfolio
+
+Retrieves a specific portfolio by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `portfolio_id` (string, required): Portfolio identifier
+
+**Response**: Returns a single portfolio object
+
+### Update Portfolio
+
+Updates an existing portfolio.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `portfolio_id` (string, required): Portfolio identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Portfolio Name",
+  "description": "Updated portfolio description",
+  "metadata": {
+    "investment_strategy": "aggressive",
+    "min_value": 150000
+  }
+}
+```
+
+**Response**: Returns the updated portfolio object
+
+### Delete Portfolio
+
+Deletes a portfolio.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{portfolio_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `portfolio_id` (string, required): Portfolio identifier
+
+**Response**: Returns 204 No Content on success
+
+## Accounts
+
+Accounts represent individual financial accounts that can hold balances.
+
+### List Accounts
+
+Retrieves a paginated list of accounts for a ledger.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**:
+- `metadata` (string, optional): JSON string to filter accounts by metadata fields
+- `portfolio_id` (string, optional): Filter by portfolio ID
+- `segment_id` (string, optional): Filter by segment ID
+- `limit` (integer, optional): Maximum number of records per page (default: 10, max: 100)
+- `page` (integer, optional): Page number for pagination (default: 1)
+- `start_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+- `end_date` (string, optional): Filter by creation date (format: YYYY-MM-DD)
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organization_id": "00000000-0000-0000-0000-000000000000",
+      "ledger_id": "00000000-0000-0000-0000-000000000000",
+      "portfolio_id": "00000000-0000-0000-0000-000000000000",
+      "segment_id": "00000000-0000-0000-0000-000000000000",
+      "name": "John Doe Checking",
+      "number": "1234567890",
+      "alias": "@johndoe",
+      "type": "checking",
+      "status": "active",
+      "description": "Primary checking account for John Doe",
+      "metadata": {
+        "customer_id": "CUST-123",
+        "risk_score": 85
+      },
+      "created_at": "2021-01-01T00:00:00Z",
+      "updated_at": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "total": 1,
+  "page": 1,
+  "limit": 10,
+  "pages": 1
+}
+```
+
+### Create Account
+
+Creates a new account within a ledger.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/accounts`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "portfolio_id": "00000000-0000-0000-0000-000000000000",
+  "segment_id": "00000000-0000-0000-0000-000000000000",
+  "name": "John Doe Checking",
+  "number": "1234567890",
+  "alias": "@johndoe",
+  "type": "checking",
+  "status": "active",
+  "description": "Primary checking account for John Doe",
+  "metadata": {
+    "customer_id": "CUST-123",
+    "risk_score": 85
+  }
+}
+```
+
+**Response**: Returns the created account object
+
+### Get Account
+
+Retrieves a specific account by ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+
+**Response**: Returns a single account object
+
+### Get Account by Alias
+
+Retrieves a specific account by its alias.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `alias` (string, required): Account alias (e.g., "@johndoe")
+
+**Response**: Returns a single account object
+
+### Update Account
+
+Updates an existing account.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+
+**Request Body**:
+```json
+{
+  "name": "Updated Account Name",
+  "status": "inactive",
+  "description": "Updated account description",
+  "metadata": {
+    "customer_id": "CUST-123",
+    "risk_score": 90,
+    "notes": "Account pending verification"
+  }
+}
+```
+
+**Response**: Returns the updated account object
+
+### Delete Account
+
+Deletes an account.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+
+**Response**: Returns 204 No Content on success
+
+## Metadata Management
+
+All entities in the Onboarding API support metadata fields which allow for flexible extension of attributes. Metadata is stored as a JSON object and can be updated independently from the main entity attributes.
+
+### Update Entity Metadata
+
+Updates the metadata for any entity type.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/[entity_type]/{entity_id}/metadata`
+
+Where `[entity_type]` can be:
+- For organization: (no additional path segment needed)
+- For ledger: `ledgers`
+- For asset: `ledgers/{ledger_id}/assets`
+- For segment: `ledgers/{ledger_id}/segments`
+- For portfolio: `ledgers/{ledger_id}/portfolios`
+- For account: `ledgers/{ledger_id}/accounts`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- Additional path parameters based on entity type
+
+**Request Body**:
+```json
+{
+  "metadata": {
+    "key1": "value1",
+    "key2": "value2",
+    "nested": {
+      "subkey": "subvalue"
+    }
+  }
+}
+```
+
+**Response**: Returns the updated entity with the new metadata
+
+## Pagination
+
+List endpoints support page-based pagination using the following parameters:
+
+- `limit`: Maximum number of items to return per page (default: 10, max: 100)
+- `page`: Page number (starting from 1)
+
+The response includes:
+- `total`: Total number of items matching the query
+- `pages`: Total number of pages available
+- `page`: Current page number
+- `limit`: Items per page
+
+## Rate Limiting
+
+The Onboarding API implements rate limiting to ensure system stability:
+
+- 100 requests per minute per IP address
+- 1000 requests per minute per organization
+
+When rate limits are exceeded, the API returns a 429 Too Many Requests status code with a Retry-After header indicating the number of seconds to wait before retrying.
+
+## Webhooks
+
+The Onboarding API can notify external systems of events through webhooks. To register webhooks, please contact the Midaz support team.
+
+Available webhook events include:
+- `organization.created`: Triggered when an organization is created
+- `organization.updated`: Triggered when an organization is updated
+- `ledger.created`: Triggered when a ledger is created
+- `ledger.updated`: Triggered when a ledger is updated
+- `account.created`: Triggered when an account is created
+- `account.updated`: Triggered when an account is updated
+
+## Support
+
+For additional support or questions about the Onboarding API, please reach out through:
+- GitHub Issues: [File an issue on GitHub](https://github.com/LerianStudio/midaz/issues)
+- GitHub Discussions: [Start a discussion](https://github.com/LerianStudio/midaz/discussions)
+- Discord: [Join our community](https://discord.gg/qtKU6Zwq5b)
+- Email: contact@lerian.studio
\ No newline at end of file
diff --git a/docs/api-reference/transaction-api/README.md b/docs/api-reference/transaction-api/README.md
new file mode 100644
index 00000000..a6cf3b8a
--- /dev/null
+++ b/docs/api-reference/transaction-api/README.md
@@ -0,0 +1,847 @@
+# Transaction API
+
+**Navigation:** [Home](../../) > [API Reference](../) > Transaction API
+
+This documentation provides a comprehensive reference for the Midaz Transaction API, which handles all financial transaction processing, including balance management, operations tracking, asset rates, and transaction lifecycle management.
+
+## Overview
+
+The Transaction API is a RESTful API that manages the financial transaction process within the Midaz platform. It implements double-entry bookkeeping principles, ensures data consistency, and handles all aspects of transaction lifecycle.
+
+- **Base URL**: 
+  - Production: `https://api.midaz.io/transaction/v1`
+  - Development: `http://localhost:3001/transaction/v1`
+- **Content Type**: JSON (`application/json`)
+- **API Version**: v2.0.0
+
+## Authentication
+
+Authentication in Midaz is handled by a separate plugin that can be enabled or disabled through configuration. When enabled (`PLUGIN_AUTH_ENABLED=true`), all API requests require authentication using OAuth 2.0 Bearer tokens:
+
+```
+Authorization: Bearer YOUR_ACCESS_TOKEN
+```
+
+If authentication is disabled (`PLUGIN_AUTH_ENABLED=false`), API endpoints can be accessed without authentication. This configuration is typically used for development and testing environments only.
+
+## Common Headers
+
+| Header Name | Required | Description |
+|-------------|----------|-------------|
+| Authorization | Yes | OAuth 2.0 Bearer token |
+| X-Request-Id | No | Unique request identifier for tracing (recommended) |
+
+## Common Response Codes
+
+| Status Code | Description |
+|-------------|-------------|
+| 200 | Success - The request was processed successfully |
+| 201 | Created - The resource was created successfully |
+| 204 | No Content - The request was successful, but no content is returned |
+| 400 | Bad Request - The request contains invalid parameters or validation errors |
+| 401 | Unauthorized - Missing or invalid authentication |
+| 403 | Forbidden - Authentication succeeded but the user lacks permissions |
+| 404 | Not Found - The requested resource does not exist |
+| 409 | Conflict - A conflict occurred with the current state of the resource |
+| 500 | Internal Server Error - An error occurred on the server |
+
+## Error Response Structure
+
+All error responses follow a standardized format:
+
+```json
+{
+  "code": "ERROR_CODE",
+  "title": "Human-readable error title",
+  "message": "Detailed error message explaining the issue",
+  "entityType": "Optional entity type (e.g., 'Transaction')",
+  "fields": {
+    "fieldName": "Field-specific error message"
+  }
+}
+```
+
+## Resource Categories
+
+The Transaction API is organized into the following resource categories:
+
+- [Balances](#balances): Manage account balances
+- [Operations](#operations): Track individual financial operations
+- [Asset Rates](#asset-rates): Manage exchange rates between assets
+- [Transactions](#transactions): Create and manage financial transactions
+
+## Balances
+
+Balances represent the current financial state of an account in a specific asset.
+
+### Get All Balances
+
+Retrieves all balances across accounts.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/balances`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**:
+- `limit` (integer, optional): Number of items to return (default: 10)
+- `start_date` (string, optional): Filter by start date
+- `end_date` (string, optional): Filter by end date
+- `sort_order` (string, optional): Sort order (asc or desc)
+- `cursor` (string, optional): Pagination cursor
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "accountId": "00000000-0000-0000-0000-000000000000",
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "alias": "@person1",
+      "accountType": "creditCard",
+      "assetCode": "BRL",
+      "available": 1500,
+      "onHold": 500,
+      "scale": 2,
+      "allowSending": true,
+      "allowReceiving": true,
+      "version": 1,
+      "metadata": {},
+      "createdAt": "2021-01-01T00:00:00Z",
+      "updatedAt": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "limit": 10,
+  "next_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==",
+  "prev_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
+}
+```
+
+### Get Account Balances
+
+Retrieves all balances for a specific account.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/balances`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+
+**Query Parameters**:
+- `limit` (integer, optional): Number of items to return (default: 10)
+- `start_date` (string, optional): Filter by start date
+- `end_date` (string, optional): Filter by end date
+- `sort_order` (string, optional): Sort order (asc or desc)
+- `cursor` (string, optional): Pagination cursor
+
+**Response**: Same format as Get All Balances
+
+### Get Balance by ID
+
+Retrieves a specific balance by its ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `balance_id` (string, required): Balance identifier
+
+**Response**:
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "accountId": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "alias": "@person1",
+  "accountType": "creditCard",
+  "assetCode": "BRL",
+  "available": 1500,
+  "onHold": 500,
+  "scale": 2,
+  "allowSending": true,
+  "allowReceiving": true,
+  "version": 1,
+  "metadata": {},
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z"
+}
+```
+
+### Update Balance
+
+Updates a specific balance.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `balance_id` (string, required): Balance identifier
+
+**Request Body**:
+```json
+{
+  "allowSending": true,
+  "allowReceiving": true
+}
+```
+
+**Response**: Returns the updated balance object
+
+### Delete Balance
+
+Deletes a specific balance.
+
+**Endpoint**: `DELETE /organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `balance_id` (string, required): Balance identifier
+
+**Response**: Returns 204 No Content on success
+
+## Operations
+
+Operations represent individual debit or credit entries that make up a transaction.
+
+### Get All Operations by Account
+
+Retrieves all operations for a specific account.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+
+**Query Parameters**:
+- `limit` (integer, optional): Number of items to return (default: 10)
+- `start_date` (string, optional): Filter by start date
+- `end_date` (string, optional): Filter by end date
+- `sort_order` (string, optional): Sort order (asc or desc)
+- `cursor` (string, optional): Pagination cursor
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "transactionId": "00000000-0000-0000-0000-000000000000",
+      "accountId": "00000000-0000-0000-0000-000000000000",
+      "accountAlias": "@person1",
+      "balanceId": "00000000-0000-0000-0000-000000000000",
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "type": "creditCard",
+      "description": "Credit card operation",
+      "assetCode": "BRL",
+      "chartOfAccounts": "1000",
+      "amount": {
+        "asset": "BRL",
+        "value": 1000,
+        "scale": 2,
+        "operation": "operation"
+      },
+      "balance": {
+        "available": 1500,
+        "onHold": 500,
+        "scale": 2
+      },
+      "balanceAfter": {
+        "available": 1500,
+        "onHold": 500,
+        "scale": 2
+      },
+      "status": {
+        "code": "ACTIVE",
+        "description": "Active status"
+      },
+      "metadata": {},
+      "createdAt": "2021-01-01T00:00:00Z",
+      "updatedAt": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "limit": 10,
+  "next_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==",
+  "prev_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
+}
+```
+
+### Get Operation by ID
+
+Retrieves a specific operation by its ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations/{operation_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `account_id` (string, required): Account identifier
+- `operation_id` (string, required): Operation identifier
+
+**Response**: Returns a single operation object
+
+### Update Operation
+
+Updates a specific operation.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/operations/{operation_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `transaction_id` (string, required): Transaction identifier
+- `operation_id` (string, required): Operation identifier
+
+**Request Body**:
+```json
+{
+  "description": "Updated operation description",
+  "metadata": {
+    "key1": "value1"
+  }
+}
+```
+
+**Response**: Returns the updated operation object
+
+## Asset Rates
+
+Asset rates define exchange rates between different assets.
+
+### Create or Update Asset Rate
+
+Creates or updates an asset rate.
+
+**Endpoint**: `PUT /organizations/{organization_id}/ledgers/{ledger_id}/asset-rates`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "from": "USD",
+  "to": "BRL",
+  "rate": 100,
+  "scale": 2,
+  "externalId": "00000000-0000-0000-0000-000000000000",
+  "source": "External System",
+  "ttl": 3600,
+  "metadata": {}
+}
+```
+
+**Response**:
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "from": "USD",
+  "to": "BRL",
+  "rate": 100.0,
+  "scale": 2.0,
+  "externalId": "00000000-0000-0000-0000-000000000000",
+  "source": "External System",
+  "ttl": 3600,
+  "metadata": {},
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z"
+}
+```
+
+### Get Asset Rates by Asset Code
+
+Retrieves asset rates for a specific asset code.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/from/{asset_code}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `asset_code` (string, required): From asset code
+
+**Query Parameters**:
+- `to` (array of strings, optional): Filter by destination asset codes
+- `limit` (integer, optional): Number of items to return (default: 10)
+- `start_date` (string, optional): Filter by start date
+- `end_date` (string, optional): Filter by end date
+- `sort_order` (string, optional): Sort order (asc or desc)
+- `cursor` (string, optional): Pagination cursor
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "from": "USD",
+      "to": "BRL",
+      "rate": 100.0,
+      "scale": 2.0,
+      "externalId": "00000000-0000-0000-0000-000000000000",
+      "source": "External System",
+      "ttl": 3600,
+      "metadata": {},
+      "createdAt": "2021-01-01T00:00:00Z",
+      "updatedAt": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "limit": 10,
+  "next_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==",
+  "prev_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
+}
+```
+
+### Get Asset Rate by External ID
+
+Retrieves an asset rate by its external ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/{external_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `external_id` (string, required): External identifier
+
+**Response**: Returns a single asset rate object
+
+## Transactions
+
+Transactions represent financial movements between accounts.
+
+### Get All Transactions
+
+Retrieves all transactions for a ledger.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/transactions`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Query Parameters**:
+- `limit` (integer, optional): Number of items to return (default: 10)
+- `start_date` (string, optional): Filter by start date
+- `end_date` (string, optional): Filter by end date
+- `sort_order` (string, optional): Sort order (asc or desc)
+- `cursor` (string, optional): Pagination cursor
+
+**Response**:
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "parentTransactionId": "00000000-0000-0000-0000-000000000000",
+      "description": "Transaction description",
+      "chartOfAccountsGroupName": "Chart of accounts group name",
+      "assetCode": "BRL",
+      "amount": 1500,
+      "amountScale": 2,
+      "source": ["@person1"],
+      "destination": ["@person2"],
+      "template": "Transaction template",
+      "status": {
+        "code": "ACTIVE",
+        "description": "Active status"
+      },
+      "operations": [
+        {
+          "id": "00000000-0000-0000-0000-000000000000",
+          "transactionId": "00000000-0000-0000-0000-000000000000",
+          "accountId": "00000000-0000-0000-0000-000000000000",
+          "accountAlias": "@person1",
+          "assetCode": "BRL",
+          "amount": {
+            "asset": "BRL",
+            "value": 1000,
+            "scale": 2,
+            "operation": "operation"
+          },
+          "type": "creditCard",
+          "description": "Credit card operation"
+        }
+      ],
+      "metadata": {},
+      "createdAt": "2021-01-01T00:00:00Z",
+      "updatedAt": "2021-01-01T00:00:00Z"
+    }
+  ],
+  "limit": 10,
+  "next_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA==",
+  "prev_cursor": "MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwMA=="
+}
+```
+
+### Get Transaction by ID
+
+Retrieves a transaction by its ID.
+
+**Endpoint**: `GET /organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `transaction_id` (string, required): Transaction identifier
+
+**Response**: Returns a single transaction object with its operations
+
+### Create Transaction using JSON
+
+Creates a new transaction using JSON payload.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/transactions/json`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "description": "Payment transaction",
+  "code": "PAY_001",
+  "chartOfAccountsGroupName": "PAYMENTS",
+  "pending": false,
+  "send": {
+    "asset": "BRL",
+    "value": 1000,
+    "scale": 2,
+    "source": {
+      "from": [
+        {
+          "account": "@person1",
+          "amount": {
+            "asset": "BRL",
+            "value": 1000,
+            "scale": 2
+          },
+          "chartOfAccounts": "1000",
+          "description": "Payment source",
+          "isFrom": true
+        }
+      ]
+    },
+    "distribute": {
+      "to": [
+        {
+          "account": "@person2",
+          "amount": {
+            "asset": "BRL",
+            "value": 1000,
+            "scale": 2
+          },
+          "chartOfAccounts": "2000",
+          "description": "Payment destination"
+        }
+      ]
+    }
+  },
+  "metadata": {
+    "reference": "INV-123"
+  }
+}
+```
+
+**Response**: Returns the created transaction object
+
+### Create Transaction using DSL
+
+Creates a new transaction using a DSL (Domain-Specific Language) file.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+Content-Type: multipart/form-data
+Form field: `transaction` (file) - A DSL file describing the transaction
+
+**Response**: Returns the created transaction object
+
+### Create Transaction from Template
+
+Creates a new transaction using a template.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/transactions/templates`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+
+**Request Body**:
+```json
+{
+  "transactionType": "PAYMENT",
+  "transactionTypeCode": "PAY",
+  "variables": {
+    "fromAccount": "@person1",
+    "toAccount": "@person2",
+    "amount": 1000
+  }
+}
+```
+
+**Response**: Returns the created transaction template
+
+### Update Transaction
+
+Updates an existing transaction.
+
+**Endpoint**: `PATCH /organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `transaction_id` (string, required): Transaction identifier
+
+**Request Body**:
+```json
+{
+  "description": "Updated transaction description",
+  "metadata": {
+    "reference": "INV-124"
+  }
+}
+```
+
+**Response**: Returns the updated transaction object
+
+### Revert Transaction
+
+Reverts a transaction, creating a new transaction that reverses the original.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `transaction_id` (string, required): Transaction identifier
+
+**Response**: Returns the newly created reversal transaction
+
+### Commit Transaction
+
+Commits a previously created transaction.
+
+**Endpoint**: `POST /organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit`
+
+**Path Parameters**:
+- `organization_id` (string, required): Organization identifier
+- `ledger_id` (string, required): Ledger identifier
+- `transaction_id` (string, required): Transaction identifier
+
+**Response**: Returns a 201 Created status on success
+
+## Data Models
+
+The Transaction API uses the following primary data models:
+
+### Balance
+
+Represents the available and on-hold funds for an account in a specific asset.
+
+```json
+{
+  "id": "string",
+  "accountId": "string",
+  "accountType": "string",
+  "organizationId": "string",
+  "ledgerId": "string",
+  "alias": "string",
+  "assetCode": "string",
+  "available": "integer",
+  "onHold": "integer",
+  "scale": "integer",
+  "allowSending": "boolean",
+  "allowReceiving": "boolean",
+  "version": "integer",
+  "metadata": "object",
+  "createdAt": "string (datetime)",
+  "updatedAt": "string (datetime)",
+  "deletedAt": "string (datetime)"
+}
+```
+
+### Operation
+
+Represents an individual debit or credit entry within a transaction.
+
+```json
+{
+  "id": "string",
+  "transactionId": "string",
+  "accountId": "string",
+  "accountAlias": "string",
+  "balanceId": "string",
+  "organizationId": "string",
+  "ledgerId": "string",
+  "type": "string",
+  "description": "string",
+  "chartOfAccounts": "string",
+  "assetCode": "string",
+  "amount": {
+    "asset": "string",
+    "value": "integer",
+    "scale": "integer",
+    "operation": "string"
+  },
+  "balance": {
+    "available": "integer",
+    "onHold": "integer",
+    "scale": "integer"
+  },
+  "balanceAfter": {
+    "available": "integer",
+    "onHold": "integer",
+    "scale": "integer"
+  },
+  "status": {
+    "code": "string",
+    "description": "string"
+  },
+  "metadata": "object",
+  "createdAt": "string (datetime)",
+  "updatedAt": "string (datetime)",
+  "deletedAt": "string (datetime)"
+}
+```
+
+### AssetRate
+
+Represents an exchange rate between two assets.
+
+```json
+{
+  "id": "string",
+  "organizationId": "string",
+  "ledgerId": "string",
+  "from": "string",
+  "to": "string",
+  "rate": "number",
+  "scale": "number",
+  "externalId": "string",
+  "source": "string",
+  "ttl": "integer",
+  "metadata": "object",
+  "createdAt": "string (datetime)",
+  "updatedAt": "string (datetime)"
+}
+```
+
+### Transaction
+
+Represents a financial transaction consisting of one or more operations.
+
+```json
+{
+  "id": "string",
+  "organizationId": "string",
+  "ledgerId": "string",
+  "parentTransactionId": "string",
+  "description": "string",
+  "chartOfAccountsGroupName": "string",
+  "assetCode": "string",
+  "amount": "integer",
+  "amountScale": "integer",
+  "source": ["string"],
+  "destination": ["string"],
+  "template": "string",
+  "status": {
+    "code": "string",
+    "description": "string"
+  },
+  "operations": ["Operation objects"],
+  "metadata": "object",
+  "createdAt": "string (datetime)",
+  "updatedAt": "string (datetime)",
+  "deletedAt": "string (datetime)"
+}
+```
+
+## Transaction DSL
+
+The Transaction API supports a Domain-Specific Language (DSL) for defining transactions. This DSL provides a concise, readable way to express complex transactions.
+
+### Basic DSL Example
+
+```
+transaction "Payment" {
+  description "Payment for invoice #123"
+  code "PAY_001"
+  
+  send BRL 1000.00 {
+    source {
+      from "@person1" {
+        chart_of_accounts "1000"
+        description "Debit from person1's account"
+      }
+    }
+    
+    distribute {
+      to "@person2" {
+        chart_of_accounts "2000"
+        description "Credit to person2's account"
+      }
+    }
+  }
+}
+```
+
+For more information on the Transaction DSL syntax, please refer to the [Transaction DSL Guide](../transaction-dsl/README.md).
+
+## Pagination
+
+List endpoints support cursor-based pagination using the following parameters:
+
+- `limit`: Number of items to return per page (default: 10)
+- `cursor`: Cursor for the next page of results
+
+The response includes:
+- `prev_cursor`: Cursor for the previous page (null if on first page)
+- `next_cursor`: Cursor for the next page (null if on last page)
+
+## Rate Limiting
+
+The Transaction API implements rate limiting to ensure system stability:
+
+- 100 requests per minute per IP address
+- 1000 requests per minute per organization
+
+When rate limits are exceeded, the API returns a 429 Too Many Requests status code with a Retry-After header indicating the number of seconds to wait before retrying.
+
+## Webhooks
+
+The Transaction API can notify external systems of events through webhooks. To register webhooks, please contact the Midaz support team.
+
+Available webhook events:
+- `transaction.created`: Triggered when a transaction is created
+- `transaction.updated`: Triggered when a transaction is updated
+- `transaction.committed`: Triggered when a transaction is committed
+- `balance.updated`: Triggered when a balance is updated
+
+## Support
+
+For additional support or questions about the Transaction API, please reach out through:
+- GitHub Issues: [File an issue on GitHub](https://github.com/LerianStudio/midaz/issues)
+- GitHub Discussions: [Start a discussion](https://github.com/LerianStudio/midaz/discussions)
+- Discord: [Join our community](https://discord.gg/qtKU6Zwq5b)
+- Email: contact@lerian.studio
\ No newline at end of file
diff --git a/docs/api-reference/transaction-dsl/README.md b/docs/api-reference/transaction-dsl/README.md
new file mode 100644
index 00000000..e2cbb9da
--- /dev/null
+++ b/docs/api-reference/transaction-dsl/README.md
@@ -0,0 +1,327 @@
+# Transaction DSL Guide
+
+**Navigation:** [Home](../../) > [API Reference](../) > [Transaction DSL](./README.md)
+
+This document provides a comprehensive guide for using the Transaction Domain-Specific Language (DSL) in Midaz, which offers a concise, readable way to define complex financial transactions.
+
+## Introduction
+
+The Transaction DSL is a specialized language designed to express financial transactions within the Midaz platform. It allows you to define:
+
+- Transaction metadata (description, code, chart of accounts)
+- Source accounts for funds
+- Destination accounts for funds
+- Amount distributions and transfers
+- Currency/asset conversions
+- Additional metadata for auditing and reporting
+
+## Syntax Overview
+
+A Transaction DSL document has the following general structure:
+
+```
+transaction "Name" {
+  description "Description of the transaction"
+  code "TRANSACTION_CODE"
+  
+  send ASSET_CODE VALUE.SCALE {
+    source {
+      from ACCOUNT_ID {
+        chart_of_accounts "ACCOUNT_CODE"
+        description "Description of the source"
+      }
+    }
+    
+    distribute {
+      to ACCOUNT_ID {
+        chart_of_accounts "ACCOUNT_CODE"
+        description "Description of the destination"
+      }
+    }
+  }
+}
+```
+
+## Grammar Elements
+
+The DSL grammar is defined in `pkg/gold/Transaction.g4` and includes the following main elements:
+
+### Transaction Definition
+
+```
+transaction "Payment" {
+  description "Payment for invoice #123"
+  code "PAY_001"
+  chart-of-accounts-group-name "PAYMENTS"
+  pending false
+  ...
+}
+```
+
+- `description`: Human-readable description of the transaction
+- `code`: Unique identifier for the transaction type
+- `chart-of-accounts-group-name`: Accounting classification
+- `pending`: Boolean indicating if the transaction should be held for review
+
+### Send Block
+
+The `send` block defines the asset, amount, and scale for the entire transaction:
+
+```
+send USD 1000.00 {
+  ...
+}
+```
+
+This indicates a transfer of 1000.00 USD.
+
+### Source Block
+
+The `source` block defines where funds are coming from:
+
+```
+source {
+  from "@account1" {
+    amount USD 500.00
+    chart_of_accounts "CHECKING"
+    description "Withdrawal from checking account"
+  }
+  from "@account2" {
+    amount USD 500.00
+    chart_of_accounts "SAVINGS"
+    description "Withdrawal from savings account"
+  }
+}
+```
+
+### Distribute Block
+
+The `distribute` block defines where funds are going:
+
+```
+distribute {
+  to "@merchant" {
+    amount USD 1000.00
+    chart_of_accounts "MERCHANT_PAYMENT"
+    description "Payment to merchant"
+  }
+}
+```
+
+## Amount Specification Methods
+
+The DSL supports several ways to specify amounts:
+
+### Fixed Amount
+
+```
+amount USD 500.00
+```
+
+### Percentage Share
+
+```
+share 50
+```
+
+This indicates 50% of the total transaction amount.
+
+### Percentage of Percentage
+
+```
+share 50 of 80
+```
+
+This indicates 50% of 80% of the total transaction amount.
+
+### Remaining Amount
+
+```
+remaining
+```
+
+This indicates all remaining funds after other distributions.
+
+## Currency Conversion
+
+For transactions involving currency conversion:
+
+```
+from "@account" {
+  amount USD 1000.00
+  rate "RATE_ID" USD -> BRL 5.00
+}
+```
+
+This shows conversion from USD to BRL at a rate of 5.00.
+
+## Metadata
+
+Additional data can be attached to any transaction component:
+
+```
+metadata {
+  ("reference" "INV-123")
+  ("customer_id" "CUST-456")
+}
+```
+
+## Template Variables
+
+The DSL supports template variables for reusable transaction templates:
+
+```
+transaction-template "Payment" {
+  ...
+  from "$source_account" {
+    amount $asset_code $amount
+  }
+  ...
+}
+```
+
+Variables start with `$` and are replaced with actual values when the template is used.
+
+## Complete Examples
+
+### Simple Payment
+
+```
+transaction "Simple Payment" {
+  description "Payment from Person A to Person B"
+  code "PAYMENT"
+  chart-of-accounts-group-name "TRANSFERS"
+  
+  send USD 100.00 {
+    source {
+      from "@personA" {
+        chart_of_accounts "1000"
+        description "Debit from Person A's account"
+      }
+    }
+    
+    distribute {
+      to "@personB" {
+        chart_of_accounts "2000"
+        description "Credit to Person B's account"
+      }
+    }
+  }
+}
+```
+
+### Multi-source Payment with Currency Conversion
+
+```
+transaction "Multi-source Payment with Conversion" {
+  description "Payment from multiple sources with currency conversion"
+  code "MULTI_PAY_FX"
+  chart-of-accounts-group-name "INTERNATIONAL"
+  
+  send USD 1000.00 {
+    source {
+      from "@account1" {
+        amount USD 600.00
+        chart_of_accounts "1001"
+      }
+      from "@account2" {
+        amount USD 400.00
+        chart_of_accounts "1002"
+      }
+    }
+    
+    distribute {
+      to "@foreignMerchant" {
+        amount USD 1000.00
+        rate "RATE_ID" USD -> EUR 0.85
+        chart_of_accounts "2001"
+        description "Payment to foreign merchant in EUR"
+      }
+    }
+  }
+}
+```
+
+### Split Payment
+
+```
+transaction "Split Payment" {
+  description "Split payment to multiple recipients"
+  code "SPLIT_PAY"
+  chart-of-accounts-group-name "DISTRIBUTIONS"
+  
+  send USD 1000.00 {
+    source {
+      from "@payer" {
+        chart_of_accounts "1000"
+      }
+    }
+    
+    distribute {
+      to "@recipient1" {
+        share 50
+        chart_of_accounts "2001"
+        description "50% share"
+      }
+      to "@recipient2" {
+        share 30
+        chart_of_accounts "2002"
+        description "30% share"
+      }
+      to "@recipient3" {
+        remaining
+        chart_of_accounts "2003"
+        description "Remaining 20%"
+      }
+    }
+  }
+}
+```
+
+## Usage via API
+
+To use the Transaction DSL via the API, submit a DSL file to the endpoint:
+
+```
+POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl
+```
+
+Use `multipart/form-data` with a form field named `transaction` containing the DSL file.
+
+The API will validate the DSL syntax, parse the file, and execute the transaction if valid.
+
+## Best Practices
+
+1. **Readability**: Format your DSL files with consistent indentation and comments for clarity
+2. **Balance**: Ensure that source and distribution amounts balance correctly
+3. **Validation**: Test your DSL files with the validation tools before submission
+4. **Templates**: Use templates for recurring transaction patterns
+5. **Versions**: Include version information in your transaction codes or metadata
+
+## Error Handling
+
+Common syntax errors include:
+- Missing closing parentheses or braces
+- Incorrect asset codes
+- Invalid account references
+- Unbalanced amounts (source ≠ distribution)
+
+The API will return detailed error messages indicating the line and position of syntax errors in your DSL file.
+
+## Validation
+
+You can validate your DSL files programmatically using the provided validation tools:
+
+```go
+import "github.com/LerianStudio/midaz/pkg/gold/transaction"
+
+errorListener := transaction.Validate(dslContent)
+if errorListener != nil && len(errorListener.Errors) > 0 {
+    // Handle validation errors
+}
+```
+
+## References
+
+- [Transaction API Documentation](../transaction-api/README.md)
+- [Financial Modeling Guide](../../domain-models/financial-model.md)
\ No newline at end of file
diff --git a/docs/architecture/README.md b/docs/architecture/README.md
new file mode 100644
index 00000000..5fe83170
--- /dev/null
+++ b/docs/architecture/README.md
@@ -0,0 +1,81 @@
+# Architecture
+
+**Navigation:** [Home](../) > Architecture
+
+This section provides comprehensive documentation on the Midaz platform architecture, design principles, and system organization.
+
+## Overview
+
+Midaz is built using modern architectural patterns to ensure scalability, maintainability, and extensibility. The system follows a microservices architecture with clear boundaries between components, each responsible for specific business domains.
+
+The platform is designed around these key architectural principles:
+
+- **Hexagonal Architecture**: Clean separation of domains, application logic, and infrastructure
+- **Event-Driven Design**: Asynchronous communication between services via events
+- **CQRS (Command Query Responsibility Segregation)**: Separation of read and write operations
+- **Domain-Driven Design**: Business domains modeled as bounded contexts
+
+## Core Architectural Components
+
+The Midaz platform consists of several key components:
+
+- **Onboarding Service**: Manages the entity hierarchy (organizations, ledgers, accounts, etc.)
+- **Transaction Service**: Handles financial transactions and balance management
+- **MDZ CLI**: Command-line interface for interacting with Midaz services
+- **Infrastructure Components**: Databases, message brokers, and other shared infrastructure
+
+These components interact through well-defined APIs and event streams, following the principles of loose coupling and high cohesion.
+
+## Architecture Documentation
+
+Detailed documentation on different aspects of the architecture:
+
+- [System Overview](./system-overview.md) - High-level view of the entire system
+- [Hexagonal Architecture](./hexagonal-architecture.md) - Details on the ports and adapters pattern
+- [Event-Driven Design](./event-driven-design.md) - Event-based communication patterns
+- [Component Integration](./component-integration.md) - How components interact
+- [Data Flow](./data-flow/) - Information flow through the system
+
+## Architecture Diagrams
+
+The architecture documentation includes several key diagrams:
+
+- **System Context Diagram**: Shows the Midaz system in its environment
+- **Container Diagram**: Depicts the high-level components
+- **Component Diagrams**: Details the internal structure of each component
+- **Data Flow Diagrams**: Illustrates how data moves through the system
+- **Sequence Diagrams**: Shows interaction patterns for key processes
+
+## Key Design Decisions
+
+### Service Boundaries
+
+Services are divided along domain boundaries, with each service responsible for a specific aspect of the financial system:
+
+- **Onboarding Service**: Entity management and metadata
+- **Transaction Service**: Transaction processing and balance management
+
+### Data Persistence
+
+- **PostgreSQL**: Primary database for transactional data
+- **MongoDB**: Document store for metadata and flexible attributes
+- **Redis**: Caching and distributed locks
+
+### Communication Patterns
+
+- **Synchronous**: RESTful HTTP APIs for direct client interactions
+- **Asynchronous**: RabbitMQ for event-based communication between services
+
+## Technical Architecture
+
+Midaz is built with the following technologies:
+
+- **Backend Services**: Go language with Fiber web framework
+- **API Documentation**: OpenAPI (Swagger)
+- **Authentication**: OAuth 2.0 through a pluggable auth provider
+- **Infrastructure**: Docker and Docker Compose for containerization
+- **Observability**: Grafana, Prometheus, and OpenTelemetry
+
+## Next Steps
+
+To dive deeper into the architecture, start with the [System Overview](./system-overview.md) and then explore the specific aspects you're interested in. For a practical understanding, the [Quickstart Guide](../getting-started/quickstart.md) demonstrates how the architecture supports common workflows.
\ No newline at end of file
diff --git a/docs/architecture/component-integration.md b/docs/architecture/component-integration.md
new file mode 100644
index 00000000..5b6f4a6f
--- /dev/null
+++ b/docs/architecture/component-integration.md
@@ -0,0 +1,292 @@
+# Component Integration
+
+**Navigation:** [Home](../../) > [Architecture](../) > Component Integration
+
+This document describes how the different components in Midaz integrate and communicate with each other to form a cohesive system.
+
+## Overview
+
+Midaz follows a microservices architecture where each component has a specific responsibility and communicates with other components through well-defined interfaces. This architecture enables:
+
+- Independent development and deployment of components
+- Scalability of individual components based on demand
+- Resilience through isolation of failures
+- Flexibility to use appropriate technologies for each component
+
+The primary integration patterns used in Midaz are:
+
+1. **REST APIs** for synchronous service-to-service communication
+2. **Event-driven messaging** for asynchronous communication
+3. **Shared infrastructure** for persistent storage and messaging
+
+## Component Interaction Diagram
+
+```
+┌─────────────────┐          ┌───────────────────┐
+│                 │  REST    │                   │
+│    MDZ CLI      ├─────────►│  Onboarding       │
+│                 │          │  Service          │
+└─────────────────┘          └───────┬───────────┘
+                                     │ 
+                                     │ Events
+                                     ▼
+┌─────────────────┐          ┌───────────────────┐
+│                 │  REST    │                   │
+│  External Apps  ├─────────►│  Transaction      │
+│                 │          │  Service          │
+└─────────────────┘          └───────┬───────────┘
+                                     │
+                                     │
+              ┌─────────────────────┬┴──────────────┐
+              │                     │               │
+              ▼                     ▼               ▼
+┌─────────────────┐      ┌─────────────────┐  ┌───────────────┐
+│                 │      │                 │  │               │
+│   PostgreSQL    │      │    MongoDB      │  │   RabbitMQ    │
+│                 │      │                 │  │               │
+└─────────────────┘      └─────────────────┘  └───────────────┘
+```
+
+## Service-to-Service Communication
+
+### Onboarding and Transaction Service Integration
+
+The Onboarding and Transaction services interact via:
+
+#### 1. Event-Based Communication
+
+The primary integration mechanism between these services is event-based communication through RabbitMQ:
+
+```
+┌───────────────┐          ┌───────────┐         ┌────────────────┐
+│  Onboarding   │          │           │         │  Transaction    │
+│  Service      │          │  RabbitMQ │         │  Service       │
+└───────┬───────┘          └─────┬─────┘         └────────┬───────┘
+        │                        │                        │
+        │ Create Account         │                        │
+        │                        │                        │
+        │ Publish Account Event  │                        │
+        ├────────────────────────►                        │
+        │                        │                        │
+        │                        │ Consume Account Event  │
+        │                        ├───────────────────────►│
+        │                        │                        │
+        │                        │                        │ Create Balance
+        │                        │                        │ for Account
+        │                        │                        │
+```
+
+Key event types include:
+- Account creation events
+- Account updates
+- Account deletion (soft delete)
+
+The event structure follows a standard format:
+
+```json
+{
+  "organization_id": "uuid",
+  "ledger_id": "uuid",
+  "account_id": "uuid",
+  "payload": {
+    // Entity-specific data
+  }
+}
+```
+
+#### 2. Implicit Data Dependency
+
+Transaction service has an implicit dependency on the Onboarding service's data model:
+- References organization, ledger, and account IDs
+- Expects these entities to exist before transactions can be created
+- Uses the same identifier scheme for entity references
+
+### CLI and Service Integration
+
+The MDZ CLI interacts with both services through REST APIs:
+
+1. **Authentication Flow**:
+   - OAuth 2.0 authentication with token-based access
+   - Token stored locally for subsequent requests
+   - Supports browser-based and terminal-based login flows
+
+2. **Resource Management**:
+   - Creates and manages entities through REST API calls
+   - Follows a hierarchical resource pattern
+   - Uses standard HTTP methods (GET, POST, PATCH, DELETE)
+
+3. **Error Handling**:
+   - Consistent error response format across services
+   - Detailed error messages for troubleshooting
+   - Status codes follow HTTP conventions
+
+## Network Configuration
+
+Components are organized into logical networks to control communication:
+
+- **infra-network**: Shared by all services and infrastructure components
+- **onboarding-network**: Specific to the onboarding service
+- **transaction-network**: Specific to the transaction service
+- **plugin-auth-network**: Shared for authentication
+
+This network segmentation provides:
+- Isolation between components
+- Control over service discovery
+- Security through network boundaries
+
+## API Contracts
+
+### Onboarding Service API
+
+The Onboarding Service exposes a REST API for entity management:
+
+- `/v1/organizations` - Organization management
+- `/v1/organizations/:org_id/ledgers` - Ledger management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/assets` - Asset management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/segments` - Segment management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/portfolios` - Portfolio management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/accounts` - Account management
+
+### Transaction Service API
+
+The Transaction Service exposes a REST API for financial operations:
+
+- `/v1/organizations/:org_id/ledgers/:ledger_id/transactions` - Transaction management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/operations` - Operation management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/balances` - Balance management
+- `/v1/organizations/:org_id/ledgers/:ledger_id/asset-rates` - Asset rate management
+
+### API Documentation
+
+Both services provide OpenAPI/Swagger documentation for their APIs, ensuring:
+- Clear contract definition
+- Consistent parameter and response formats
+- Comprehensive error documentation
+
+## Infrastructure Integration
+
+### PostgreSQL Integration
+
+Both services use PostgreSQL for persistent storage:
+
+- Each service has its own database schema
+- Transaction service depends on entities created by the Onboarding service
+- Connection pooling for efficient database usage
+- Migration scripts for schema versioning
+
+### MongoDB Integration
+
+MongoDB is used for metadata storage:
+
+- Flexible schema for entity metadata
+- Shared connection configuration
+- Replica set for high availability
+
+### RabbitMQ Integration
+
+RabbitMQ provides the messaging infrastructure:
+
+- Predefined exchanges and queues for known message types
+- Direct exchange type for message routing
+- Durable queues for message persistence
+- Connection pooling and automatic reconnection
+
+## Authentication and Authorization
+
+Midaz implements secure communication between components:
+
+1. **User Authentication**:
+   - OAuth 2.0 flow for end-user authentication
+   - JWT tokens for API access
+
+2. **Service Authentication**:
+   - Service-specific credentials for database access
+   - Dedicated RabbitMQ users for each service
+
+3. **API Authorization**:
+   - Role-based access controls
+   - Resource-level permissions
+   - Organization and ledger context for all operations
+
+## Data Flow Examples
+
+### Account Creation and Balance Creation
+
+```
+┌───────────┐          ┌───────────────┐         ┌───────────┐        ┌────────────────┐
+│           │          │               │         │           │        │                │
+│   User    │          │   MDZ CLI     │         │ Onboarding│        │  Transaction   │
+│           │          │               │         │  Service  │        │  Service       │
+└─────┬─────┘          └───────┬───────┘         └─────┬─────┘        └────────┬───────┘
+      │                        │                       │                       │
+      │ Create Account Command │                       │                       │
+      ├───────────────────────►│                       │                       │
+      │                        │                       │                       │
+      │                        │ POST /accounts        │                       │
+      │                        ├──────────────────────►│                       │
+      │                        │                       │                       │
+      │                        │                       │ Store Account         │
+      │                        │                       ├─────────┐             │
+      │                        │                       │         │             │
+      │                        │                       ◄─────────┘             │
+      │                        │                       │                       │
+      │                        │                       │ Publish Account Event │
+      │                        │                       ├──────────────────────►│
+      │                        │                       │                       │
+      │                        │ 201 Created           │                       │ Create Balance
+      │                        ◄──────────────────────┤                       ├─────────┐
+      │                        │                       │                       │         │
+      │ Account Created        │                       │                       │         │
+      ◄───────────────────────┤                       │                       ◄─────────┘
+      │                        │                       │                       │
+```
+
+### Transaction Creation
+
+```
+┌───────────┐          ┌───────────────┐                     ┌────────────────┐
+│           │          │               │                     │                │
+│   User    │          │   MDZ CLI     │                     │  Transaction   │
+│           │          │               │                     │  Service       │
+└─────┬─────┘          └───────┬───────┘                     └────────┬───────┘
+      │                        │                                      │
+      │ Create Transaction     │                                      │
+      ├───────────────────────►│                                      │
+      │                        │                                      │
+      │                        │ POST /transactions                   │
+      │                        ├─────────────────────────────────────►│
+      │                        │                                      │
+      │                        │                                      │ Validate Transaction
+      │                        │                                      ├─────────┐
+      │                        │                                      │         │
+      │                        │                                      ◄─────────┘
+      │                        │                                      │
+      │                        │                                      │ Publish Transaction Event
+      │                        │                                      ├─────────┐
+      │                        │                                      │         │
+      │                        │                                      ◄─────────┘
+      │                        │                                      │
+      │                        │ 202 Accepted                         │ Process Transaction Async
+      │                        ◄─────────────────────────────────────┤ (Update Balances, Create
+      │                        │                                      │  Operations, etc.)
+      │ Transaction Created    │                                      │
+      ◄───────────────────────┤                                      │
+      │                        │                                      │
+```
+
+## Benefits of the Integration Approach
+
+The integration approach used in Midaz provides several benefits:
+
+1. **Loose Coupling**: Services can evolve independently
+2. **Scalability**: Each component can scale based on its specific load
+3. **Resilience**: Failures are isolated to specific components
+4. **Flexibility**: Different technologies can be used for each component
+5. **Clear Contracts**: Well-defined interfaces ensure proper integration
+
+## Next Steps
+
+- [Hexagonal Architecture](./hexagonal-architecture.md) - How components are structured internally
+- [Event-Driven Design](./event-driven-design.md) - How events are used for integration
+- [Entity Lifecycle](./data-flow/entity-lifecycle.md) - How entities flow through the system
+- [Transaction Lifecycle](./data-flow/transaction-lifecycle.md) - How transactions are processed
\ No newline at end of file
diff --git a/docs/architecture/data-flow/README.md b/docs/architecture/data-flow/README.md
new file mode 100644
index 00000000..5084dcd4
--- /dev/null
+++ b/docs/architecture/data-flow/README.md
@@ -0,0 +1,134 @@
+# Data Flow
+
+**Navigation:** [Home](../../../) > [Architecture](../) > Data Flow
+
+This section documents how data flows through the Midaz system, including entity lifecycle and transaction processing.
+
+## Overview
+
+Data flow in Midaz follows specific patterns depending on the type of data being processed. The primary data flows are:
+
+1. **Entity Lifecycle**: How financial entities (organizations, ledgers, accounts) flow through the system
+2. **Transaction Lifecycle**: How financial transactions and their operations are processed
+
+Both flows leverage event-driven architecture for asynchronous processing and service integration.
+
+## Key Concepts
+
+### Event-Driven Communication
+
+Midaz uses events to communicate between services. When an entity is created, updated, or deleted, events are published to allow other services to react. For example:
+
+- When an account is created in the Onboarding service, an event is published
+- The Transaction service consumes this event and creates a balance for the account
+- No direct service calls are required, enabling loose coupling
+
+### Command Query Responsibility Segregation (CQRS)
+
+Midaz implements CQRS to separate read and write operations:
+
+- **Commands**: Change the state of the system (e.g., create a transaction)
+- **Queries**: Return data without changing state (e.g., get account details)
+
+This separation allows for optimized data models for each type of operation.
+
+### Asynchronous Processing
+
+Long-running operations are processed asynchronously:
+
+- Operations are submitted via API with quick validation
+- Processing continues in the background via queues
+- Clients receive immediate acknowledgment
+- Status updates track the progress of operations
+
+## Data Flow Diagrams
+
+### Entity Creation Flow
+
+```
+┌───────────┐         ┌───────────────┐          ┌───────────┐         ┌────────────────┐
+│           │         │               │          │           │         │                │
+│   User    │         │   MDZ CLI     │          │ Onboarding│         │  Transaction   │
+│           │         │               │          │  Service  │         │  Service       │
+└─────┬─────┘         └───────┬───────┘          └─────┬─────┘         └────────┬───────┘
+      │                       │                        │                        │
+      │ Create Account        │                        │                        │
+      ├──────────────────────►│                        │                        │
+      │                       │                        │                        │
+      │                       │ POST /accounts         │                        │
+      │                       ├───────────────────────►│                        │
+      │                       │                        │                        │
+      │                       │                        │ Store in Database      │
+      │                       │                        ├──────────┐             │
+      │                       │                        │          │             │
+      │                       │                        ◄──────────┘             │
+      │                       │                        │                        │
+      │                       │                        │ Publish Event          │
+      │                       │                        ├───────────────────────►│
+      │                       │                        │                        │
+      │                       │                        │                        │ Create Balance
+      │                       │                        │                        ├──────────┐
+      │                       │                        │                        │          │
+      │                       │                        │                        ◄──────────┘
+      │                       │ 201 Created            │                        │
+      │                       ◄───────────────────────┤                        │
+      │                       │                        │                        │
+      │ Success               │                        │                        │
+      ◄──────────────────────┤                        │                        │
+      │                       │                        │                        │
+```
+
+### Transaction Processing Flow
+
+```
+┌───────────┐         ┌───────────────┐          ┌─────────────────┐         ┌────────────────┐
+│           │         │               │          │                 │         │                │
+│   User    │         │   MDZ CLI     │          │  Transaction    │         │  Queue         │
+│           │         │               │          │  Service API    │         │  Consumer      │
+└─────┬─────┘         └───────┬───────┘          └─────┬───────────┘         └────────┬───────┘
+      │                       │                        │                              │
+      │ Create Transaction    │                        │                              │
+      ├──────────────────────►│                        │                              │
+      │                       │                        │                              │
+      │                       │ POST /transactions     │                              │
+      │                       ├───────────────────────►│                              │
+      │                       │                        │                              │
+      │                       │                        │ Validate Transaction         │
+      │                       │                        ├──────────┐                   │
+      │                       │                        │          │                   │
+      │                       │                        ◄──────────┘                   │
+      │                       │                        │                              │
+      │                       │                        │ Store in Database            │
+      │                       │                        ├──────────┐                   │
+      │                       │                        │          │                   │
+      │                       │                        ◄──────────┘                   │
+      │                       │                        │                              │
+      │                       │                        │ Publish to Queue             │
+      │                       │                        ├─────────────────────────────►│
+      │                       │                        │                              │
+      │                       │ 202 Accepted           │                              │ Process Transaction
+      │                       ◄───────────────────────┤                              ├──────────┐
+      │                       │                        │                              │          │
+      │ Transaction Submitted │                        │                              │          │
+      ◄──────────────────────┤                        │                              │          │
+      │                       │                        │                              │          │
+      │                       │                        │                              │ Update Balances
+      │                       │                        │                              ├──────────┐
+      │                       │                        │                              │          │
+      │                       │                        │                              ◄──────────┘
+      │                       │                        │                              │
+      │                       │                        │ Update Transaction Status    │
+      │                       │                        ◄─────────────────────────────┤
+      │                       │                        │                              │
+```
+
+## Documents in This Section
+
+- [Entity Lifecycle](./entity-lifecycle.md) - The lifecycle of entities from creation to deletion
+- [Transaction Lifecycle](./transaction-lifecycle.md) - The lifecycle of transactions and their processing
+
+## Next Steps
+
+- [Hexagonal Architecture](../hexagonal-architecture.md) - The architectural pattern used by Midaz
+- [Event-Driven Design](../event-driven-design.md) - How events are used for communication
+- [Component Integration](../component-integration.md) - How components work together
\ No newline at end of file
diff --git a/docs/architecture/data-flow/entity-lifecycle.md b/docs/architecture/data-flow/entity-lifecycle.md
new file mode 100644
index 00000000..fa1d5ba5
--- /dev/null
+++ b/docs/architecture/data-flow/entity-lifecycle.md
@@ -0,0 +1,615 @@
+# Entity Lifecycle
+
+**Navigation:** [Home](../../../) > [Architecture](../) > [Data Flow](./) > Entity Lifecycle
+
+This document describes the lifecycle of entities in Midaz, from creation to deletion, and the flow of entity data through the system.
+
+## Entity Hierarchy
+
+Midaz implements a hierarchical entity model:
+
+```
+Organization
+  │
+  ├── Ledger
+  │    │
+  │    ├── Asset
+  │    │
+  │    ├── Segment
+  │    │
+  │    ├── Portfolio
+  │    │
+  │    └── Account
+  │         │
+  │         └── Balance
+  │
+  └── Organization (optional parent-child relationship)
+```
+
+Each entity has its own lifecycle, but follows consistent patterns across the system.
+
+## Lifecycle Stages
+
+### 1. Entity Creation
+
+The creation process follows these steps:
+
+```
+┌──────────────┐     ┌───────────────┐     ┌─────────────────┐     ┌──────────────┐     ┌────────────────┐
+│  HTTP API    │     │ Command Layer │     │ Repository      │     │  Database    │     │  Event         │
+│  Controller  │────►│ Create Entity │────►│ Implementation  │────►│  Persistence │────►│  Publication   │
+└──────────────┘     └───────────────┘     └─────────────────┘     └──────────────┘     └────────────────┘
+       ▲                     │                                                                  │
+       │                     │                                                                  │
+       │                     ▼                                                                  ▼
+       │               ┌───────────────┐                                                ┌────────────────┐
+       │               │   Validate    │                                                │ Event          │
+       │               │   Constraints │                                                │ Consumers      │
+       │               └───────────────┘                                                └────────────────┘
+       │                                                                                       │
+       │                                                                                       ▼
+       │                                                                                ┌────────────────┐
+       │                                                                                │ Related Entity │
+       └────────────────────────────────────────────────────────────────────────────────┤ Processing     │
+                                                                                        └────────────────┘
+```
+
+Key steps in entity creation:
+
+1. **Request Validation**: Input data is validated against schema and business rules
+2. **UUID Generation**: A unique identifier is assigned to the entity
+3. **Status Assignment**: Initial status (typically "ACTIVE") is set
+4. **Database Persistence**: Entity is stored in PostgreSQL
+5. **Metadata Storage**: Any metadata is stored in MongoDB
+6. **Event Publication**: Entity creation event is published to RabbitMQ
+7. **Response**: Entity data with ID is returned to the caller
+
+Example code flow for entity creation:
+
+```go
+// HTTP Controller
+func (c *Controller) Create(w http.ResponseWriter, r *http.Request) {
+    // Parse request
+    var request dto.OrganizationRequest
+    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
+        httputils.WriteError(w, errors.NewBadRequestError("invalid request body"))
+        return
+    }
+    
+    // Map to domain model
+    organization := &mmodel.Organization{
+        Name:          request.Name,
+        LegalName:     request.LegalName,
+        LegalDocument: request.LegalDocument,
+        // ...other fields
+    }
+    
+    // Call domain service
+    result, err := c.createOrgUseCase.Execute(r.Context(), organization)
+    if err != nil {
+        httputils.WriteError(w, err)
+        return
+    }
+    
+    // Return response
+    httputils.WriteJSON(w, http.StatusCreated, result)
+}
+
+// Command handler
+func (u *CreateOrganizationUseCase) Execute(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error) {
+    // Validate
+    if err := u.validateOrganization(organization); err != nil {
+        return nil, err
+    }
+    
+    // Generate UUID if not provided
+    if organization.ID == uuid.Nil {
+        organization.ID = uuid.New()
+    }
+    
+    // Set default values
+    organization.Status = "ACTIVE"
+    organization.CreatedAt = time.Now()
+    organization.UpdatedAt = time.Now()
+    
+    // Store in repository
+    result, err := u.repository.Create(ctx, organization)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Store metadata if any
+    if organization.Metadata != nil {
+        err = u.metadataRepo.Store(ctx, "organization", result.ID, organization.Metadata)
+        if err != nil {
+            return nil, err
+        }
+    }
+    
+    // Publish event
+    err = u.eventPublisher.PublishOrganizationCreated(ctx, result)
+    if err != nil {
+        log.Warn(ctx, "Failed to publish organization created event", err)
+        // Continue despite event publishing failure
+    }
+    
+    return result, nil
+}
+```
+
+### 2. Entity Retrieval
+
+Entities can be retrieved individually or as collections:
+
+```
+┌──────────────┐     ┌───────────────┐     ┌─────────────────┐     ┌──────────────┐
+│  HTTP API    │     │  Query Layer  │     │  Repository     │     │  Database    │
+│  Controller  │────►│  Get Entity   │────►│  Implementation │────►│  Fetch       │
+└──────────────┘     └───────────────┘     └──────────────┬──┘     └──────────────┘
+       ▲                                                   │               │
+       │                                                   │               │
+       │                                                   ▼               │
+       │                                           ┌─────────────────┐     │
+       │                                           │  Metadata       │◄────┘
+       │                                           │  Repository     │
+       │                                           └────────┬────────┘
+       │                                                    │
+       │                                                    ▼
+       │                                           ┌─────────────────┐
+       └───────────────────────────────────────────┤  Combine Data  │
+                                                   └─────────────────┘
+```
+
+Key aspects of entity retrieval:
+
+1. **Query Parameters**: Filter, sort, and pagination parameters
+2. **Repository Abstraction**: Data access through repository interfaces
+3. **Metadata Combination**: Entity data combined with metadata
+4. **Parent-Child Relationships**: Related entities retrieved as needed
+5. **Soft Delete Handling**: Filtered to exclude deleted entities by default
+
+Example code flow for entity retrieval:
+
+```go
+// Query handler
+func (u *GetOrganizationUseCase) Execute(ctx context.Context, id uuid.UUID) (*mmodel.Organization, error) {
+    // Fetch from repository
+    organization, err := u.repository.Find(ctx, id)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Fetch metadata
+    metadata, err := u.metadataRepo.Get(ctx, "organization", id)
+    if err != nil && !errors.IsNotFound(err) {
+        return nil, err
+    }
+    
+    // Combine entity with metadata
+    if metadata != nil {
+        organization.Metadata = metadata
+    }
+    
+    return organization, nil
+}
+
+// Repository implementation
+func (r *PostgreSQLRepository) Find(ctx context.Context, id uuid.UUID) (*mmodel.Organization, error) {
+    query := `SELECT id, name, legal_name, legal_document, status, created_at, updated_at 
+              FROM organizations 
+              WHERE id = $1 AND deleted_at IS NULL`
+    
+    var org mmodel.Organization
+    err := r.db.QueryRowContext(ctx, query, id).Scan(
+        &org.ID,
+        &org.Name,
+        &org.LegalName,
+        &org.LegalDocument,
+        &org.Status,
+        &org.CreatedAt,
+        &org.UpdatedAt,
+    )
+    
+    if err == sql.ErrNoRows {
+        return nil, errors.NewNotFoundError(fmt.Sprintf("organization with id %s not found", id))
+    }
+    
+    if err != nil {
+        return nil, errors.FromError(err).WithMessage("error finding organization")
+    }
+    
+    return &org, nil
+}
+```
+
+### 3. Entity Update
+
+Updates follow a similar pattern to creation:
+
+```
+┌──────────────┐     ┌───────────────┐     ┌─────────────────┐     ┌──────────────┐     ┌────────────────┐
+│  HTTP API    │     │ Command Layer │     │ Repository      │     │  Database    │     │  Event         │
+│  Controller  │────►│ Update Entity │────►│ Implementation  │────►│  Update      │────►│  Publication   │
+└──────────────┘     └───────────────┘     └─────────────────┘     └──────────────┘     └────────────────┘
+       ▲                     │                                                                  │
+       │                     │                                                                  │
+       │                     ▼                                                                  ▼
+       │               ┌───────────────┐                                                ┌────────────────┐
+       │               │   Validate    │                                                │ Event          │
+       │               │   Changes     │                                                │ Consumers      │
+       │               └───────────────┘                                                └────────────────┘
+       │                                                                                       │
+       │                                                                                       ▼
+       │                                                                                ┌────────────────┐
+       │                                                                                │ Related Entity │
+       └────────────────────────────────────────────────────────────────────────────────┤ Updates        │
+                                                                                        └────────────────┘
+```
+
+Key aspects of entity updates:
+
+1. **Partial Updates**: Only specified fields are updated
+2. **Optimistic Concurrency**: Version checking (in some entities)
+3. **Validation**: Business rules enforced on updated fields
+4. **Metadata Updates**: Separate from entity updates
+5. **Event Publication**: Update events for downstream processing
+
+Example code flow for entity update:
+
+```go
+// Update handler
+func (u *UpdateOrganizationUseCase) Execute(ctx context.Context, id uuid.UUID, organization *mmodel.Organization) (*mmodel.Organization, error) {
+    // Check if entity exists
+    existing, err := u.repository.Find(ctx, id)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Apply partial updates
+    if organization.Name != "" {
+        existing.Name = organization.Name
+    }
+    if organization.LegalName != "" {
+        existing.LegalName = organization.LegalName
+    }
+    if organization.Status != "" {
+        existing.Status = organization.Status
+    }
+    
+    // Set updated timestamp
+    existing.UpdatedAt = time.Now()
+    
+    // Update in repository
+    result, err := u.repository.Update(ctx, id, existing)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Update metadata if provided
+    if organization.Metadata != nil {
+        err = u.metadataRepo.Update(ctx, "organization", id, organization.Metadata)
+        if err != nil {
+            return nil, err
+        }
+    }
+    
+    // Publish event
+    err = u.eventPublisher.PublishOrganizationUpdated(ctx, result)
+    if err != nil {
+        log.Warn(ctx, "Failed to publish organization updated event", err)
+    }
+    
+    return result, nil
+}
+```
+
+### 4. Entity Deletion
+
+Entities in Midaz are soft-deleted:
+
+```
+┌──────────────┐     ┌───────────────┐     ┌─────────────────┐     ┌──────────────┐     ┌────────────────┐
+│  HTTP API    │     │ Command Layer │     │ Repository      │     │  Database    │     │  Event         │
+│  Controller  │────►│ Delete Entity │────►│ Implementation  │────►│  Soft Delete │────►│  Publication   │
+└──────────────┘     └───────────────┘     └─────────────────┘     └──────────────┘     └────────────────┘
+       ▲                     │                                                                  │
+       │                     │                                                                  │
+       │                     ▼                                                                  ▼
+       │               ┌───────────────┐                                                ┌────────────────┐
+       │               │   Validate    │                                                │ Event          │
+       │               │ Delete Allowed│                                                │ Consumers      │
+       │               └───────────────┘                                                └────────────────┘
+       │                                                                                       │
+       │                                                                                       ▼
+       │                                                                                ┌────────────────┐
+       │                                                                                │ Related Entity │
+       └────────────────────────────────────────────────────────────────────────────────┤ Cascades       │
+                                                                                        └────────────────┘
+```
+
+Key aspects of entity deletion:
+
+1. **Soft Delete**: Entities are marked as deleted with a timestamp rather than physically removed
+2. **Cascading Deletes**: Parent-child relationships may trigger cascading soft-deletes
+3. **Validation**: Business rules may prevent deletion in certain states
+4. **Event Publication**: Deletion events for downstream processing
+
+Example code flow for entity deletion:
+
+```go
+// Delete handler
+func (u *DeleteOrganizationUseCase) Execute(ctx context.Context, id uuid.UUID) error {
+    // Check if entity exists
+    _, err := u.repository.Find(ctx, id)
+    if err != nil {
+        return err
+    }
+    
+    // Check business rules (e.g., no active children)
+    count, err := u.ledgerRepo.CountByOrganizationID(ctx, id)
+    if err != nil {
+        return err
+    }
+    
+    if count > 0 {
+        return errors.NewConflictError("cannot delete organization with active ledgers")
+    }
+    
+    // Perform soft delete
+    err = u.repository.Delete(ctx, id)
+    if err != nil {
+        return err
+    }
+    
+    // Publish event
+    err = u.eventPublisher.PublishOrganizationDeleted(ctx, id)
+    if err != nil {
+        log.Warn(ctx, "Failed to publish organization deleted event", err)
+    }
+    
+    return nil
+}
+
+// Repository implementation
+func (r *PostgreSQLRepository) Delete(ctx context.Context, id uuid.UUID) error {
+    query := `UPDATE organizations SET deleted_at = $1 WHERE id = $2 AND deleted_at IS NULL`
+    
+    result, err := r.db.ExecContext(ctx, query, time.Now(), id)
+    if err != nil {
+        return errors.FromError(err).WithMessage("error deleting organization")
+    }
+    
+    rowsAffected, err := result.RowsAffected()
+    if err != nil {
+        return errors.FromError(err).WithMessage("error getting rows affected")
+    }
+    
+    if rowsAffected == 0 {
+        return errors.NewNotFoundError(fmt.Sprintf("organization with id %s not found", id))
+    }
+    
+    return nil
+}
+```
+
+## Entity Validation
+
+Entities go through several validation layers:
+
+1. **Input Validation**: Basic field validation (required fields, formats)
+2. **Business Rules**: Domain-specific rules (e.g., status transitions)
+3. **Referential Integrity**: Foreign key constraints
+4. **Uniqueness Constraints**: Prevent duplicates (e.g., unique names within parent)
+
+Example validation logic:
+
+```go
+func (u *CreateOrganizationUseCase) validateOrganization(org *mmodel.Organization) error {
+    // Required fields
+    if org.Name == "" {
+        return errors.NewValidationError("name is required")
+    }
+    if org.LegalName == "" {
+        return errors.NewValidationError("legal name is required")
+    }
+    if org.LegalDocument == "" {
+        return errors.NewValidationError("legal document is required")
+    }
+    
+    // Business rules
+    if org.ParentID != nil {
+        // Check if parent exists
+        _, err := u.repository.Find(ctx, *org.ParentID)
+        if err != nil {
+            return errors.NewValidationError("parent organization not found")
+        }
+    }
+    
+    // Check for duplicate names
+    exists, err := u.repository.ExistsByName(ctx, org.Name)
+    if err != nil {
+        return err
+    }
+    if exists {
+        return errors.NewConflictError("organization with this name already exists")
+    }
+    
+    return nil
+}
+```
+
+## Entity Relationships
+
+Entities in Midaz have various types of relationships:
+
+1. **Hierarchical Relationships**:
+   - Organization can have parent/child Organizations
+   - Account can have parent/child Accounts
+
+2. **Ownership Relationships**:
+   - Organization owns Ledgers
+   - Ledger owns Assets, Segments, Portfolios, and Accounts
+   - Portfolio contains Accounts
+
+3. **Reference Relationships**:
+   - Account references Asset (via assetCode)
+   - Account may belong to Portfolio and/or Segment
+
+## Metadata Management
+
+Entities can have flexible metadata stored separately:
+
+1. **MongoDB Storage**: Metadata stored in MongoDB collections
+2. **Key-Value Structure**: Metadata stored as key-value pairs
+3. **Entity Reference**: Linked to entity by ID and type
+4. **Independent Lifecycle**: Metadata can be updated separately
+
+Example metadata operations:
+
+```go
+// Store metadata
+func (r *MetadataMongoDBRepository) Store(ctx context.Context, entityType string, entityID uuid.UUID, metadata map[string]interface{}) error {
+    collection := r.db.Collection("metadata")
+    
+    doc := bson.M{
+        "entity_type": entityType,
+        "entity_id":   entityID.String(),
+        "metadata":    metadata,
+        "created_at":  time.Now(),
+        "updated_at":  time.Now(),
+    }
+    
+    _, err := collection.InsertOne(ctx, doc)
+    if err != nil {
+        return errors.FromError(err).WithMessage("error storing metadata")
+    }
+    
+    return nil
+}
+
+// Get metadata
+func (r *MetadataMongoDBRepository) Get(ctx context.Context, entityType string, entityID uuid.UUID) (map[string]interface{}, error) {
+    collection := r.db.Collection("metadata")
+    
+    filter := bson.M{
+        "entity_type": entityType,
+        "entity_id":   entityID.String(),
+    }
+    
+    var result struct {
+        Metadata map[string]interface{} `bson:"metadata"`
+    }
+    
+    err := collection.FindOne(ctx, filter).Decode(&result)
+    if err == mongo.ErrNoDocuments {
+        return nil, errors.NewNotFoundError("metadata not found")
+    }
+    if err != nil {
+        return nil, errors.FromError(err).WithMessage("error getting metadata")
+    }
+    
+    return result.Metadata, nil
+}
+```
+
+## Event Publication
+
+Entity lifecycle events are published to allow other components to react:
+
+1. **Event Types**: Created, Updated, Deleted events
+2. **Event Structure**: Contains entity ID, organization ID, and relevant data
+3. **Message Broker**: RabbitMQ for event distribution
+4. **Consumer Processing**: Services consume events to update related entities
+
+Example event publication:
+
+```go
+// Publish account created event
+func (p *ProducerRabbitMQ) PublishAccountCreated(ctx context.Context, account *mmodel.Account) error {
+    // Create queue data
+    queueData := &mmodel.QueueData{
+        OrganizationID: account.OrganizationID,
+        LedgerID:       account.LedgerID,
+        AccountID:      account.ID,
+        Payload: map[string]interface{}{
+            "account_id":   account.ID.String(),
+            "asset_code":   account.AssetCode,
+            "account_type": account.Type,
+            "status":       account.Status,
+        },
+    }
+    
+    // Create header ID for tracing
+    headerID := uuid.New().String()
+    
+    // Publish to queue
+    err := p.publishToQueue(ctx, "account.create", headerID, queueData)
+    if err != nil {
+        return errors.FromError(err).WithMessage("error publishing account created event")
+    }
+    
+    return nil
+}
+```
+
+## Related Entity Processing
+
+When an entity is created or updated, related entities may need processing:
+
+1. **Balance Creation**: When an Account is created, a Balance is automatically created
+2. **Transaction Processing**: When a Transaction is created, Balances are updated
+3. **Cascading Updates**: Status changes may propagate to child entities
+
+Example of related entity processing:
+
+```go
+// Handle account created event
+func (h *AccountCreatedHandler) Handle(ctx context.Context, data *mmodel.QueueData) error {
+    // Extract account data
+    accountID, err := uuid.Parse(data.Payload["account_id"].(string))
+    if err != nil {
+        return errors.FromError(err).WithMessage("invalid account ID")
+    }
+    
+    assetCode := data.Payload["asset_code"].(string)
+    accountType := data.Payload["account_type"].(string)
+    
+    // Create balance for account
+    balance := &mmodel.Balance{
+        ID:          uuid.New(),
+        AccountID:   accountID,
+        AssetCode:   assetCode,
+        AccountType: accountType,
+        Available:   "0",
+        OnHold:      "0",
+        Scale:       2,  // Default scale
+        Version:     1,  // Initial version
+        CreatedAt:   time.Now(),
+        UpdatedAt:   time.Now(),
+    }
+    
+    // Store balance
+    _, err = h.balanceRepo.Create(ctx, balance)
+    if err != nil {
+        return err
+    }
+    
+    return nil
+}
+```
+
+## Entity Lifecycle Benefits
+
+The entity lifecycle management in Midaz provides several benefits:
+
+1. **Consistency**: Standardized patterns across all entities
+2. **Auditability**: Complete history through soft deletes and timestamps
+3. **Loose Coupling**: Services can evolve independently
+4. **Extensibility**: Metadata support for extending entities
+5. **Resilience**: Event-driven architecture allows for retry mechanisms
+
+## Next Steps
+
+- [Transaction Lifecycle](./transaction-lifecycle.md) - How transactions flow through the system
+- [Component Integration](../component-integration.md) - How components interact
+- [Domain Models](../../domain-models/entity-hierarchy.md) - Learn about the entity models
\ No newline at end of file
diff --git a/docs/architecture/data-flow/transaction-lifecycle.md b/docs/architecture/data-flow/transaction-lifecycle.md
new file mode 100644
index 00000000..29671221
--- /dev/null
+++ b/docs/architecture/data-flow/transaction-lifecycle.md
@@ -0,0 +1,498 @@
+# Transaction Lifecycle
+
+**Navigation:** [Home](../../../) > [Architecture](../) > [Data Flow](./) > Transaction Lifecycle
+
+This document describes the lifecycle of transactions in Midaz, from creation to completion, and the flow of transaction data through the system.
+
+## Transaction Overview
+
+Transactions in Midaz represent financial operations between accounts. They implement double-entry accounting principles, ensuring that the sum of debits equals the sum of credits. Each transaction consists of multiple operations that record individual account movements.
+
+## Transaction Status Lifecycle
+
+Transactions move through multiple statuses during their lifecycle:
+
+```
+                   ┌─────────┐
+                   │ CREATED │
+                   └────┬────┘
+                        │
+                        ▼
+                   ┌─────────┐       ┌──────────┐
+                   │APPROVED │------>│ CANCELED │
+                   └────┬────┘       └──────────┘
+                        │
+                        ▼
+                   ┌─────────┐       ┌──────────┐
+                   │ PENDING │------>│ DECLINED │
+                   └────┬────┘       └──────────┘
+                        │
+                        ▼
+                   ┌─────────┐
+                   │  SENT   │
+                   └─────────┘
+```
+
+**Status Definitions:**
+- **CREATED**: Initial state when a transaction is first created
+- **APPROVED**: Transaction has passed validation 
+- **PENDING**: Transaction is being processed asynchronously
+- **SENT**: Transaction has been successfully completed
+- **CANCELED**: Transaction was manually canceled
+- **DECLINED**: Transaction failed during processing
+
+## Transaction Processing Flow
+
+The transaction processing follows these steps:
+
+```
+┌──────────────┐     ┌───────────────┐     ┌─────────────────┐     ┌──────────────┐     ┌────────────────┐
+│  HTTP API    │     │ Command Layer │     │ DSL/Validation  │     │  Async Queue │     │ BTO Processor  │
+│  Controller  │────►│ Create Trans. │────►│ Processing      │────►│  Publication │────►│ (Balance/Trans)│
+└──────────────┘     └───────────────┘     └─────────────────┘     └──────────────┘     └───────┬────────┘
+       ▲                     │                                                                  │
+       │                     │                                                                  │
+       │                     ▼                                                                  ▼
+       │               ┌───────────────┐                                                ┌────────────────┐
+       │               │   Validate    │                                                │ Balance Updates│
+       │               │   Transaction │                                                │ & Operations   │
+       │               └───────────────┘                                                └───────┬────────┘
+       │                                                                                       │
+       │                                                                                       ▼
+       │                                                                                ┌────────────────┐
+       │                                                                                │ Status Updates │
+       └────────────────────────────────────────────────────────────────────────────────┤ & Event Publish│
+                                                                                        └────────────────┘
+```
+
+### 1. Transaction Creation
+
+The creation process begins with:
+
+1. **API Request**: Client submits a transaction request via API
+2. **DSL Parsing**: If using Domain Specific Language (DSL), the transaction script is parsed
+3. **Transaction Model Creation**: A transaction object is created with initial status CREATED
+4. **Initial Validation**: Business rules and syntax are validated
+5. **Persistence**: Transaction is stored in the database
+6. **Async Processing**: Transaction is submitted for asynchronous processing via queue
+
+Example transaction creation flow:
+
+```go
+// Transaction creation handler
+func (u *CreateTransactionUseCase) Execute(ctx context.Context, transaction *mmodel.Transaction) (*mmodel.Transaction, error) {
+    // Validate the transaction
+    err := u.validateTransaction(ctx, transaction)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Set initial values
+    transaction.ID = uuid.New()
+    transaction.Status = "CREATED"
+    transaction.CreatedAt = time.Now()
+    transaction.UpdatedAt = time.Now()
+    
+    // Store in repository
+    result, err := u.repository.Create(ctx, transaction)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Store metadata if any
+    if transaction.Metadata != nil {
+        err = u.metadataRepo.Store(ctx, "transaction", result.ID, transaction.Metadata)
+        if err != nil {
+            return nil, err
+        }
+    }
+    
+    // Submit for async processing
+    err = u.sendToProcessingQueue(ctx, result)
+    if err != nil {
+        // Log error but continue
+        log.Warn(ctx, "Failed to send transaction to processing queue", err)
+    }
+    
+    return result, nil
+}
+```
+
+### 2. Transaction Validation
+
+Transactions are validated at multiple levels:
+
+1. **Structural Validation**:
+   - Proper format and required fields
+   - Valid transaction script syntax (for DSL-based transactions)
+   - Valid account references
+
+2. **Business Rule Validation**:
+   - Double-entry balance (debits equal credits)
+   - Valid account statuses
+   - Valid asset codes
+   - Sufficient funds in source accounts
+
+3. **Permission Validation**:
+   - Accounts allow sending (for debits)
+   - Accounts allow receiving (for credits)
+   - User has permission for the organizations involved
+
+Example validation code:
+
+```go
+func (v *TransactionValidator) Validate(ctx context.Context, transaction *mmodel.Transaction) error {
+    // Check required fields
+    if transaction.Description == "" {
+        return errors.NewValidationError("description is required")
+    }
+    
+    // Parse and validate transaction script if present
+    if transaction.Script != "" {
+        ops, err := v.scriptParser.Parse(transaction.Script)
+        if err != nil {
+            return errors.NewValidationError(fmt.Sprintf("invalid transaction script: %s", err.Error()))
+        }
+        
+        // Check balance of operations
+        if !v.checkBalancedOperations(ops) {
+            return errors.NewValidationError("transaction operations must be balanced (debits = credits)")
+        }
+        
+        // Check accounts exist and have sufficient funds
+        for _, op := range ops {
+            if op.Type == "DEBIT" {
+                // Check account exists
+                account, err := v.accountRepo.Find(ctx, op.AccountID)
+                if err != nil {
+                    return err
+                }
+                
+                // Check account allows sending
+                if !account.AllowSending {
+                    return errors.NewValidationError(fmt.Sprintf("account %s does not allow sending", op.AccountID))
+                }
+                
+                // Check sufficient balance
+                balance, err := v.balanceRepo.FindByAccountIDAndAssetCode(ctx, op.AccountID, op.AssetCode)
+                if err != nil {
+                    return err
+                }
+                
+                available, _ := decimal.NewFromString(balance.Available)
+                amount, _ := decimal.NewFromString(op.Amount)
+                
+                if available.LessThan(amount) {
+                    return errors.NewValidationError(fmt.Sprintf("insufficient balance in account %s", op.AccountID))
+                }
+            } else if op.Type == "CREDIT" {
+                // Check account exists
+                account, err := v.accountRepo.Find(ctx, op.AccountID)
+                if err != nil {
+                    return err
+                }
+                
+                // Check account allows receiving
+                if !account.AllowReceiving {
+                    return errors.NewValidationError(fmt.Sprintf("account %s does not allow receiving", op.AccountID))
+                }
+            }
+        }
+    }
+    
+    return nil
+}
+```
+
+### 3. Asynchronous Processing (BTO Pattern)
+
+Midaz uses an asynchronous Balance-Transaction-Operation (BTO) pattern to process transactions:
+
+1. **Queue Message Creation**:
+   - Transaction details are packaged in a queue message
+   - Message includes operation details and balance references
+
+2. **Queue Publication**:
+   - Message is published to RabbitMQ
+   - Transaction status is updated to APPROVED
+
+3. **Queue Consumption**:
+   - Worker consumes the message from the queue
+   - Worker updates the transaction status to PENDING
+
+4. **Balance Updates**:
+   - Worker loads and locks balances for all involved accounts
+   - Updates are performed with optimistic concurrency control
+   - Balance versions are incremented with each update
+
+5. **Operation Creation**:
+   - Operations are created for each account movement
+   - Each operation links to transaction and records the balance change
+
+6. **Status Update**:
+   - Transaction status is updated to SENT when complete
+   - If errors occur, status is updated to DECLINED
+
+Example BTO processing flow:
+
+```go
+// BTO Execute handler
+func (u *SendBTOExecuteAsyncUseCase) Execute(ctx context.Context, transaction *mmodel.Transaction, operations []*mmodel.Operation, balances []*mmodel.Balance) error {
+    // Create queue data
+    queueData := &mmodel.QueueData{
+        OrganizationID: transaction.OrganizationID,
+        LedgerID:       transaction.LedgerID,
+        Payload: map[string]interface{}{
+            "transaction_id": transaction.ID.String(),
+            "operations":     serializeOperations(operations),
+            "balances":       serializeBalances(balances),
+        },
+    }
+    
+    // Generate header ID for tracing
+    headerID := uuid.New().String()
+    
+    // Update transaction status to APPROVED
+    transaction.Status = "APPROVED"
+    transaction.UpdatedAt = time.Now()
+    
+    _, err := u.transactionRepo.Update(ctx, transaction.ID, transaction)
+    if err != nil {
+        return err
+    }
+    
+    // Publish to queue
+    err = u.rabbitMQRepo.SendBTOExecuteAsync(ctx, headerID, queueData)
+    if err != nil {
+        return err
+    }
+    
+    return nil
+}
+
+// BTO consumer handler
+func (h *BTOExecuteHandler) Handle(ctx context.Context, data *mmodel.QueueData) error {
+    // Extract data from message
+    transactionID, _ := uuid.Parse(data.Payload["transaction_id"].(string))
+    operations := deserializeOperations(data.Payload["operations"])
+    balances := deserializeBalances(data.Payload["balances"])
+    
+    // Update transaction status to PENDING
+    transaction, err := h.transactionRepo.Find(ctx, transactionID)
+    if err != nil {
+        return err
+    }
+    
+    transaction.Status = "PENDING"
+    transaction.UpdatedAt = time.Now()
+    
+    _, err = h.transactionRepo.Update(ctx, transaction.ID, transaction)
+    if err != nil {
+        return err
+    }
+    
+    // Process operations and update balances
+    err = h.processOperations(ctx, transaction, operations, balances)
+    if err != nil {
+        // Update transaction status to DECLINED on error
+        transaction.Status = "DECLINED"
+        transaction.UpdatedAt = time.Now()
+        
+        _, updateErr := h.transactionRepo.Update(ctx, transaction.ID, transaction)
+        if updateErr != nil {
+            return errors.Wrap(err, updateErr.Error())
+        }
+        
+        return err
+    }
+    
+    // Update transaction status to SENT
+    transaction.Status = "SENT"
+    transaction.UpdatedAt = time.Now()
+    
+    _, err = h.transactionRepo.Update(ctx, transaction.ID, transaction)
+    if err != nil {
+        return err
+    }
+    
+    // Publish audit event
+    err = h.publishAuditEvent(ctx, transaction, operations)
+    if err != nil {
+        log.Warn(ctx, "Failed to publish audit event", err)
+    }
+    
+    return nil
+}
+```
+
+## Double-Entry Accounting Implementation
+
+Midaz implements double-entry accounting principles:
+
+1. **Balance Equation**: Assets = Liabilities + Equity
+2. **Debit and Credit**: Every transaction has equal debits and credits
+3. **Account Types**:
+   - Debit increases Asset and Expense accounts
+   - Credit increases Liability, Equity, and Revenue accounts
+
+The system enforces these principles through:
+
+```
+┌──────────────────┐                        ┌──────────────────┐
+│  Source Account  │                        │ Target Account   │
+│                  │                        │                  │
+│  Balance: $100   │                        │  Balance: $50    │
+└────────┬─────────┘                        └────────┬─────────┘
+         │                                           │
+         │  Operation: DEBIT $30                     │  Operation: CREDIT $30
+         │  (Decrease Balance)                       │  (Increase Balance)
+         ▼                                           ▼
+┌──────────────────┐                        ┌──────────────────┐
+│  Source Account  │                        │ Target Account   │
+│                  │                        │                  │
+│  Balance: $70    │                        │  Balance: $80    │
+└──────────────────┘                        └──────────────────┘
+```
+
+### Operation Types
+
+Operations represent individual account movements within a transaction:
+
+1. **DEBIT Operations**:
+   - Created for source accounts (FROM)
+   - Reduce available balance in source accounts
+
+2. **CREDIT Operations**:
+   - Created for destination accounts (TO)
+   - Increase available balance in destination accounts
+
+Every transaction ensures the sum of DEBIT operations equals the sum of CREDIT operations.
+
+## Balance Management
+
+Balance updates are a critical aspect of transaction processing:
+
+1. **Balance Locking**:
+   - Balances are locked for update during processing
+   - Optimistic concurrency control using version fields
+
+2. **Balance Fields**:
+   - `available`: Funds available for use
+   - `on_hold`: Funds reserved but not yet finalized
+   - `version`: Optimistic locking version
+
+3. **Balance Update Process**:
+   - Load balance with lock
+   - Check version matches expected version
+   - Update available and on-hold amounts
+   - Increment version
+   - Save updated balance
+
+Example balance update:
+
+```go
+func (r *PostgreSQLRepository) Update(ctx context.Context, id uuid.UUID, balance *mmodel.Balance) (*mmodel.Balance, error) {
+    query := `
+        UPDATE balances 
+        SET available = $1, on_hold = $2, updated_at = $3, version = version + 1
+        WHERE id = $4 AND version = $5 AND deleted_at IS NULL
+        RETURNING id, account_id, asset_code, available, on_hold, scale, version, account_type, allow_sending, allow_receiving, created_at, updated_at
+    `
+    
+    var result mmodel.Balance
+    err := r.db.QueryRowContext(
+        ctx,
+        query,
+        balance.Available,
+        balance.OnHold,
+        time.Now(),
+        id,
+        balance.Version,
+    ).Scan(
+        &result.ID,
+        &result.AccountID,
+        &result.AssetCode,
+        &result.Available,
+        &result.OnHold,
+        &result.Scale,
+        &result.Version,
+        &result.AccountType,
+        &result.AllowSending,
+        &result.AllowReceiving,
+        &result.CreatedAt,
+        &result.UpdatedAt,
+    )
+    
+    if err == sql.ErrNoRows {
+        return nil, errors.NewConcurrencyError("balance was updated by another transaction")
+    }
+    
+    if err != nil {
+        return nil, errors.FromError(err).WithMessage("error updating balance")
+    }
+    
+    return &result, nil
+}
+```
+
+## Transaction DSL
+
+Midaz supports a Domain Specific Language (DSL) for defining transactions:
+
+```
+TRANSACTION "Purchase payment"
+FROM account:"12345" AMOUNT 100.00 USD
+TO account:"67890" AMOUNT 100.00 USD;
+```
+
+The DSL is parsed using ANTLR-generated parsers that validate the syntax and extract operations:
+
+1. **Lexer and Parser**:
+   - Convert text into tokens and parse tree
+   - Define grammar rules for valid transaction syntax
+
+2. **Visitor Pattern**:
+   - Traverse the parse tree
+   - Extract source and destination accounts
+   - Create DEBIT and CREDIT operations
+
+3. **Validation**:
+   - Ensure balanced operations
+   - Check valid account references
+   - Validate asset codes and amounts
+
+## Audit and Traceability
+
+Transactions provide a complete audit trail through:
+
+1. **Operation Records**:
+   - Each operation records the balance before and after the change
+   - Links to transaction, account, and asset
+
+2. **Transaction Status History**:
+   - Status changes are timestamped
+   - Full history of transaction lifecycle
+
+3. **Idempotency**:
+   - External IDs prevent duplicate processing
+   - Idempotency keys ensure operations aren't applied twice
+
+4. **Correlation IDs**:
+   - Header IDs for tracing requests through the system
+   - Link API requests to queue messages and database operations
+
+## Transaction Lifecycle Benefits
+
+The transaction lifecycle in Midaz provides several benefits:
+
+1. **Data Integrity**: Double-entry accounting ensures balanced operations
+2. **Auditability**: Complete history of all financial movements
+3. **Resilience**: Asynchronous processing with retry capabilities
+4. **Scalability**: Queue-based processing allows for high throughput
+5. **Consistency**: Optimistic concurrency control prevents race conditions
+
+## Next Steps
+
+- [Entity Lifecycle](./entity-lifecycle.md) - How entities flow through the system
+- [Component Integration](../component-integration.md) - How components interact
+- [Financial Model](../../domain-models/financial-model.md) - Learn about the financial model
\ No newline at end of file
diff --git a/docs/architecture/event-driven-design.md b/docs/architecture/event-driven-design.md
new file mode 100644
index 00000000..53956616
--- /dev/null
+++ b/docs/architecture/event-driven-design.md
@@ -0,0 +1,303 @@
+# Event-Driven Design
+
+**Navigation:** [Home](../../) > [Architecture](../) > Event-Driven Design
+
+This document describes how Midaz implements event-driven architecture to achieve scalability, loose coupling, and resilience in its services.
+
+## Overview
+
+Event-driven architecture is a design paradigm in which the flow of the program is determined by events such as user actions, sensor outputs, or messages from other programs. In Midaz, events are used for asynchronous communication between services, enabling decoupled, scalable processing of financial transactions.
+
+The event-driven approach in Midaz enables:
+- Asynchronous processing of long-running operations
+- Loose coupling between services
+- Improved scalability and resilience
+- Complex transaction lifecycle management
+
+## Core Concepts
+
+### 1. Message Broker
+
+RabbitMQ serves as the message broker in Midaz, facilitating communication between services:
+
+- **Exchanges**: Named entities that receive messages and route them to queues
+- **Queues**: Message buffers that hold messages until they are processed
+- **Bindings**: Rules that determine how messages are routed from exchanges to queues
+- **Producers**: Services that send messages to exchanges
+- **Consumers**: Services that receive and process messages from queues
+
+### 2. Event Types
+
+Midaz uses several types of events:
+
+- **Entity Creation Events**: Notify services when entities like accounts are created
+- **Transaction Events**: Trigger transaction processing and validation
+- **Balance Update Events**: Notify services when account balances change
+- **Audit Events**: Record transaction operations for audit purposes
+
+### 3. Asynchronous Processing
+
+Long-running operations are processed asynchronously to avoid blocking:
+
+- **Two-Phase Processing**: Validation followed by execution
+- **Worker Pools**: Process messages in parallel
+- **Retries**: Automatically retry failed operations
+- **Idempotent Operations**: Safe to retry without side effects
+
+## Implementation in Midaz
+
+### RabbitMQ Configuration
+
+Midaz configures RabbitMQ with direct exchanges and durable queues:
+
+```
+┌───────────────────────────────────────┐
+│            RabbitMQ Server            │
+│                                       │
+│  ┌─────────────────────────────────┐  │
+│  │      Direct Exchanges           │  │
+│  │                                 │  │
+│  │  ┌─────────────────────────┐    │  │
+│  │  │transaction.balance_create│    │  │
+│  │  └─────────────────────────┘    │  │
+│  │                                 │  │
+│  │  ┌─────────────────────────────┐  │  │
+│  │  │transaction.bto.execute      │  │  │
+│  │  └─────────────────────────────┘  │  │
+│  └─────────────────────────────────┘  │
+│                    │                  │
+│                    ▼                  │
+│  ┌─────────────────────────────────┐  │
+│  │           Queues                │  │
+│  │                                 │  │
+│  │  ┌─────────────────────────┐    │  │
+│  │  │transaction.balance_create│    │  │
+│  │  └─────────────────────────┘    │  │
+│  │                                 │  │
+│  │  ┌─────────────────────────────┐  │  │
+│  │  │transaction.bto.execute      │  │  │
+│  │  └─────────────────────────────┘  │  │
+│  └─────────────────────────────────┘  │
+└───────────────────────────────────────┘
+```
+
+Key configurations include:
+- Durable queues to survive broker restarts
+- Persistent messages to prevent data loss
+- Prefetch counts for optimized throughput
+- Connection pooling for efficiency
+
+### Event Producers
+
+Producers send events to the message broker:
+
+```go
+// Example: RabbitMQ producer implementation
+func (p *ProducerRabbitMQ) SendBalanceCreateQueue(ctx context.Context, headerID string, queueData *mmodel.QueueData) error {
+    // Create message payload
+    payload, err := json.Marshal(queueData)
+    if err != nil {
+        return errors.FromError(err).WithMessage("error marshaling queue data")
+    }
+    
+    // Publish message
+    err = p.ch.PublishWithContext(
+        ctx,
+        "transaction.balance_create.exchange", // exchange
+        "",                                    // routing key
+        false,                                // mandatory
+        false,                                // immediate
+        amqp.Publishing{
+            DeliveryMode: amqp.Persistent,
+            ContentType:  "application/json",
+            Body:         payload,
+            Headers: amqp.Table{
+                "X-Header-ID": headerID,
+            },
+        },
+    )
+    
+    if err != nil {
+        return errors.FromError(err).WithMessage("error publishing to RabbitMQ")
+    }
+    
+    return nil
+}
+```
+
+### Event Consumers
+
+Consumers receive and process events:
+
+```go
+// Example: RabbitMQ consumer implementation
+func (c *ConsumerRabbitMQ) Consume(ctx context.Context) error {
+    // Set up worker pool
+    workerCount := c.cfg.MaxWorkers
+    workerPool := make(chan struct{}, workerCount)
+    
+    // Start consuming
+    msgs, err := c.ch.Consume(
+        "transaction.balance_create.queue", // queue
+        "",                               // consumer
+        false,                            // auto-ack
+        false,                            // exclusive
+        false,                            // no-local
+        false,                            // no-wait
+        nil,                              // args
+    )
+    if err != nil {
+        return errors.FromError(err).WithMessage("error consuming from queue")
+    }
+    
+    for msg := range msgs {
+        // Limit concurrent workers
+        workerPool <- struct{}{}
+        
+        // Process message in goroutine
+        go func(msg amqp.Delivery) {
+            defer func() { <-workerPool }()
+            
+            // Parse message
+            var queueData mmodel.QueueData
+            err := json.Unmarshal(msg.Body, &queueData)
+            if err != nil {
+                // Log error and reject message
+                c.logger.Error("failed to unmarshal message", err)
+                msg.Nack(false, false)
+                return
+            }
+            
+            // Process message
+            err = c.handleFunc(ctx, queueData)
+            if err != nil {
+                // Log error and reject message
+                c.logger.Error("failed to process message", err)
+                msg.Nack(false, true) // requeue
+                return
+            }
+            
+            // Acknowledge message
+            msg.Ack(false)
+        }(msg)
+    }
+    
+    return nil
+}
+```
+
+### Event Schemas
+
+Events in Midaz follow a standard structure:
+
+```go
+// Queue data structure
+type QueueData struct {
+    OrganizationID uuid.UUID           `json:"organization_id"`
+    LedgerID       uuid.UUID           `json:"ledger_id"`
+    AccountID      uuid.UUID           `json:"account_id,omitempty"`
+    Payload        map[string]any      `json:"payload"`
+}
+```
+
+The `Payload` field contains entity-specific data serialized as JSON.
+
+### Key Event Flows
+
+#### 1. Account Creation Flow
+
+```
+┌─────────────┐         ┌───────────┐         ┌─────────────────┐
+│ Onboarding  │         │ RabbitMQ  │         │ Transaction     │
+│ Service     │         │           │         │ Service         │
+└──────┬──────┘         └─────┬─────┘         └────────┬────────┘
+       │                      │                         │
+       │ Create Account       │                         │
+       ├──────────────────────┘                         │
+       │                                                │
+       │ Publish Account Created Event                  │
+       ├─────────────────────────────────────────────────►
+       │                                                │
+       │                                                │ Process Event
+       │                                                ├────────────┐
+       │                                                │            │
+       │                                                │ Create     │
+       │                                                │ Balance    │
+       │                                                ◄────────────┘
+       │                                                │
+       │                                                │ Store Balance
+       │                                                ├────────────┐
+       │                                                │            │
+       │                                                │            │
+       │                                                ◄────────────┘
+       │                                                │
+```
+
+#### 2. Transaction Processing Flow
+
+```
+┌─────────────┐         ┌───────────┐         ┌─────────────────┐
+│ Transaction │         │ RabbitMQ  │         │ Transaction     │
+│ API         │         │           │         │ Worker          │
+└──────┬──────┘         └─────┬─────┘         └────────┬────────┘
+       │                      │                         │
+       │ Create Transaction   │                         │
+       ├────────────┐         │                         │
+       │            │         │                         │
+       │ Validate   │         │                         │
+       │ Transaction│         │                         │
+       ◄────────────┘         │                         │
+       │                      │                         │
+       │ Publish BTO Execute Event                      │
+       ├─────────────────────────────────────────────────►
+       │                      │                         │
+       │ Return Accepted 202  │                         │ Process Event
+       ◄────────────┐         │                         ├────────────┐
+                    │         │                         │            │
+                    │         │                         │ Update     │
+                    │         │                         │ Balances   │
+                    │         │                         │            │
+                    │         │                         │ Create     │
+                    │         │                         │ Operations │
+                    │         │                         │            │
+                    │         │                         │ Update     │
+                    │         │                         │ Transaction│
+                    │         │                         │ Status     │
+                    │         │                         ◄────────────┘
+```
+
+### Error Handling
+
+Midaz implements robust error handling in event processing:
+
+- **Message Acknowledgment**: Messages are only acknowledged after successful processing
+- **Message Nacking**: Failed messages are rejected and optionally requeued
+- **Retry Logic**: Failed operations can be retried with backoff
+- **Dead Letter Queues**: Persistently failed messages can be routed to dead letter queues for inspection
+- **Correlation IDs**: Events carry correlation IDs for tracing through the system
+- **Structured Logging**: Detailed error logging with context
+- **OpenTelemetry**: Distributed tracing for error diagnosis
+
+### Idempotency
+
+Operations are designed to be idempotent to safely handle retries:
+
+- **Idempotency Keys**: Unique IDs to identify duplicate requests
+- **Version-based Concurrency**: Balance updates use optimistic concurrency control
+- **Status Tracking**: Transaction status prevents duplicate processing
+
+## Benefits in Midaz
+
+The event-driven architecture provides Midaz with several benefits:
+
+1. **Scalability**: Services can scale independently based on message load
+2. **Resilience**: Services can continue functioning when others are down
+3. **Loose Coupling**: Services communicate without direct dependencies
+4. **Performance**: Asynchronous processing improves responsiveness
+5. **Auditability**: Event-based processing provides a clear audit trail
+
+## Next Steps
+
+- [Hexagonal Architecture](./hexagonal-architecture.md) - How events fit into the hexagonal architecture
+- [Component Integration](./component-integration.md) - How components interact using events
+- [Transaction Lifecycle](./data-flow/transaction-lifecycle.md) - How transactions flow through the system
\ No newline at end of file
diff --git a/docs/architecture/hexagonal-architecture.md b/docs/architecture/hexagonal-architecture.md
new file mode 100644
index 00000000..c6026703
--- /dev/null
+++ b/docs/architecture/hexagonal-architecture.md
@@ -0,0 +1,240 @@
+# Hexagonal Architecture
+
+**Navigation:** [Home](../../) > [Architecture](../) > Hexagonal Architecture
+
+This document describes how Midaz implements the Hexagonal Architecture pattern (also known as Ports and Adapters) to achieve separation of concerns and maintainable code.
+
+For a visual representation of this architecture, see the [Hexagonal Architecture Diagram](../assets/hexagonal-architecture-diagram.md).
+
+## Overview
+
+Hexagonal Architecture is a software design pattern that aims to create loosely coupled application components that can be easily connected to their software environment by means of ports and adapters. This allows applications to be equally driven by users, programs, automated tests, or batch scripts, and to be developed and tested in isolation from their runtime devices and databases.
+
+In Midaz, this architecture enables:
+- Clear separation between business logic and external concerns
+- Improved testability through dependency inversion
+- Flexibility to change infrastructure without affecting domain logic
+- Consistent structure across services
+
+## Core Concepts
+
+### 1. Domain Logic (Core)
+
+The innermost layer contains the business logic and domain models:
+
+- **Domain Models**: Pure data structures representing business entities
+- **Business Rules**: Validation and domain-specific logic
+- **Service Logic**: Application use cases and workflows
+
+Domain logic has no dependencies on external systems and is expressed purely in terms of the business domain.
+
+### 2. Ports (Interfaces)
+
+Ports are interfaces that define how the domain interacts with the outside world:
+
+- **Primary/Driving Ports**: APIs that allow external actors to use the domain
+- **Secondary/Driven Ports**: Interfaces that the domain needs to interact with external systems
+
+Ports are defined as Go interfaces that abstract away implementation details.
+
+### 3. Adapters (Implementations)
+
+Adapters connect the domain to the outside world by implementing ports:
+
+- **Primary/Driving Adapters**: Implement primary ports to drive the application (e.g., HTTP controllers)
+- **Secondary/Driven Adapters**: Implement secondary ports to connect to external systems (e.g., database repositories)
+
+## Implementation in Midaz
+
+Midaz implements Hexagonal Architecture across its services. Here's the general structure:
+
+```
+components/
+  └── [service]/
+      └── internal/
+          ├── domain/           # Domain models and interfaces (ports)
+          ├── services/         # Application services (use cases)
+          │   ├── command/      # Write operations
+          │   └── query/        # Read operations
+          ├── adapters/         # Infrastructure adapters
+          │   ├── http/         # HTTP controllers (primary adapters)
+          │   │   └── in/       # Inbound HTTP endpoints
+          │   ├── postgres/     # PostgreSQL adapters (secondary adapters)
+          │   ├── mongodb/      # MongoDB adapters (secondary adapters)
+          │   ├── rabbitmq/     # RabbitMQ adapters (secondary adapters)
+          │   └── redis/        # Redis adapters (secondary adapters)
+          └── bootstrap/        # Application wiring and dependency injection
+```
+
+### Domain Models
+
+Domain models in Midaz are defined in the shared `pkg/mmodel` package and include:
+
+- `Organization`
+- `Ledger`
+- `Asset`
+- `Account`
+- `Transaction`
+- `Operation`
+- `Balance`
+
+These models are pure Go structs without dependencies on infrastructure.
+
+### Ports (Interfaces)
+
+Ports are defined as Go interfaces that specify how the domain interacts with external systems:
+
+```go
+// Example: Organization repository interface (port)
+type Repository interface {
+    Create(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error)
+    Update(ctx context.Context, id uuid.UUID, organization *mmodel.Organization) (*mmodel.Organization, error)
+    Find(ctx context.Context, id uuid.UUID) (*mmodel.Organization, error)
+    FindAll(ctx context.Context, filter http.Pagination) ([]*mmodel.Organization, error)
+    Delete(ctx context.Context, id uuid.UUID) error
+}
+```
+
+These interfaces allow the domain to remain agnostic of how data is stored or retrieved.
+
+### Adapters (Implementations)
+
+Adapters implement the ports to provide concrete functionality:
+
+#### Primary Adapters
+
+HTTP controllers serve as primary adapters, accepting user input and translating it into domain operations:
+
+```go
+// Example: HTTP controller (primary adapter)
+func (c *Controller) Create(w http.ResponseWriter, r *http.Request) {
+    // Parse request
+    var request dto.OrganizationRequest
+    if err := json.NewDecoder(r.Body).Decode(&request); err != nil {
+        httputils.WriteError(w, errors.NewBadRequestError("invalid request body"))
+        return
+    }
+    
+    // Map to domain model
+    organization := &mmodel.Organization{
+        Name: request.Name,
+        // ...other fields
+    }
+    
+    // Call domain service
+    result, err := c.createOrgUseCase.Execute(r.Context(), organization)
+    if err != nil {
+        httputils.WriteError(w, err)
+        return
+    }
+    
+    // Return response
+    httputils.WriteJSON(w, http.StatusCreated, result)
+}
+```
+
+#### Secondary Adapters
+
+Database repositories serve as secondary adapters, implementing storage operations:
+
+```go
+// Example: PostgreSQL repository (secondary adapter)
+func (r *PostgreSQLRepository) Create(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error) {
+    // Implementation that saves to PostgreSQL
+    query := `INSERT INTO organizations (id, name, legal_name, status) VALUES ($1, $2, $3, $4) RETURNING id`
+    // ...database operations
+    return organization, nil
+}
+```
+
+### Application Services
+
+Services in Midaz are split into commands (write) and queries (read) following the CQRS pattern:
+
+```go
+// Example: Create organization command
+type CreateOrganizationUseCase struct {
+    OrgRepo  domain.OrganizationRepository
+    MetaRepo domain.MetadataRepository
+}
+
+func (u *CreateOrganizationUseCase) Execute(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error) {
+    // Validate
+    if err := validate(organization); err != nil {
+        return nil, err
+    }
+    
+    // Create in repository
+    result, err := u.OrgRepo.Create(ctx, organization)
+    if err != nil {
+        return nil, err
+    }
+    
+    // Store metadata if any
+    if organization.Metadata != nil {
+        err = u.MetaRepo.Store(ctx, "organization", result.ID, organization.Metadata)
+        if err != nil {
+            // Handle error
+        }
+    }
+    
+    return result, nil
+}
+```
+
+### Dependency Injection
+
+The bootstrap package wires everything together using dependency injection:
+
+```go
+// Example: Wiring in bootstrap
+func createServices(cfg *Config) (*Services, error) {
+    // Create repositories (adapters)
+    orgRepo := organization.NewPostgreSQLRepository(db)
+    metaRepo := metadata.NewMongoDBRepository(mongoClient)
+    
+    // Create use cases with injected dependencies
+    createOrgUseCase := &command.CreateOrganizationUseCase{
+        OrgRepo:  orgRepo,
+        MetaRepo: metaRepo,
+    }
+    
+    // Create HTTP controllers with injected use cases
+    orgController := &http.OrganizationController{
+        CreateUseCase: createOrgUseCase,
+        // ...other use cases
+    }
+    
+    return &Services{
+        OrgController: orgController,
+        // ...other controllers
+    }, nil
+}
+```
+
+## Benefits in Midaz
+
+The hexagonal architecture provides Midaz with several benefits:
+
+1. **Testability**: Domain logic can be tested in isolation without external dependencies
+2. **Maintainability**: Clear boundaries make the code easier to understand and modify
+3. **Flexibility**: Infrastructure can be changed without affecting domain logic
+4. **Consistency**: Common patterns across services make development predictable
+
+## Example Flow
+
+Here's how a typical request flows through the hexagonal architecture in Midaz:
+
+1. **HTTP Request** → Controller (Primary Adapter)
+2. **Controller** → Use Case (Application Service)
+3. **Use Case** → Domain Logic and Repository Interface (Port)
+4. **Repository Interface** → PostgreSQL Implementation (Secondary Adapter)
+5. **PostgreSQL Implementation** → Database
+
+This separation ensures that changes to the database or API don't affect the core business logic.
+
+## Next Steps
+
+- [Event-Driven Design](./event-driven-design.md) - How events flow through the architecture
+- [Component Integration](./component-integration.md) - How components interact
+- [Data Flow](./data-flow/) - Detailed data flow documentation
\ No newline at end of file
diff --git a/docs/architecture/system-overview.md b/docs/architecture/system-overview.md
new file mode 100644
index 00000000..7188d48b
--- /dev/null
+++ b/docs/architecture/system-overview.md
@@ -0,0 +1,175 @@
+# System Overview
+
+**Navigation:** [Home](../../) > [Architecture](../) > System Overview
+
+This document provides a high-level overview of the Midaz system architecture, its major components, and their interactions.
+
+## Introduction
+
+Midaz is an enterprise-grade open-source ledger system designed for financial applications. It employs a modular microservices architecture following cloud-native design principles and implements hexagonal architecture patterns for clean separation of concerns.
+
+## Architectural Diagram
+
+For a detailed system architecture diagram, see the [System Architecture Diagram](../assets/system-architecture-diagram.md).
+
+A simplified architecture overview:
+
+```
++----------------------------------------------------------+
+|                     Client Applications                   |
+|    +------------------+      +----------------------+     |
+|    |     MDZ CLI      |      |    External Apps     |     |
+|    +------------------+      +----------------------+     |
++----------------------------------------------------------+
+                |                       |
+                |   REST APIs / Events  |
+                v                       v
++----------------------------------------------------------+
+|                    Service Layer                          |
+|  +-------------------+         +--------------------+     |
+|  | Onboarding Service|         | Transaction Service|     |
+|  | (Entity Mgmt)     |<------->| (Financial Ops)    |     |
+|  +-------------------+         +--------------------+     |
++----------------------------------------------------------+
+                |                       |
+                v                       v
++----------------------------------------------------------+
+|                  Infrastructure Layer                     |
+|  +----------+  +--------+  +---------+  +------------+   |
+|  |PostgreSQL|  |MongoDB |  | RabbitMQ|  |Redis/Valkey|   |
+|  +----------+  +--------+  +---------+  +------------+   |
+|                                                          |
+|  +----------+                        +----------------+  |
+|  | Grafana  |                        | OpenTelemetry  |  |
+|  +----------+                        +----------------+  |
++----------------------------------------------------------+
+```
+
+## Major Components
+
+### Onboarding Service
+
+The Onboarding Service is responsible for managing the core financial entities in the system:
+
+- **Organizations**: Top-level entities with parent-child relationships
+- **Ledgers**: Financial record-keeping systems belonging to organizations
+- **Assets**: Different types of value with specific codes
+- **Portfolios**: Collections of accounts
+- **Segments**: Categories for grouping accounts
+- **Accounts**: Basic units for tracking financial resources
+
+Key features:
+- Implementation of hexagonal architecture with CQRS pattern
+- RESTful API with comprehensive OpenAPI documentation
+- Storage of primary data in PostgreSQL and flexible metadata in MongoDB
+- Full lifecycle management of all financial entities
+
+### Transaction Service
+
+The Transaction Service handles all financial transaction processing:
+
+- **Transactions**: Financial transactions with debits and credits
+- **Operations**: Individual entries in transactions
+- **Balances**: Current financial position of accounts
+- **Asset Rates**: Exchange rates between different assets
+
+Key features:
+- Complex n:n transaction support with double-entry accounting
+- Multiple transaction creation methods (JSON, DSL, templates)
+- Asset rate management and balance tracking
+- Event-driven architecture using RabbitMQ for transaction lifecycle
+
+### MDZ CLI
+
+The MDZ CLI provides a command-line interface for interacting with the Midaz system:
+
+- Built with Cobra for a modern CLI experience
+- Interactive TUI components for improved usability
+- Complete coverage of all service APIs
+- Local configuration management and token-based authentication
+
+### Infrastructure Layer
+
+The infrastructure layer provides the foundational services for the Midaz system:
+
+- **PostgreSQL**: Primary-replica setup for transactional/structured data
+- **MongoDB**: Replica set for flexible metadata storage
+- **RabbitMQ**: Message queuing with predefined exchanges for event-driven architecture
+- **Redis/Valkey**: Caching and message passing
+- **Grafana/OpenTelemetry**: Monitoring and observability
+
+## Key Design Patterns
+
+### Hexagonal Architecture
+
+Midaz implements hexagonal architecture (also known as ports and adapters) to achieve clear separation between:
+
+- **Domain Logic**: Core business rules and models
+- **Application Services**: Use cases and application flow
+- **Adapters**: Integration with external systems and user interfaces
+
+This architecture allows the core business logic to remain isolated from external concerns like databases or UI, making the system more maintainable and testable.
+
+### CQRS Pattern
+
+The Command Query Responsibility Segregation pattern is implemented to separate:
+
+- **Commands**: Operations that change the state of the system
+- **Queries**: Operations that read data without modifying state
+
+This separation allows for optimization of each path independently and simplifies complex domain logic.
+
+### Event-Driven Architecture
+
+Midaz utilizes event-driven architecture with RabbitMQ to enable:
+
+- Asynchronous processing
+- Loose coupling between services
+- Scalability and resilience
+- Complex transaction life cycle management
+
+## Data Flow
+
+### Entity Management Flow
+
+1. Entity creation requests flow through the Onboarding Service API
+2. Commands create and validate entities in PostgreSQL
+3. Metadata is stored in MongoDB for flexibility
+4. Events notify interested components of entity changes
+
+### Transaction Processing Flow
+
+1. Transaction requests come through the Transaction Service API
+2. Transaction validation ensures correctness
+3. Operations are created to record debits and credits
+4. Balances are updated with optimistic concurrency control
+5. Events signal completion or errors
+
+## API Organization
+
+The APIs in Midaz follow RESTful principles with:
+
+- Resource-oriented design following the financial hierarchy
+- OpenAPI/Swagger documentation
+- Token-based authentication
+- Standardized error responses
+- Specialized endpoints for transaction processing
+
+## Database Design Philosophy
+
+Midaz employs a multi-database approach:
+
+- **PostgreSQL**: Used for structured data requiring ACID compliance
+- **MongoDB**: Used for flexible metadata storage
+- **Redis**: Used for caching and temporary data
+
+Database connections utilize connection pooling and separate read/write connections where appropriate.
+
+## Next Steps
+
+For more detailed information:
+
+- [Hexagonal Architecture](./hexagonal-architecture.md) - Detailed explanation of the architectural pattern
+- [Event-Driven Design](./event-driven-design.md) - How events are used in Midaz
+- [Component Integration](./component-integration.md) - How components interact
+- [Data Flow](./data-flow/) - Detailed data flow documentation
\ No newline at end of file
diff --git a/docs/assets/README.md b/docs/assets/README.md
new file mode 100644
index 00000000..00331672
--- /dev/null
+++ b/docs/assets/README.md
@@ -0,0 +1,67 @@
+# Assets
+
+**Navigation:** [Home](../) > Assets
+
+This directory contains assets used throughout the Midaz documentation, including diagrams, images, flow charts, and icons.
+
+## ASCII Diagrams
+
+The following ASCII diagrams have been created for the documentation:
+
+### Transaction Diagrams
+- [Transaction Model Diagram](transaction-model-diagram.md) - Illustrates the transaction model structure
+- [Transaction Flow Diagram](transaction-flow-diagram.md) - Shows the transaction processing flow
+
+### Architecture Diagrams
+- [System Architecture Diagram](system-architecture-diagram.md) - Overview of the system architecture
+- [Hexagonal Architecture Diagram](hexagonal-architecture-diagram.md) - Illustrates the hexagonal architecture pattern
+
+### Domain Model Diagrams
+- [Entity Hierarchy Diagram](entity-hierarchy-diagram.md) - Shows the entity hierarchy relationship
+
+## Additional Diagrams (To Be Created)
+
+The following additional diagrams may be created in the future:
+
+### Architecture Diagrams
+- Component diagrams for the Onboarding and Transaction services
+- Detailed data flow diagram
+
+### Domain Model Diagrams
+- Financial model diagram
+- Metadata model diagram
+
+## Diagram Creation Guidelines
+
+When creating diagrams for the Midaz documentation, please follow these guidelines:
+
+### ASCII Diagram Guidelines
+
+1. **Format**: Use plain text ASCII art for all diagrams
+2. **Simplicity**: Keep diagrams simple and readable in a monospace font
+3. **Consistency**: Use consistent box and arrow styles across diagrams
+4. **Context**: Include a description below each diagram explaining the components
+5. **File Format**: Save as .md files with Markdown formatting
+6. **Code Blocks**: Enclose ASCII art in triple backtick (```) code blocks
+
+### Content Requirements
+
+1. **Clarity**: Each diagram should clearly illustrate its intended concept
+2. **Simplicity**: Focus on the most important elements, avoid excessive detail
+3. **Consistency**: Use consistent terminology with the rest of the documentation
+4. **Accuracy**: Ensure diagrams accurately reflect the actual system architecture
+5. **Completeness**: Include all relevant components and relationships
+
+### ASCII Diagram Symbols
+
+- **Boxes**: Use `+-----+` for components
+- **Lines**: Use `-` for horizontal lines, `|` for vertical lines
+- **Arrows**: Use `->` for simple arrows, `--->` for emphasis
+- **Relationships**: Label with text like `1:n` or `contains`
+- **Box Titles**: Center inside the box
+
+## Recommended ASCII Diagram Tools
+
+- **Command Line**: `asciiflow` in terminal
+- **Web-based**: [asciiflow.com](https://asciiflow.com)
+- **Text Editor**: Manual creation in any text editor
\ No newline at end of file
diff --git a/docs/assets/entity-hierarchy-diagram.md b/docs/assets/entity-hierarchy-diagram.md
new file mode 100644
index 00000000..b07db4e7
--- /dev/null
+++ b/docs/assets/entity-hierarchy-diagram.md
@@ -0,0 +1,85 @@
+# Entity Hierarchy Diagram
+
+This ASCII diagram illustrates the hierarchical relationship between entities in Midaz:
+
+```
++----------------------+
+|                      |
+|     Organization     |
+|                      |
++----------+-----------+
+           |
+           | 1:n
+           v
++----------+-----------+
+|                      |
+|       Ledger         |
+|                      |
++----------+-----------+
+           |
+           | 1:n
+           v
++----------+-----------+     +--------------------+
+|                      |     |                    |
+|        Asset         +---->+    Asset Rate      |
+|                      |     |                    |
++----------+-----------+     +--------------------+
+           |
+           | 1:n
+           v
++----------+-----------+
+|                      |
+|       Segment        |
+|                      |
++----------+-----------+
+           |
+           | 1:n
+           v
++----------+-----------+
+|                      |
+|      Portfolio       |
+|                      |
++----------+-----------+
+           |
+           | 1:n
+           v
++----------+-----------+     +--------------------+
+|                      |     |                    |
+|       Account        +---->+     Balance        |
+|                      |     |                    |
++----------+-----------+     +--------------------+
+```
+
+## Entity Descriptions
+
+- **Organization**: Top-level entity representing a business or organizational unit
+  - Contains multiple ledgers
+  - Examples: Companies, divisions, departments
+
+- **Ledger**: Accounting book for a specific purpose
+  - Contains multiple assets
+  - Examples: General ledger, accounts receivable
+
+- **Asset**: Represents a type of value that can be tracked
+  - Has associated exchange rates (Asset Rates)
+  - Examples: Currencies, securities, commodities
+
+- **Segment**: Categorization within a specific asset
+  - Used to group portfolios
+  - Examples: Business lines, product categories
+
+- **Portfolio**: Collection of accounts with a common purpose
+  - Contains multiple accounts
+  - Examples: Investment portfolios, customer groups
+
+- **Account**: Individual financial account
+  - Has balances for different assets
+  - Examples: Customer account, internal account
+
+- **Balance**: Represents the amount of a specific asset in an account
+  - Linked to an account and asset
+  - Tracks total, available, and blocked amounts
+
+## Related Documentation
+- [Entity Hierarchy](../domain-models/entity-hierarchy.md)
+- [Financial Model](../domain-models/financial-model.md)
\ No newline at end of file
diff --git a/docs/assets/hexagonal-architecture-diagram.md b/docs/assets/hexagonal-architecture-diagram.md
new file mode 100644
index 00000000..d8cda5f3
--- /dev/null
+++ b/docs/assets/hexagonal-architecture-diagram.md
@@ -0,0 +1,101 @@
+# Hexagonal Architecture Diagram
+
+This ASCII diagram illustrates the hexagonal architecture pattern implemented in Midaz:
+
+```
+                    +----------------------------------+
+                    |                                  |
+                    |        External Systems          |
+                    |                                  |
+                    +--------------+-+-----------------+
+                                   | |
+                                   | |
+                    +--------------v-v-----------------+
+                    |                                  |
+                    |        Primary Adapters          |
+                    |    (HTTP, CLI, Event Consumers)  |
+                    |                                  |
++-------------------|                                  |-------------------+
+|                   +--^---------------------------^---+                   |
+|                      |                           |                       |
+|                      |                           |                       |
+|    +------------------v---+           +----------v-------------+        |
+|    |                      |           |                        |        |
+|    |    Primary Ports     |           |     Secondary Ports    |        |
+|    |    (API Interfaces)  |           |  (Repository/Service   |        |
+|    |                      |           |       Interfaces)      |        |
+|    +----------+-----------+           +-----------+------------+        |
+|               |                                   |                     |
+|               |                                   |                     |
+|    +----------v---------------------------------v-+                     |
+|    |                                              |                     |
+|    |               Domain Layer                   |                     |
+|    |        (Business Logic & Models)             |                     |
+|    |                                              |                     |
+|    +----------------------------------------------+                     |
+|                                                                         |
+|                    Application Core                                     |
++-------------------------------------------------------------------------+
+                                   |
+                                   |
+                    +-------------v------------------+
+                    |                                |
+                    |       Secondary Adapters       |
+                    | (Database, MessageQueue, etc.) |
+                    |                                |
+                    +--------------------------------+
+                                   |
+                                   |
+                    +-------------v------------------+
+                    |                                |
+                    |       External Resources       |
+                    |  (PostgreSQL, MongoDB, etc.)   |
+                    |                                |
+                    +--------------------------------+
+```
+
+## Architecture Explanation
+
+### Layers
+
+1. **Domain Layer (Core)**
+   - Contains business logic and domain models
+   - Pure Go structs (Organization, Ledger, Asset, Account, etc.)
+   - Business rules and validations
+   - No dependencies on external frameworks or resources
+
+2. **Ports (Interfaces)**
+   - **Primary/Driving Ports**: Define how external actors use the application
+   - **Secondary/Driven Ports**: Define how the application uses external resources
+   - Implemented as Go interfaces
+
+3. **Adapters (Implementations)**
+   - **Primary/Driving Adapters**: Implementation of primary ports
+     - HTTP Controllers
+     - CLI Commands
+     - Event Consumers
+   - **Secondary/Driven Adapters**: Implementation of secondary ports
+     - Database Repositories (PostgreSQL, MongoDB)
+     - Message Queue Clients (RabbitMQ)
+     - Cache Clients (Redis)
+
+### Flow Directions
+
+- **Inbound Flow**: External requests → Primary Adapters → Primary Ports → Domain Layer
+- **Outbound Flow**: Domain Layer → Secondary Ports → Secondary Adapters → External Resources
+
+## Practical Example
+
+In Midaz, a request to create an organization follows this path:
+
+1. HTTP request received by HTTP Controller (Primary Adapter)
+2. Controller calls CreateOrganization use case (Primary Port)
+3. Use case implements business logic, validations (Domain Layer)
+4. Use case calls repository interfaces (Secondary Ports)
+5. PostgreSQL repository implementation handles persistence (Secondary Adapter)
+6. Data is stored in the database (External Resource)
+
+## Related Documentation
+- [Hexagonal Architecture](../architecture/hexagonal-architecture.md)
+- [Component Integration](../architecture/component-integration.md)
+- [System Overview](../architecture/system-overview.md)
\ No newline at end of file
diff --git a/docs/assets/system-architecture-diagram.md b/docs/assets/system-architecture-diagram.md
new file mode 100644
index 00000000..d91701bc
--- /dev/null
+++ b/docs/assets/system-architecture-diagram.md
@@ -0,0 +1,79 @@
+# System Architecture Diagram
+
+This ASCII diagram illustrates the high-level architecture of the Midaz system:
+
+```
++-------------------+     +-------------------+     +-------------------+
+|                   |     |                   |     |                   |
+|    MDZ CLI        |     |   External Apps   |     |  Other Clients    |
+|                   |     |                   |     |                   |
++--------+----------+     +---------+---------+     +---------+---------+
+         |                          |                         |
+         |                          |                         |
+         +---------------+----------+-------------------------+
+                         |
+                         v
++------------------------------------------------------------+
+|                                                            |
+|                     API Gateway                            |
+|                                                            |
++--+------------------------+-----------------------------+--+
+   |                        |                             |
+   |                        |                             |
+   v                        v                             v
++--+---------------+     +--+---------------+     +-------+----------+
+|                  |     |                  |     |                  |
+| Onboarding API   |     | Transaction API  |     |  Future Services |
+|                  |     |                  |     |                  |
++--+---------------+     +--+---------------+     +------------------+
+   |                        |
+   |                        |
++--v------------------------v--+     +--------------------+
+|                              |     |                    |
+|      PostgreSQL DB           |<--->|     MongoDB       |
+| (Transactional Data)         |     | (Metadata Storage)|
+|                              |     |                    |
++------------------------------+     +--------------------+
+   |                        |
+   |                        |
++--v------------------------v--+     +--------------------+
+|                              |     |                    |
+|         RabbitMQ             |<--->|      Redis        |
+|    (Event Communication)     |     |   (Caching)       |
+|                              |     |                    |
++------------------------------+     +--------------------+
+            |
+            v
++------------------------------+
+|                              |
+|     Monitoring Stack         |
+|     (Grafana, Prometheus)    |
+|                              |
++------------------------------+
+```
+
+## Architecture Components
+
+- **Client Layer**:
+  - MDZ CLI: Command-line interface for interacting with the system
+  - External Apps: Third-party applications using the API
+  - Other Clients: Web interfaces, mobile apps, etc.
+
+- **API Layer**:
+  - Onboarding API: Manages entities like organizations, ledgers, assets, etc.
+  - Transaction API: Handles financial transaction processing
+  - Future Services: Placeholder for additional services
+
+- **Data Storage**:
+  - PostgreSQL: Primary database for transactional data
+  - MongoDB: NoSQL database for flexible metadata storage
+
+- **Infrastructure**:
+  - RabbitMQ: Message broker for asynchronous communication
+  - Redis: In-memory data structure store for caching
+  - Monitoring: Observability tools (Grafana, Prometheus)
+
+## Related Documentation
+- [System Overview](../architecture/system-overview.md)
+- [Component Integration](../architecture/component-integration.md)
+- [Event-Driven Design](../architecture/event-driven-design.md)
\ No newline at end of file
diff --git a/docs/assets/transaction-flow-diagram.md b/docs/assets/transaction-flow-diagram.md
new file mode 100644
index 00000000..db3ebbe3
--- /dev/null
+++ b/docs/assets/transaction-flow-diagram.md
@@ -0,0 +1,71 @@
+# Transaction Flow Diagram
+
+This ASCII diagram illustrates the transaction processing flow in Midaz:
+
+```
++-------------+   Request    +--------------------+  Validate   +-----------------+
+|             |------------->|                    |------------>|                 |
+|    Client   |              | Transaction API    |             | Input Validation|
+|             |<-------------|                    |<------------|                 |
++-------------+   Response   +--------------------+  Result     +-----------------+
+                                    |                                  |
+                                    | Create                           |
+                                    v                                  |
+                     +--------------------+                            |
+                     |                    |         Publish            |
+                     | Postgres Database  |<----------------------+    |
+                     |                    |         Events        |    |
+                     +--------------------+                       |    |
+                                    |                             |    |
+                                    | Retrieve                    |    |
+                                    v                             |    |
++-----------------+  Validate  +--------------------+  Queue     |    |
+|                 |<-----------|                    |----------->|    |
+| Balance Check   |            | Transaction Service|            |    |
+|                 |----------->|                    |            |    |
++-----------------+  Result    +--------------------+            |    |
+                                    |                            |    |
+                                    | Process                    |    |
+                                    v                            |    |
++-----------------+  Update    +--------------------+            |    |
+|                 |<-----------|                    |            |    |
+| Account Balances|            | Balance Management |            |    |
+|                 |----------->|                    |<-----------+    |
++-----------------+  Result    +--------------------+                 |
+                                    |                                 |
+                                    | Update                          |
+                                    v                                 |
+                     +--------------------+                           |
+                     |                    |                           |
+                     | Update Transaction |                           |
+                     | Status             |<--------------------------+
+                     |                    |         Error Handling
+                     +--------------------+
+                                    |
+                                    | Notify
+                                    v
+                     +--------------------+
+                     |                    |
+                     | Event Publication  |
+                     | (RabbitMQ)         |
+                     |                    |
+                     +--------------------+
+```
+
+## Flow Description
+
+1. **Request Initiation**: Client submits a transaction request to the Transaction API
+2. **Validation**: Input data is validated (format, required fields, etc.)
+3. **Transaction Creation**: A new transaction record is created in the database with status 'PENDING'
+4. **Balance Validation**: The system checks if accounts have sufficient balances
+5. **Operation Processing**: For each operation in the transaction:
+   - Account balances are updated (debits and credits)
+   - Balance records are updated with new amounts
+6. **Status Update**: Transaction status is updated to 'COMPLETED' or 'FAILED'
+7. **Event Publication**: Events are published to RabbitMQ for downstream processing
+
+The system uses idempotency keys to prevent duplicate transaction processing and maintains transaction atomicity through database transactions.
+
+## Related Documentation
+- [Implementing Transactions](../tutorials/implementing-transactions.md)
+- [Transaction Processing](../components/transaction/transaction-processing.md)
\ No newline at end of file
diff --git a/docs/assets/transaction-model-diagram.md b/docs/assets/transaction-model-diagram.md
new file mode 100644
index 00000000..8df8932b
--- /dev/null
+++ b/docs/assets/transaction-model-diagram.md
@@ -0,0 +1,58 @@
+# Transaction Model Diagram
+
+This ASCII diagram illustrates the core structure of the transaction model in Midaz:
+
+```
++----------------+       +-----------------+
+| Transaction    |       | Balance         |
+|----------------|       |-----------------|
+| id             |       | id              |
+| parent_id      |       | account_id      |
+| idempotency_key|       | asset_code      |
+| status         |       | amount          |
+| metadata       +------>| available_amount|
+| created_at     |       | blocked_amount  |
+| updated_at     |       | created_at      |
+|                |       | updated_at      |
++-------+--------+       +-----------------+
+        |
+        | 1:n
+        v
++-------+--------+       +-----------------+
+| Operation      |       | Account         |
+|----------------|       |-----------------|
+| id             |       | id              |
+| transaction_id +------>| portfolio_id    |
+| account_id     |       | alias           |
+| asset_code     |       | status          |
+| type           |       | metadata        |
+| amount         |       | created_at      |
+| status         |       | updated_at      |
+| created_at     |       |                 |
+| updated_at     |       |                 |
++----------------+       +-----------------+
+```
+
+## Model Description
+
+- **Transaction**: The top-level entity that represents a financial transaction
+  - Contains one or more operations
+  - Has a unique idempotency key to prevent duplicate submissions
+  - Can reference a parent transaction (for related transactions)
+
+- **Operation**: Individual debit/credit entry within a transaction
+  - Links to a specific account and asset
+  - Represents a specific amount movement (debit or credit)
+  - Multiple operations must balance within a transaction
+
+- **Balance**: Represents the current state of an account for a specific asset
+  - Tracks total, available, and blocked amounts
+  - Updated as transactions are processed
+
+- **Account**: Represents a financial account in the system
+  - Belongs to a portfolio in the entity hierarchy
+  - Has one or more balances (one per asset)
+
+## Related Documentation
+- [Implementing Transactions](../tutorials/implementing-transactions.md)
+- [Transaction Domain Model](../components/transaction/domain-model.md)
\ No newline at end of file
diff --git a/docs/components/README.md b/docs/components/README.md
new file mode 100644
index 00000000..892b3bb8
--- /dev/null
+++ b/docs/components/README.md
@@ -0,0 +1,12 @@
+# Components
+
+**Navigation:** [Home](../) > Components
+
+This section provides documentation about Components.
+
+## In This Section
+
+- [Infrastructure](./infrastructure/)
+- [Mdz Cli](./mdz-cli/)
+- [Onboarding](./onboarding/)
+- [Transaction](./transaction/)
diff --git a/docs/components/infrastructure/README.md b/docs/components/infrastructure/README.md
new file mode 100644
index 00000000..379e5b70
--- /dev/null
+++ b/docs/components/infrastructure/README.md
@@ -0,0 +1,168 @@
+# Infrastructure Components
+
+**Navigation:** [Home](../../) > [Components](../) > Infrastructure
+
+## Overview
+
+The Midaz infrastructure layer provides the foundational services required for the operation of the Midaz system. It employs a containerized architecture with Docker Compose for consistent deployment across environments.
+
+## Infrastructure Components
+
+The infrastructure layer consists of the following components:
+
+### PostgreSQL Database
+
+PostgreSQL is used as the primary relational database for structured data.
+
+**Key Features:**
+- Primary/replica configuration for high availability
+- Dedicated databases for each service (onboarding, transaction)
+- Logical replication for data redundancy
+- Migration scripts for schema versioning
+- Performance-tuned configuration
+
+**Related Documentation:**
+- [PostgreSQL Configuration](./postgresql.md)
+
+### MongoDB
+
+MongoDB is used as a document database for flexible metadata storage.
+
+**Key Features:**
+- Replica set configuration for redundancy
+- Secured with authentication and keyfile
+- Namespace separation for different services
+- Schema-less design for flexible metadata storage
+
+**Related Documentation:**
+- [MongoDB Configuration](./mongodb.md)
+
+### RabbitMQ
+
+RabbitMQ serves as the message broker for asynchronous communication between services.
+
+**Key Features:**
+- Predefined exchanges and queues for transaction processing
+- Direct exchange types for message routing
+- Durable queues for message persistence
+- Bindings for queue-to-exchange relationships
+- Web management interface for monitoring
+
+**Related Documentation:**
+- [RabbitMQ Configuration](./rabbitmq.md)
+
+### Redis/Valkey
+
+Redis (Valkey) is used as an in-memory data store for caching and temporary data.
+
+**Key Features:**
+- Password-protected access
+- Persistence configuration for data durability
+- Used for caching and session management
+- Low-latency data access
+
+**Related Documentation:**
+- [Redis/Valkey Configuration](./redis.md)
+
+### Grafana/OpenTelemetry
+
+Monitoring and observability are provided through Grafana and OpenTelemetry.
+
+**Key Features:**
+- Integrated logging, tracing, and metrics collection
+- Pre-configured dashboards for system monitoring
+- Customizable visualization for system metrics
+- Secure access controls
+
+**Related Documentation:**
+- [Monitoring Setup](./monitoring.md)
+
+## Architecture Diagram
+
+```
+┌─────────────────────────────────────────────────────────┐
+│                   Infrastructure Layer                   │
+├─────────────────┬─────────────────┬─────────────────────┤
+│                 │                 │                     │
+│   PostgreSQL    │    MongoDB      │     RabbitMQ        │
+│ ┌─────────────┐ │ ┌─────────────┐ │  ┌─────────────┐    │
+│ │  Primary    │ │ │  Replica    │ │  │ Exchanges   │    │
+│ │  Database   │ │ │  Set (rs0)  │ │  │ & Queues    │    │
+│ └──────┬──────┘ │ └─────────────┘ │  └─────────────┘    │
+│        │        │                 │                     │
+│ ┌──────┴──────┐ │                 │                     │
+│ │  Replica    │ │                 │                     │
+│ │  Database   │ │                 │                     │
+│ └─────────────┘ │                 │                     │
+├─────────────────┼─────────────────┼─────────────────────┤
+│                 │                 │                     │
+│   Redis/Valkey  │    Grafana      │  OpenTelemetry      │
+│ ┌─────────────┐ │ ┌─────────────┐ │  ┌─────────────┐    │
+│ │  In-Memory  │ │ │ Dashboards  │ │  │ Collectors  │    │
+│ │  Data Store │ │ │ & Metrics   │ │  │ & Exporters │    │
+│ └─────────────┘ │ └─────────────┘ │  └─────────────┘    │
+│                 │                 │                     │
+└─────────────────┴─────────────────┴─────────────────────┘
+```
+
+## Network Configuration
+
+The infrastructure components are organized into a dedicated network for isolation and security:
+
+- `infra-network`: Core infrastructure components
+- Service-specific networks: For connection to application services
+
+## Management Commands
+
+Infrastructure components can be managed through the root Makefile:
+
+```bash
+# Start all infrastructure components
+make up
+
+# Stop all infrastructure components
+make down
+
+# View logs from infrastructure components
+make logs
+
+# Clean up infrastructure resources
+make clean-docker
+
+# Rebuild and restart infrastructure components
+make rebuild-up
+```
+
+## Environment Configuration
+
+Each infrastructure component is configured through environment variables defined in `.env` files. These files are created from the provided `.env.example` templates:
+
+```bash
+# Set up environment configuration
+make set-env
+```
+
+Key environment variables include:
+- Database credentials and connection settings
+- Message broker configuration
+- Monitoring system access controls
+- Network ports and bindings
+
+## Docker Compose Configuration
+
+The infrastructure is defined in `docker-compose.yml` files, with the main file located at `/components/infra/docker-compose.yml`. This file orchestrates:
+
+- Container definitions and relationships
+- Volume mounting for data persistence
+- Network configuration and exposure
+- Health checks and dependent services
+
+## Next Steps
+
+To learn more about individual infrastructure components:
+
+- [PostgreSQL Configuration](./postgresql.md)
+- [MongoDB Configuration](./mongodb.md)
+- [RabbitMQ Configuration](./rabbitmq.md)
+- [Redis/Valkey Configuration](./redis.md)
+- [Monitoring Setup](./monitoring.md)
\ No newline at end of file
diff --git a/docs/components/infrastructure/mongodb.md b/docs/components/infrastructure/mongodb.md
new file mode 100644
index 00000000..892503b3
--- /dev/null
+++ b/docs/components/infrastructure/mongodb.md
@@ -0,0 +1,207 @@
+# MongoDB Configuration
+
+**Navigation:** [Home](../../) > [Components](../) > [Infrastructure](./) > MongoDB
+
+This document describes the MongoDB configuration and usage in the Midaz system.
+
+## Overview
+
+MongoDB is used in the Midaz system as a flexible document database primarily for storing metadata associated with entities maintained in PostgreSQL. This follows a polyglot persistence pattern where structured, relational data is stored in PostgreSQL while flexible, schema-less metadata is stored in MongoDB.
+
+## Database Structure
+
+MongoDB in Midaz follows these structural patterns:
+
+- **Single database** with multiple collections based on entity types
+- **Collections naming** follows the entity types (e.g., "organization", "ledger")
+- **Document structure** is consistent with a standard metadata schema
+- **Replica set configuration** for high availability
+
+### Collections
+
+Collections are created dynamically based on entity types, including:
+- `organization`
+- `ledger`
+- `asset`
+- `segment`
+- `portfolio`
+- `account`
+- `transaction`
+
+### Document Structure
+
+Each metadata document follows this structure:
+
+```json
+{
+  "_id": ObjectId("..."),
+  "entity_id": "uuid-reference-to-postgres-entity",
+  "entity_name": "EntityTypeName",
+  "metadata": {
+    // Flexible, entity-specific JSON data here
+  },
+  "created_at": ISODate("2023-01-01T00:00:00.000Z"),
+  "updated_at": ISODate("2023-01-01T00:00:00.000Z")
+}
+```
+
+## Database Configuration
+
+### Initial Setup
+
+MongoDB is set up as a replica set with authentication enabled:
+
+1. **Replica Set Configuration**: 
+   - Named "rs0"
+   - Initially configured with a single node (can be expanded in production)
+   - Uses keyfile-based authentication between nodes
+
+2. **Authentication**:
+   - Creates an admin user with root access
+   - Uses SCRAM-SHA-256 authentication mechanism
+   - Secured with a dedicated keyfile for inter-node authentication
+
+### Initialization Script
+
+The system uses a script (`mongo.sh`) to initialize MongoDB:
+
+```bash
+# Initialize the replica set
+mongosh --host "${MONGO_HOST}" --port "${MONGO_PORT}" <<EOF
+    rs.initiate({
+      _id: "rs0",
+      members: [{ _id: 0, host: "${MONGO_HOST}:${MONGO_PORT}" }]
+    });
+EOF
+
+# Create the admin user
+mongosh --host "${MONGO_HOST}" --port "${MONGO_PORT}" <<EOF
+    use admin;
+    db.createUser({
+      user: "${MONGO_USER}",
+      pwd: "${MONGO_PASSWORD}",
+      roles: [
+        { role: "root", db: "admin" },
+        { role: "userAdminAnyDatabase", db: "admin" },
+        { role: "dbAdminAnyDatabase", db: "admin" },
+        { role: "readWriteAnyDatabase", db: "admin" }
+      ]
+    });
+EOF
+```
+
+### Connection Configuration
+
+MongoDB connections use URI-style connection strings:
+
+```
+mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?replicaSet=rs0&authSource=admin
+```
+
+Key environment variables:
+
+| Variable | Description | Default |
+|----------|-------------|---------|
+| MONGO_HOST | MongoDB host | localhost |
+| MONGO_PORT | MongoDB port | 27017 |
+| MONGO_USER | MongoDB username | admin |
+| MONGO_PASSWORD | MongoDB password | adminpassword |
+| MONGO_DATABASE | Database name | midaz |
+| MONGO_MAX_POOL_SIZE | Maximum connection pool size | 100 |
+
+## Connection Management
+
+### Connection Pooling
+
+The system implements connection pooling with configurable limits:
+- `MaxPoolSize`: Controls maximum concurrent connections (default: 100)
+- Connections are shared through a centralized `MongoConnection` instance
+
+### Connection Lifecycle
+
+The application follows these connection patterns:
+1. MongoDB connection is established during bootstrap
+2. Connection pool is maintained throughout application lifecycle
+3. Each repository operation obtains a connection from the pool
+4. Connections are automatically returned to the pool after use
+
+## Data Access Patterns
+
+### Repository Pattern
+
+MongoDB access follows the repository pattern:
+- Interface defines repository contract (`Repository`)
+- MongoDB-specific implementation (`MetadataMongoDBRepository`) provides database access
+- Clear separation between domain models and MongoDB models
+
+### CRUD Operations
+
+Standard operations on metadata:
+- **Create**: Insert new metadata documents
+- **FindList**: Retrieve multiple metadata documents with optional filtering
+- **FindByEntity**: Find metadata for a specific entity by ID
+- **Update**: Modify existing metadata (with upsert capability)
+- **Delete**: Remove metadata documents
+
+### Pagination and Filtering
+
+Supports:
+- Skip/limit pagination
+- Filtering by metadata fields
+- Flexible query criteria
+
+## Monitoring & Telemetry
+
+MongoDB operations are instrumented with:
+
+1. **OpenTelemetry Integration**:
+   - Each database operation creates spans for performance tracking
+   - Error details are captured in spans using `HandleSpanError`
+   - Child spans created for specific operations (find, insert, update, delete)
+
+2. **Structured Logging**:
+   - Context-aware logging
+   - Consistent error logging
+   - Operation result logging (e.g., record counts)
+
+## Running Locally
+
+To run MongoDB locally using Docker:
+
+```bash
+cd components/infra
+docker-compose up -d mongo
+```
+
+## Best Practices
+
+1. **Use the Repository Pattern** for consistent data access
+2. **Implement Connection Pooling** to efficiently manage connections
+3. **Set up proper authentication** for security
+4. **Configure replica sets** for high availability
+5. **Use OpenTelemetry instrumentation** for observability
+6. **Keep flexible schema in MongoDB** while structured data stays in PostgreSQL
+7. **Maintain cross-database referential integrity** via entity_id references
+
+## Common Issues and Troubleshooting
+
+1. **Connection Issues**:
+   - Check that the replica set is properly initialized
+   - Verify authentication credentials are correct
+   - Ensure the mongo-keyfile has proper permissions (600)
+
+2. **Performance Issues**:
+   - Add appropriate indexes for frequently queried fields
+   - Monitor connection pool utilization
+   - Use projection to limit returned fields when appropriate
+
+3. **Replica Set Problems**:
+   - Check replica set status with `rs.status()`
+   - Verify network connectivity between nodes
+   - Ensure each node has a unique identifier
+
+## Related Documentation
+
+- [Entity Lifecycle](../../architecture/data-flow/entity-lifecycle.md)
+- [Metadata Approach](../../domain-models/metadata-approach.md)
+- [PostgreSQL Configuration](postgresql.md)
diff --git a/docs/components/infrastructure/monitoring.md b/docs/components/infrastructure/monitoring.md
new file mode 100644
index 00000000..ee241d1a
--- /dev/null
+++ b/docs/components/infrastructure/monitoring.md
@@ -0,0 +1,374 @@
+# Monitoring
+
+**Navigation:** [Home](../../) > [Infrastructure](./README.md) > Monitoring
+
+This document describes the monitoring infrastructure used in the Midaz platform, including metrics collection, visualization, alerts, and best practices.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Monitoring Stack](#monitoring-stack)
+- [Metrics and Logging](#metrics-and-logging)
+- [Dashboards](#dashboards)
+- [Alerts](#alerts)
+- [Setup and Configuration](#setup-and-configuration)
+- [Using the Monitoring Tools](#using-the-monitoring-tools)
+- [Best Practices](#best-practices)
+- [Troubleshooting](#troubleshooting)
+- [References](#references)
+
+## Overview
+
+Midaz uses a comprehensive monitoring infrastructure to track the health, performance, and behavior of all platform components. The monitoring system provides visibility into:
+
+- Service availability and health
+- Performance metrics and latency
+- Resource utilization
+- Error rates and exceptions
+- Message queue status
+- Database performance
+- End-to-end transaction processing
+- Business metrics
+
+This observability allows for proactive identification of issues, performance optimization, and capacity planning.
+
+## Monitoring Stack
+
+The Midaz monitoring stack is built on several integrated tools:
+
+### Grafana + OpenTelemetry (OTEL-LGTM)
+
+The platform uses an observability stack called "otel-lgtm" (OpenTelemetry + Loki, Grafana, Tempo, and Mimir):
+
+- **Grafana**: Visualization dashboards for metrics, logs, and traces
+- **OpenTelemetry**: Collection and instrumentation framework for metrics, traces, and logs
+- **Loki**: Log aggregation and querying system
+- **Tempo**: Distributed tracing backend
+- **Mimir**: Scalable metrics storage
+
+This integrated stack provides a complete observability solution with correlation between metrics, logs, and traces.
+
+### Health Checks
+
+All critical infrastructure services include health checks to monitor availability:
+
+- **PostgreSQL**: Primary and replica database health checks
+- **MongoDB**: Database cluster health monitoring
+- **RabbitMQ**: Message broker availability checks
+- **Redis**: Cache service health monitoring
+
+### Service Instrumentation
+
+Applications in the Midaz platform are instrumented using the OpenTelemetry SDK, which provides:
+
+- Automatic instrumentation of HTTP requests and responses
+- Database query monitoring
+- Runtime metrics (memory, CPU)
+- Custom business metrics
+- Distributed tracing
+- Structured logging
+
+## Metrics and Logging
+
+### Key Metrics
+
+The monitoring system collects the following key metrics:
+
+#### System Metrics
+- CPU, memory, disk, and network utilization
+- Container resource usage
+- JVM/runtime metrics (for applicable services)
+
+#### Database Metrics
+- Query execution time
+- Connection pool utilization
+- Transaction throughput
+- Replication lag (PostgreSQL)
+- Replica set status (MongoDB)
+
+#### Message Queue Metrics
+- Queue depth and throughput
+- Message processing rates
+- Consumer lag
+- Failed deliveries
+
+#### Application Metrics
+- Request rate and latency
+- Error rates and types
+- Endpoint performance
+- Business transaction metrics
+- Success/failure rates
+
+### Logging
+
+Midaz uses structured logging throughout the platform:
+
+- **Log Levels**: DEBUG, INFO, WARN, ERROR, FATAL
+- **Log Format**: JSON format with standardized fields
+- **Log Collection**: All logs are collected by Loki for centralized analysis
+- **Correlation**: Logs include trace and span IDs for correlation with traces
+
+## Dashboards
+
+Grafana dashboards are organized by component and function:
+
+### System Dashboards
+- **Infrastructure Overview**: Overall system health
+- **Resource Utilization**: CPU, memory, disk, and network monitoring
+- **Container Metrics**: Container-level resource monitoring
+
+### Service Dashboards
+- **Service Health**: Per-service health and performance metrics
+- **Endpoint Performance**: API endpoint response times and error rates
+- **Service Dependencies**: Service interaction monitoring
+
+### Database Dashboards
+- **PostgreSQL Metrics**: Primary and replica database performance
+- **MongoDB Metrics**: Document database performance
+- **Redis Metrics**: Cache performance
+
+### Queue Dashboards
+- **RabbitMQ Overview**: Queue health and performance
+- **Message Flow**: Message processing tracking
+
+### Business Metrics Dashboards
+- **Transaction Processing**: Financial transaction metrics
+- **User Activity**: User interaction metrics
+
+## Alerts
+
+Alert rules are configured in Grafana for automated monitoring:
+
+### Infrastructure Alerts
+- Database availability
+- Message queue connectivity
+- Service health checks
+
+### Performance Alerts
+- High latency in critical services
+- Slow database queries
+- API endpoint response times
+
+### Error Alerts
+- High error rates
+- Failed transactions
+- Infrastructure failures
+
+### Capacity Alerts
+- Resource utilization thresholds
+- Queue depth warnings
+- Database connection pool saturation
+
+## Setup and Configuration
+
+### Setting Up the Monitoring Stack
+
+The monitoring infrastructure is part of the standard Midaz deployment and is managed through Docker Compose:
+
+```bash
+# Start the entire infrastructure including monitoring
+cd components/infra
+make up
+
+# Start only the monitoring components
+cd components/infra
+make monitoring-up
+```
+
+### Configuration Files
+
+The monitoring configuration consists of:
+
+1. Docker Compose configuration in `components/infra/docker-compose.yml`
+2. Grafana configuration in `components/infra/grafana/`
+3. OpenTelemetry Collector configuration
+
+### Environment Variables
+
+The monitoring stack uses the following environment variables:
+
+| Variable | Description | Default Value |
+|----------|-------------|---------------|
+| `OTEL_LGTM_ADMIN_USER` | Grafana admin username | admin |
+| `OTEL_LGTM_ADMIN_PASSWORD` | Grafana admin password | admin |
+| `OTEL_LGTM_EXTERNAL_PORT` | External port for Grafana UI | 3000 |
+| `OTEL_LGTM_INTERNAL_PORT` | Internal port for Grafana | 3000 |
+| `OTEL_LGTM_RECEIVER_GRPC_PORT` | OTLP GRPC receiver port | 4317 |
+| `OTEL_LGTM_RECEIVER_HTTP_PORT` | OTLP HTTP receiver port | 4318 |
+
+### Instrumenting Services
+
+To enable monitoring in application services, configure the following environment variables:
+
+```
+# Required for OpenTelemetry instrumentation
+OTEL_RESOURCE_SERVICE_NAME=<service-name>
+OTEL_LIBRARY_NAME=<library-name>
+OTEL_RESOURCE_SERVICE_VERSION=<version>
+OTEL_RESOURCE_DEPLOYMENT_ENVIRONMENT=<environment>
+OTEL_EXPORTER_OTLP_ENDPOINT=http://midaz-otel-lgtm:4317
+ENABLE_TELEMETRY=true
+```
+
+## Using the Monitoring Tools
+
+### Accessing Grafana
+
+The Grafana UI is accessible at:
+
+```
+http://localhost:<OTEL_LGTM_EXTERNAL_PORT>
+```
+
+Default credentials are specified in your environment variables (`OTEL_LGTM_ADMIN_USER/OTEL_LGTM_ADMIN_PASSWORD`).
+
+### Exploring Metrics
+
+1. Navigate to the Explore tab in Grafana
+2. Select the appropriate data source (Mimir for metrics)
+3. Use the query builder or PromQL to query metrics
+
+Example PromQL queries:
+
+```
+# Request rate by service
+sum(rate(http_server_requests_total[5m])) by (service)
+
+# Error rate
+sum(rate(http_server_requests_total{status_code=~"5.."}[5m])) by (service) / sum(rate(http_server_requests_total[5m])) by (service)
+
+# Database query time
+histogram_quantile(0.95, sum(rate(database_query_seconds_bucket[5m])) by (operation, le))
+```
+
+### Viewing Logs
+
+1. Navigate to the Explore tab in Grafana
+2. Select Loki as the data source
+3. Use LogQL to query logs
+
+Example LogQL queries:
+
+```
+# Logs from a specific service
+{service="transaction-service"}
+
+# Error logs
+{level="ERROR"}
+
+# Logs related to a specific transaction
+{transaction_id="abc123"}
+```
+
+### Analyzing Traces
+
+1. Navigate to the Explore tab in Grafana
+2. Select Tempo as the data source
+3. Search traces by:
+   - Trace ID
+   - Service name
+   - Operation name
+   - Duration
+   - Tags
+
+### Working with Dashboards
+
+- Use the dashboard selector to navigate between dashboards
+- Use dashboard variables to filter by service, environment, etc.
+- Set time ranges to focus on specific time periods
+- Use dashboard annotations to mark significant events
+
+## Best Practices
+
+### Monitoring Practices
+
+1. **Follow the RED Method** for service monitoring:
+   - **R**ate: Requests per second
+   - **E**rror rate: Failed requests per second
+   - **D**uration: Distribution of request latencies
+
+2. **Follow the USE Method** for resource monitoring:
+   - **U**tilization: Percent time the resource is busy
+   - **S**aturation: Amount of work resource has to do
+   - **E**rrors: Count of error events
+
+3. **Monitor the Four Golden Signals**:
+   - Latency
+   - Traffic
+   - Errors
+   - Saturation
+
+### Instrumentation Practices
+
+1. **Add Context to Logs**: Include relevant business context in logs
+2. **Use Appropriate Log Levels**: Reserve ERROR for actual failures
+3. **Add Custom Metrics**: Instrument business-specific metrics
+4. **Correlate with Trace IDs**: Include trace IDs in logs
+5. **Use Consistent Naming**: Follow a consistent naming convention for metrics
+
+### Dashboard Practices
+
+1. **Organize by Service**: Group dashboards by service
+2. **Start with Overview**: Create overview dashboards for quick assessment
+3. **Include Context**: Add documentation to dashboards
+4. **Use Variables**: Make dashboards reusable with variables
+5. **Set Appropriate Thresholds**: Base alert thresholds on historical data
+
+## Troubleshooting
+
+### Common Issues
+
+#### Monitoring Service Not Available
+
+**Symptoms**: Cannot access Grafana or metrics are missing
+
+**Resolution**:
+```bash
+# Check service status
+cd components/infra
+make ps
+
+# Restart monitoring services
+cd components/infra
+make monitoring-restart
+```
+
+#### Missing Metrics
+
+**Symptoms**: Expected metrics are not showing up in Grafana
+
+**Resolution**:
+1. Verify service instrumentation is correctly configured
+2. Check OpenTelemetry Collector logs:
+   ```bash
+   cd components/infra
+   make logs midaz-otel-lgtm
+   ```
+3. Verify environment variables are properly set
+
+#### High Cardinality Issues
+
+**Symptoms**: Slow queries in Grafana or "too many time series" errors
+
+**Resolution**:
+1. Review metrics labels to reduce cardinality
+2. Use label aggregation in queries
+3. Adjust retention policies
+
+#### Alert Storm
+
+**Symptoms**: Too many alerts firing simultaneously
+
+**Resolution**:
+1. Review alert thresholds and adjust if needed
+2. Implement alert grouping
+3. Add alert inhibition rules for related alerts
+
+## References
+
+- [Grafana Documentation](https://grafana.com/docs/)
+- [OpenTelemetry Documentation](https://opentelemetry.io/docs/)
+- [PromQL Query Examples](https://prometheus.io/docs/prometheus/latest/querying/examples/)
+- [LogQL Query Examples](https://grafana.com/docs/loki/latest/logql/)
+- [RED Method](https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/)
+- [USE Method](http://www.brendangregg.com/usemethod.html)
\ No newline at end of file
diff --git a/docs/components/infrastructure/postgresql.md b/docs/components/infrastructure/postgresql.md
new file mode 100644
index 00000000..b160019c
--- /dev/null
+++ b/docs/components/infrastructure/postgresql.md
@@ -0,0 +1,196 @@
+# PostgreSQL Configuration
+
+**Navigation:** [Home](../../) > [Components](../) > [Infrastructure](./) > PostgreSQL
+
+This document describes the PostgreSQL configuration and usage in the Midaz system.
+
+## Overview
+
+Midaz uses PostgreSQL as its primary relational database for storing structured data across multiple services. Each microservice has its own dedicated database within the PostgreSQL instance. The system follows best practices for connection management, schema design, and database operations.
+
+## Database Structure
+
+The system uses two primary databases:
+
+- **onboarding**: Stores organization, entity, and metadata information
+- **transaction**: Stores financial transactions, operations, and balances
+
+Each database follows a consistent pattern with:
+- UUID primary keys
+- Soft deletion (using `deleted_at` timestamp)
+- Timestamps for record lifecycle (`created_at`, `updated_at`)
+- Foreign key constraints for referential integrity
+- JSON/JSONB columns for flexible data
+
+## Database Configuration
+
+### Initial Setup
+
+PostgreSQL is initialized with a setup script (`init.sql`) that:
+
+1. Creates a replication user for database replication
+2. Sets up physical and logical replication slots
+3. Creates the required databases
+
+```sql
+CREATE USER replicator WITH REPLICATION LOGIN ENCRYPTED PASSWORD 'replicator_password';
+
+SELECT pg_create_physical_replication_slot('replication_slot');
+SELECT * FROM pg_create_logical_replication_slot('logical_slot', 'pgoutput');
+
+CREATE DATABASE onboarding;
+CREATE DATABASE transaction;
+```
+
+### Connection Configuration
+
+Connection strings are built dynamically using environment variables:
+
+```
+postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
+```
+
+Key environment variables:
+
+| Variable | Description | Default |
+|----------|-------------|---------|
+| DB_HOST | Primary database host | localhost |
+| DB_PORT | Database port | 5432 |
+| DB_USER | Database username | postgres |
+| DB_PASSWORD | Database password | postgres |
+| DB_NAME | Database name | varies by service |
+| DB_MAX_OPEN_CONNS | Maximum open connections | 100 |
+| DB_MAX_IDLE_CONNS | Maximum idle connections | 10 |
+
+For read replicas, similar variables with the `DB_REPLICA_` prefix are used.
+
+## Connection Management
+
+### Connection Pooling
+
+The system implements connection pooling with configurable limits:
+
+- `MaxOpenConnections`: Controls maximum concurrent connections (default: 100)
+- `MaxIdleConnections`: Controls connections kept in pool when idle (default: 10)
+
+### Read/Write Split
+
+The infrastructure supports primary/replica configuration:
+- Write operations go to the primary database
+- Read operations can be directed to replicas
+- Configured through separate connection parameters for primary and replica databases
+
+## Schema Management
+
+### Migrations
+
+Database schema is managed through migration files in each service:
+
+- Migration files follow a naming convention: `{sequence}_{description}.{up|down}.sql`
+- Migrations are versioned and run in sequence
+- Both up (apply) and down (rollback) migrations are provided
+
+Example migration to create a table:
+
+```sql
+CREATE TABLE IF NOT EXISTS organization
+(
+    id                                   UUID PRIMARY KEY NOT NULL,
+    parent_organization_id               UUID,
+    legal_name                           TEXT NOT NULL,
+    doing_business_as                    TEXT,
+    legal_document                       TEXT NOT NULL,
+    address                              JSONB NOT NULL,
+    status                               TEXT NOT NULL,
+    status_description                   TEXT,
+    created_at                           TIMESTAMP WITH TIME ZONE NOT NULL,
+    updated_at                           TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
+    deleted_at                           TIMESTAMP WITH TIME ZONE,
+    FOREIGN KEY (parent_organization_id) REFERENCES organization (id)
+);
+```
+
+### Common Schema Patterns
+
+All tables follow these patterns:
+
+1. **UUID Primary Keys**: Instead of auto-incrementing integers
+2. **Timestamps**:
+   - `created_at`: When the record was created
+   - `updated_at`: When the record was last updated
+   - `deleted_at`: When the record was marked as deleted (null if active)
+3. **JSONB for Complex Data**: Used for fields like addresses or other complex structures
+4. **Status Fields**: Text fields with descriptive status values
+5. **Indexes**: Created for frequently queried fields
+
+## Database Access Patterns
+
+### Repository Pattern
+
+All database access follows the repository pattern:
+- Interface defines the repository contract
+- PostgreSQL-specific implementation provides database access
+- Clear separation between domain models and database operations
+
+### Soft Deletion
+
+Records are never physically deleted, only marked as deleted:
+- `deleted_at` column is set with the current timestamp when deleted
+- Queries include `WHERE deleted_at IS NULL` to filter active records
+- Simplifies auditing and potential recovery
+
+### Error Handling
+
+Database operations follow consistent error handling:
+- SQL errors are mapped to domain-specific errors
+- Connection errors are properly handled and reported
+- Retries are implemented for transient failures
+
+### Monitoring & Telemetry
+
+Database operations are monitored through:
+- OpenTelemetry instrumentation with spans for queries
+- Performance metrics for query execution time
+- Structured logging for database operations
+
+## Running Locally
+
+To run PostgreSQL locally using Docker:
+
+```bash
+cd components/infra
+docker-compose up -d postgres
+```
+
+## Best Practices
+
+1. **Always use parameterized queries** to prevent SQL injection
+2. **Include indexes** for frequently queried columns
+3. **Use transactions** when multiple related operations must succeed or fail together
+4. **Implement connection pooling** to efficiently manage database connections
+5. **Set up monitoring** to track query performance
+6. **Follow the soft deletion pattern** for audit trails
+7. **Use UUIDs** for primary keys to avoid sequential ID issues
+
+## Common Issues and Troubleshooting
+
+1. **Connection Failures**:
+   - Check network connectivity to the database
+   - Verify username/password are correct
+   - Ensure database name exists and is spelled correctly
+
+2. **Performance Issues**:
+   - Check for missing indexes on frequently queried columns
+   - Review query execution plans with EXPLAIN
+   - Monitor connection pool utilization
+
+3. **Schema Migration Errors**:
+   - Check that migration files are properly sequenced
+   - Ensure all dependencies exist before creating foreign keys
+   - Use transactions for complex migrations
+
+## Related Documentation
+
+- [Entity Lifecycle](../../architecture/data-flow/entity-lifecycle.md)
+- [Transaction Lifecycle](../../architecture/data-flow/transaction-lifecycle.md)
+- [Financial Model](../../domain-models/financial-model.md)
diff --git a/docs/components/infrastructure/rabbitmq.md b/docs/components/infrastructure/rabbitmq.md
new file mode 100644
index 00000000..eb7f9af3
--- /dev/null
+++ b/docs/components/infrastructure/rabbitmq.md
@@ -0,0 +1,294 @@
+# RabbitMQ Configuration
+
+**Navigation:** [Home](../../) > [Components](../) > [Infrastructure](./) > RabbitMQ
+
+This document describes the RabbitMQ configuration and usage in the Midaz system.
+
+## Overview
+
+RabbitMQ serves as the message broker in the Midaz system, facilitating asynchronous communication between microservices. It follows an event-driven architecture pattern, allowing services to communicate without tight coupling.
+
+In Midaz, RabbitMQ is primarily used for:
+
+1. **Asynchronous Processing**: Delegating resource-intensive operations to be processed in the background
+2. **Service Integration**: Communication between the onboarding and transaction services
+3. **Event Distribution**: Propagating events like account creation to other services
+
+## Messaging Architecture
+
+Midaz employs a straightforward messaging architecture with RabbitMQ:
+
+- **Direct Exchanges**: Messages are routed to specific queues based on routing keys
+- **Durable Queues**: Ensures messages survive broker restarts
+- **Persistent Messages**: Messages are stored on disk for reliability
+- **Worker Distribution**: Multiple concurrent workers process messages from each queue
+
+### Message Flow Patterns
+
+The primary message flows in the system include:
+
+1. **Balance Creation Flow**:
+   - Onboarding service publishes account information
+   - Transaction service consumes the message to create associated balances
+   - Ensures account and balance creation are coordinated across services
+
+2. **Balance Transaction Operation Flow**:
+   - Transaction service publishes transaction operations
+   - Handled asynchronously by dedicated workers
+   - Ensures complex transactions are processed consistently
+
+## RabbitMQ Configuration
+
+### Server Configuration
+
+RabbitMQ is configured with custom server settings:
+
+```
+# Allow guest user access from any host
+loopback_users.guest = false
+
+# Auto-load exchanges, queues, etc. from definitions file
+management.load_definitions = /etc/rabbitmq/definitions.json
+
+# Custom ports
+listeners.tcp.default = 3003
+management.tcp.port = 3004
+```
+
+### Users and Permissions
+
+The system defines three administrator users:
+
+| User | Password | Permissions | Tags |
+|------|----------|------------|------|
+| midaz | (hashed) | configure.*, write.*, read.* | administrator |
+| onboarding | (hashed) | configure.*, write.*, read.* | administrator |
+| transaction | (hashed) | configure.*, write.*, read.* | administrator |
+
+All users have full permissions on the default vhost.
+
+### Exchanges
+
+The following exchanges are pre-configured:
+
+| Exchange Name | Type | Durable | Purpose |
+|---------------|------|---------|---------|
+| transaction.balance_create.exchange | direct | yes | Routes balance creation messages |
+| transaction.transaction_balance_operation.exchange | direct | yes | Routes transaction operation messages |
+
+### Queues
+
+The system uses these durable queues:
+
+| Queue Name | Durable | Purpose |
+|------------|---------|---------|
+| transaction.balance_create.queue | yes | Holds messages for balance creation |
+| transaction.transaction_balance_operation.queue | yes | Holds messages for transaction operations |
+
+### Bindings
+
+Exchanges and queues are connected with these bindings:
+
+| Exchange | Queue | Routing Key |
+|----------|-------|------------|
+| transaction.balance_create.exchange | transaction.balance_create.queue | transaction.balance_create.key |
+| transaction.transaction_balance_operation.exchange | transaction.transaction_balance_operation.queue | transaction.transaction_balance_operation.key |
+
+## Message Structure
+
+Messages follow a common structure defined in the `Queue` model:
+
+```go
+type Queue struct {
+    OrganizationID uuid.UUID   `json:"organizationId"`
+    LedgerID       uuid.UUID   `json:"ledgerId"`
+    AuditID        uuid.UUID   `json:"auditId"`
+    AccountID      uuid.UUID   `json:"accountId"`
+    QueueData      []QueueData `json:"queueData"`
+}
+
+type QueueData struct {
+    ID    uuid.UUID       `json:"id"`
+    Value json.RawMessage `json:"value"`
+}
+```
+
+This structure allows for flexible payload data while maintaining consistent fields for tracking and identification.
+
+## Producer Implementation
+
+The system implements a consistent producer pattern across services:
+
+1. **Connection Management**:
+   - Centralized RabbitMQ connection handling
+   - Connection established during service startup
+   - Panics if connection fails (critical dependency)
+
+2. **Message Publishing**:
+   - JSON serialization of structured messages
+   - Delivery mode set to persistent (amqp.Persistent)
+   - Tracing headers included for distributed tracing
+   - Content type set to application/json
+
+Example producer code:
+
+```go
+func (prmq *ProducerRabbitMQRepository) ProducerDefault(ctx context.Context, exchange, key string, queueMessage mmodel.Queue) (*string, error) {
+    // Tracing and logging setup
+    
+    message, err := json.Marshal(queueMessage)
+    if err != nil {
+        // Error handling
+        return nil, err
+    }
+
+    err = prmq.conn.Channel.Publish(
+        exchange,
+        key,
+        false,
+        false,
+        amqp.Publishing{
+            ContentType:  "application/json",
+            DeliveryMode: amqp.Persistent,
+            Headers: amqp.Table{
+                libConstants.HeaderID: libCommons.NewHeaderIDFromContext(ctx),
+            },
+            Body: message,
+        })
+    
+    // Error handling and logging
+    
+    return nil, nil
+}
+```
+
+## Consumer Implementation
+
+The consumer pattern follows a worker-based approach:
+
+1. **Consumer Registration**:
+   - Each queue has a dedicated handler function
+   - Handlers registered through a unified `ConsumerRoutes` mechanism
+   - Multiple worker goroutines process each queue
+
+2. **Message Processing**:
+   - QoS (prefetch) settings control message distribution
+   - Messages acknowledged only after successful processing
+   - Failed messages are negatively acknowledged and requeued
+   - Context enriched with tracing and logging information
+
+3. **Worker Configuration**:
+   - Default: 5 worker goroutines per queue
+   - Prefetch count: 10 messages per worker (50 total by default)
+   - Configurable through environment variables
+
+Example consumer code:
+
+```go
+func (cr *ConsumerRoutes) RunConsumers() error {
+    for queueName, handler := range cr.routes {
+        // Set Quality of Service (prefetch)
+        err := cr.conn.Channel.Qos(
+            cr.NumbersOfPrefetch,
+            0,
+            false,
+        )
+        
+        // Start consuming from queue
+        messages, err := cr.conn.Channel.Consume(
+            queueName,
+            "",
+            false,  // auto-ack disabled
+            false,
+            false,
+            false,
+            nil,
+        )
+        
+        // Start worker goroutines
+        for i := 0; i < cr.NumbersOfWorkers; i++ {
+            go func(workerID int, queue string, handlerFunc QueueHandlerFunc) {
+                for msg := range messages {
+                    // Set up context with tracing
+                    
+                    // Process message
+                    err := handlerFunc(ctx, msg.Body)
+                    if err != nil {
+                        // Negative acknowledge on error
+                        _ = msg.Nack(false, true)
+                        continue
+                    }
+                    
+                    // Acknowledge successful processing
+                    _ = msg.Ack(false)
+                }
+            }(i, queueName, handler)
+        }
+    }
+    
+    return nil
+}
+```
+
+## Monitoring & Observability
+
+RabbitMQ operations are instrumented with:
+
+1. **Distributed Tracing**:
+   - OpenTelemetry integration for message production and consumption
+   - Trace headers propagated between services
+   - Span creation for each message operation
+
+2. **Structured Logging**:
+   - Context-aware logging throughout the messaging lifecycle
+   - Error details captured in both logs and traces
+   - Standard logging patterns for message operations
+
+3. **RabbitMQ Management Interface**:
+   - Access available on port 3004
+   - Provides real-time monitoring of queues, exchanges, and connections
+   - Allows for manual inspection and intervention if needed
+
+## Running Locally
+
+To run RabbitMQ locally using Docker:
+
+```bash
+cd components/infra
+docker-compose up -d rabbitmq
+```
+
+This starts a RabbitMQ instance with all the necessary configuration and definitions.
+
+## Best Practices
+
+1. **Use Durable Exchanges and Queues** for reliability
+2. **Set Persistent Delivery Mode** for messages that must not be lost
+3. **Implement Proper Error Handling** with negative acknowledgments
+4. **Use Multiple Workers** for throughput and concurrency
+5. **Include Tracing Headers** for observability across services
+6. **Follow the Repository Pattern** for consistent messaging interfaces
+7. **Configure Appropriate QoS** to manage resource utilization
+
+## Common Issues and Troubleshooting
+
+1. **Connection Failures**:
+   - Check network connectivity to RabbitMQ
+   - Verify credentials are correct
+   - Ensure RabbitMQ service is running
+
+2. **Message Processing Errors**:
+   - Check consumer logs for processing errors
+   - Verify message format matches expected structure
+   - Monitor dead letter queues if configured
+
+3. **Performance Issues**:
+   - Adjust worker count and prefetch values
+   - Monitor queue length and processing rates
+   - Consider separate queues for different message priorities
+
+## Related Documentation
+
+- [Event-Driven Design](../../architecture/event-driven-design.md)
+- [Component Integration](../../architecture/component-integration.md)
+- [Transaction Lifecycle](../../architecture/data-flow/transaction-lifecycle.md)
diff --git a/docs/components/infrastructure/redis.md b/docs/components/infrastructure/redis.md
new file mode 100644
index 00000000..b1c7d71f
--- /dev/null
+++ b/docs/components/infrastructure/redis.md
@@ -0,0 +1,149 @@
+# Redis/Valkey Configuration
+
+**Navigation:** [Home](../../) > [Components](../) > [Infrastructure](./) > Redis Configuration
+
+## Overview
+
+Redis (or Valkey) is used as an in-memory data store within the Midaz platform, providing high-speed caching, session management, and temporary data storage capabilities. Its low-latency characteristics make it ideal for performance-critical operations that require quick access to data.
+
+## Features
+
+- **In-memory data storage**: Provides microsecond response times for data access
+- **Key-value storage model**: Simple yet powerful data structure support
+- **Data persistence**: Optional persistence to disk for durability
+- **Pub/Sub messaging**: Used for real-time messaging between components
+- **Lua scripting**: Supports atomic operations through Lua scripts
+- **Data structures**: Includes strings, lists, sets, sorted sets, hashes, bitmaps, and hyperloglogs
+
+## Configuration
+
+Redis is configured through the `/components/infra/docker-compose.yml` file and customized environment variables.
+
+### Docker Configuration
+
+```yaml
+redis:
+  image: redis:7.2-alpine
+  container_name: midaz-redis
+  command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
+  ports:
+    - "6379:6379"
+  volumes:
+    - redis-data:/data
+  networks:
+    - infra-network
+  healthcheck:
+    test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
+    interval: 5s
+    timeout: 5s
+    retries: 5
+```
+
+### Environment Variables
+
+| Variable | Description | Default |
+|----------|-------------|---------|
+| `REDIS_PASSWORD` | Authentication password for Redis access | *[from .env file]* |
+| `REDIS_HOST` | Hostname for Redis connections | `redis` |
+| `REDIS_PORT` | Port for Redis connections | `6379` |
+
+## Usage in Midaz
+
+Redis serves several functions within the Midaz platform:
+
+### Caching
+
+- API response caching
+- Database query result caching
+- Object caching for high-frequency access patterns
+
+### Session Management
+
+- User session storage
+- Authentication token caching
+- Rate limiting implementation
+
+### Temporary Data Storage
+
+- Processing queue management
+- Transaction processing state management
+- Distributed locking mechanisms
+
+### Pub/Sub Messaging
+
+- Real-time notifications between services
+- Synchronization of distributed operations
+- Event broadcasting
+
+## Data Persistence
+
+Redis is configured with appendonly mode enabled to ensure data durability. This means:
+
+- All write operations are logged to an append-only file
+- Data can be recovered after a restart
+- Periodic background saving of datasets occurs
+
+## Security
+
+Redis security is implemented through:
+
+1. **Password authentication**: Required for all connections
+2. **Network isolation**: Redis is accessible only within the Docker network
+3. **No external exposure**: Only exposed through application services
+4. **Command restrictions**: Disables dangerous commands in production environments
+
+## Monitoring
+
+Redis instances can be monitored through:
+
+1. **Grafana dashboards**: Pre-configured dashboards track key metrics
+2. **INFO command**: Provides detailed statistics about the Redis server
+3. **Redis CLI**: Interactive command-line access for debugging
+4. **Logs**: Container logs capture operational information
+
+Example monitoring command:
+```bash
+docker exec midaz-redis redis-cli -a $REDIS_PASSWORD info
+```
+
+## Scaling Considerations
+
+For production environments with high throughput requirements, consider:
+
+- **Redis Cluster**: For horizontal scaling across multiple nodes
+- **Redis Sentinel**: For high availability and automatic failover
+- **Read replicas**: For distributing read loads
+
+## Backup Strategy
+
+Redis data is backed up through:
+
+1. **RDB snapshots**: Point-in-time snapshots of the dataset
+2. **AOF files**: Continuous append-only files for transaction logs
+3. **Volume backups**: Docker volume backups for complete data preservation
+
+## Maintenance Tasks
+
+Regular maintenance includes:
+
+1. **Memory management**: Monitoring memory usage and implementing key eviction policies
+2. **Key expiration**: Setting appropriate TTLs for cached data
+3. **Configuration updates**: Adjusting performance parameters as needed
+4. **Version upgrades**: Following a tested upgrade path for new Redis versions
+
+## Troubleshooting
+
+Common issues and solutions:
+
+| Issue | Solution |
+|-------|----------|
+| Connection refused | Check container status, network configuration, and firewall rules |
+| Authentication failure | Verify password in environment variables and connection strings |
+| Memory limit reached | Increase container memory allocation or implement key eviction policies |
+| Slow performance | Check for large keys, optimize data structures, or consider Redis Cluster |
+
+## Related Documentation
+
+- [Official Redis Documentation](https://redis.io/documentation)
+- [Valkey Documentation](https://valkey.io/documentation) (Redis compatible)
+- [Docker Hub Redis](https://hub.docker.com/_/redis)
\ No newline at end of file
diff --git a/docs/components/mdz-cli/README.md b/docs/components/mdz-cli/README.md
new file mode 100644
index 00000000..bc3841da
--- /dev/null
+++ b/docs/components/mdz-cli/README.md
@@ -0,0 +1,175 @@
+# MDZ CLI
+
+**Navigation:** [Home](../../) > [Components](../) > MDZ CLI
+
+## Overview
+
+The MDZ CLI (Command Line Interface) provides a powerful terminal-based interface for interacting with the Midaz ledger system. It allows users to manage financial entities, configure the application, and perform operations against the Midaz API services from the command line.
+
+## Responsibilities
+
+- **Authentication**: Securely authenticate users with the Midaz services
+- **Entity Management**: Create, read, update, and delete financial entities
+- **Command Execution**: Execute operations against the Midaz API services
+- **Configuration**: Manage local configuration and settings
+- **Interactive Input**: Provide user-friendly TUI (Terminal User Interface) components
+- **Output Formatting**: Present results in a consistent, readable format
+
+## Architecture
+
+The MDZ CLI is built with Go using the Cobra framework for command structure and Charm libraries for interactive TUI components:
+
+```
+┌───────────────────────────────────────────────────────┐
+│                       MDZ CLI                         │
+│                                                       │
+│  ┌───────────────┐      ┌───────────────────────┐     │
+│  │  Root Command │      │  Factory/Dependency   │     │
+│  │  & Bootstrap  │      │      Injection        │     │
+│  └───────┬───────┘      └───────────┬───────────┘     │
+│          │                          │                 │
+│          ▼                          ▼                 │
+│  ┌───────────────────────────────────────────────┐    │
+│  │               Command Structure               │    │
+│  │                                               │    │
+│  │  ┌─────────┐ ┌─────────┐ ┌─────────┐          │    │
+│  │  │ Login   │ │ Account │ │ Ledger  │  ...     │    │
+│  │  └─────────┘ └─────────┘ └─────────┘          │    │
+│  └──────────────────┬────────────────────────────┘    │
+│                     │                                  │
+│                     ▼                                  │
+│  ┌───────────────────────────────────┐                │
+│  │        Internal Services          │                │
+│  │                                   │                │
+│  │  ┌─────────┐ ┌─────────────────┐  │                │
+│  │  │ Settings│ │ IO/Output       │  │                │
+│  │  └─────────┘ └─────────────────┘  │                │
+│  │                                   │                │
+│  │  ┌─────────┐ ┌─────────────────┐  │                │
+│  │  │ Auth    │ │ REST Clients    │  │                │
+│  │  └─────────┘ └─────────────────┘  │                │
+│  └───────────────────────────────────┘                │
+│                     │                                  │
+│                     ▼                                  │
+│  ┌───────────────────────────────────┐                │
+│  │          TUI Components           │                │
+│  │                                   │                │
+│  │  ┌─────────┐ ┌─────────────────┐  │                │
+│  │  │ Input   │ │ Select          │  │                │
+│  │  └─────────┘ └─────────────────┘  │                │
+│  │                                   │                │
+│  │  ┌─────────┐ ┌─────────────────┐  │                │
+│  │  │Password │ │ Output          │  │                │
+│  │  └─────────┘ └─────────────────┘  │                │
+│  └───────────────────────────────────┘                │
+└───────────────────────────────────────────────────────┘
+```
+
+## Command Structure
+
+The CLI follows a hierarchical command structure:
+
+- **mdz** - Root command
+  - **login** - Authentication
+  - **configure** - CLI configuration
+  - **organization** - Organization management
+    - create, list, describe, update, delete
+  - **ledger** - Ledger management
+    - create, list, describe, update, delete
+  - **asset** - Asset management
+    - create, list, describe, update, delete
+  - **portfolio** - Portfolio management
+    - create, list, describe, update, delete
+  - **segment** - Segment management
+    - create, list, describe, update, delete
+  - **account** - Account management
+    - create, list, describe, update, delete
+  - **version** - Version information
+
+Each resource management command follows a consistent CRUD pattern.
+
+## Key Features
+
+### Authentication
+
+The CLI supports multiple authentication methods:
+
+- **Browser-based OAuth**: Opens a browser for authentication flow
+- **Terminal-based Login**: Username and password entry in the terminal
+- **Token Management**: Securely stores and manages authentication tokens
+
+### Interactive Input
+
+When command flags aren't provided, the CLI offers interactive prompts:
+
+- **Text Input**: Gather textual information
+- **Password Input**: Securely collect passwords with masked characters
+- **Selection Menus**: Choose from available options
+- **JSON Input**: Accept file input for complex structures
+
+### Formatted Output
+
+The CLI provides consistent, readable output:
+
+- **Color-coded Output**: Highlight important information
+- **Tabular Data**: Display lists in table format
+- **JSON Format**: Optional JSON output for scripting
+
+### Configuration Management
+
+Settings are stored locally for persistent configuration:
+
+- **Service URLs**: Connection endpoints for services
+- **Authentication**: Token storage and management
+- **Output Preferences**: Format and verbosity settings
+
+## Integration Points
+
+The MDZ CLI integrates with other Midaz components:
+
+- **Onboarding Service**: Entity management operations
+- **Transaction Service**: Transaction and balance operations
+- **Authentication Service**: User authentication and token management
+
+## Usage Examples
+
+### Authentication
+
+```bash
+# Interactive login
+mdz login
+
+# Login with credentials
+mdz login --username user@example.com --password secret
+
+# Browser-based login
+mdz login --browser
+```
+
+### Entity Management
+
+```bash
+# Create an organization
+mdz organization create --name "Example Org" --legal-name "Example Inc."
+
+# List ledgers in an organization
+mdz ledger list --organization-id org123
+
+# Create an account
+mdz account create --ledger-id ldg123 --organization-id org123 --name "Cash Account" --asset-code USD
+```
+
+### Configuration
+
+```bash
+# Configure CLI settings
+mdz configure
+
+# Configure with specific values
+mdz configure --api-url https://api.example.com
+```
+
+## Next Steps
+
+- [Commands Reference](./commands.md)
+- [Usage Guide](./usage-guide.md)
\ No newline at end of file
diff --git a/docs/components/mdz-cli/commands.md b/docs/components/mdz-cli/commands.md
new file mode 100644
index 00000000..46ad165d
--- /dev/null
+++ b/docs/components/mdz-cli/commands.md
@@ -0,0 +1,947 @@
+# Midaz CLI Commands
+
+**Navigation:** [Home](../../) > [MDZ CLI](../) > Commands
+
+This document provides a comprehensive reference for all commands available in the Midaz CLI (`mdz`), including their syntax, options, and examples of use.
+
+## Table of Contents
+
+- [Global Options](#global-options)
+- [Core Commands](#core-commands)
+  - [login](#login)
+  - [configure](#configure)
+  - [version](#version)
+- [Organization Management](#organization-management)
+  - [organization create](#organization-create)
+  - [organization list](#organization-list)
+  - [organization describe](#organization-describe)
+  - [organization update](#organization-update)
+  - [organization delete](#organization-delete)
+- [Ledger Management](#ledger-management)
+  - [ledger create](#ledger-create)
+  - [ledger list](#ledger-list)
+  - [ledger describe](#ledger-describe)
+  - [ledger update](#ledger-update)
+  - [ledger delete](#ledger-delete)
+- [Asset Management](#asset-management)
+  - [asset create](#asset-create)
+  - [asset list](#asset-list)
+  - [asset describe](#asset-describe)
+  - [asset update](#asset-update)
+  - [asset delete](#asset-delete)
+- [Portfolio Management](#portfolio-management)
+  - [portfolio create](#portfolio-create)
+  - [portfolio list](#portfolio-list)
+  - [portfolio describe](#portfolio-describe)
+  - [portfolio update](#portfolio-update)
+  - [portfolio delete](#portfolio-delete)
+- [Segment Management](#segment-management)
+  - [segment create](#segment-create)
+  - [segment list](#segment-list)
+  - [segment describe](#segment-describe)
+  - [segment update](#segment-update)
+  - [segment delete](#segment-delete)
+- [Account Management](#account-management)
+  - [account create](#account-create)
+  - [account list](#account-list)
+  - [account describe](#account-describe)
+  - [account update](#account-update)
+  - [account delete](#account-delete)
+
+## Global Options
+
+These options can be used with any command:
+
+| Option | Description |
+|--------|-------------|
+| `--no-color` | Disables colored output |
+| `-h, --help` | Displays help information about the command |
+
+## Core Commands
+
+### login
+
+Authenticates with the Midaz CLI to access the platform's features.
+
+**Syntax**
+```
+mdz login [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--username` | Your username |
+| `--password` | Your password |
+| `-h, --help` | Displays help for the login command |
+
+**Examples**
+```bash
+# Interactive login (will prompt for method selection)
+mdz login
+
+# Direct login with credentials
+mdz login --username email@example.com --password Pass@123
+```
+
+### configure
+
+Defines the service URLs and credentials for the MDZ CLI environment.
+
+**Syntax**
+```
+mdz configure [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--client-id` | Unique client identifier used for authentication |
+| `--client-secret` | Secret key used to validate the client's identity |
+| `--url-api-auth` | URL of the authentication service |
+| `--url-api-ledger` | URL of the service responsible for the ledger |
+| `-h, --help` | Displays help for the configure command |
+
+**Examples**
+```bash
+# Interactive configuration (will prompt for values)
+mdz configure
+
+# Direct configuration with values
+mdz configure --client-id "my-client-id" --client-secret "my-client-secret" --url-api-auth "https://auth.example.com" --url-api-ledger "https://ledger.example.com"
+```
+
+### version
+
+Displays the version of the Midaz CLI installed on your system.
+
+**Syntax**
+```
+mdz version [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `-h, --help` | Displays help for the version command |
+
+**Examples**
+```bash
+# Display the CLI version
+mdz version
+```
+
+## Organization Management
+
+The `organization` command manages organizations within the Midaz system, which represent companies that use Midaz, such as banks or other financial institutions.
+
+### organization create
+
+Creates a new organization.
+
+**Syntax**
+```
+mdz organization create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--legal-name` | The legal name of the organization |
+| `--doing-business-as` | The name under which the organization operates |
+| `--legal-document` | Legal document identifier (e.g., tax ID) |
+| `--code` | Status code for the organization (e.g., ACTIVE) |
+| `--description` | Description of the organization |
+| `--line1` | First line of the address |
+| `--line2` | Second line of the address |
+| `--zip-code` | ZIP/Postal code |
+| `--city` | City name |
+| `--state` | State or province |
+| `--country` | Country code (2-letter ISO code) |
+| `--metadata` | Metadata in JSON format |
+| `--json-file` | Path to a JSON file containing the organization attributes |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create an organization with parameters
+mdz organization create --legal-name "Acme Corp" --doing-business-as "Acme" --legal-document "12345678901" --code "ACTIVE" --description "Technology company"
+
+# Create from a JSON file
+mdz organization create --json-file organization.json
+```
+
+### organization list
+
+Lists all organizations the user has access to.
+
+**Syntax**
+```
+mdz organization list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List all organizations
+mdz organization list
+```
+
+### organization describe
+
+Displays detailed information about a specific organization.
+
+**Syntax**
+```
+mdz organization describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe an organization
+mdz organization describe --organization-id "123e4567-e89b-12d3-a456-426614174000"
+```
+
+### organization update
+
+Updates an existing organization's details.
+
+**Syntax**
+```
+mdz organization update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization to update |
+| `--legal-name` | The updated legal name |
+| `--doing-business-as` | The updated operational name |
+| `--legal-document` | Updated legal document identifier |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--line1` | Updated first line of address |
+| `--line2` | Updated second line of address |
+| `--zip-code` | Updated ZIP/Postal code |
+| `--city` | Updated city name |
+| `--state` | Updated state or province |
+| `--country` | Updated country code |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update an organization
+mdz organization update --organization-id "123e4567-e89b-12d3-a456-426614174000" --legal-name "New Acme Corp" --status-code "INACTIVE"
+```
+
+### organization delete
+
+Deletes an organization.
+
+**Syntax**
+```
+mdz organization delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete an organization
+mdz organization delete --organization-id "123e4567-e89b-12d3-a456-426614174000"
+```
+
+## Ledger Management
+
+The `ledger` command manages ledgers, which store all the transactions and operations of an organization.
+
+### ledger create
+
+Creates a new ledger within an organization.
+
+**Syntax**
+```
+mdz ledger create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--name` | Name of the ledger |
+| `--status-code` | Status code for the ledger (e.g., ACTIVE) |
+| `--status-description` | Description of the status |
+| `--metadata` | Metadata in JSON format |
+| `--json-file` | Path to a JSON file containing ledger attributes |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create a ledger
+mdz ledger create --organization-id "123e4567-e89b-12d3-a456-426614174000" --name "Main Ledger" --status-code "ACTIVE"
+```
+
+### ledger list
+
+Lists ledgers within an organization.
+
+**Syntax**
+```
+mdz ledger list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List ledgers in an organization
+mdz ledger list --organization-id "123e4567-e89b-12d3-a456-426614174000"
+```
+
+### ledger describe
+
+Displays detailed information about a specific ledger.
+
+**Syntax**
+```
+mdz ledger describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe a ledger
+mdz ledger describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### ledger update
+
+Updates an existing ledger's details.
+
+**Syntax**
+```
+mdz ledger update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger to update |
+| `--name` | Updated name of the ledger |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update a ledger
+mdz ledger update --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "Updated Main Ledger"
+```
+
+### ledger delete
+
+Deletes a ledger.
+
+**Syntax**
+```
+mdz ledger delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete a ledger
+mdz ledger delete --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+## Asset Management
+
+The `asset` command manages assets within a ledger, representing currencies, commodities, or other financial instruments.
+
+### asset create
+
+Creates a new permitted asset in a ledger.
+
+**Syntax**
+```
+mdz asset create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--name` | Name of the asset |
+| `--type` | Asset category (e.g., currency, crypto, commodity) |
+| `--code` | Asset identifier code (e.g., USD, BTC) |
+| `--status-code` | Status code for the asset |
+| `--status-description` | Description of the status |
+| `--metadata` | Metadata in JSON format |
+| `--json-file` | Path to a JSON file containing asset attributes |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create an asset
+mdz asset create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "US Dollar" --code "USD" --type "currency"
+```
+
+### asset list
+
+Lists assets within a ledger.
+
+**Syntax**
+```
+mdz asset list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List assets in a ledger
+mdz asset list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### asset describe
+
+Displays detailed information about a specific asset.
+
+**Syntax**
+```
+mdz asset describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--asset-id` | The ID of the asset to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe an asset
+mdz asset describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --asset-id "789e0123-e45b-67d8-a901-426614174000"
+```
+
+### asset update
+
+Updates an existing asset's details.
+
+**Syntax**
+```
+mdz asset update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--asset-id` | The ID of the asset to update |
+| `--name` | Updated name of the asset |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update an asset
+mdz asset update --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --asset-id "789e0123-e45b-67d8-a901-426614174000" --name "Updated US Dollar"
+```
+
+### asset delete
+
+Deletes an asset.
+
+**Syntax**
+```
+mdz asset delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--asset-id` | The ID of the asset to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete an asset
+mdz asset delete --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --asset-id "789e0123-e45b-67d8-a901-426614174000"
+```
+
+## Portfolio Management
+
+The `portfolio` command manages portfolios, which group related accounts.
+
+### portfolio create
+
+Creates a new portfolio within a ledger.
+
+**Syntax**
+```
+mdz portfolio create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--name` | Name of the portfolio |
+| `--entity-id` | External entity identifier |
+| `--status-code` | Status code for the portfolio |
+| `--status-description` | Description of the status |
+| `--metadata` | Metadata in JSON format |
+| `--json-file` | Path to a JSON file containing portfolio attributes |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create a portfolio
+mdz portfolio create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "Customer Portfolio"
+```
+
+### portfolio list
+
+Lists portfolios within a ledger.
+
+**Syntax**
+```
+mdz portfolio list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List portfolios in a ledger
+mdz portfolio list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### portfolio describe
+
+Displays detailed information about a specific portfolio.
+
+**Syntax**
+```
+mdz portfolio describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe a portfolio
+mdz portfolio describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000"
+```
+
+### portfolio update
+
+Updates an existing portfolio's details.
+
+**Syntax**
+```
+mdz portfolio update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio to update |
+| `--name` | Updated name of the portfolio |
+| `--entity-id` | Updated external entity identifier |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update a portfolio
+mdz portfolio update --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --name "Updated Customer Portfolio"
+```
+
+### portfolio delete
+
+Deletes a portfolio.
+
+**Syntax**
+```
+mdz portfolio delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete a portfolio
+mdz portfolio delete --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000"
+```
+
+## Segment Management
+
+The `segment` command manages segments, which are used to categorize portfolios and accounts.
+
+### segment create
+
+Creates a new segment within a ledger.
+
+**Syntax**
+```
+mdz segment create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--name` | Name of the segment |
+| `--status-code` | Status code for the segment |
+| `--status-description` | Description of the status |
+| `--metadata` | Metadata in JSON format |
+| `--json-file` | Path to a JSON file containing segment attributes |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create a segment
+mdz segment create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "Corporate Customers"
+```
+
+### segment list
+
+Lists segments within a ledger.
+
+**Syntax**
+```
+mdz segment list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List segments in a ledger
+mdz segment list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### segment describe
+
+Displays detailed information about a specific segment.
+
+**Syntax**
+```
+mdz segment describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--segment-id` | The ID of the segment to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe a segment
+mdz segment describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --segment-id "345e6789-e01b-23d4-a567-426614174000"
+```
+
+### segment update
+
+Updates an existing segment's details.
+
+**Syntax**
+```
+mdz segment update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--segment-id` | The ID of the segment to update |
+| `--name` | Updated name of the segment |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update a segment
+mdz segment update --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --segment-id "345e6789-e01b-23d4-a567-426614174000" --name "Updated Corporate Customers"
+```
+
+### segment delete
+
+Deletes a segment.
+
+**Syntax**
+```
+mdz segment delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--segment-id` | The ID of the segment to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete a segment
+mdz segment delete --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --segment-id "345e6789-e01b-23d4-a567-426614174000"
+```
+
+## Account Management
+
+The `account` command manages accounts within a portfolio, representing individual financial entities.
+
+### account create
+
+Creates a new account within a portfolio.
+
+**Syntax**
+```
+mdz account create [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio |
+| `--segment-id` | The ID of the segment (optional) |
+| `--name` | Name of the account |
+| `--parent-account-id` | Parent account ID (for sub-accounts) |
+| `--alias` | Unique alias for the account |
+| `--type` | Account type (e.g., deposit, savings, creditCard) |
+| `--asset-code` | Asset code associated with this account (e.g., USD) |
+| `--status-code` | Status code for the account (e.g., ACTIVE) |
+| `--status-description` | Description of the current status of the account |
+| `--entity-id` | The ID of the associated entity (optional) |
+| `--metadata` | Metadata in JSON format, e.g., '{"key1": "value", "key2": 123}' |
+| `--json-file` | Path to a JSON file containing account attributes, or '-' for stdin |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Create an account
+mdz account create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --name "Main Account" --type "deposit" --asset-code "USD"
+```
+
+### account list
+
+Lists accounts within a portfolio.
+
+**Syntax**
+```
+mdz account list [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# List accounts in a portfolio
+mdz account list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000"
+```
+
+### account describe
+
+Displays detailed information about a specific account.
+
+**Syntax**
+```
+mdz account describe [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio |
+| `--account-id` | The ID of the account to describe |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Describe an account
+mdz account describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --account-id "678e9012-e34b-56d7-a890-426614174000"
+```
+
+### account update
+
+Updates an existing account's details.
+
+**Syntax**
+```
+mdz account update [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio |
+| `--account-id` | The ID of the account to update |
+| `--name` | Updated name of the account |
+| `--segment-id` | Updated segment ID |
+| `--status-code` | Updated status code |
+| `--status-description` | Updated status description |
+| `--metadata` | Updated metadata in JSON format |
+| `--json-file` | Path to a JSON file with update data |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Update an account
+mdz account update --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --account-id "678e9012-e34b-56d7-a890-426614174000" --name "Updated Main Account"
+```
+
+### account delete
+
+Deletes an account.
+
+**Syntax**
+```
+mdz account delete [flags]
+```
+
+**Options**
+
+| Option | Description |
+|--------|-------------|
+| `--organization-id` | The ID of the organization |
+| `--ledger-id` | The ID of the ledger |
+| `--portfolio-id` | The ID of the portfolio |
+| `--account-id` | The ID of the account to delete |
+| `-h, --help` | Displays help for the command |
+
+**Examples**
+```bash
+# Delete an account
+mdz account delete --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --account-id "678e9012-e34b-56d7-a890-426614174000"
+```
\ No newline at end of file
diff --git a/docs/components/mdz-cli/usage-guide.md b/docs/components/mdz-cli/usage-guide.md
new file mode 100644
index 00000000..3e1c7183
--- /dev/null
+++ b/docs/components/mdz-cli/usage-guide.md
@@ -0,0 +1,441 @@
+# Usage Guide
+
+**Navigation:** [Home](../../) > [MDZ CLI](../) > Usage Guide
+
+This guide provides comprehensive instructions for installing, configuring, and using the Midaz CLI (`mdz`). It covers basic operations, advanced features, common workflows, and best practices.
+
+## Table of Contents
+
+- [Introduction](#introduction)
+- [Installation](#installation)
+- [Getting Started](#getting-started)
+- [Configuration](#configuration)
+- [Authentication](#authentication)
+- [Basic Usage Patterns](#basic-usage-patterns)
+- [Entity Management](#entity-management)
+- [Advanced Features](#advanced-features)
+- [Common Workflows](#common-workflows)
+- [Output Formatting](#output-formatting)
+- [Troubleshooting](#troubleshooting)
+- [Best Practices](#best-practices)
+
+## Introduction
+
+The MDZ CLI (Command Line Interface) is a powerful tool that allows you to interact with the Midaz financial platform directly from your terminal. It provides a comprehensive set of commands for managing all aspects of your financial entities, from organizations to accounts, and supports both interactive and programmatic usage.
+
+## Installation
+
+### macOS/Linux
+
+```bash
+# Download the latest release (replace VERSION with the actual version)
+curl -L https://github.com/LerianStudio/midaz/releases/download/vVERSION/mdz-cli-VERSION-darwin-amd64.tar.gz -o mdz.tar.gz
+
+# Extract and install
+tar -xzf mdz.tar.gz
+sudo mv mdz /usr/local/bin/
+chmod +x /usr/local/bin/mdz
+```
+
+### Windows
+
+```powershell
+# Using Chocolatey
+choco install mdz
+```
+
+### Verify Installation
+
+To verify that the installation was successful:
+
+```bash
+mdz version
+```
+
+This should display the current version of the Midaz CLI.
+
+## Getting Started
+
+After installation, the first steps are to:
+
+1. Configure the CLI to connect to the Midaz services
+2. Log in to authenticate your session
+
+### First-time Setup
+
+```bash
+# Configure services
+mdz configure
+
+# Log in to the platform
+mdz login
+```
+
+## Configuration
+
+The `configure` command allows you to set up your CLI environment. Configuration is stored in `~/.config/mdz/mdz.toml`.
+
+### Interactive Configuration
+
+Run the following command and follow the prompts:
+
+```bash
+mdz configure
+```
+
+The CLI will interactively ask for:
+- API endpoint URLs
+- Client credentials (if applicable)
+- Output preferences
+
+### Direct Configuration
+
+Alternatively, you can specify configuration parameters directly:
+
+```bash
+mdz configure --client-id "my-client-id" --client-secret "my-client-secret" --url-api-auth "https://auth.example.com" --url-api-ledger "https://ledger.example.com"
+```
+
+### Configuration Options
+
+| Setting | Description | Example |
+|---------|-------------|---------|
+| `url-api-auth` | Authentication service URL | https://auth.midaz.example.com |
+| `url-api-ledger` | Ledger service URL | https://ledger.midaz.example.com |
+| `client-id` | Client identifier | my-client-id |
+| `client-secret` | Client secret | my-secret-key |
+
+### Viewing Current Configuration
+
+To view your current configuration:
+
+```bash
+mdz configure --show
+```
+
+## Authentication
+
+The `login` command provides authentication with the Midaz platform. The CLI supports multiple authentication methods:
+
+### Browser-based Authentication
+
+```bash
+mdz login --browser
+```
+
+This opens your default web browser to complete the authentication process, which is useful for OAuth flows.
+
+### Terminal-based Authentication
+
+```bash
+mdz login
+```
+
+Without parameters, the CLI will prompt you for credentials interactively with password masking.
+
+### Non-interactive Authentication
+
+```bash
+mdz login --username "user@example.com" --password "your-password"
+```
+
+This method is useful for scripting but requires caution with password handling.
+
+### Token Management
+
+After successful authentication, the CLI stores the authentication token locally. The token is automatically refreshed when needed. You can force a refresh with:
+
+```bash
+mdz login --refresh
+```
+
+## Basic Usage Patterns
+
+The Midaz CLI follows consistent patterns across all commands:
+
+### Getting Help
+
+For any command, you can add `--help` or `-h` to see available options:
+
+```bash
+# General help
+mdz --help
+
+# Command-specific help
+mdz organization create --help
+```
+
+### Command Structure
+
+Commands are organized hierarchically:
+- `mdz <resource> <action>` (e.g., `mdz organization create`)
+- Each resource type (organization, ledger, etc.) has consistent actions (create, list, describe, update, delete)
+
+### Interactive vs. Flag-based Usage
+
+Most commands support both:
+- **Interactive mode**: Run without all required flags to enter interactive prompts
+- **Flag-based mode**: Provide all required parameters as flags
+
+Example:
+```bash
+# Interactive
+mdz organization create
+
+# Flag-based
+mdz organization create --legal-name "Acme Corp" --doing-business-as "Acme"
+```
+
+### Using JSON Files for Input
+
+For complex entity creation, you can use JSON files:
+
+```bash
+mdz organization create --json-file organization.json
+```
+
+### Global Options
+
+| Option | Description |
+|--------|-------------|
+| `--no-color` | Disables colored output |
+| `--help` | Displays help information |
+
+## Entity Management
+
+The Midaz CLI provides comprehensive management for all entity types in the financial hierarchy.
+
+### Organization Management
+
+Organizations are the top-level entities in Midaz.
+
+```bash
+# Create an organization
+mdz organization create --legal-name "Acme Corp" --doing-business-as "Acme" --legal-document "12345678901"
+
+# List all organizations
+mdz organization list
+
+# Get details of a specific organization
+mdz organization describe --organization-id "123e4567-e89b-12d3-a456-426614174000"
+
+# Update an organization
+mdz organization update --organization-id "123e4567-e89b-12d3-a456-426614174000" --legal-name "Acme Corporation"
+
+# Delete an organization
+mdz organization delete --organization-id "123e4567-e89b-12d3-a456-426614174000"
+```
+
+### Ledger Management
+
+Ledgers store all the financial records for an organization.
+
+```bash
+# Create a ledger
+mdz ledger create --organization-id "123e4567-e89b-12d3-a456-426614174000" --name "Main Ledger"
+
+# List ledgers in an organization
+mdz ledger list --organization-id "123e4567-e89b-12d3-a456-426614174000"
+
+# Get ledger details
+mdz ledger describe --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### Asset Management
+
+Assets represent currencies or financial instruments in a ledger.
+
+```bash
+# Create an asset
+mdz asset create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "US Dollar" --code "USD" --type "currency"
+
+# List assets
+mdz asset list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000"
+```
+
+### Portfolio and Account Management
+
+Portfolios group related accounts, while accounts represent individual financial holdings.
+
+```bash
+# Create a portfolio
+mdz portfolio create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --name "Customer Portfolio"
+
+# Create an account in a portfolio
+mdz account create --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000" --name "Main Account" --type "deposit" --asset-code "USD"
+
+# List accounts
+mdz account list --organization-id "123e4567-e89b-12d3-a456-426614174000" --ledger-id "456e7890-e12b-34d5-a678-426614174000" --portfolio-id "012e3456-e78b-90d1-a234-426614174000"
+```
+
+## Advanced Features
+
+### Using Metadata
+
+Most entity creation commands support attaching metadata:
+
+```bash
+mdz account create --name "Savings Account" --metadata '{"purpose": "vacation", "tax_category": "personal"}'
+```
+
+### Environment Variables
+
+Critical parameters can be provided via environment variables:
+
+```bash
+# Set environment variables
+export MDZ_ORGANIZATION_ID="123e4567-e89b-12d3-a456-426614174000"
+export MDZ_LEDGER_ID="456e7890-e12b-34d5-a678-426614174000"
+
+# Use commands without specifying these IDs
+mdz asset list
+```
+
+### Piping and Redirection
+
+You can pipe JSON input or redirect output:
+
+```bash
+# Pipe input from another command
+cat account.json | mdz account create --json-file -
+
+# Redirect output to a file
+mdz organization list > organizations.txt
+```
+
+## Common Workflows
+
+### Setting Up a New Organization
+
+```bash
+# Create an organization
+mdz organization create --legal-name "Example Corp" --doing-business-as "Example"
+
+# Capture the organization ID
+ORGANIZATION_ID=$(mdz organization list --output json | jq -r '.items[0].id')
+
+# Create a ledger in the organization
+mdz ledger create --organization-id "$ORGANIZATION_ID" --name "Main Ledger"
+
+# Capture the ledger ID
+LEDGER_ID=$(mdz ledger list --organization-id "$ORGANIZATION_ID" --output json | jq -r '.items[0].id')
+
+# Set up assets in the ledger
+mdz asset create --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --name "US Dollar" --code "USD" --type "currency"
+```
+
+### Managing Customer Accounts
+
+```bash
+# Create a customer portfolio
+mdz portfolio create --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --name "Customer 1" --entity-id "CUST001"
+
+# Capture the portfolio ID
+PORTFOLIO_ID=$(mdz portfolio list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[0].id')
+
+# Create customer accounts
+mdz account create --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --portfolio-id "$PORTFOLIO_ID" --name "Checking" --type "deposit" --asset-code "USD"
+mdz account create --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --portfolio-id "$PORTFOLIO_ID" --name "Savings" --type "savings" --asset-code "USD"
+```
+
+## Output Formatting
+
+The CLI provides several output formats:
+
+### Default (Human-readable)
+
+```bash
+mdz organization list
+```
+
+Output is presented in a formatted table with colored highlights.
+
+### JSON Output
+
+For programmatic usage:
+
+```bash
+mdz organization list --output json
+```
+
+### Controlling Color
+
+By default, output is colored. To disable:
+
+```bash
+mdz organization list --no-color
+```
+
+## Troubleshooting
+
+### Common Issues
+
+#### Authentication Errors
+
+If you encounter authentication errors:
+
+```bash
+# Refresh your token
+mdz login --refresh
+
+# If that doesn't work, reconfigure and log in again
+mdz configure
+mdz login
+```
+
+#### Connection Issues
+
+If you have connection problems:
+
+```bash
+# Verify your configuration
+mdz configure --show
+
+# Test connectivity
+mdz version
+```
+
+#### Command Errors
+
+If a command fails:
+
+1. Check the error message for details
+2. Ensure all required parameters are provided
+3. Verify entity IDs exist and are correctly formatted
+4. Use `--help` to see the command's requirements
+
+### Getting Help
+
+For detailed information about a specific command:
+
+```bash
+mdz <command> --help
+```
+
+## Best Practices
+
+### Security
+
+- Avoid using `--password` in scripts or command history
+- Use browser-based authentication when possible
+- Protect your configuration file (`~/.config/mdz/mdz.toml`)
+
+### Efficiency
+
+- Use JSON files for complex entity creation
+- Leverage environment variables for frequently used IDs
+- Create shell aliases for common command patterns
+
+### Scripting
+
+- Use JSON output (`--output json`) for programmatic parsing
+- Consider error handling in scripts
+- Validate entity existence before operations
+- Store IDs in variables for reuse
+
+### General Usage
+
+- Start with interactive mode to learn the command flow
+- Move to flag-based commands for efficiency
+- Group related operations in scripts or aliases
+- Keep your CLI version up-to-date
\ No newline at end of file
diff --git a/docs/components/onboarding/README.md b/docs/components/onboarding/README.md
new file mode 100644
index 00000000..eb19cd5e
--- /dev/null
+++ b/docs/components/onboarding/README.md
@@ -0,0 +1,118 @@
+# Onboarding Service
+
+**Navigation:** [Home](../../) > [Components](../) > Onboarding Service
+
+## Overview
+
+The Onboarding Service is a core component of the Midaz system responsible for managing the financial entity hierarchy. It implements a RESTful API that enables the creation and management of organizations, ledgers, assets, and accounts that form the foundation of the financial system.
+
+## Responsibilities
+
+- **Entity Management**: Create, read, update, and delete operations for all financial entities
+- **Hierarchy Enforcement**: Maintain proper parent-child relationships between entities
+- **Metadata Management**: Store and retrieve flexible metadata for entities
+- **Data Validation**: Enforce business rules and data integrity constraints
+- **API Provision**: Expose RESTful endpoints for entity management
+
+## Architecture
+
+The Onboarding Service follows a hexagonal architecture (also known as ports and adapters) with clear separation between:
+
+- **Domain Logic**: Core business rules in the service layer
+- **Adapters**: Integration with external systems like databases and message queues
+- **API**: HTTP endpoints exposing functionality
+
+Additionally, it implements the Command Query Responsibility Segregation (CQRS) pattern:
+
+- **Commands**: Handle write operations (create, update, delete)
+- **Queries**: Handle read operations (get, list)
+
+```
+┌─────────────────────────────────────────────────────────┐
+│                  Onboarding Service                      │
+│                                                         │
+│  ┌───────────────┐     ┌───────────────────────────┐    │
+│  │   HTTP API    │     │       Domain Model        │    │
+│  │  Controllers  │     │  (Entities & Validation)  │    │
+│  └───────┬───────┘     └───────────┬───────────────┘    │
+│          │                         │                    │
+│          ▼                         │                    │
+│  ┌───────────────┐                 │                    │
+│  │   Services    │◄────────────────┘                    │
+│  │               │                                      │
+│  │  ┌─────────┐  │     ┌───────────────────────────┐    │
+│  │  │Commands │  │     │         Adapters          │    │
+│  │  └─────────┘  │     │                           │    │
+│  │               │     │  ┌─────────┐ ┌─────────┐  │    │
+│  │  ┌─────────┐  │     │  │Postgres│ │MongoDB │  │    │
+│  │  │ Queries │  │─────┼─►│Adapter  │ │Adapter │  │    │
+│  │  └─────────┘  │     │  └─────────┘ └─────────┘  │    │
+│  └───────────────┘     │                           │    │
+│                        │  ┌─────────┐ ┌─────────┐  │    │
+│                        │  │RabbitMQ│ │ Redis   │  │    │
+│                        │  │Adapter  │ │Adapter │  │    │
+│                        │  └─────────┘ └─────────┘  │    │
+│                        └───────────────────────────┘    │
+└─────────────────────────────────────────────────────────┘
+```
+
+## Key Features
+
+### Entity Hierarchy Management
+
+The service manages the complete financial entity hierarchy:
+
+- **Organizations**: Top-level entities with organizational details
+- **Ledgers**: Financial record-keeping systems within organizations
+- **Assets**: Financial instruments like currencies and cryptocurrencies
+- **Segments**: Logical divisions like business areas or product lines
+- **Portfolios**: Collections of accounts for specific purposes
+- **Accounts**: Basic units for tracking financial resources
+
+### RESTful API
+
+The service exposes a comprehensive RESTful API organized hierarchically:
+
+- `/v1/organizations` - Organization management
+- `/v1/organizations/:organization_id/ledgers` - Ledger management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/assets` - Asset management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/segments` - Segment management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/portfolios` - Portfolio management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/accounts` - Account management
+
+### Flexible Metadata
+
+The service supports flexible metadata for all entities:
+
+- Key-value pairs stored in MongoDB
+- Queryable via API
+- No schema constraints for maximum flexibility
+
+### Data Persistence
+
+The service uses multiple storage backends:
+
+- **PostgreSQL**: Primary storage for entity data with strong consistency
+- **MongoDB**: Storage for flexible metadata
+- **RabbitMQ**: Message publishing for event-driven architecture
+- **Redis**: Caching and temporary data storage
+
+## Integration Points
+
+The Onboarding Service integrates with other Midaz components:
+
+- **Transaction Service**: Provides entity data for transaction processing
+- **MDZ CLI**: Exposes API for command-line management
+- **Infrastructure Services**: Utilizes databases and message queues
+
+## API Documentation
+
+Comprehensive API documentation is available in OpenAPI/Swagger format:
+
+- [API Documentation](./api.md)
+
+## Next Steps
+
+- [API Documentation](./api.md)
+- [Domain Model](./domain-model.md)
+- [Service Architecture](./service-architecture.md)
\ No newline at end of file
diff --git a/docs/components/onboarding/api.md b/docs/components/onboarding/api.md
new file mode 100644
index 00000000..2e1b85a2
--- /dev/null
+++ b/docs/components/onboarding/api.md
@@ -0,0 +1,493 @@
+# Onboarding API Reference
+
+**Navigation:** [Home](../../) > [Components](../) > [Onboarding](./README.md) > API Reference
+
+This document provides a comprehensive reference for the Onboarding Service API. The API follows RESTful principles and is organized hierarchically around the core financial entities: Organizations, Ledgers, Assets, Portfolios, Segments, and Accounts.
+
+## Table of Contents
+
+- [Base URL](#base-url)
+- [Authentication](#authentication)
+- [Common Headers](#common-headers)
+- [Common Query Parameters](#common-query-parameters)
+- [Common Response Structure](#common-response-structure)
+- [Resources](#resources)
+  - [Organizations](#organizations)
+  - [Ledgers](#ledgers)
+  - [Assets](#assets)
+  - [Portfolios](#portfolios)
+  - [Segments](#segments)
+  - [Accounts](#accounts)
+- [Error Responses](#error-responses)
+- [Metadata Support](#metadata-support)
+- [API Versioning](#api-versioning)
+
+## Base URL
+
+The base URL for all API endpoints is:
+
+```
+/v1
+```
+
+## Authentication
+
+All API endpoints require authentication using a Bearer token:
+
+```
+Authorization: Bearer {token}
+```
+
+Permissions are managed through a resource-based authorization model, where access is controlled at the level of:
+- Resource (e.g., organizations, ledgers)
+- Action (e.g., post, get, patch, delete)
+
+## Common Headers
+
+| Header | Description | Required |
+|--------|-------------|----------|
+| `Authorization` | Bearer token for authentication | Yes |
+| `X-Request-Id` | Request ID for tracing | No |
+| `Content-Type` | Set to `application/json` for requests with body | Yes (for POST/PATCH) |
+
+## Common Query Parameters
+
+The following query parameters are available for list endpoints:
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `limit` | Maximum number of records to return | 10 | `?limit=25` |
+| `page` | Page number for pagination | 1 | `?page=2` |
+| `metadata` | JSON string for filtering by metadata fields | N/A | `?metadata={"customField":"value"}` |
+| `start_date` | Filter by creation date (format: YYYY-MM-DD) | N/A | `?start_date=2023-01-01` |
+| `end_date` | Filter by creation date (format: YYYY-MM-DD) | N/A | `?end_date=2023-12-31` |
+| `sort_order` | Sort direction (asc/desc) | asc | `?sort_order=desc` |
+
+## Common Response Structure
+
+All list endpoints return data in the following format for pagination:
+
+```json
+{
+  "items": [
+    {
+      // Resource fields
+    }
+  ],
+  "page": 1,
+  "limit": 10,
+  "total": 100
+}
+```
+
+## Resources
+
+### Organizations
+
+Organizations are the top-level entities in the system, representing legal entities like companies or individuals.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations` | Create a new organization |
+| `GET` | `/organizations` | List all organizations |
+| `GET` | `/organizations/{id}` | Get organization by ID |
+| `PATCH` | `/organizations/{id}` | Update organization |
+| `DELETE` | `/organizations/{id}` | Delete organization |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "legalName": "Lerian Studio",
+  "parentOrganizationId": "00000000-0000-0000-0000-000000000000",
+  "doingBusinessAs": "Lerian Studio",
+  "legalDocument": "00000000000000",
+  "address": {
+    "line1": "Street 1",
+    "line2": "Street 2",
+    "zipCode": "00000-000",
+    "city": "New York",
+    "state": "NY",
+    "country": "US"
+  },
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "metadata": {
+    "industry": "Technology",
+    "employeeCount": "100-500"
+  }
+}
+```
+
+#### Response (Organization)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "parentOrganizationId": "00000000-0000-0000-0000-000000000000",
+  "legalName": "Lerian Studio",
+  "doingBusinessAs": "Lerian Studio",
+  "legalDocument": "00000000000000",
+  "address": {
+    "line1": "Street 1",
+    "line2": "Street 2",
+    "zipCode": "00000-000",
+    "city": "New York",
+    "state": "NY",
+    "country": "US"
+  },
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "industry": "Technology",
+    "employeeCount": "100-500"
+  }
+}
+```
+
+### Ledgers
+
+Ledgers represent financial record-keeping systems within organizations, used to track financial data.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers` | Create a ledger |
+| `GET` | `/organizations/{organization_id}/ledgers` | List all ledgers for an organization |
+| `GET` | `/organizations/{organization_id}/ledgers/{id}` | Get ledger by ID |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{id}` | Update ledger |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{id}` | Delete ledger |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "name": "Main Ledger",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "metadata": {
+    "purpose": "General accounting",
+    "fiscalYear": "2023"
+  }
+}
+```
+
+#### Response (Ledger)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Main Ledger",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "purpose": "General accounting",
+    "fiscalYear": "2023"
+  }
+}
+```
+
+### Assets
+
+Assets represent financial instruments within a ledger, such as currencies or cryptocurrencies.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/assets` | Create an asset |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/assets` | List all assets |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}` | Get asset by ID |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}` | Update asset |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}` | Delete asset |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "name": "Brazilian Real",
+  "type": "currency",
+  "code": "BRL",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "metadata": {
+    "country": "Brazil",
+    "denominations": ["0.05", "0.10", "0.25", "0.50", "1.00", "2.00", "5.00", "10.00", "20.00", "50.00", "100.00", "200.00"]
+  }
+}
+```
+
+#### Response (Asset)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Brazilian Real",
+  "type": "currency",
+  "code": "BRL",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "country": "Brazil",
+    "denominations": ["0.05", "0.10", "0.25", "0.50", "1.00", "2.00", "5.00", "10.00", "20.00", "50.00", "100.00", "200.00"]
+  }
+}
+```
+
+### Portfolios
+
+Portfolios represent collections of accounts for specific purposes or entities.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/portfolios` | Create a portfolio |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/portfolios` | List all portfolios |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}` | Get portfolio by ID |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}` | Update portfolio |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}` | Delete portfolio |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "entityId": "00000000-0000-0000-0000-000000000000",
+  "name": "Customer Portfolio",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "metadata": {
+    "customerType": "Premium",
+    "region": "Southeast"
+  }
+}
+```
+
+#### Response (Portfolio)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Customer Portfolio",
+  "entityId": "00000000-0000-0000-0000-000000000000",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "customerType": "Premium",
+    "region": "Southeast"
+  }
+}
+```
+
+### Segments
+
+Segments represent logical divisions within a ledger, such as business areas or product lines.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/segments` | Create a segment |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/segments` | List all segments |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}` | Get segment by ID |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}` | Update segment |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}` | Delete segment |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "name": "Retail Banking",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "metadata": {
+    "businessUnit": "Consumer",
+    "profitCenter": true
+  }
+}
+```
+
+#### Response (Segment)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Retail Banking",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "businessUnit": "Consumer",
+    "profitCenter": true
+  }
+}
+```
+
+### Accounts
+
+Accounts are the basic units for tracking financial resources within a ledger.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts` | Create an account |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts` | List all accounts |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}` | Get account by ID |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}` | Get account by alias |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}` | Update account |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}` | Delete account |
+
+#### Request Body (Create/Update)
+
+```json
+{
+  "name": "Main Checking Account",
+  "parentAccountId": "00000000-0000-0000-0000-000000000000",
+  "entityId": "00000000-0000-0000-0000-000000000000",
+  "assetCode": "BRL",
+  "portfolioId": "00000000-0000-0000-0000-000000000000",
+  "segmentId": "00000000-0000-0000-0000-000000000000",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "alias": "@customer1",
+  "type": "checking",
+  "metadata": {
+    "accountNumber": "12345-6",
+    "branch": "0001",
+    "openingDate": "2021-01-01"
+  }
+}
+```
+
+#### Response (Account)
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "name": "Main Checking Account",
+  "parentAccountId": "00000000-0000-0000-0000-000000000000",
+  "entityId": "00000000-0000-0000-0000-000000000000",
+  "assetCode": "BRL",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "portfolioId": "00000000-0000-0000-0000-000000000000",
+  "segmentId": "00000000-0000-0000-0000-000000000000",
+  "status": {
+    "code": "ACTIVE",
+    "description": "Active status"
+  },
+  "alias": "@customer1",
+  "type": "checking",
+  "createdAt": "2021-01-01T00:00:00Z",
+  "updatedAt": "2021-01-01T00:00:00Z",
+  "deletedAt": null,
+  "metadata": {
+    "accountNumber": "12345-6",
+    "branch": "0001",
+    "openingDate": "2021-01-01"
+  }
+}
+```
+
+## Error Responses
+
+The API returns structured error responses with the following format:
+
+```json
+{
+  "error": {
+    "code": "VALIDATION_ERROR",
+    "message": "Invalid input parameters",
+    "details": [
+      {
+        "field": "name",
+        "message": "Name is required"
+      }
+    ]
+  }
+}
+```
+
+### Common Status Codes
+
+| Status Code | Description |
+|-------------|-------------|
+| 201 | Resource successfully created |
+| 200 | Request successful |
+| 204 | Resource successfully deleted |
+| 400 | Bad Request - Invalid input or validation errors |
+| 401 | Unauthorized - Authentication failed |
+| 403 | Forbidden - User lacks permissions |
+| 404 | Not Found - Resource not found |
+| 409 | Conflict - Resource conflict |
+| 500 | Internal Server Error - Server-side error |
+
+## Metadata Support
+
+All resources support flexible metadata as custom key-value pairs:
+
+- Stored in MongoDB for flexibility
+- Keys limited to 100 characters
+- Values limited to 2000 characters
+- Queryable via API with the `metadata` parameter
+- No schema constraints for maximum flexibility
+
+Metadata can be used for:
+
+- Storing custom attributes
+- Supporting business-specific data
+- Extending the data model without schema changes
+- Implementing tagging/categorization
+
+## API Versioning
+
+- The API is versioned through the URL path (/v1)
+- Breaking changes will result in a new version number
+- Backward compatibility is maintained within versions
\ No newline at end of file
diff --git a/docs/components/onboarding/domain-model.md b/docs/components/onboarding/domain-model.md
new file mode 100644
index 00000000..430f484e
--- /dev/null
+++ b/docs/components/onboarding/domain-model.md
@@ -0,0 +1,345 @@
+# Onboarding Domain Model
+
+**Navigation:** [Home](../../) > [Components](../) > [Onboarding](./README.md) > Domain Model
+
+This document describes the domain model for the Onboarding Service, explaining the key entities, their relationships, and the design patterns used.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Entity Hierarchy](#entity-hierarchy)
+- [Core Entities](#core-entities)
+  - [Organization](#organization)
+  - [Ledger](#ledger)
+  - [Asset](#asset)
+  - [Segment](#segment)
+  - [Portfolio](#portfolio)
+  - [Account](#account)
+- [Common Patterns](#common-patterns)
+  - [Status Management](#status-management)
+  - [Soft Deletion](#soft-deletion)
+  - [Metadata Extension](#metadata-extension)
+  - [Audit Tracking](#audit-tracking)
+- [Entity Relationships](#entity-relationships)
+- [Domain Rules](#domain-rules)
+- [Repository Pattern](#repository-pattern)
+- [Data Access Patterns](#data-access-patterns)
+
+## Overview
+
+The Onboarding Service domain model represents the financial entity hierarchy that forms the foundation of the Midaz system. It follows a structured approach with Organizations at the top level, followed by Ledgers, and then Asset, Segment, Portfolio, and Account entities that exist within the context of a Ledger.
+
+The model is designed to provide:
+
+1. **Hierarchical Organization**: Allows for complex organizational structures with parent-child relationships
+2. **Flexible Financial Structures**: Supports different types of financial entities and their relationships
+3. **Extensibility**: Uses metadata for custom attributes without schema changes
+4. **Data Integrity**: Enforces constraints and validation rules for financial entities
+5. **Soft Deletion**: Preserves historical data through soft deletion patterns
+
+## Entity Hierarchy
+
+The domain model follows a structured hierarchy:
+
+```
+Organization
+└── Ledger
+    ├── Asset
+    ├── Segment
+    ├── Portfolio
+    │   └── Account
+    └── Account
+```
+
+This hierarchy establishes clear ownership and containment relationships between entities, with specific rules governing these relationships.
+
+## Core Entities
+
+### Organization
+
+Organizations are the top-level entities in the system, representing legal entities like companies or individuals.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `ParentOrganizationID`: Reference to parent organization (optional)
+- `LegalName`: Official registered name
+- `DoingBusinessAs`: Trading or brand name (optional)
+- `LegalDocument`: Tax ID, registration number, or other legal identifier
+- `Address`: Structured physical address
+- `Status`: Current operating status (ACTIVE, INACTIVE, etc.)
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Self-referential relationship allowing hierarchical organization structures
+- Structured address with standardized fields (follows ISO country codes)
+- Soft deletion support
+
+**Business Rules:**
+- Legal name and legal document are required
+- Valid parent organization ID must exist if specified
+- Address follows standard postal format
+
+### Ledger
+
+Ledgers represent financial record-keeping systems within organizations.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `Name`: Display name
+- `OrganizationID`: Reference to the owning organization
+- `Status`: Current operating status
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Container for all financial entities within an organization
+- Establishes boundaries for financial operations
+- Segregates financial data across organizational units
+
+**Business Rules:**
+- Every ledger must belong to exactly one organization
+- Name is required and must be unique within an organization
+- Ledgers can be active or inactive
+
+### Asset
+
+Assets represent financial instruments or currencies used within a ledger.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `Name`: Display name
+- `Type`: Asset type (currency, cryptocurrency, etc.)
+- `Code`: Unique symbol or code for the asset
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `Status`: Current operating status
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Defines the units of value used in accounts
+- Enables multi-currency support
+- Used in financial transactions
+
+**Business Rules:**
+- Every asset must belong to exactly one organization and one ledger
+- Asset code must be unique within a ledger
+- Name and code are required
+
+### Segment
+
+Segments represent logical divisions within a ledger, such as business areas or product lines.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `Name`: Display name
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `Status`: Current operating status
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Enables categorization and reporting across business functions
+- Provides a dimension for financial analysis
+- Can be used to group accounts
+
+**Business Rules:**
+- Every segment must belong to exactly one organization and one ledger
+- Name is required
+- Segments can be active or inactive
+
+### Portfolio
+
+Portfolios represent collections of accounts grouped for specific purposes.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `Name`: Display name
+- `EntityID`: Optional external entity identifier
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `Status`: Current operating status
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Groups related accounts together
+- Can represent business units, departments, or client portfolios
+- Provides organizational context for accounts
+
+**Business Rules:**
+- Every portfolio must belong to exactly one organization and one ledger
+- Name is required
+- Can contain external entity reference for integration with other systems
+
+### Account
+
+Accounts are the basic units for tracking financial resources within a ledger.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `Name`: Display name
+- `ParentAccountID`: Reference to parent account (optional)
+- `EntityID`: Optional external entity identifier
+- `AssetCode`: Reference to the asset used by this account
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `PortfolioID`: Optional reference to containing portfolio
+- `SegmentID`: Optional reference to segment categorization
+- `Status`: Current operating status
+- `Alias`: Unique human-readable identifier (e.g., "@customer1")
+- `Type`: Account type (checking, savings, creditCard, expense, etc.)
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Self-referential relationship allowing account hierarchies
+- Flexible categorization through portfolio and segment assignments
+- Type-based classification for different account behaviors
+- Alias system for human-readable references
+
+**Business Rules:**
+- Every account must belong to exactly one organization and one ledger
+- AssetCode must reference a valid asset in the same ledger
+- Account type is required
+- Alias must be unique within a ledger
+- Optional portfolio and segment must belong to the same ledger
+- Valid parent account ID must exist if specified
+
+## Common Patterns
+
+### Status Management
+
+All entities use a standardized `Status` structure:
+
+```go
+type Status struct {
+    Code        string  `json:"code"`
+    Description *string `json:"description"`
+}
+```
+
+**Status Codes:**
+- `ACTIVE`: Entity is operational and usable
+- `INACTIVE`: Entity exists but is not currently operational
+- `PENDING`: Entity is awaiting activation or approval
+- `SUSPENDED`: Entity is temporarily disabled
+- `DELETED`: Entity is marked for deletion (soft delete)
+
+This pattern provides consistent status handling across all domain entities.
+
+### Soft Deletion
+
+All entities support soft deletion through the `DeletedAt` field:
+
+- `DeletedAt` is a nullable timestamp
+- When set, indicates the entity has been "deleted"
+- Queries filter by `DeletedAt IS NULL` to exclude deleted records
+- Preserves historical data and relationships
+
+This pattern allows for data recovery and maintains the integrity of historical records.
+
+### Metadata Extension
+
+All entities include a flexible `Metadata` field:
+
+```go
+Metadata map[string]any `json:"metadata,omitempty"`
+```
+
+This provides:
+- Schema-less extension for custom attributes
+- Support for business-specific fields without model changes
+- Validation rules: keys ≤ 100 chars, values ≤ 2000 chars
+- No nested objects (for query performance)
+
+The metadata pattern allows for extensibility while maintaining core model stability.
+
+### Audit Tracking
+
+All entities include standard audit fields:
+
+- `CreatedAt`: Timestamp when the entity was created
+- `UpdatedAt`: Timestamp when the entity was last updated
+- `DeletedAt`: Timestamp when the entity was soft-deleted (nullable)
+
+These fields provide an audit trail of entity lifecycle events.
+
+## Entity Relationships
+
+The domain model enforces several types of relationships:
+
+1. **Containment Relationships**:
+   - Organization contains Ledgers
+   - Ledger contains Assets, Segments, Portfolios, and Accounts
+   - Portfolio contains Accounts (optional)
+
+2. **Hierarchical Relationships**:
+   - Organizations can have parent-child relationships
+   - Accounts can have parent-child relationships
+
+3. **Categorization Relationships**:
+   - Segments categorize Accounts
+   - Portfolios group Accounts
+
+4. **Asset Association**:
+   - Assets define the currency or financial instrument for Accounts
+   - Accounts reference Assets via the AssetCode field
+
+All relationships enforce appropriate referential integrity constraints.
+
+## Domain Rules
+
+The domain model enforces several important business rules:
+
+1. **Hierarchical Constraints**:
+   - Parent-child relationships must be within the same organization
+   - Account hierarchy must be within the same ledger
+
+2. **Reference Integrity**:
+   - All references to other entities must point to valid, non-deleted entities
+   - References across organizations are prohibited
+
+3. **Unique Identifiers**:
+   - All entities have UUID-based primary keys
+   - Accounts can have unique aliases for human-readable reference
+   - Assets have unique codes within a ledger
+
+4. **Required Fields**:
+   - Names are required for all entities
+   - Legal details are required for organizations
+   - Asset information is required for accounts
+
+5. **Validation Rules**:
+   - String length constraints (e.g., max 256 characters for names)
+   - Format validation (e.g., UUID validation)
+   - Address format validation (e.g., country codes)
+
+## Repository Pattern
+
+The domain model is accessed through repository interfaces:
+
+```go
+type OrganizationRepository interface {
+    Create(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error)
+    GetByID(ctx context.Context, id string) (*mmodel.Organization, error)
+    List(ctx context.Context, filter map[string]interface{}) ([]*mmodel.Organization, error)
+    Update(ctx context.Context, organization *mmodel.Organization) (*mmodel.Organization, error)
+    Delete(ctx context.Context, id string) error
+}
+```
+
+Similar interfaces exist for all domain entities, providing:
+- Standard CRUD operations
+- Consistent patterns across all entities
+- Dependency injection for testing
+- Abstraction from specific database technologies
+
+## Data Access Patterns
+
+The domain model supports several data access patterns:
+
+1. **Direct Access**: Retrieve entities by ID or unique identifier
+2. **Filtered Queries**: List entities based on filter criteria
+3. **Pagination**: Return results in pages to handle large datasets
+4. **Time-based Filtering**: Filter by creation or update time
+5. **Metadata Queries**: Filter by custom metadata fields
+6. **Hierarchy Navigation**: Traverse parent-child relationships
+
+These patterns provide flexible access to domain entities while enforcing business rules and constraints.
\ No newline at end of file
diff --git a/docs/components/onboarding/service-architecture.md b/docs/components/onboarding/service-architecture.md
new file mode 100644
index 00000000..fb84a920
--- /dev/null
+++ b/docs/components/onboarding/service-architecture.md
@@ -0,0 +1,12 @@
+# Service Architecture
+
+**Navigation:** [Home](../../) > [Onboarding](../) > Service Architecture
+
+*Content for Service Architecture will be documented here.*
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Details](#details)
+- [Examples](#examples)
+- [References](#references)
diff --git a/docs/components/transaction/README.md b/docs/components/transaction/README.md
new file mode 100644
index 00000000..8e0870dd
--- /dev/null
+++ b/docs/components/transaction/README.md
@@ -0,0 +1,140 @@
+# Transaction Service
+
+**Navigation:** [Home](../../) > [Components](../) > Transaction Service
+
+## Overview
+
+The Transaction Service is a core component of the Midaz system responsible for processing financial transactions and managing account balances. It implements a double-entry accounting model to ensure financial integrity and provides a RESTful API for transaction management.
+
+## Responsibilities
+
+- **Transaction Processing**: Create and manage financial transactions
+- **Balance Management**: Track and update account balances
+- **Operation Handling**: Record individual debit and credit operations
+- **Asset Rate Management**: Track exchange rates between different assets
+- **Double-Entry Enforcement**: Ensure debits equal credits in all transactions
+- **Audit Trail**: Maintain complete history of financial activities
+
+## Architecture
+
+The Transaction Service follows a hexagonal architecture (ports and adapters) with clear separation between domain logic and external integrations:
+
+```
+┌─────────────────────────────────────────────────────────┐
+│                  Transaction Service                     │
+│                                                         │
+│  ┌───────────────┐     ┌───────────────────────────┐    │
+│  │   HTTP API    │     │       Domain Model        │    │
+│  │  Controllers  │     │  (Entities & Validation)  │    │
+│  └───────┬───────┘     └───────────┬───────────────┘    │
+│          │                         │                    │
+│          ▼                         │                    │
+│  ┌───────────────┐                 │                    │
+│  │   Services    │◄────────────────┘                    │
+│  │               │                                      │
+│  │  ┌─────────┐  │     ┌───────────────────────────┐    │
+│  │  │Commands │  │     │         Adapters          │    │
+│  │  └─────────┘  │     │                           │    │
+│  │               │     │  ┌─────────┐ ┌─────────┐  │    │
+│  │  ┌─────────┐  │     │  │Postgres│ │MongoDB │  │    │
+│  │  │ Queries │  │─────┼─►│Adapter  │ │Adapter │  │    │
+│  │  └─────────┘  │     │  └─────────┘ └─────────┘  │    │
+│  └───────────────┘     │                           │    │
+│                        │  ┌─────────┐ ┌─────────┐  │    │
+│                        │  │RabbitMQ│ │ Redis   │  │    │
+│                        │  │Adapter  │ │Adapter │  │    │
+│                        │  └─────────┘ └─────────┘  │    │
+│                        └───────────────────────────┘    │
+└─────────────────────────────────────────────────────────┘
+```
+
+The service implements the Command Query Responsibility Segregation (CQRS) pattern:
+
+- **Commands**: Handle write operations (create transaction, update balance)
+- **Queries**: Handle read operations (get transaction, list balances)
+
+## Key Features
+
+### Double-Entry Accounting
+
+The service enforces double-entry accounting principles:
+
+- Every transaction must have balanced debits and credits
+- Source accounts (debits) and destination accounts (credits)
+- Sum of debits must equal sum of credits
+- Validation prior to processing
+
+### Transaction Processing
+
+Multiple methods for creating transactions:
+
+- **JSON API**: Direct REST API calls
+- **Template-based**: Reusing transaction templates
+- **Asynchronous Processing**: Event-driven updates via message queues
+- **Transaction Validation**: Comprehensive validation before processing
+
+### Balance Management
+
+Sophisticated balance tracking for accounts:
+
+- **Available Balance**: Funds currently available for use
+- **On-Hold Balance**: Funds reserved but not yet finalized
+- **Asset-Specific Tracking**: Separate balances for each asset type
+- **Optimistic Concurrency**: Version-based controls to prevent race conditions
+
+### Asset Rate Management
+
+Support for multi-currency operations:
+
+- **Exchange Rate Tracking**: Store and update exchange rates
+- **Rate-based Conversions**: Convert between different assets
+- **Historical Rates**: Store rate history for auditing
+
+### Event-Driven Architecture
+
+The service uses event-driven patterns for scalability:
+
+- **RabbitMQ Integration**: Publish and consume events for transaction processing
+- **Asynchronous Processing**: Background processing of long-running operations
+- **Idempotent Operations**: Safe retry mechanisms
+
+## RESTful API
+
+The service exposes a comprehensive RESTful API:
+
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/transactions` - Transaction management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/operations` - Operation management
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/balances` - Balance queries
+- `/v1/organizations/:organization_id/ledgers/:ledger_id/asset-rates` - Asset rate management
+
+The API supports standard HTTP methods (GET, POST, PATCH) with consistent request/response formats and error handling.
+
+## Data Persistence
+
+The service uses multiple storage backends:
+
+- **PostgreSQL**: Primary storage for transactions, operations, and balances
+- **MongoDB**: Storage for flexible metadata
+- **RabbitMQ**: Message queues for event processing
+- **Redis**: Caching and temporary storage
+
+## Integration Points
+
+The Transaction Service integrates with other Midaz components:
+
+- **Onboarding Service**: References entities like organizations, ledgers, and accounts
+- **MDZ CLI**: Exposes API for command-line transaction management
+- **Infrastructure Services**: Utilizes databases and message queues
+
+## API Documentation
+
+Comprehensive API documentation is available in OpenAPI/Swagger format:
+
+- [API Documentation](./api.md)
+
+## Next Steps
+
+- [API Documentation](./api.md)
+- [Domain Model](./domain-model.md)
+- [Transaction Processing](./transaction-processing.md)
+- [Balance Management](./balance-management.md)
\ No newline at end of file
diff --git a/docs/components/transaction/api.md b/docs/components/transaction/api.md
new file mode 100644
index 00000000..87c53f79
--- /dev/null
+++ b/docs/components/transaction/api.md
@@ -0,0 +1,531 @@
+# Transaction API Reference
+
+**Navigation:** [Home](../../) > [Components](../) > [Transaction](./README.md) > API Reference
+
+This document provides a comprehensive reference for the Transaction Service API. The API follows RESTful principles and is organized around the core financial processing entities: Transactions, Operations, Asset Rates, and Balances.
+
+## Table of Contents
+
+- [Base URL](#base-url)
+- [Authentication](#authentication)
+- [Common Headers](#common-headers)
+- [Common Query Parameters](#common-query-parameters)
+- [Resources](#resources)
+  - [Transactions](#transactions)
+  - [Operations](#operations)
+  - [Asset Rates](#asset-rates)
+  - [Balances](#balances)
+- [Error Responses](#error-responses)
+- [Metadata Support](#metadata-support)
+- [Transaction Domain-Specific Language (DSL)](#transaction-domain-specific-language-dsl)
+
+## Base URL
+
+The base URL for all API endpoints is:
+
+```
+/v1
+```
+
+## Authentication
+
+All API endpoints require authentication using a Bearer token:
+
+```
+Authorization: Bearer {token}
+```
+
+Permissions are managed through a resource-based authorization model, where access is controlled at the level of:
+- Resource (e.g., transactions, operations, balances)
+- Action (e.g., post, get, patch, delete)
+
+## Common Headers
+
+| Header | Description | Required |
+|--------|-------------|----------|
+| `Authorization` | Bearer token for authentication | Yes |
+| `X-Request-Id` | Request ID for tracing | No |
+| `Content-Type` | Set to `application/json` for requests with body | Yes (for POST/PATCH) |
+
+## Common Query Parameters
+
+The following query parameters are available for list endpoints:
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `limit` | Maximum number of records to return | 10 | `?limit=25` |
+| `page` | Page number for pagination | 1 | `?page=2` |
+| `metadata` | JSON string for filtering by metadata fields | N/A | `?metadata={"customField":"value"}` |
+| `start_date` | Filter by creation date (format: YYYY-MM-DD) | N/A | `?start_date=2023-01-01` |
+| `end_date` | Filter by creation date (format: YYYY-MM-DD) | N/A | `?end_date=2023-12-31` |
+| `sort_order` | Sort direction (asc/desc) | asc | `?sort_order=desc` |
+
+## Resources
+
+### Transactions
+
+Transactions are the core financial entries representing the movement of assets between accounts within a ledger.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl` | Create a transaction using DSL format |
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json` | Create a transaction using JSON format |
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/templates` | Create a transaction from a template |
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit` | Commit a pending transaction |
+| `POST` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert` | Revert a transaction |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}` | Update a transaction |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}` | Get a specific transaction |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions` | List all transactions |
+
+#### Create Transaction (JSON)
+
+**Request Body:**
+
+```json
+{
+  "chartOfAccountsGroupName": "default",
+  "description": "Payment for services",
+  "code": "PAY-001",
+  "pending": false,
+  "metadata": {
+    "invoiceNumber": "INV-123",
+    "department": "Engineering"
+  },
+  "send": {
+    "amount": 100,
+    "scale": 2,
+    "assetCode": "BRL",
+    "source": {
+      "from": [
+        {
+          "alias": "@customer1",
+          "amount": 100,
+          "scale": 2
+        }
+      ]
+    },
+    "distribute": {
+      "to": [
+        {
+          "alias": "@merchant1",
+          "amount": 100,
+          "scale": 2
+        }
+      ]
+    }
+  }
+}
+```
+
+**Response:**
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "description": "Payment for services",
+  "template": "simple_transfer",
+  "status": {
+    "code": "COMMITTED",
+    "description": "Transaction successfully processed"
+  },
+  "amount": 10000,
+  "amountScale": 2,
+  "assetCode": "BRL",
+  "chartOfAccountsGroupName": "default",
+  "source": ["@customer1"],
+  "destination": ["@merchant1"],
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "createdAt": "2023-05-01T14:30:00Z",
+  "updatedAt": "2023-05-01T14:30:00Z",
+  "metadata": {
+    "invoiceNumber": "INV-123",
+    "department": "Engineering"
+  },
+  "operations": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "type": "DEBIT",
+      "accountId": "00000000-0000-0000-0000-000000000000",
+      "amount": 10000,
+      "amountScale": 2,
+      "assetCode": "BRL",
+      "status": {
+        "code": "COMPLETED",
+        "description": "Operation completed successfully"
+      }
+    },
+    {
+      "id": "11111111-1111-1111-1111-111111111111",
+      "type": "CREDIT",
+      "accountId": "11111111-1111-1111-1111-111111111111",
+      "amount": 10000,
+      "amountScale": 2,
+      "assetCode": "BRL",
+      "status": {
+        "code": "COMPLETED",
+        "description": "Operation completed successfully"
+      }
+    }
+  ]
+}
+```
+
+#### Create Transaction (DSL)
+
+**Request Body (multipart/form-data):**
+
+File upload with DSL content:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS <chart_id>
+  DESCRIPTION "Payment for services"
+  CODE "PAY-001"
+  SEND BRL 10000 2
+    FROM @customer1 AMOUNT BRL 10000 2
+    DISTRIBUTE TO @merchant1 AMOUNT BRL 10000 2
+```
+
+**Response:**
+Same as JSON create transaction response.
+
+#### Create Transaction (Template)
+
+**Request Body:**
+
+```json
+{
+  "transactionType": "00000000-0000-0000-0000-000000000000",
+  "transactionTypeCode": "PAYMENT",
+  "variables": {
+    "sourceAccount": "@customer1",
+    "destinationAccount": "@merchant1",
+    "amount": 100.00,
+    "currency": "BRL"
+  }
+}
+```
+
+**Response:**
+Same as JSON create transaction response.
+
+#### Update Transaction
+
+**Request Body:**
+
+```json
+{
+  "description": "Updated payment description",
+  "metadata": {
+    "invoiceNumber": "INV-123-UPDATED",
+    "department": "Engineering"
+  }
+}
+```
+
+**Response:**
+Updated transaction object.
+
+### Operations
+
+Operations represent individual debit or credit entries that make up a transaction, affecting account balances.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations` | List operations for an account |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations/{operation_id}` | Get a specific operation |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/operations/{operation_id}` | Update an operation |
+
+#### List Account Operations
+
+**Response:**
+
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "transactionId": "00000000-0000-0000-0000-000000000000",
+      "type": "DEBIT",
+      "accountId": "00000000-0000-0000-0000-000000000000",
+      "amount": 10000,
+      "amountScale": 2,
+      "assetCode": "BRL",
+      "description": "Payment from customer",
+      "balanceBefore": {
+        "id": "00000000-0000-0000-0000-000000000000",
+        "accountId": "00000000-0000-0000-0000-000000000000",
+        "available": 50000,
+        "onHold": 0,
+        "availableScale": 2,
+        "onHoldScale": 2,
+        "assetCode": "BRL"
+      },
+      "balanceAfter": {
+        "id": "00000000-0000-0000-0000-000000000000",
+        "accountId": "00000000-0000-0000-0000-000000000000",
+        "available": 40000,
+        "onHold": 0,
+        "availableScale": 2,
+        "onHoldScale": 2,
+        "assetCode": "BRL"
+      },
+      "status": {
+        "code": "COMPLETED",
+        "description": "Operation completed successfully"
+      },
+      "createdAt": "2023-05-01T14:30:00Z",
+      "updatedAt": "2023-05-01T14:30:00Z",
+      "metadata": {
+        "category": "payment"
+      }
+    }
+  ],
+  "page": 1,
+  "limit": 10
+}
+```
+
+#### Update Operation
+
+**Request Body:**
+
+```json
+{
+  "description": "Updated operation description",
+  "metadata": {
+    "category": "subscription_payment"
+  }
+}
+```
+
+**Response:**
+Updated operation object.
+
+### Asset Rates
+
+Asset Rates represent exchange rates between different assets, allowing for multi-currency transactions.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `PUT` | `/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates` | Create or update an asset rate |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/{external_id}` | Get an asset rate by external ID |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/from/{asset_code}` | List asset rates for a source asset |
+
+#### Create/Update Asset Rate
+
+**Request Body:**
+
+```json
+{
+  "externalId": "USD-BRL-20230501",
+  "from": "USD",
+  "to": "BRL",
+  "rate": 495,
+  "rateScale": 2,
+  "ttl": 3600,
+  "metadata": {
+    "source": "central_bank",
+    "market": "commercial"
+  }
+}
+```
+
+**Response:**
+
+```json
+{
+  "id": "00000000-0000-0000-0000-000000000000",
+  "externalId": "USD-BRL-20230501",
+  "from": "USD",
+  "to": "BRL",
+  "rate": 495,
+  "rateScale": 2,
+  "ttl": 3600,
+  "organizationId": "00000000-0000-0000-0000-000000000000",
+  "ledgerId": "00000000-0000-0000-0000-000000000000",
+  "createdAt": "2023-05-01T14:30:00Z",
+  "updatedAt": "2023-05-01T14:30:00Z",
+  "expiresAt": "2023-05-01T15:30:00Z",
+  "metadata": {
+    "source": "central_bank",
+    "market": "commercial"
+  }
+}
+```
+
+#### List Asset Rates by Source Asset
+
+**Query Parameters:**
+- `to`: Filter by target asset code (optional)
+
+**Response:**
+
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "externalId": "USD-BRL-20230501",
+      "from": "USD",
+      "to": "BRL",
+      "rate": 495,
+      "rateScale": 2,
+      "ttl": 3600,
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "createdAt": "2023-05-01T14:30:00Z",
+      "updatedAt": "2023-05-01T14:30:00Z",
+      "expiresAt": "2023-05-01T15:30:00Z",
+      "metadata": {
+        "source": "central_bank",
+        "market": "commercial"
+      }
+    }
+  ],
+  "page": 1,
+  "limit": 10
+}
+```
+
+### Balances
+
+Balances represent the current financial position of an account for a specific asset.
+
+#### Endpoints
+
+| Method | Endpoint | Description |
+|--------|----------|-------------|
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/balances` | List all balances |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}` | Get a specific balance |
+| `GET` | `/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/balances` | List balances for an account |
+| `PATCH` | `/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}` | Update a balance |
+| `DELETE` | `/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}` | Delete a balance |
+
+#### List Account Balances
+
+**Response:**
+
+```json
+{
+  "items": [
+    {
+      "id": "00000000-0000-0000-0000-000000000000",
+      "accountId": "00000000-0000-0000-0000-000000000000",
+      "available": 40000,
+      "onHold": 0,
+      "availableScale": 2,
+      "onHoldScale": 2,
+      "assetCode": "BRL",
+      "allowSending": true,
+      "allowReceiving": true,
+      "version": 5,
+      "organizationId": "00000000-0000-0000-0000-000000000000",
+      "ledgerId": "00000000-0000-0000-0000-000000000000",
+      "createdAt": "2023-05-01T14:30:00Z",
+      "updatedAt": "2023-05-01T14:30:00Z",
+      "metadata": {
+        "accountType": "checking"
+      }
+    }
+  ],
+  "page": 1,
+  "limit": 10
+}
+```
+
+#### Update Balance
+
+**Request Body:**
+
+```json
+{
+  "allowSending": true,
+  "allowReceiving": true,
+  "metadata": {
+    "accountType": "savings"
+  }
+}
+```
+
+**Response:**
+Updated balance object.
+
+## Error Responses
+
+The API returns structured error responses with the following format:
+
+```json
+{
+  "error": {
+    "code": "VALIDATION_ERROR",
+    "message": "Invalid input parameters",
+    "details": [
+      {
+        "field": "send.amount",
+        "message": "Amount must be greater than zero"
+      }
+    ]
+  }
+}
+```
+
+### Common Status Codes
+
+| Status Code | Description |
+|-------------|-------------|
+| 201 | Resource successfully created |
+| 200 | Request successful |
+| 204 | Resource successfully deleted |
+| 400 | Bad Request - Invalid input or validation errors |
+| 401 | Unauthorized - Authentication failed |
+| 403 | Forbidden - User lacks permissions |
+| 404 | Not Found - Resource not found |
+| 409 | Conflict - Resource conflict or optimistic concurrency violation |
+| 422 | Unprocessable Entity - Business rule violation |
+| 500 | Internal Server Error - Server-side error |
+
+## Metadata Support
+
+All resources support flexible metadata as custom key-value pairs:
+
+- Stored in MongoDB for flexibility
+- Keys limited to 100 characters
+- Values limited to 2000 characters
+- Queryable via API with the `metadata` parameter
+- No nested objects for query performance
+
+## Transaction Domain-Specific Language (DSL)
+
+The Transaction API supports a Domain-Specific Language (DSL) for defining transactions, making it easier to express financial movements in a readable format. The DSL follows this general structure:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS <chart_id>
+  DESCRIPTION <description>
+  CODE <code>
+  SEND <asset_code> <amount> <scale>
+    FROM <account_alias> AMOUNT <asset_code> <amount> <scale>
+    DISTRIBUTE TO <account_alias> AMOUNT <asset_code> <amount> <scale>
+```
+
+### DSL Example
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS default
+  DESCRIPTION "Payment for services"
+  CODE "PAY-001"
+  SEND BRL 10000 2
+    FROM @customer1 AMOUNT BRL 10000 2
+    DISTRIBUTE TO @merchant1 AMOUNT BRL 10000 2
+```
+
+The DSL enforces double-entry accounting rules, ensuring that debits (FROM) always equal credits (TO) within a transaction.
\ No newline at end of file
diff --git a/docs/components/transaction/balance-management.md b/docs/components/transaction/balance-management.md
new file mode 100644
index 00000000..dcdfe30e
--- /dev/null
+++ b/docs/components/transaction/balance-management.md
@@ -0,0 +1,340 @@
+# Balance Management
+
+**Navigation:** [Home](../../) > [Components](../) > [Transaction](./README.md) > Balance Management
+
+This document describes the balance management system in the Midaz Transaction Service, explaining how account balances are structured, updated, and controlled during financial transactions.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Balance Structure](#balance-structure)
+- [Balance States](#balance-states)
+- [Concurrency Control](#concurrency-control)
+- [Balance Operations](#balance-operations)
+- [Transaction Integration](#transaction-integration)
+- [Security Controls](#security-controls)
+- [Performance Considerations](#performance-considerations)
+- [Examples](#examples)
+
+## Overview
+
+The Balance Management system in Midaz provides a robust foundation for tracking and managing financial balances across accounts. It ensures data integrity, prevents race conditions, and maintains a complete audit trail of balance changes.
+
+Key features of the balance management system include:
+
+- Dual-state balance tracking (available vs. on-hold funds)
+- Optimistic concurrency control with version tracking
+- Permission controls for sending and receiving funds
+- Scale-aware balance calculations for precise financial handling
+- Integration with the transaction processing system
+- Support for multiple assets per account
+
+## Balance Structure
+
+Each balance record represents the financial state of an account for a specific asset and includes the following key attributes:
+
+### Core Attributes
+
+- `ID`: Unique identifier (UUID)
+- `AccountID`: Reference to the account this balance belongs to
+- `Alias`: Human-readable account identifier (e.g., "@customer1")
+- `AssetCode`: Code of the asset this balance represents (e.g., "BRL", "USD")
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+
+### Amount Fields
+
+- `Available`: Currently available amount (integer representation)
+- `OnHold`: Amount reserved but not yet finalized (integer representation)
+- `Scale`: Decimal places for the amounts (for precision)
+
+### Control Fields
+
+- `Version`: Counter for optimistic concurrency control
+- `AccountType`: Type of the associated account
+- `AllowSending`: Flag controlling whether the account can send funds
+- `AllowReceiving`: Flag controlling whether the account can receive funds
+
+### Audit Fields
+
+- `CreatedAt`: Timestamp when the balance was created
+- `UpdatedAt`: Timestamp when the balance was last updated
+- `DeletedAt`: Timestamp when the balance was soft-deleted (nullable)
+- `Metadata`: Custom key-value attributes
+
+## Balance States
+
+The balance management system tracks two distinct balance states:
+
+### Available Balance
+
+The available balance represents funds that are immediately accessible for use in transactions:
+
+- Decreases during debit operations
+- Increases during credit operations
+- Must be non-negative for transactions to succeed
+- Represents the "spendable" portion of an account
+
+### On-Hold Balance
+
+The on-hold balance represents funds that are reserved for pending operations:
+
+- Used during multi-phase transactions
+- Allows for reservation before final settlement
+- Prevents the same funds from being used in multiple transactions
+- Provides atomicity guarantees across asynchronous operations
+
+### Balance Lifecycle
+
+1. **Creation**: Balances are created when an account is created, typically with zero initial values
+2. **Updates**: Balances change as transactions occur, with corresponding operations recorded
+3. **Archiving**: Balances can be soft-deleted but are never physically removed
+
+## Concurrency Control
+
+The balance management system uses optimistic concurrency control to handle multiple simultaneous updates:
+
+### Version Tracking
+
+- Each balance record includes a version number
+- The version is incremented with each update
+- Updates include version checking to detect concurrent modifications
+
+### Update Approaches
+
+The system provides two approaches for updating balances:
+
+1. **SelectForUpdate**:
+   - Uses explicit row locking with `SELECT FOR UPDATE`
+   - Provides serializable isolation level
+   - Prevents concurrent modifications during critical operations
+
+2. **BalancesUpdate**:
+   - Uses optimistic locking with version checking
+   - More scalable approach for most scenarios
+   - Updates only succeed if the version hasn't changed
+
+### Atomicity
+
+- All balance updates within a transaction are atomic
+- Either all balance changes succeed or none are applied
+- Maintains consistency between related accounts
+
+## Balance Operations
+
+The balance management system supports several operations on balances:
+
+### Creation
+
+Balances are automatically created when accounts are created:
+
+```go
+balance := &mmodel.Balance{
+    ID:             libCommons.GenerateUUIDv7().String(),
+    Alias:          *account.Alias,
+    OrganizationID: account.OrganizationID,
+    LedgerID:       account.LedgerID,
+    AccountID:      account.ID,
+    AssetCode:      account.AssetCode,
+    AccountType:    account.Type,
+    AllowSending:   true,
+    AllowReceiving: true,
+    CreatedAt:      time.Now(),
+    UpdatedAt:      time.Now(),
+}
+```
+
+### Updates
+
+Balances are updated during transaction processing using the `OperateBalances` function:
+
+```go
+// For debit operations
+newBalance = OperateBalances(amount, currentBalance, "DEBIT")
+
+// For credit operations
+newBalance = OperateBalances(amount, currentBalance, "CREDIT")
+```
+
+The function updates the balance based on the operation type:
+- DEBIT: Decreases available balance
+- CREDIT: Increases available balance
+
+### Queries
+
+The system provides several methods to query balances:
+
+- `GetAllBalances`: List all balances with pagination
+- `GetBalanceByID`: Retrieve a specific balance by ID
+- `GetAllBalancesByAccountID`: Get all balances for a specific account
+
+## Transaction Integration
+
+The balance management system is tightly integrated with transaction processing:
+
+### Pre-Transaction Checks
+
+Before processing a transaction, the system:
+1. Retrieves current balances for all involved accounts
+2. Verifies that source accounts have sufficient available funds
+3. Checks that accounts allow sending/receiving as required
+
+### Transaction Processing
+
+During transaction processing:
+1. Balances are locked to prevent concurrent modifications
+2. Operations are created to record the pre-state of each balance
+3. Balance updates are applied based on the transaction details
+4. Operations record the post-state of each balance
+5. The transaction record is finalized
+
+### Balance Verification
+
+The system ensures financial integrity through several checks:
+1. Double-entry accounting (debits = credits)
+2. Non-negative balance constraint
+3. Permission verification for each account
+4. Optimistic concurrency control
+
+## Security Controls
+
+The balance management system includes several security controls:
+
+### Permission Flags
+
+Accounts have two permission flags:
+
+- `AllowSending`: Controls whether funds can be debited from the account
+- `AllowReceiving`: Controls whether funds can be credited to the account
+
+These flags can be updated independently to restrict account operations:
+
+```go
+// Freeze an account to prevent any outgoing transfers
+updateBalance := mmodel.UpdateBalance{
+    AllowSending: &false,
+}
+```
+
+### Validation Rules
+
+The balance system enforces several validation rules:
+
+1. **Sufficient Funds**: Available balance must be sufficient for debits
+2. **Permission Checks**: Accounts must have appropriate permissions
+3. **Concurrency Control**: Version checks prevent lost updates
+4. **Scale Consistency**: Amount scales must match balance scales
+
+## Performance Considerations
+
+The balance management system is designed for performance:
+
+### Caching
+
+- Redis caching for frequently accessed balances
+- BalanceRedis model for optimized storage
+- Cache invalidation on updates
+
+### Query Optimization
+
+- Indexes on AccountID, Alias, and other frequently filtered fields
+- Pagination for large result sets
+- Metadata filtering capabilities
+
+### Batch Processing
+
+- Bulk balance updates for better throughput
+- Transaction grouping for related operations
+- Asynchronous processing for non-critical updates
+
+## Examples
+
+### Basic Balance Creation
+
+When a new account is created, a corresponding balance is automatically created:
+
+```json
+{
+  "id": "98765432-0000-0000-0000-000000000000",
+  "accountId": "12345678-0000-0000-0000-000000000000",
+  "alias": "@customer1",
+  "assetCode": "BRL",
+  "available": 0,
+  "onHold": 0,
+  "scale": 2,
+  "version": 1,
+  "accountType": "checking",
+  "allowSending": true,
+  "allowReceiving": true,
+  "organizationId": "00000000-0000-0000-0000-000000000001",
+  "ledgerId": "00000000-0000-0000-0000-000000000002",
+  "createdAt": "2023-01-01T10:00:00Z",
+  "updatedAt": "2023-01-01T10:00:00Z",
+  "metadata": {
+    "accountOrigin": "web",
+    "tier": "standard"
+  }
+}
+```
+
+### Balance Update During Transaction
+
+When a transaction occurs, the balance is updated through a series of steps:
+
+1. **Initial State**:
+   ```json
+   {
+     "id": "98765432-0000-0000-0000-000000000000",
+     "available": 10000,
+     "onHold": 0,
+     "scale": 2,
+     "version": 1
+   }
+   ```
+
+2. **Debit Operation**:
+   ```json
+   {
+     "transactionId": "00000000-1111-0000-0000-000000000000",
+     "accountId": "12345678-0000-0000-0000-000000000000",
+     "type": "DEBIT",
+     "amount": 5000,
+     "scale": 2,
+     "balance": {
+       "available": 10000,
+       "onHold": 0,
+       "scale": 2
+     },
+     "balanceAfter": {
+       "available": 5000,
+       "onHold": 0,
+       "scale": 2
+     }
+   }
+   ```
+
+3. **Final State**:
+   ```json
+   {
+     "id": "98765432-0000-0000-0000-000000000000",
+     "available": 5000,
+     "onHold": 0,
+     "scale": 2,
+     "version": 2
+   }
+   ```
+
+The version number is incremented with each update to track changes and prevent concurrent modifications.
+
+### Account Restriction
+
+To restrict an account from sending funds:
+
+```json
+{
+  "allowSending": false,
+  "allowReceiving": true
+}
+```
+
+This update prevents the account from being debited while still allowing it to receive funds.
\ No newline at end of file
diff --git a/docs/components/transaction/domain-model.md b/docs/components/transaction/domain-model.md
new file mode 100644
index 00000000..07871c9c
--- /dev/null
+++ b/docs/components/transaction/domain-model.md
@@ -0,0 +1,372 @@
+# Transaction Domain Model
+
+**Navigation:** [Home](../../) > [Components](../) > [Transaction](./README.md) > Domain Model
+
+This document describes the domain model of the Transaction Service, explaining the core entities, their relationships, domain patterns, and business rules that govern the financial transaction processing.
+
+For a visual representation of the transaction model and its key components, see the [Transaction Model Diagram](../../assets/transaction-model-diagram.md).
+
+## Table of Contents
+
+- [Core Entities](#core-entities)
+  - [Transaction](#transaction)
+  - [Operation](#operation)
+  - [Balance](#balance)
+  - [Asset Rate](#asset-rate)
+- [Entity Relationships](#entity-relationships)
+- [Domain Patterns](#domain-patterns)
+  - [Double-Entry Accounting](#double-entry-accounting)
+  - [Balance-Transaction-Operation (BTO) Pattern](#balance-transaction-operation-bto-pattern)
+  - [Transaction DSL](#transaction-dsl)
+  - [Balance Management](#balance-management)
+- [Transaction Lifecycle](#transaction-lifecycle)
+- [Domain Rules](#domain-rules)
+- [Implementation Considerations](#implementation-considerations)
+
+## Core Entities
+
+### Transaction
+
+A Transaction represents a financial movement between accounts, following double-entry accounting principles.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `ParentTransactionID`: Optional reference to a parent transaction (for related transactions)
+- `Description`: Human-readable description of the transaction
+- `Template`: Template name or pattern used for the transaction
+- `Status`: Current state of the transaction (CREATED, PENDING, COMMITTED, REVERSED, etc.)
+- `Amount`: Transaction amount (integer representation)
+- `AmountScale`: Decimal places for the amount (for precision)
+- `AssetCode`: Code of the primary asset being transacted
+- `ChartOfAccountsGroupName`: Accounting classification reference
+- `Source`: Array of source account identifiers (where money comes from)
+- `Destination`: Array of destination account identifiers (where money goes to)
+- `LedgerID`: Reference to the containing ledger
+- `OrganizationID`: Reference to the owning organization
+- `Body`: Structured representation of the transaction details (DSL parsed)
+- `Metadata`: Custom key-value attributes
+- `Operations`: Collection of operations created from this transaction
+
+**Special Features:**
+- Maintains parent-child relationships for transaction reversals and related transactions
+- Contains the transaction DSL body for audit and reconstruction
+- Enforces double-entry accounting rules (debits = credits)
+- Supports transaction templates for standardized operations
+
+### Operation
+
+An Operation represents a single accounting entry (debit or credit) within a transaction, affecting a specific account's balance.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `TransactionID`: Reference to the parent transaction
+- `Description`: Human-readable description of the operation
+- `Type`: Operation type (DEBIT or CREDIT)
+- `AssetCode`: Code of the asset being operated on
+- `Amount`: Operation amount (integer representation)
+- `AmountScale`: Decimal places for the amount
+- `Balance`: Balance state before the operation
+- `BalanceAfter`: Balance state after the operation
+- `Status`: Current state of the operation (COMPLETED, FAILED, etc.)
+- `AccountID`: Reference to the affected account
+- `AccountAlias`: Human-readable account identifier
+- `BalanceID`: Reference to the specific balance record
+- `ChartOfAccounts`: Accounting classification reference
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Records both pre-operation and post-operation balance states
+- Creates an immutable audit trail of financial movements
+- Links account entries to their originating transaction
+- Typed as either DEBIT (decrease in balance) or CREDIT (increase in balance)
+
+### Balance
+
+A Balance represents the current financial position of an account for a specific asset.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `AccountID`: Reference to the account
+- `Alias`: Human-readable account identifier
+- `AssetCode`: Code of the asset this balance represents
+- `Available`: Currently available amount (integer representation)
+- `OnHold`: Amount reserved but not yet finalized (integer representation)
+- `Scale`: Decimal places for the amounts
+- `Version`: Optimistic concurrency control counter
+- `AccountType`: Type of the associated account
+- `AllowSending`: Flag controlling whether the account can send funds
+- `AllowReceiving`: Flag controlling whether the account can receive funds
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Uses optimistic concurrency control with version tracking
+- Separates available balance from on-hold amounts
+- Enforces account permissions for sending and receiving
+- Maintains account-level control flags
+
+### Asset Rate
+
+An Asset Rate represents an exchange rate between two assets, enabling multi-currency operations.
+
+**Key Attributes:**
+- `ID`: Unique identifier (UUID)
+- `ExternalID`: External reference ID
+- `From`: Source asset code
+- `To`: Target asset code
+- `Rate`: Exchange rate value (integer representation)
+- `RateScale`: Decimal places for the rate
+- `TTL`: Time-to-live in seconds for rate validity
+- `OrganizationID`: Reference to the owning organization
+- `LedgerID`: Reference to the containing ledger
+- `ExpiresAt`: Timestamp when the rate expires
+- `Metadata`: Custom key-value attributes
+
+**Special Features:**
+- Supports time-limited validity with TTL and expiration
+- Linked to external reference systems
+- Enables multi-currency transactions
+
+## Entity Relationships
+
+The Transaction domain model has the following relationships:
+
+1. **Transaction to Operations**:
+   - One-to-many: Each Transaction generates multiple Operations
+   - Each Operation must belong to exactly one Transaction
+
+2. **Operation to Balance**:
+   - Many-to-one: Multiple Operations can affect the same Balance
+   - Each Operation references exactly one Balance
+
+3. **Balance to Account**:
+   - One-to-one (per asset): Each Account has one Balance per Asset
+   - Balance changes reflect in the Account's financial position
+
+4. **Transaction Hierarchy**:
+   - Self-referential: Transactions can have parent-child relationships
+   - Used for reversals, adjustments, and related transaction grouping
+
+5. **Asset Rate Relationships**:
+   - Asset Rates define conversions between Assets
+   - Used during multi-currency transactions
+
+## Domain Patterns
+
+### Double-Entry Accounting
+
+Midaz implements strict double-entry accounting principles:
+
+1. **Balance Equilibrium**:
+   - For every transaction, the sum of debits equals the sum of credits
+   - Any imbalance causes transaction rejection
+
+2. **Dual Operations**:
+   - Each financial movement creates at least two operations:
+     - Debit operation (reducing an account's balance)
+     - Credit operation (increasing another account's balance)
+   - Multi-party transactions create multiple operation pairs
+
+3. **Operation Atomicity**:
+   - All operations in a transaction are processed atomically
+   - Either all operations succeed, or none are applied
+
+4. **Chart of Accounts**:
+   - Operations reference the chart of accounts for accounting classification
+   - Enables standard accounting reports and categorization
+
+### Balance-Transaction-Operation (BTO) Pattern
+
+The Transaction Service implements the Balance-Transaction-Operation (BTO) pattern:
+
+1. **Balance**:
+   - Represents the current state of an account
+   - Must be verified before transactions
+   - Subject to update concurrency controls
+
+2. **Transaction**:
+   - Contains the overall financial movement
+   - Ensures business rules and accounting principles
+   - Links all related operations
+
+3. **Operation**:
+   - Records individual debit/credit entries
+   - Maintains the pre- and post-balance states
+   - Forms the immutable audit trail
+
+This pattern ensures:
+- Complete audit history through operational immutability
+- Accurate balance tracking with optimistic concurrency
+- Proper transaction isolation and atomicity
+
+### Transaction DSL
+
+The Transaction Service uses a domain-specific language (DSL) for expressing transactions:
+
+1. **Grammar-Based Parsing**:
+   - Defines valid transaction syntax
+   - Processed through an ANTLR-based parser
+   - Converted to structured domain objects
+
+2. **Expression Examples**:
+   ```
+   TRANSACTION
+     CHART_OF_ACCOUNTS default
+     DESCRIPTION "Payment for services"
+     SEND BRL 100.00
+       FROM @customer1 AMOUNT BRL 100.00
+       DISTRIBUTE TO @merchant1 AMOUNT BRL 100.00
+   ```
+
+3. **Features**:
+   - Multi-source and multi-destination support
+   - Exact amount specification
+   - Transaction metadata
+   - Support for templates and variables
+
+### Balance Management
+
+Balance management follows specific patterns:
+
+1. **Optimistic Concurrency Control**:
+   - Balances have version counters
+   - Incremented with each update
+   - Prevents race conditions
+
+2. **Available vs. On-Hold**:
+   - Available balance: Ready for use
+   - On-hold balance: Reserved but not finalized
+   - Prevents double-spending while allowing pending transactions
+
+3. **Permission Controls**:
+   - AllowSending: Controls outgoing transfers
+   - AllowReceiving: Controls incoming transfers
+   - Can be toggled for account management
+
+4. **Balance History**:
+   - Operations record pre- and post-balances
+   - Enables balance reconstruction at any point in time
+   - Facilitates auditing and reconciliation
+
+## Transaction Lifecycle
+
+Transactions follow a defined lifecycle with multiple states:
+
+1. **Creation Phase**:
+   - **CREATED**: Initial state when a transaction is defined
+   - DSL is parsed and validated
+   - Available balances are checked
+
+2. **Processing Phase**:
+   - **PENDING**: Transaction is valid but not yet finalized
+   - Operations are created
+   - Balances may be placed on hold
+
+3. **Finalization Phase**:
+   - **COMMITTED**: Transaction is successfully completed
+   - Balance changes are finalized
+   - Operations are marked as COMPLETED
+
+4. **Alternate Paths**:
+   - **FAILED**: Transaction processing encountered an error
+   - **REVERSED**: Transaction was reversed by a follow-up transaction
+   - **DECLINED**: Transaction was rejected due to business rules
+
+5. **State Transitions**:
+   ```
+   CREATED → PENDING → COMMITTED
+      ↓         ↓
+   FAILED    DECLINED
+                ↓
+              REVERSED
+   ```
+
+## Domain Rules
+
+The Transaction domain enforces numerous business rules:
+
+### Balance Integrity Rules
+
+1. **Sufficient Funds**:
+   - Debits require sufficient available balance
+   - Operations verify balance availability
+
+2. **Balance Protection**:
+   - Accounts with AllowSending=false cannot be debited
+   - Accounts with AllowReceiving=false cannot be credited
+
+3. **Concurrency Protection**:
+   - Balance updates check version numbers
+   - Concurrent modifications are detected and rejected
+
+### Transaction Validation Rules
+
+1. **Double-Entry Balance**:
+   - Sum of all debits must equal sum of all credits
+   - Enforced during transaction creation
+
+2. **Asset Consistency**:
+   - Cross-asset transactions must have valid exchange rates
+   - Amounts must be properly scaled and converted
+
+3. **Transaction Completion**:
+   - All operations in a transaction must complete successfully
+   - Partial completion is not allowed
+
+### Operation Rules
+
+1. **Operation Immutability**:
+   - Operations, once created, cannot be modified
+   - Corrections require compensating transactions
+
+2. **Operation Atomicity**:
+   - All operations in a transaction succeed or fail together
+   - Database transactions ensure atomicity
+
+3. **Operation Types**:
+   - Operations must be either DEBIT or CREDIT
+   - Debit operations decrease balance
+   - Credit operations increase balance
+
+## Implementation Considerations
+
+### Scale-Aware Calculations
+
+Financial amounts are stored as integers with a separate scale field to prevent floating-point errors:
+
+```
+// Representing $123.45
+amount = 12345
+scale = 2
+```
+
+This ensures precise financial calculations without rounding errors.
+
+### Transaction Reversals
+
+Transactions can be reversed through a counteracting transaction:
+
+1. The reversal transaction references the original as its parent
+2. Debits and credits are swapped (original sources become destinations)
+3. The original transaction is marked as REVERSED
+4. The reversal maintains a reference to what it reversed
+
+### Optimistic Concurrency Control
+
+To handle concurrent balance updates:
+
+1. Balances include a version field incremented with each update
+2. Updates include a WHERE clause checking the expected version
+3. If the version doesn't match, the update fails with a concurrency exception
+4. The operation is retried with the new balance state
+
+### Idempotency
+
+Transaction processing supports idempotency:
+
+1. External transaction IDs can be provided
+2. Duplicate transaction attempts are detected
+3. Identical repeated requests return the same result without duplicate processing
\ No newline at end of file
diff --git a/docs/components/transaction/transaction-processing.md b/docs/components/transaction/transaction-processing.md
new file mode 100644
index 00000000..9b96403b
--- /dev/null
+++ b/docs/components/transaction/transaction-processing.md
@@ -0,0 +1,361 @@
+# Transaction Processing
+
+**Navigation:** [Home](../../) > [Components](../) > [Transaction](./README.md) > Transaction Processing
+
+This document describes the transaction processing flow in the Midaz Transaction Service, explaining how transactions are created, validated, processed, and applied to account balances.
+
+For a visual representation of the transaction processing flow, see the [Transaction Flow Diagram](../../assets/transaction-flow-diagram.md).
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Transaction Creation Methods](#transaction-creation-methods)
+- [Transaction Processing Flow](#transaction-processing-flow)
+- [Validation Process](#validation-process)
+- [Balance and Operation Management](#balance-and-operation-management)
+- [Asynchronous Processing](#asynchronous-processing)
+- [Special Handling Features](#special-handling-features)
+- [Error Handling and Recovery](#error-handling-and-recovery)
+- [Examples](#examples)
+
+## Overview
+
+The Midaz Transaction Service implements a robust transaction processing system that maintains financial integrity through double-entry accounting principles. Transactions are processed through a multi-stage pipeline that includes validation, balance checking, operation creation, and asynchronous processing.
+
+Key features of the transaction processing system include:
+
+- Multiple interfaces for transaction creation (JSON, DSL, Templates)
+- Strong validation ensuring double-entry accounting rules
+- Optimistic concurrency control for balance updates
+- Event-driven architecture with asynchronous processing
+- Support for transaction reversals and idempotent processing
+- Comprehensive audit trail through operation records
+
+## Transaction Creation Methods
+
+### JSON Interface
+
+Clients can create transactions by submitting a structured JSON payload:
+
+```json
+{
+  "chartOfAccountsGroupName": "default",
+  "description": "Payment for services",
+  "code": "PAY-001",
+  "pending": false,
+  "metadata": {
+    "invoiceNumber": "INV-123",
+    "department": "Engineering"
+  },
+  "send": {
+    "amount": 100,
+    "scale": 2,
+    "assetCode": "BRL",
+    "source": {
+      "from": [
+        {
+          "alias": "@customer1",
+          "amount": 100,
+          "scale": 2
+        }
+      ]
+    },
+    "distribute": {
+      "to": [
+        {
+          "alias": "@merchant1",
+          "amount": 100,
+          "scale": 2
+        }
+      ]
+    }
+  }
+}
+```
+
+The JSON interface provides a programmatic way to create transactions, suitable for system integrations.
+
+### Domain-Specific Language (DSL)
+
+Transactions can be defined using a domain-specific language specifically designed for financial transactions:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS default
+  DESCRIPTION "Payment for services"
+  CODE "PAY-001"
+  SEND BRL 10000 2
+    FROM @customer1 AMOUNT BRL 10000 2
+    DISTRIBUTE TO @merchant1 AMOUNT BRL 10000 2
+```
+
+The DSL provides a human-readable and writable format for defining transactions, making it easier to create and understand complex financial movements.
+
+The DSL is parsed using an ANTLR4-based parser that converts the textual representation into a structured transaction object.
+
+### Template-Based Transactions
+
+Pre-defined transaction templates can be used with specific variables to create standardized transactions:
+
+```json
+{
+  "transactionType": "00000000-0000-0000-0000-000000000000",
+  "transactionTypeCode": "PAYMENT",
+  "variables": {
+    "sourceAccount": "@customer1",
+    "destinationAccount": "@merchant1",
+    "amount": 100.00,
+    "currency": "BRL"
+  }
+}
+```
+
+Templates simplify common transaction patterns by allowing users to provide just the variable components of a pre-defined transaction structure.
+
+## Transaction Processing Flow
+
+The transaction processing flow follows these key steps:
+
+### 1. Initiation
+
+- Client submits a transaction request through one of the available interfaces (JSON, DSL, Template)
+- The system validates basic request format and authentication
+
+### 2. Parsing and Normalization
+
+- JSON or DSL inputs are parsed into a standardized transaction structure
+- Template-based requests are expanded using the template definition
+- The transaction is normalized into a canonical form
+
+### 3. Validation
+
+- Business rule validation ensures the transaction follows financial rules
+- Balance validation checks if source accounts have sufficient funds
+- Structural validation ensures proper account references and asset codes
+
+### 4. Synchronous Processing
+
+- The transaction record is created in the database
+- Metadata is stored in MongoDB
+- An idempotency key is generated if not provided
+- The transaction is queued for asynchronous processing
+
+### 5. Asynchronous Processing
+
+- The transaction is picked up from the queue
+- Account balances are locked and verified
+- Operations are created for each debit and credit action
+- Balances are updated atomically
+
+### 6. Finalization
+
+- Transaction status is updated to COMMITTED
+- Audit trails are created
+- Notifications are generated for relevant parties
+
+## Validation Process
+
+Transaction validation is a critical step to ensure financial integrity and prevent errors:
+
+### Syntax Validation
+
+For DSL-based transactions, the system performs syntax validation:
+
+- Lexical analysis verifies token structure
+- Parser validates grammatical structure
+- Type checking ensures proper value formats
+
+### Business Rule Validation
+
+All transactions undergo business rule validation:
+
+- **Double-Entry Compliance**: The sum of debits must equal the sum of credits
+- **Balance Availability**: Source accounts must have sufficient available balance
+- **Account Permissions**: Accounts must allow sending/receiving transactions
+- **Asset Compatibility**: Asset codes must be valid and compatible
+
+### Security Validation
+
+Security validations protect the system from abuse:
+
+- **Authorization**: Verifies the requester has permission to create transactions
+- **Resource Access**: Checks if the requester can access specified accounts
+- **Rate Limiting**: Prevents excessive transaction creation
+- **Idempotency**: Prevents duplicate transaction processing
+
+## Balance and Operation Management
+
+Transactions affect account balances through a carefully controlled process:
+
+### Balance Retrieval
+
+For each account involved in the transaction:
+
+1. The current balance is retrieved and locked (optimistic locking)
+2. The system verifies the account exists and is active
+3. Permission checks ensure the account can send or receive funds
+
+### Operation Creation
+
+For each financial movement within the transaction:
+
+1. An operation record is created with:
+   - Reference to the parent transaction
+   - Account identifier
+   - Amount and asset code
+   - Balance before the operation
+   - Operation type (DEBIT or CREDIT)
+
+2. The balance after the operation is calculated based on:
+   - For DEBIT operations: `new_balance = old_balance - amount`
+   - For CREDIT operations: `new_balance = old_balance + amount`
+
+3. The balance after the operation is recorded in the operation
+
+### Balance Updates
+
+Balance updates follow these rules:
+
+1. Optimistic locking using version numbers prevents race conditions
+2. Available and on-hold amounts are tracked separately
+3. Balance updates are applied atomically
+4. Balance versioning ensures concurrency control
+
+## Asynchronous Processing
+
+The transaction processing system uses asynchronous patterns for scalability and resilience:
+
+### Queue-Based Processing
+
+1. Transactions are submitted to RabbitMQ queues for processing
+2. Dedicated workers process transactions from the queues
+3. Separate queues handle different stages of transaction processing
+
+### Balance-Transaction-Operation (BTO) Pattern
+
+The system implements the BTO pattern:
+
+1. **Create Transaction**: Record the overall transaction details
+2. **Create Operations**: Generate individual debit/credit operations
+3. **Update Balances**: Apply operations to account balances
+
+This pattern is applied asynchronously to ensure system resilience.
+
+### Retry Mechanisms
+
+Failed transactions can be retried:
+
+1. Transient failures (e.g., database connectivity) trigger automatic retries
+2. Queue dead-letter exchanges capture persistently failing transactions
+3. Retry policies control backoff and maximum attempt count
+
+## Special Handling Features
+
+### Transaction Reversals
+
+Transactions can be reversed through a dedicated reversal process:
+
+1. A reversal transaction is created that references the original
+2. Credit and debit operations are swapped
+3. Account balances are adjusted to reverse the original effects
+4. Both transactions maintain their audit trail
+
+### Idempotency
+
+The system supports idempotent transaction processing:
+
+1. Clients can provide idempotency keys with transactions
+2. Duplicate submission with the same key returns the original result
+3. Idempotency keys have configurable time-to-live (TTL)
+
+### Partial Transactions
+
+Some scenarios support partial transaction processing:
+
+1. Multi-phase transactions for complex scenarios
+2. Pending state for transactions awaiting approval
+3. Transaction commitment to finalize pending transactions
+
+## Error Handling and Recovery
+
+The transaction system is designed for reliability:
+
+### Error Categorization
+
+Errors are categorized for appropriate handling:
+
+- **Validation Errors**: Returned immediately to clients
+- **Resource Errors**: May trigger retries if transient
+- **System Errors**: Logged for operational monitoring
+
+### Recovery Mechanisms
+
+Recovery mechanisms include:
+
+- **Automatic Retries**: For transient failures
+- **Manual Intervention**: For complex scenarios requiring human review
+- **Compensating Transactions**: For correcting committed errors
+
+## Examples
+
+### Basic Transfer Example
+
+A simple money transfer follows this flow:
+
+1. **Client Request**:
+   ```
+   TRANSACTION
+     CHART_OF_ACCOUNTS default
+     DESCRIPTION "Payment from Customer to Merchant"
+     SEND BRL 100 2
+       FROM @customer1 AMOUNT BRL 100 2
+       DISTRIBUTE TO @merchant1 AMOUNT BRL 100 2
+   ```
+
+2. **System Processing**:
+   - Transaction record created with PENDING status
+   - Balance check ensures @customer1 has ≥ $100.00
+   - Debit operation created for @customer1 (-$100.00)
+   - Credit operation created for @merchant1 (+$100.00)
+   - Balances updated
+   - Transaction status set to COMMITTED
+
+3. **Result**:
+   - @customer1 balance decreases by $100.00
+   - @merchant1 balance increases by $100.00
+   - Complete audit trail through operation records
+
+### Multi-Party Distribution Example
+
+For distributing funds to multiple recipients:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS default
+  DESCRIPTION "Revenue distribution"
+  SEND BRL 100 2
+    FROM @revenue AMOUNT BRL 100 2
+    DISTRIBUTE
+      TO @department1 AMOUNT BRL 50 2
+      TO @department2 AMOUNT BRL 30 2
+      TO @department3 AMOUNT BRL 20 2
+```
+
+This creates four operations:
+- Debit from @revenue: -$100.00
+- Credit to @department1: +$50.00
+- Credit to @department2: +$30.00
+- Credit to @department3: +$20.00
+
+### Transaction Reversal Example
+
+To reverse transaction T1:
+
+1. Client calls the revert endpoint for T1
+2. System creates a new transaction T2 that:
+   - References T1 as its parent
+   - Creates opposite operations (credits become debits, debits become credits)
+   - Marks T1 as REVERSED
+   - Sets T2 status to COMMITTED
+
+This maintains a complete audit trail while effectively canceling the original transaction's effects.
\ No newline at end of file
diff --git a/docs/contributing-to-docs.md b/docs/contributing-to-docs.md
new file mode 100644
index 00000000..cee5a553
--- /dev/null
+++ b/docs/contributing-to-docs.md
@@ -0,0 +1,358 @@
+# Contributing to Documentation
+
+**Navigation:** [Home](./) > Contributing to Documentation
+
+This guide explains how to contribute to the Midaz documentation, including our documentation structure, style guidelines, and review process. High-quality documentation is critical to the success of Midaz, and we welcome contributions from everyone.
+
+## Table of Contents
+
+- [Documentation Philosophy](#documentation-philosophy)
+- [Documentation Structure](#documentation-structure)
+- [Getting Started](#getting-started)
+- [Documentation Guidelines](#documentation-guidelines)
+- [Markdown Style Guide](#markdown-style-guide)
+- [Writing Best Practices](#writing-best-practices)
+- [Adding Images and Diagrams](#adding-images-and-diagrams)
+- [Creating Tutorials](#creating-tutorials)
+- [Submitting Changes](#submitting-changes)
+- [Documentation Review Process](#documentation-review-process)
+
+## Documentation Philosophy
+
+Midaz documentation follows these core principles:
+
+1. **User-Centered**: Documentation is written with the user's needs in mind
+2. **Comprehensive**: Covers all aspects of the platform, from high-level concepts to detailed implementation
+3. **Well-Structured**: Organized in a logical, intuitive manner with clear navigation
+4. **Current**: Regularly updated to reflect the latest features and changes
+5. **Accessible**: Written in clear, concise language accessible to users with varying levels of expertise
+
+## Documentation Structure
+
+Our documentation is organized into the following key sections:
+
+1. **Getting Started**: Installation, quickstart guides, and basic setup
+2. **Architecture**: System overview, architectural patterns, and component interactions
+3. **Components**: Detailed documentation for each system component
+4. **Developer Guide**: Guidelines for developers contributing to the project
+5. **Tutorials**: Step-by-step guides for common tasks
+6. **Reference**: API documentation, glossary, and other reference materials
+7. **Troubleshooting**: Common issues and their solutions
+
+## Getting Started
+
+### Prerequisites
+
+To contribute to the documentation, you'll need:
+
+- Git installed on your local machine
+- A GitHub account
+- Basic knowledge of Markdown
+- A text editor (VS Code, Sublime Text, etc.)
+
+### Setting Up Your Environment
+
+1. **Fork and Clone the Repository**
+
+   ```bash
+   git clone https://github.com/YOUR-USERNAME/midaz.git
+   cd midaz
+   git remote add upstream https://github.com/LerianStudio/midaz.git
+   ```
+
+2. **Navigate to the Documentation Directory**
+
+   ```bash
+   cd docs
+   ```
+
+3. **Create a Branch for Your Changes**
+
+   ```bash
+   git checkout -b docs/your-documentation-change
+   ```
+
+## Documentation Guidelines
+
+### General Guidelines
+
+1. **Know Your Audience**:
+   - Consider who will be reading the documentation (developers, operators, end-users)
+   - Adjust the technical level accordingly
+
+2. **Be Clear and Concise**:
+   - Use simple, direct language
+   - One idea per paragraph
+   - Avoid jargon and acronyms without explanation
+
+3. **Document Structure**:
+   - Start with a clear title and introduction
+   - Use consistent headings and subheadings
+   - Include a table of contents for longer documents
+   - End with a conclusion or next steps when appropriate
+
+4. **Keep It Current**:
+   - Documentation should reflect the current state of the software
+   - Update documentation when features change
+   - Remove outdated information
+
+5. **Cross-Reference**:
+   - Link to related documentation
+   - Avoid duplication by referencing existing content
+   - Ensure links are valid and point to the correct location
+
+### Documentation Types
+
+#### Conceptual Documentation
+
+- Explains concepts, architectures, and the "why" behind features
+- Includes diagrams and high-level explanations
+- Helps users understand the bigger picture
+
+#### Procedural Documentation
+
+- Provides step-by-step instructions
+- Uses clear, numbered steps
+- Includes expected outcomes and verification steps
+
+#### Reference Documentation
+
+- Provides detailed technical information
+- Includes complete API references, configuration options, etc.
+- Focuses on accuracy and completeness
+
+#### Troubleshooting Documentation
+
+- Addresses common problems and their solutions
+- Includes symptoms, causes, and resolutions
+- Uses a consistent problem-solution format
+
+## Markdown Style Guide
+
+Midaz documentation uses GitHub-flavored Markdown. Here are our style conventions:
+
+### File Naming and Organization
+
+- Use lowercase for filenames
+- Use hyphens instead of spaces (`contributing-to-docs.md`, not `contributing to docs.md`)
+- Place files in the appropriate directory based on content type
+
+### Headers
+
+- Use ATX-style headers (`#` for H1, `##` for H2, etc.)
+- Include one space after the `#` symbol
+- Use title case for headers
+- Separate headers from surrounding text with a blank line
+
+```markdown
+## Header Example
+
+Content goes here...
+```
+
+### Lists
+
+- Use `-` for unordered lists
+- Use `1.`, `2.`, etc. for ordered lists
+- Indent nested lists with 2 spaces
+- Include a blank line before and after lists
+
+```markdown
+- Item 1
+- Item 2
+  - Nested item 1
+  - Nested item 2
+- Item 3
+
+1. First step
+2. Second step
+   1. Sub-step 1
+   2. Sub-step 2
+3. Third step
+```
+
+### Code Blocks
+
+- Use triple backticks (```) for code blocks
+- Specify the language for syntax highlighting
+- Use inline code with single backticks for small code snippets
+
+    ```go
+    // Example Go code
+    func main() {
+        fmt.Println("Hello, Midaz!")
+    }
+    ```
+
+### Links
+
+- Use descriptive link text
+- Use relative links for internal documentation
+- Use absolute links for external resources
+
+```markdown
+[Contributing Guide](../developer-guide/contributing.md)
+[Go Documentation](https://golang.org/doc/)
+```
+
+### Tables
+
+- Use standard Markdown tables
+- Include a header row
+- Align columns for readability in the Markdown source
+
+```markdown
+| Name | Type | Description |
+|------|------|-------------|
+| id   | string | Unique identifier |
+| name | string | User's display name |
+```
+
+### Images
+
+- Place images in the `/docs/assets` directory
+- Use descriptive alt text
+- Include captions when necessary
+- Optimize image size for web viewing
+
+```markdown
+![Alt text](../assets/example-diagram.png)
+*Caption: System architecture diagram*
+```
+
+### Admonitions
+
+Use the following format for notes, warnings, tips, and important information:
+
+```markdown
+> **Note**: This is a note.
+
+> **Warning**: This is a warning.
+
+> **Tip**: This is a tip.
+
+> **Important**: This is important information.
+```
+
+## Writing Best Practices
+
+### Voice and Tone
+
+- Use an active voice rather than passive
+- Write in a professional but conversational tone
+- Address the reader directly ("you")
+- Be positive and supportive
+- Maintain a consistent tone across documentation
+
+### Language
+
+- Use American English spelling
+- Avoid contractions in formal documentation
+- Use present tense when possible
+- Be consistent with terminology
+- Define technical terms when first used or link to the glossary
+
+### Examples
+
+- Include practical, realistic examples
+- Provide complete code samples that can be copied and used directly
+- Explain the purpose and expected outcome of examples
+- Use consistent formatting for input and output
+
+## Adding Images and Diagrams
+
+### Image Guidelines
+
+1. **Format**: Use PNG for screenshots and diagrams, JPEG for photos
+2. **Size**: Optimize images for web (typically under 500KB)
+3. **Resolution**: Use appropriate resolution for the content (typically 1200px max width)
+4. **Naming**: Use descriptive filenames (`transaction-flow-diagram.png`, not `image1.png`)
+
+### Diagram Tools
+
+- [draw.io](https://draw.io/) (free, web-based and desktop app)
+- [Lucidchart](https://www.lucidchart.com/) (freemium)
+- [Mermaid](https://mermaid-js.github.io/mermaid/#/) (text-based diagramming integrated with Markdown)
+
+### Diagram Standards
+
+- Use consistent colors and shapes across diagrams
+- Include a legend for complex diagrams
+- Ensure text is readable at the final display size
+- Use arrows to indicate flow direction
+
+## Creating Tutorials
+
+Effective tutorials have these components:
+
+1. **Introduction**: What the tutorial covers and what the reader will accomplish
+2. **Prerequisites**: What the reader needs before starting
+3. **Steps**: Clear, numbered instructions with code samples and explanations
+4. **Verification**: How to confirm each step was completed successfully
+5. **Troubleshooting**: Common issues and their solutions
+6. **Conclusion**: Summary of what was learned and next steps
+
+Use screenshots or diagrams to illustrate complex steps.
+
+## Submitting Changes
+
+1. **Make Your Changes**:
+   - Edit existing files or create new ones following our guidelines
+   - Commit your changes with a clear message (e.g., `docs: add transaction tutorial`)
+
+2. **Test Your Changes**:
+   - Preview the rendered Markdown to ensure correct formatting
+   - Check that all links work correctly
+   - Verify that code samples are correct and properly formatted
+
+3. **Push Your Changes**:
+   ```bash
+   git push origin docs/your-documentation-change
+   ```
+
+4. **Create a Pull Request**:
+   - Submit a pull request to the `main` branch
+   - Include a clear title and description
+   - Reference any related issues
+   - Request review from documentation maintainers
+
+## Documentation Review Process
+
+1. **Initial Review**: A documentation maintainer will review your submission for formatting, organization, and basic completeness.
+
+2. **Technical Review**: Technical experts will verify the accuracy of technical content.
+
+3. **Editorial Review**: An editor will review for clarity, consistency, and adherence to style guidelines.
+
+4. **Feedback**: You'll receive feedback and may be asked to make revisions.
+
+5. **Approval and Merge**: Once approved, your contribution will be merged into the main documentation.
+
+### Review Criteria
+
+Documentation is evaluated based on:
+- Accuracy and technical correctness
+- Clarity and readability
+- Completeness and coverage
+- Organization and structure
+- Consistency with style guidelines
+- Quality of examples and illustrations
+
+## Documentation Maintenance
+
+### Versioning
+
+- Documentation is versioned alongside the software
+- Changes to documentation should align with the appropriate version
+
+### Deprecation
+
+- Mark deprecated features clearly
+- Include migration guidance when documenting deprecations
+- Remove documentation for removed features when appropriate
+
+---
+
+Thank you for contributing to the Midaz documentation! Your efforts help make our platform more accessible and easier to use for everyone.
+
+If you have questions or need assistance, please contact the documentation team or open an issue on GitHub.
\ No newline at end of file
diff --git a/docs/developer-guide/README.md b/docs/developer-guide/README.md
new file mode 100644
index 00000000..52a2ed3a
--- /dev/null
+++ b/docs/developer-guide/README.md
@@ -0,0 +1,54 @@
+# Developer Guide
+
+**Navigation:** [Home](../) > Developer Guide
+
+This section provides comprehensive guidance for developers working with the Midaz codebase. Whether you're a new contributor or an experienced developer integrating with Midaz, this guide contains essential information about the codebase structure, development practices, and technical standards.
+
+## Core Development Guides
+
+- [Code Organization](./code-organization.md) - Overview of the project structure and organization
+- [Contributing](./contributing.md) - Guidelines for contributing to the Midaz project
+- [Error Handling](./error-handling.md) - Approach to error handling across the codebase
+- [Shared Packages](./shared-packages.md) - Overview of shared packages and utilities
+- [Testing Strategy](./testing-strategy.md) - Approach to testing, including unit, integration, and end-to-end tests
+
+## Authentication
+
+Authentication in Midaz is handled by a separate plugin that can be enabled or disabled through configuration. The Auth Plugin documentation is maintained in a separate repository.
+
+> **Note:** When enabled (`PLUGIN_AUTH_ENABLED=true`), all API requests require authentication using OAuth 2.0 Bearer tokens. If authentication is disabled (`PLUGIN_AUTH_ENABLED=false`), API endpoints can be accessed without authentication, which is typically only used for development and testing environments.
+
+## Development Workflows
+
+### Setting Up Development Environment
+
+1. Clone the repository
+2. Set up the required dependencies (Go 1.19+, Docker, Docker Compose)
+3. Configure environment variables using the provided `.env.example` files
+4. Run the infrastructure services using Docker Compose
+5. Run the application services
+
+Detailed setup instructions are available in the [Installation Guide](../getting-started/installation.md).
+
+### Development Best Practices
+
+- Follow the code style and organization patterns in existing code
+- Write comprehensive tests for all new features
+- Document your code and APIs
+- Use the error handling patterns described in [Error Handling](./error-handling.md)
+- Create clear and descriptive commit messages
+
+### Pull Request Process
+
+1. Create a feature branch from the main branch
+2. Implement your changes following the coding standards
+3. Write or update tests to cover your changes
+4. Update documentation as necessary
+5. Submit a pull request with a clear description of the changes
+6. Address any feedback from code reviewers
+
+## Additional Resources
+
+- [API Reference](../api-reference/README.md) - Comprehensive API documentation
+- [Architecture Overview](../architecture/system-overview.md) - High-level system architecture
+- [Tutorials](../tutorials/README.md) - Step-by-step guides for common development tasks
diff --git a/docs/developer-guide/code-organization.md b/docs/developer-guide/code-organization.md
new file mode 100644
index 00000000..f4bd18fb
--- /dev/null
+++ b/docs/developer-guide/code-organization.md
@@ -0,0 +1,310 @@
+# Code Organization
+
+**Navigation:** [Home](../) > [Developer Guide](../) > Code Organization
+
+This document describes how code is organized within the Midaz codebase, covering the project structure, architectural patterns, and code conventions.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Project Structure](#project-structure)
+- [Hexagonal Architecture](#hexagonal-architecture)
+- [Repository Pattern](#repository-pattern)
+- [CQRS Pattern](#cqrs-pattern)
+- [Dependency Injection](#dependency-injection)
+- [Naming Conventions](#naming-conventions)
+- [Testing Organization](#testing-organization)
+- [References](#references)
+
+## Overview
+
+Midaz follows a well-structured approach to code organization based on several key principles:
+
+1. **Component-Based Structure**: The codebase is divided into distinct components (microservices), each responsible for a specific domain area.
+2. **Hexagonal Architecture**: Each component follows the hexagonal (ports and adapters) architecture pattern.
+3. **Domain-Driven Design**: The core domain model is kept independent of external concerns.
+4. **Command Query Responsibility Segregation (CQRS)**: Command (write) and query (read) operations are separated.
+5. **Interface-Based Design**: Dependencies are defined through interfaces, promoting loose coupling.
+
+## Project Structure
+
+The Midaz codebase is organized into the following top-level directories:
+
+```
+midaz/
+├── components/           # Main microservices components
+│   ├── infra/            # Infrastructure setup (databases, message queues)
+│   ├── mdz/              # CLI component
+│   ├── onboarding/       # Onboarding API component
+│   └── transaction/      # Transaction processing component
+├── pkg/                  # Shared packages used across components
+│   ├── constant/         # Shared constants
+│   ├── gold/             # Transaction DSL parser
+│   ├── mmodel/           # Shared model definitions
+│   ├── net/              # Network utilities
+│   └── shell/            # Shell utilities
+├── docs/                 # Documentation
+├── scripts/              # Build and utility scripts
+└── ...
+```
+
+Each microservice component follows a similar internal structure:
+
+```
+component/
+├── api/                  # API definitions (OpenAPI)
+├── cmd/                  # Entry points
+├── internal/             # Component-specific code (not exported)
+│   ├── adapters/         # Infrastructure adapters
+│   │   ├── http/         # HTTP adapters (in/out)
+│   │   ├── mongodb/      # MongoDB adapters
+│   │   ├── postgres/     # PostgreSQL adapters
+│   │   └── rabbitmq/     # RabbitMQ adapters
+│   ├── bootstrap/        # Application bootstrap code
+│   └── services/         # Business services
+│       ├── command/      # Command handlers (write operations)
+│       └── query/        # Query handlers (read operations)
+├── migrations/           # Database migrations
+└── ...
+```
+
+## Hexagonal Architecture
+
+Midaz implements the hexagonal architecture pattern (also known as ports and adapters) to separate business logic from external concerns. This architecture allows the core business logic to remain isolated from infrastructure details.
+
+### Core Concepts
+
+1. **Domain Layer**: Contains the core business logic and entities.
+2. **Ports Layer**: Defines interfaces (ports) that the domain layer uses to interact with external systems.
+3. **Adapters Layer**: Implements the interfaces defined by the ports layer to connect to external systems.
+
+### Implementation
+
+In Midaz, this pattern is implemented as follows:
+
+1. **Domain Interfaces** (`internal/domain/repository/*.go`): Define the contracts for data access and external services.
+2. **Service Layer** (`internal/services/{command,query}/*.go`): Contains the business logic that uses these interfaces.
+3. **Infrastructure Adapters** (`internal/adapters/{http,postgres,mongodb,rabbitmq}/*.go`): Implement the interfaces to connect to real systems.
+
+Example domain interface (port):
+
+```go
+// internal/domain/repository/organization.go
+type OrganizationRepository interface {
+    Create(ctx context.Context, organization *model.Organization) (*model.Organization, error)
+    GetByID(ctx context.Context, id string) (*model.Organization, error)
+    List(ctx context.Context, filter map[string]interface{}) ([]*model.Organization, error)
+    Update(ctx context.Context, organization *model.Organization) (*model.Organization, error)
+    Delete(ctx context.Context, id string) error
+}
+```
+
+Example adapter implementation:
+
+```go
+// internal/adapters/postgres/organization/organization.postgresql.go
+type PostgresOrganizationRepository struct {
+    db *sqlx.DB
+}
+
+func (r *PostgresOrganizationRepository) Create(ctx context.Context, organization *model.Organization) (*model.Organization, error) {
+    // Implementation details for PostgreSQL
+}
+
+// Other method implementations...
+```
+
+## Repository Pattern
+
+Midaz uses the repository pattern to abstract data access logic. Repositories provide a clean API for the domain layer to interact with data storage without being concerned with the underlying implementation.
+
+### Key Characteristics
+
+1. **Interface-Driven**: Each repository is defined by an interface.
+2. **Single Responsibility**: Each repository deals with a single domain entity.
+3. **Storage Agnostic**: Domain code doesn't need to know if data is stored in PostgreSQL, MongoDB, or elsewhere.
+
+### Implementation
+
+Each domain entity has its own repository interface:
+
+```go
+// Example repository interface for Account entity
+type AccountRepository interface {
+    Create(ctx context.Context, account *model.Account) (*model.Account, error)
+    GetByID(ctx context.Context, id string) (*model.Account, error)
+    List(ctx context.Context, filter map[string]interface{}) ([]*model.Account, error)
+    // Other methods...
+}
+```
+
+These repositories are implemented for specific storage engines:
+
+```go
+// PostgreSQL implementation for Account repository
+type PostgresAccountRepository struct {
+    db *sqlx.DB
+}
+
+func (r *PostgresAccountRepository) Create(ctx context.Context, account *model.Account) (*model.Account, error) {
+    // PostgreSQL-specific implementation
+}
+
+// Other method implementations...
+```
+
+## CQRS Pattern
+
+Midaz implements the Command Query Responsibility Segregation (CQRS) pattern to separate operations that modify state (commands) from operations that read state (queries).
+
+### Implementation
+
+In the Midaz codebase, CQRS is implemented with separate packages for commands and queries:
+
+```
+services/
+├── command/          # Write operations
+│   ├── create-*.go   # Create operations
+│   ├── update-*.go   # Update operations
+│   └── delete-*.go   # Delete operations
+└── query/            # Read operations
+    ├── get-*.go      # Get single entity
+    └── get-all-*.go  # Get multiple entities
+```
+
+Command example:
+
+```go
+// internal/services/command/create-organization.go
+type CreateOrganizationCommand struct {
+    repo domain.OrganizationRepository
+}
+
+func (c *CreateOrganizationCommand) Execute(ctx context.Context, params CreateOrganizationParams) (*model.Organization, error) {
+    // Validate input
+    // Create domain entity
+    // Save via repository
+    // Return result
+}
+```
+
+Query example:
+
+```go
+// internal/services/query/get-id-organization.go
+type GetOrganizationByIDQuery struct {
+    repo domain.OrganizationRepository
+}
+
+func (q *GetOrganizationByIDQuery) Execute(ctx context.Context, id string) (*model.Organization, error) {
+    // Fetch from repository
+    // Return result
+}
+```
+
+## Dependency Injection
+
+Midaz uses a form of dependency injection to provide components with their dependencies. This approach promotes loose coupling and testability.
+
+### Implementation
+
+Dependencies are typically injected via constructors:
+
+```go
+// Constructor injection for a service
+func NewCreateOrganizationCommand(repo domain.OrganizationRepository) *CreateOrganizationCommand {
+    return &CreateOrganizationCommand{
+        repo: repo,
+    }
+}
+```
+
+Application bootstrap code wires up all dependencies:
+
+```go
+// Simplified example from bootstrap code
+func SetupServices(db *sqlx.DB) *Services {
+    // Create repositories
+    orgRepo := postgres.NewPostgresOrganizationRepository(db)
+    
+    // Create services
+    createOrgCmd := command.NewCreateOrganizationCommand(orgRepo)
+    getOrgByIDQuery := query.NewGetOrganizationByIDQuery(orgRepo)
+    
+    // Return services container
+    return &Services{
+        CreateOrganization: createOrgCmd,
+        GetOrganizationByID: getOrgByIDQuery,
+        // Other services...
+    }
+}
+```
+
+## Naming Conventions
+
+Midaz follows consistent naming conventions to make the codebase more predictable and navigable:
+
+1. **Files**: Named after the primary entity or functionality they contain.
+   - Entity repositories: `entity.go`
+   - Entity repository implementations: `entity.postgresql.go`, `entity.mongodb.go`
+   - Command handlers: `command-name.go` (e.g., `create-organization.go`)
+   - Query handlers: `get-[qualifier]-entity.go` (e.g., `get-id-organization.go`)
+
+2. **Interfaces**: Named with a descriptive noun followed by the word "Repository" or "Service".
+   - `OrganizationRepository`
+   - `TransactionService`
+
+3. **Implementations**: Named with the technology, followed by the interface name.
+   - `PostgresOrganizationRepository`
+   - `MongoDBMetadataRepository`
+
+4. **Test Files**: Same name as the implementation file with `_test` suffix.
+   - `organization.go` → `organization_test.go`
+   - `create-organization.go` → `create-organization_test.go`
+
+## Testing Organization
+
+Midaz organizes tests alongside the code they test, following Go's standard approach:
+
+1. **Unit Tests**: Placed in the same package as the code they test, with `_test.go` suffix.
+2. **Integration Tests**: For component-level tests that span multiple packages.
+3. **Golden File Tests**: Used for testing CLI output and complex serialization.
+
+### Mock Generation
+
+For testing with dependencies, Midaz generates mock implementations of interfaces:
+
+```go
+// account_mock.go (generated)
+type MockAccountRepository struct {
+    mock.Mock
+}
+
+func (m *MockAccountRepository) Create(ctx context.Context, account *model.Account) (*model.Account, error) {
+    args := m.Called(ctx, account)
+    return args.Get(0).(*model.Account), args.Error(1)
+}
+
+// Other method implementations...
+```
+
+### Test Helper Functions
+
+Common test helper functions are provided in packages like `mockutil`:
+
+```go
+// Example test helper function
+func CreateTestAccount(t *testing.T) *model.Account {
+    return &model.Account{
+        ID: uuid.New().String(),
+        // Other fields...
+    }
+}
+```
+
+## References
+
+- [STRUCTURE.md](../../STRUCTURE.md) - Top-level code structure documentation
+- [Domain Models](../domain-models/) - Documentation on domain models
+- [Hexagonal Architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)) - External reference on hexagonal architecture
+- [CQRS Pattern](https://martinfowler.com/bliki/CQRS.html) - Martin Fowler's article on CQRS
\ No newline at end of file
diff --git a/docs/developer-guide/contributing.md b/docs/developer-guide/contributing.md
new file mode 100644
index 00000000..92fd8760
--- /dev/null
+++ b/docs/developer-guide/contributing.md
@@ -0,0 +1,316 @@
+# Contributing Guide
+
+**Navigation:** [Home](../../) > [Developer Guide](../) > Contributing
+
+This document provides comprehensive guidelines for developers who want to contribute to the Midaz project. It outlines our development workflow, coding standards, testing requirements, and pull request process.
+
+## Table of Contents
+
+- [Getting Started](#getting-started)
+- [Development Workflow](#development-workflow)
+- [Coding Standards](#coding-standards)
+- [Testing Requirements](#testing-requirements)
+- [Submitting Pull Requests](#submitting-pull-requests)
+- [Commit Message Guidelines](#commit-message-guidelines)
+- [Code Review Process](#code-review-process)
+- [Documentation Requirements](#documentation-requirements)
+- [Issue Tracking](#issue-tracking)
+- [Release Process](#release-process)
+- [Community Guidelines](#community-guidelines)
+
+## Getting Started
+
+### Prerequisites
+
+Before contributing to Midaz, ensure you have the following tools installed:
+
+- Go 1.20 or higher
+- Docker and Docker Compose
+- Git (with commit signing configured)
+- Make
+
+### Setting Up Your Development Environment
+
+1. **Fork and Clone the Repository**
+
+   ```bash
+   git clone https://github.com/YOUR-USERNAME/midaz.git
+   cd midaz
+   git remote add upstream https://github.com/LerianStudio/midaz.git
+   ```
+
+2. **Install Dependencies**
+
+   ```bash
+   make setup
+   ```
+
+3. **Set Up Git Hooks**
+
+   ```bash
+   make setup-git-hooks
+   ```
+
+4. **Start the Development Environment**
+
+   ```bash
+   make dev
+   ```
+
+## Development Workflow
+
+Midaz follows a feature branch workflow with pull requests:
+
+1. **Create an Issue**: For most changes, start by creating an issue in the GitHub repository to discuss your proposed change. This isn't necessary for minor fixes like typos.
+
+2. **Create a Branch**: Create a feature or fix branch from the `main` branch with a descriptive name:
+
+   ```bash
+   git checkout main
+   git pull upstream main
+   git checkout -b feature/your-feature-name
+   ```
+
+   Branch naming conventions:
+   - `feature/`: For new features
+   - `fix/`: For bug fixes
+   - `docs/`: For documentation changes
+   - `refactor/`: For code refactoring
+   - `test/`: For adding or modifying tests
+
+3. **Make Changes**: Implement your changes, following our coding standards and ensuring all tests pass.
+
+4. **Commit Changes**: Make frequent, small commits with clear messages following our commit guidelines.
+
+5. **Push to Your Fork**:
+
+   ```bash
+   git push origin feature/your-feature-name
+   ```
+
+6. **Create a Pull Request**: Submit a pull request to the `main` branch of the main repository.
+
+7. **Code Review**: Address any feedback from code reviewers.
+
+8. **Merge**: Once approved, your pull request will be merged by a maintainer.
+
+## Coding Standards
+
+### Go Style Guidelines
+
+Midaz adheres to the standard Go style guidelines and best practices:
+
+- Follow the [Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments)
+- Adhere to [Effective Go](https://golang.org/doc/effective_go.html) principles
+- Run `gofmt` and `golint` on your code before committing
+
+### Architecture Guidelines
+
+When contributing code to Midaz, ensure your changes align with our architectural patterns:
+
+- **Hexagonal Architecture**: Maintain the separation between domain, application, and infrastructure layers
+- **CQRS Pattern**: Keep command (write) and query (read) operations separate
+- **Clean Code**: Maintain high readability and maintainability standards
+- **Dependency Injection**: Use dependency injection for service components
+
+### Package Structure
+
+Respect the existing package structure:
+
+- `/components/*`: Service components (onboarding, transaction, mdz CLI)
+- `/pkg/*`: Shared packages used across components
+- `/internal/*`: Component-specific internal implementation
+
+## Testing Requirements
+
+All code contributions must include appropriate tests:
+
+### Unit Tests
+
+- Write unit tests for all new functions and methods
+- Aim for at least 75% code coverage for unit tests
+- Use table-driven tests where appropriate
+- Use mocks for external dependencies
+
+### Integration Tests
+
+- Add integration tests for API endpoints and database interactions
+- Use the testing infrastructure in the `test/integration` directory
+
+### Running Tests
+
+Before submitting a pull request, ensure all tests pass:
+
+```bash
+make test       # Run unit tests
+make test-int   # Run integration tests
+make coverage   # Generate coverage report
+```
+
+## Submitting Pull Requests
+
+1. **Ensure your branch is up-to-date**:
+
+   ```bash
+   git checkout main
+   git pull upstream main
+   git checkout your-branch-name
+   git rebase main
+   ```
+
+2. **Verify your changes**:
+   - All tests pass
+   - No linting errors
+   - Your code meets our standards
+   - Documentation is updated if applicable
+
+3. **Create a pull request** with a clear description:
+   - Reference the related issue(s)
+   - Describe what the change does
+   - Explain why the change is necessary
+   - Include any breaking changes or backward compatibility issues
+   - Document any new dependencies
+
+4. **Sign your commits**:
+   - All commits must be signed to verify you have the right to submit the code
+   - Configure Git to sign commits:
+     ```bash
+     git config --global user.name "Your Name"
+     git config --global user.email "your.email@example.com"
+     git config --global commit.gpgsign true   # If using GPG
+     ```
+   - Or use the `-s` flag to add a Signed-off-by line:
+     ```bash
+     git commit -s -m "Your commit message"
+     ```
+
+## Commit Message Guidelines
+
+Midaz uses the [Conventional Commits](https://www.conventionalcommits.org/) specification for commit messages to ensure a clear and standardized history:
+
+```
+<type>[optional scope]: <description>
+
+[optional body]
+
+[optional footer(s)]
+```
+
+### Types
+
+- **fix**: A bug fix (correlates with PATCH in SemVer)
+- **feat**: A new feature (correlates with MINOR in SemVer)
+- **docs**: Documentation changes
+- **style**: Code style changes (formatting, etc.; no code change)
+- **refactor**: Code changes that neither fix bugs nor add features
+- **perf**: Performance improvements
+- **test**: Adding or correcting tests
+- **chore**: Changes to the build process, tools, etc.
+
+### Breaking Changes
+
+Indicate breaking changes with either:
+- A `!` after the type/scope: `feat!: introduce breaking API change`
+- A footer: `BREAKING CHANGE: description of the breaking change`
+
+### Examples
+
+```
+feat(transaction): add support for multi-currency operations
+
+Implement ability to process transactions in multiple currencies
+with automatic conversion using latest exchange rates.
+
+Resolves: #123
+```
+
+```
+fix(api): correct error handling in account creation endpoint
+
+BREAKING CHANGE: Error response format has changed to align with
+API standards across the platform.
+```
+
+## Code Review Process
+
+1. **Initial Review**: A project maintainer will review your pull request for basic completeness
+2. **Automated Checks**: CI/CD pipeline will run tests, linting, and other checks
+3. **Detailed Review**: Maintainers will review code for quality, correctness, and architectural fit
+4. **Feedback**: Address any feedback from reviewers
+5. **Approval and Merge**: Once approved, a maintainer will merge your pull request
+
+### Review Criteria
+
+Pull requests are evaluated based on:
+- Code quality and correctness
+- Test coverage
+- Documentation completeness
+- Adherence to coding standards
+- Architectural alignment
+- Performance implications
+- Security considerations
+
+## Documentation Requirements
+
+All code contributions should include appropriate documentation:
+
+1. **Code Comments**: Add clear comments for complex logic or algorithms
+2. **API Documentation**: Update or add documentation for public APIs
+3. **User-Facing Documentation**: Update user documentation for new features
+4. **Examples**: Include examples for new functionality where appropriate
+
+## Issue Tracking
+
+### Creating Issues
+
+When creating a new issue:
+- Use a clear, descriptive title
+- Provide a detailed description with steps to reproduce for bugs
+- Include screenshots or logs if applicable
+- Add appropriate labels (bug, enhancement, documentation, etc.)
+- Link to related issues or PRs
+
+### Issue Labels
+
+Midaz uses the following primary issue labels:
+- `bug`: Something isn't working as expected
+- `enhancement`: New feature or request
+- `documentation`: Documentation improvements
+- `good first issue`: Good for newcomers
+- `help wanted`: Extra attention is needed
+- `question`: Further information is requested
+
+## Release Process
+
+Midaz follows semantic versioning (MAJOR.MINOR.PATCH):
+- **MAJOR**: Incompatible API changes
+- **MINOR**: Backward-compatible functionality additions
+- **PATCH**: Backward-compatible bug fixes
+
+The release process is managed by the core team and involves:
+1. Version bump according to SemVer rules
+2. Changelog generation from conventional commits
+3. Tag creation and release publishing
+4. Binary and container image building and publishing
+
+## Community Guidelines
+
+### Code of Conduct
+
+All contributors are expected to adhere to our [Code of Conduct](../../CODE_OF_CONDUCT.md), which promotes a respectful and inclusive community.
+
+### Communication Channels
+
+- **GitHub Issues**: For bug reports, feature requests, and discussions
+- **Pull Requests**: For code review and contribution discussions
+- **Discord**: For real-time community discussions and support
+
+### Recognition
+
+All contributors are acknowledged in our release notes and on our contributors page.
+
+---
+
+By following these guidelines, you help ensure Midaz is a welcoming, efficient, and valuable project for everyone. Thank you for your contributions and for being a part of our community!
+
+For more general information about contributing, please refer to the [CONTRIBUTING.md](../../CONTRIBUTING.md) file in the project root.
\ No newline at end of file
diff --git a/docs/developer-guide/error-handling.md b/docs/developer-guide/error-handling.md
new file mode 100644
index 00000000..4b87cad8
--- /dev/null
+++ b/docs/developer-guide/error-handling.md
@@ -0,0 +1,425 @@
+# Error Handling
+
+**Navigation:** [Home](../) > [Developer Guide](./) > Error Handling
+
+This document describes the error handling approach in the Midaz system, covering error types, error propagation, and best practices for managing errors.
+
+## Overview
+
+Midaz implements a robust error handling system with these key features:
+
+- **Domain-Specific Error Types**: Clearly defined error types that represent different error categories
+- **Consistent Error Structure**: Standardized error format across the system
+- **Error Translation**: Conversion between different error representations
+- **Client-Friendly Errors**: User-friendly error messages with clear guidance
+- **Developer-Friendly Debugging**: Detailed error information for troubleshooting
+
+This approach allows for precise error handling while maintaining good user experience and debuggability.
+
+## Error Model
+
+### Core Error Types
+
+The system defines a hierarchy of error types in `pkg/errors.go`:
+
+```go
+// EntityNotFoundError records an error indicating an entity was not found
+type EntityNotFoundError struct {
+    EntityType string `json:"entityType,omitempty"`
+    Title      string `json:"title,omitempty"`
+    Message    string `json:"message,omitempty"`
+    Code       string `json:"code,omitempty"`
+    Err        error  `json:"err,omitempty"`
+}
+
+// ValidationError records validation errors
+type ValidationError struct {
+    EntityType string `json:"entityType,omitempty"`
+    Title      string `json:"title,omitempty"`
+    Message    string `json:"message,omitempty"`
+    Code       string `json:"code,omitempty"`
+    Err        error  `json:"err,omitempty"`
+}
+
+// EntityConflictError records when an entity already exists
+type EntityConflictError struct {
+    EntityType string `json:"entityType,omitempty"`
+    Title      string `json:"title,omitempty"`
+    Message    string `json:"message,omitempty"`
+    Code       string `json:"code,omitempty"`
+    Err        error  `json:"err,omitempty"`
+}
+
+// Additional error types:
+// - UnauthorizedError
+// - ForbiddenError
+// - UnprocessableOperationError
+// - HTTPError
+// - InternalServerError
+// - ValidationKnownFieldsError
+// - ValidationUnknownFieldsError
+// - ResponseError
+```
+
+Each error type follows a consistent structure with:
+- **EntityType**: The type of entity involved in the error
+- **Title**: A short title describing the error
+- **Message**: A human-readable message explaining the error
+- **Code**: A unique error code for identification
+- **Err**: The original underlying error (for error wrapping)
+
+### Error Codes
+
+Error codes are defined as constants in `pkg/constant/errors.go` and provide unique identifiers for each error type:
+
+```go
+var (
+    ErrEntityNotFound = errors.New("ENTITY_NOT_FOUND")
+    ErrDuplicateLedger = errors.New("DUPLICATE_LEDGER")
+    ErrInsufficientFunds = errors.New("INSUFFICIENT_FUNDS")
+    // ... many more error codes
+)
+```
+
+These codes are used to identify errors across services and in API responses.
+
+## Error Handling Patterns
+
+### Error Creation
+
+Errors are created using factory functions that ensure consistent error structure:
+
+```go
+// ValidateBusinessError translates error codes to domain error types
+func ValidateBusinessError(err error, entityType string, args ...any) error {
+    // Maps error codes to appropriate error types
+    errorMap := map[error]error{
+        constant.ErrEntityNotFound: EntityNotFoundError{
+            EntityType: entityType,
+            Code:       constant.ErrEntityNotFound.Error(),
+            Title:      "Entity Not Found",
+            Message:    "No entity was found for the given ID...",
+        },
+        // ... many more mappings
+    }
+
+    if mappedError, found := errorMap[err]; found {
+        return mappedError
+    }
+
+    return err
+}
+```
+
+### Error Propagation
+
+Errors flow through the system via:
+
+1. **Return-based propagation**:
+   ```go
+   func (uc *UseCase) GetEntityByID(ctx context.Context, id string) (*Entity, error) {
+       entity, err := uc.repo.FindByID(ctx, id)
+       if err != nil {
+           return nil, pkg.ValidateBusinessError(constant.ErrEntityNotFound, "Entity")
+       }
+       return entity, nil
+   }
+   ```
+
+2. **Error wrapping**:
+   ```go
+   if err != nil {
+       return EntityNotFoundError{
+           EntityType: entityType,
+           Message:    "Entity not found",
+           Err:        err, // Original error is preserved
+       }
+   }
+   ```
+
+3. **Error typing**:
+   ```go
+   // Type switches for handling different error types
+   switch e := err.(type) {
+   case pkg.EntityNotFoundError:
+       // Handle not found
+   case pkg.ValidationError:
+       // Handle validation error
+   }
+   ```
+
+## API Error Handling
+
+### HTTP Error Translation
+
+The system maps domain errors to HTTP status codes and response formats:
+
+```go
+// WithError translates domain errors to HTTP responses
+func WithError(c *fiber.Ctx, err error) error {
+    switch e := err.(type) {
+    case pkg.EntityNotFoundError:
+        return NotFound(c, e.Code, e.Title, e.Message)
+    case pkg.EntityConflictError:
+        return Conflict(c, e.Code, e.Title, e.Message)
+    case pkg.ValidationError:
+        return BadRequest(c, pkg.ValidationKnownFieldsError{
+            Code:    e.Code,
+            Title:   e.Title,
+            Message: e.Message,
+            Fields:  nil,
+        })
+    // ... other error types
+    default:
+        var iErr pkg.InternalServerError
+        _ = errors.As(pkg.ValidateInternalError(err, ""), &iErr)
+        return InternalServerError(c, iErr.Code, iErr.Title, iErr.Message)
+    }
+}
+```
+
+### HTTP Response Formats
+
+HTTP errors are returned in a consistent JSON format:
+
+```json
+{
+  "code": "ENTITY_NOT_FOUND",
+  "title": "Entity Not Found",
+  "message": "No entity was found for the given ID. Please make sure to use the correct ID for the entity you are trying to manage."
+}
+```
+
+For validation errors with field-specific issues:
+
+```json
+{
+  "code": "BAD_REQUEST",
+  "title": "Bad Request",
+  "message": "The server could not understand the request due to malformed syntax. Please check the listed fields and try again.",
+  "fields": {
+    "name": "Name is required",
+    "amount": "Amount must be a positive number"
+  }
+}
+```
+
+## Error Categories
+
+### Resource Errors
+
+- **EntityNotFoundError**: When a requested resource doesn't exist
+- **EntityConflictError**: When a resource already exists (e.g., duplicate name)
+
+### Validation Errors
+
+- **ValidationError**: General validation errors
+- **ValidationKnownFieldsError**: Validation errors for specific fields
+- **ValidationUnknownFieldsError**: When unexpected fields are provided
+
+### Authorization Errors
+
+- **UnauthorizedError**: When authentication is required
+  - This error is returned when the `Authorization` header is missing or invalid
+  - Only occurs when the Authentication Plugin is enabled (`PLUGIN_AUTH_ENABLED=true`)
+- **ForbiddenError**: When the user lacks necessary permissions
+  - This error is returned when the user is authenticated but lacks permissions for the requested resource or action
+
+> **Note:** Authentication in Midaz is handled by a separate plugin. When this plugin is disabled (`PLUGIN_AUTH_ENABLED=false`), authentication errors will not occur. See the [API Reference](../api-reference/README.md#authentication) for more details on authentication.
+
+### Business Logic Errors
+
+- **UnprocessableOperationError**: When an operation fails due to business rules
+- **FailedPreconditionError**: When prerequisites for an operation aren't met
+
+### System Errors
+
+- **InternalServerError**: For unexpected server errors
+- **HTTPError**: For HTTP-related errors
+
+## Database Error Handling
+
+Midaz maps database-specific errors to domain errors for consistent error handling:
+
+```go
+// Mapping of PostgreSQL errors to domain errors
+if errors.Is(err, sql.ErrNoRows) {
+    return pkg.ValidateBusinessError(constant.ErrEntityNotFound, entityType)
+}
+
+var pgErr *pgconn.PgError
+if errors.As(err, &pgErr) {
+    switch pgErr.Code {
+    case "23505": // Unique violation
+        return pkg.ValidateBusinessError(constant.ErrEntityConflictError, entityType)
+    // ... other database error codes
+    }
+}
+```
+
+## Error Handling in Services
+
+In the service layer, errors are mapped to domain-specific errors:
+
+```go
+func (uc *UseCase) CreateAccount(ctx context.Context, input *mmodel.CreateAccountInput) (*mmodel.Account, error) {
+    // Validate the input
+    if err := uc.validate.Struct(input); err != nil {
+        return nil, pkg.ValidateBusinessError(constant.ErrInvalidInput, "Account")
+    }
+
+    // Check if account exists
+    existing, err := uc.repo.FindByAlias(ctx, input.Alias)
+    if err == nil && existing != nil {
+        return nil, pkg.ValidateBusinessError(constant.ErrAliasUnavailability, "Account", input.Alias)
+    }
+
+    // Create the account
+    account, err := uc.repo.Create(ctx, account)
+    if err != nil {
+        return nil, err // Database errors are mapped at the repository level
+    }
+
+    return account, nil
+}
+```
+
+## Validation Error Handling
+
+The system uses structured validation with the go-playground/validator package:
+
+```go
+// Example validation tags on struct fields
+type CreateAccountInput struct {
+    Name     string         `json:"name" validate:"required,max=256"`
+    Alias    *string        `json:"alias" validate:"omitempty,max=100,prohibitedexternalaccountprefix"`
+    Type     string         `json:"type" validate:"required"`
+    Metadata map[string]any `json:"metadata" validate:"dive,keys,keymax=100,endkeys,nonested,valuemax=2000"`
+}
+```
+
+Validation errors are converted to user-friendly messages:
+
+```go
+func translateValidationError(err error) map[string]string {
+    result := make(map[string]string)
+    
+    if validationErrs, ok := err.(validator.ValidationErrors); ok {
+        for _, e := range validationErrs {
+            switch e.Tag() {
+            case "required":
+                result[e.Field()] = "This field is required"
+            case "max":
+                result[e.Field()] = fmt.Sprintf("Exceeds maximum length of %s", e.Param())
+            // ... more validation error translations
+            }
+        }
+    }
+    
+    return result
+}
+```
+
+## Error Logging
+
+Errors are logged with appropriate context:
+
+```go
+if err != nil {
+    logger.WithFields(
+        "entity_id", id,
+        "error", err.Error(),
+    ).Error("Failed to retrieve entity")
+    
+    return nil, pkg.ValidateBusinessError(constant.ErrEntityNotFound, "Entity")
+}
+```
+
+## Observable Errors
+
+Errors are integrated with the observability system:
+
+```go
+if err != nil {
+    libOpentelemetry.HandleSpanError(&span, "Failed to create entity", err)
+    logger.Errorf("Error creating entity: %v", err)
+    return nil, err
+}
+```
+
+## Common Error Patterns
+
+### Entity Not Found Pattern
+
+```go
+entity, err := uc.repo.FindByID(ctx, id)
+if err != nil {
+    if errors.Is(err, sql.ErrNoRows) {
+        return nil, pkg.ValidateBusinessError(constant.ErrEntityNotFound, "Entity")
+    }
+    return nil, err
+}
+```
+
+### Validation Error Pattern
+
+```go
+if err := uc.validate.Struct(input); err != nil {
+    validationErrors := translateValidationError(err)
+    return nil, pkg.ValidateBadRequestFieldsError(nil, validationErrors, "Entity", nil)
+}
+```
+
+### Business Rule Violation Pattern
+
+```go
+if account.Balance < transferAmount {
+    return nil, pkg.ValidateBusinessError(constant.ErrInsufficientFunds, "Account")
+}
+```
+
+### Permission Error Pattern
+
+```go
+if !hasPermission(user, resource) {
+    return nil, pkg.ValidateBusinessError(constant.ErrInsufficientPrivileges, "User")
+}
+```
+
+## Best Practices
+
+1. **Use Domain-Specific Error Types**:
+   Always use the appropriate error type for the situation (e.g., `EntityNotFoundError` for missing resources).
+
+2. **Include Useful Context**:
+   Include the entity type, field names, and other relevant information in error messages.
+
+3. **User-Friendly Messages**:
+   Write error messages that explain what went wrong and how to fix it.
+
+4. **Consistent Error Codes**:
+   Use the predefined error constants from `pkg/constant/errors.go`.
+
+5. **Preserve Original Errors**:
+   Use error wrapping to preserve the original error for debugging.
+
+6. **Type-Based Error Handling**:
+   Use type switches and type assertions to handle different error categories.
+
+7. **Map Low-Level Errors**:
+   Map database and third-party errors to domain-specific errors.
+
+8. **Validate Early**:
+   Perform validation early to avoid unnecessary processing.
+
+9. **Centralized Error Translation**:
+   Use the error factory functions for consistent error creation.
+
+10. **Log Appropriately**:
+    Log errors with sufficient context but avoid logging sensitive information.
+
+## Related Documentation
+
+- [API Error Responses](../api-reference/README.md)
+- [Validation Rules](../developer-guide/validation.md)
+- [Transaction Error Handling](../architecture/data-flow/transaction-lifecycle.md)
diff --git a/docs/developer-guide/shared-packages.md b/docs/developer-guide/shared-packages.md
new file mode 100644
index 00000000..bc46af51
--- /dev/null
+++ b/docs/developer-guide/shared-packages.md
@@ -0,0 +1,218 @@
+# Shared Packages
+
+**Navigation:** [Home](../) > [Developer Guide](../) > Shared Packages
+
+This document describes the shared package architecture in Midaz, explaining how common functionality is organized, reused across different components, and maintained for consistency.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Package Organization](#package-organization)
+- [Core Shared Packages](#core-shared-packages)
+  - [Constants Package](#constants-package)
+  - [Error Handling Package](#error-handling-package)
+  - [Models Package](#models-package)
+  - [Network Utilities Package](#network-utilities-package)
+  - [Gold DSL Package](#gold-dsl-package)
+- [Usage Guidelines](#usage-guidelines)
+- [Dependency Management](#dependency-management)
+- [Testing Shared Code](#testing-shared-code)
+
+## Overview
+
+Midaz employs a shared package architecture to minimize code duplication, ensure consistency across services, and centralize critical functionality. These packages establish common patterns, provide reusable utilities, and define standards that all components follow.
+
+Key benefits of the shared package approach include:
+
+- **Consistency**: Common abstractions provide consistent patterns across services
+- **Reusability**: Core functionality like error handling, models, and HTTP utilities can be shared
+- **Maintainability**: Updates to shared code propagate to all dependent services
+- **Documentation**: Centralized code makes it easier to understand system-wide patterns
+- **Testing**: Shared code receives more comprehensive testing by being used in multiple contexts
+
+## Package Organization
+
+Midaz shared packages are organized under the `/pkg` directory in the project root. The shared code is structured into focused, domain-specific packages:
+
+```
+/pkg
+├── constant/          # System-wide constants and enumerations
+├── errors.go          # Centralized error handling framework
+├── gold/              # Transaction DSL parsing and processing
+│   ├── Transaction.g4 # ANTLR grammar for transaction language
+│   ├── parser/        # Generated parser code
+│   └── transaction/   # Transaction processing utilities
+├── mmodel/            # Shared domain models
+│   ├── account.go     # Account domain model
+│   ├── asset.go       # Asset domain model
+│   └── ...            # Other domain models
+└── net/               # Network-related utilities
+    └── http/          # HTTP utilities, middleware, and response handling
+```
+
+## Core Shared Packages
+
+### Constants Package
+
+The `/pkg/constant` package contains system-wide constants, enumerations, and static values used across different services. These include:
+
+- **Status codes**: Common status values for entities
+- **Error codes**: Standardized error codes for consistent error reporting
+- **Transaction states**: Valid states in transaction processing
+- **HTTP constants**: Common HTTP headers and response codes
+- **Pagination constants**: Parameters for pagination handling
+- **Account types**: Valid account types and prefixes
+
+Example of constants usage:
+
+```go
+// From pkg/constant/transaction.go
+const (
+    CREATED  = "CREATED"
+    APPROVED = "APPROVED"
+    PENDING  = "PENDING"
+    SENT     = "SENT"
+    CANCELED = "CANCELED"
+    DECLINED = "DECLINED"
+)
+```
+
+### Error Handling Package
+
+The `/pkg/errors.go` file defines a comprehensive error handling framework that provides:
+
+- **Structured errors**: Rich error types with contextual information
+- **Error categorization**: Business, validation, and system error types
+- **HTTP mapping**: Automatic mapping to appropriate HTTP status codes
+- **Client-friendly messages**: User-friendly error messages for API responses
+- **Localization support**: Infrastructure for localized error messages
+
+The error system includes specialized error types:
+
+- `EntityNotFoundError`: For when requested resources don't exist
+- `ValidationError`: For invalid input data
+- `EntityConflictError`: For uniqueness constraint violations
+- `UnauthorizedError`: For authentication issues
+- `ForbiddenError`: For permission issues
+- `ValidationKnownFieldsError`: For field-specific validation errors
+
+Example of error handling:
+
+```go
+// Creating a business error with proper context
+func GetAccount(id string) (*Account, error) {
+    account, err := repo.FindByID(id)
+    if err != nil {
+        return nil, pkg.ValidateBusinessError(constant.ErrAccountIDNotFound, "account")
+    }
+    return account, nil
+}
+```
+
+### Models Package
+
+The `/pkg/mmodel` package contains domain models shared across services:
+
+- **Entity definitions**: Core business entities like accounts, assets, etc.
+- **Input/output models**: Standard request/response structures
+- **Validation rules**: Built-in validation logic and annotations
+- **Documentation**: Swagger annotations for API documentation
+
+Example model structure:
+
+```go
+// From pkg/mmodel/account.go
+type Account struct {
+    // Unique identifier for the account (UUID format)
+    ID string `json:"id" example:"00000000-0000-0000-0000-000000000000" format:"uuid"`
+    
+    // Name of the account (max length 256 characters)
+    Name string `json:"name" example:"My Account" maxLength:"256"`
+    
+    // Asset code associated with this account
+    AssetCode string `json:"assetCode" example:"BRL" maxLength:"100"`
+    
+    // Status of the account (active, inactive, pending)
+    Status Status `json:"status"`
+    
+    // Additional custom attributes for the account
+    Metadata map[string]any `json:"metadata,omitempty"`
+    
+    // ... other fields
+}
+```
+
+### Network Utilities Package
+
+The `/pkg/net/http` package provides HTTP-related utilities:
+
+- **Request parsing**: Utilities for parsing and validating requests
+- **Response formatting**: Standardized response structures
+- **Middleware**: Common middleware for authentication, logging, etc.
+- **Pagination**: Helper functions for handling pagination parameters
+- **Error handling**: HTTP-specific error handling and status code mapping
+
+Example of HTTP utilities:
+
+```go
+// ValidateParameters handles common query parameter validation
+func ValidateParameters(params map[string]string) (*QueryHeader, error) {
+    // Validates and normalizes pagination, filtering, sorting parameters
+    // Returns structured query parameters for repository layers
+}
+```
+
+### Gold DSL Package
+
+The `/pkg/gold` package implements the domain-specific language (DSL) for transaction processing:
+
+- **Grammar definition**: ANTLR4 grammar file (`Transaction.g4`)
+- **Parser components**: Generated lexer and parser code
+- **Visitor implementation**: Custom visitor for DSL processing
+- **Transaction validation**: Rules for validating transaction scripts
+- **Error handling**: DSL-specific error reporting
+
+Example of Gold DSL:
+
+```
+(transaction V1
+  (chart-of-accounts-group-name ledger-123)
+  (description "Transfer between accounts")
+  (send USD 1000|2
+    (source
+      (from account-123 :amount USD 1000|2))
+    (distribute
+      (to account-456 :amount USD 1000|2))))
+```
+
+## Usage Guidelines
+
+When working with shared packages, follow these guidelines:
+
+1. **Minimize dependencies**: Shared packages should have minimal external dependencies to avoid circular dependencies
+2. **Backward compatibility**: Changes to shared packages should maintain backward compatibility
+3. **Version management**: Use semantic versioning to signal breaking changes
+4. **Clear documentation**: Document public functions, types, and interfaces thoroughly
+5. **Comprehensive testing**: Ensure high test coverage for shared code
+6. **Centralized definitions**: Don't duplicate definitions that should be shared
+
+## Dependency Management
+
+The Midaz codebase manages dependencies using Go modules. The `go.mod` file at the project root defines all dependencies, including any external libraries used by shared packages.
+
+Shared packages generally avoid external dependencies where possible, but some are necessary:
+
+- **UUID generation**: Uses `github.com/google/uuid`
+- **HTTP handling**: Uses `github.com/gofiber/fiber/v2`
+- **DSL parsing**: Uses `github.com/antlr4-go/antlr/v4`
+- **MongoDB integration**: Uses `go.mongodb.org/mongo-driver/bson`
+
+## Testing Shared Code
+
+Shared packages have their own test files to ensure reliability. For example:
+
+- `errors_test.go` validates the error handling framework
+- `mmodel/account_test.go` tests account model functionality
+- `mmodel/status_test.go` tests status enumeration handling
+
+When adding or modifying shared code, always add corresponding tests to ensure correctness and avoid regressions.
\ No newline at end of file
diff --git a/docs/developer-guide/testing-strategy.md b/docs/developer-guide/testing-strategy.md
new file mode 100644
index 00000000..e8a52550
--- /dev/null
+++ b/docs/developer-guide/testing-strategy.md
@@ -0,0 +1,397 @@
+# Testing Strategy
+
+**Navigation:** [Home](../) > [Developer Guide](../) > Testing Strategy
+
+This document outlines the testing strategy used in the Midaz platform. It covers the different types of tests, testing patterns, and best practices for ensuring code quality and reliability.
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Testing Hierarchy](#testing-hierarchy)
+- [Unit Testing](#unit-testing)
+- [Integration Testing](#integration-testing)
+- [Acceptance/System Testing](#acceptancesystem-testing)
+- [Testing Tools](#testing-tools)
+- [Mocking Strategy](#mocking-strategy)
+- [Test Coverage](#test-coverage)
+- [Best Practices](#best-practices)
+- [Continuous Integration](#continuous-integration)
+
+## Overview
+
+Midaz employs a comprehensive testing strategy that follows industry best practices for financial systems. The primary goals of our testing approach are:
+
+- **Reliability**: Ensure the system behaves correctly under all conditions
+- **Maintainability**: Tests should be easy to understand and maintain
+- **Coverage**: Critical code paths must be thoroughly tested
+- **Isolation**: Tests should be independent and free from side effects
+- **Performance**: Tests should run quickly to provide fast feedback
+- **Documentation**: Tests serve as documentation for expected behavior
+
+The testing approach is particularly rigorous for financial operations, where correctness and data integrity are paramount. Special attention is given to testing all edge cases in financial transaction processing.
+
+## Testing Hierarchy
+
+Midaz follows a testing pyramid approach with different types of tests:
+
+1. **Unit Tests** (~70% of tests)
+   - Test individual functions and methods in isolation
+   - Focus on business logic, domain rules, and edge cases
+   - Run extremely fast and provide immediate feedback
+
+2. **Integration Tests** (~20% of tests)
+   - Test the integration between multiple components
+   - Verify correct interaction between services and external systems
+   - Test database interactions, message queues, and API endpoints
+
+3. **Acceptance/System Tests** (~10% of tests)
+   - Test complete end-to-end scenarios
+   - Simulate user workflows and business processes
+   - Verify the system as a whole meets requirements
+
+This hierarchy ensures comprehensive test coverage while prioritizing fast feedback loops with unit tests.
+
+## Unit Testing
+
+Unit tests are the foundation of the testing strategy and focus on testing small, isolated components of the system.
+
+### Key Principles
+
+- **Isolation**: Dependencies are mocked or stubbed to isolate the unit being tested
+- **Structure**: Tests follow the Arrange-Act-Assert (AAA) pattern
+- **Coverage**: Strive for high code coverage, especially for business logic
+- **Behavior**: Focus on testing behavior, not implementation details
+
+### Example Unit Test
+
+```go
+// Example unit test from components/onboarding/internal/services/command/create-account_test.go
+func TestCreateAccountScenarios(t *testing.T) {
+    // Setup test with mocks
+    setupTest := func(ctrl *gomock.Controller) (*UseCase, *asset.MockRepository, *portfolio.MockRepository, *account.MockRepository, *rabbitmq.MockProducerRepository, *mongodb.MockRepository) {
+        mockAssetRepo := asset.NewMockRepository(ctrl)
+        mockPortfolioRepo := portfolio.NewMockRepository(ctrl)
+        mockAccountRepo := account.NewMockRepository(ctrl)
+        mockRabbitMQ := rabbitmq.NewMockProducerRepository(ctrl)
+        mockMetadataRepo := mongodb.NewMockRepository(ctrl)
+
+        uc := &UseCase{
+            AssetRepo:     mockAssetRepo,
+            PortfolioRepo: mockPortfolioRepo,
+            AccountRepo:   mockAccountRepo,
+            RabbitMQRepo:  mockRabbitMQ,
+            MetadataRepo:  mockMetadataRepo,
+        }
+
+        return uc, mockAssetRepo, mockPortfolioRepo, mockAccountRepo, mockRabbitMQ, mockMetadataRepo
+    }
+
+    // Test cases
+    tests := []struct {
+        name         string
+        input        *mmodel.CreateAccountInput
+        mockSetup    func(mockAssetRepo *asset.MockRepository, mockPortfolioRepo *portfolio.MockRepository, mockAccountRepo *account.MockRepository, mockRabbitMQ *rabbitmq.MockProducerRepository, mockMetadataRepo *mongodb.MockRepository)
+        expectedErr  string
+        expectedName string
+        expectError  bool
+    }{
+        {
+            name: "success with all fields",
+            input: &mmodel.CreateAccountInput{
+                Name:      "Test Account",
+                Type:      "deposit",
+                AssetCode: "USD",
+            },
+            mockSetup: func(mockAssetRepo *asset.MockRepository, mockPortfolioRepo *portfolio.MockRepository, mockAccountRepo *account.MockRepository, mockRabbitMQ *rabbitmq.MockProducerRepository, mockMetadataRepo *mongodb.MockRepository) {
+                mockAssetRepo.EXPECT().
+                    FindByNameOrCode(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
+                    Return(true, nil).AnyTimes()
+
+                mockAccountRepo.EXPECT().
+                    Create(gomock.Any(), gomock.Any()).
+                    DoAndReturn(func(_ context.Context, account *mmodel.Account) (*mmodel.Account, error) {
+                        account.ID = uuid.New().String()
+                        return account, nil
+                    }).AnyTimes()
+            },
+            expectedName: "Test Account",
+            expectError:  false,
+        },
+        // Additional test cases...
+    }
+
+    // Run tests
+    for _, tt := range tests {
+        t.Run(tt.name, func(t *testing.T) {
+            // Arrange
+            ctrl := gomock.NewController(t)
+            defer ctrl.Finish()
+            uc, mockAssetRepo, mockPortfolioRepo, mockAccountRepo, mockRabbitMQ, mockMetadataRepo := setupTest(ctrl)
+            tt.mockSetup(mockAssetRepo, mockPortfolioRepo, mockAccountRepo, mockRabbitMQ, mockMetadataRepo)
+
+            // Act
+            account, err := uc.CreateAccount(ctx, organizationID, ledgerID, tt.input)
+
+            // Assert
+            if tt.expectError {
+                assert.Error(t, err)
+                assert.Contains(t, err.Error(), tt.expectedErr)
+                assert.Nil(t, account)
+            } else {
+                assert.NoError(t, err)
+                assert.NotNil(t, account)
+                assert.Equal(t, tt.expectedName, account.Name)
+            }
+        })
+    }
+}
+```
+
+### Table-Driven Tests
+
+The Midaz codebase favors table-driven tests to efficiently test multiple scenarios within the same test function. This approach:
+
+- Reduces code duplication
+- Makes it easy to add new test cases
+- Provides clear documentation of expected behavior for different inputs
+- Makes test maintenance more manageable
+
+## Integration Testing
+
+Integration tests verify the interaction between different components of the system.
+
+### Key Areas Covered
+
+- **Repository Layer**: Tests database interactions with actual database instances
+- **API Endpoints**: Tests RESTful API endpoints with actual HTTP requests
+- **Message Processing**: Tests message queue producers and consumers
+- **Inter-Service Communication**: Tests communication between services
+
+### Integration Test Example
+
+```go
+//go:build integration
+// +build integration
+
+package integration
+
+import (
+    "fmt"
+    "os/exec"
+    "testing"
+    "gotest.tools/golden"
+)
+
+func TestMDZ(t *testing.T) {
+    var stdout string
+
+    // Test login
+    stdout, _ = cmdRun(t, exec.Command("mdz", "login",
+        "--username", "user_john",
+        "--password", "Lerian@123",
+    ))
+    golden.AssertBytes(t, []byte(stdout), "out_login_flags.golden")
+
+    // Test organization creation
+    stdout, _ = cmdRun(t, exec.Command("mdz", "organization", "create",
+        "--legal-name", "Soul LLCT",
+        "--doing-business-as", "The ledger.io",
+        "--legal-document", "48784548000104",
+        "--code", "ACTIVE",
+        "--description", "Test Ledger",
+        "--line1", "Av Santso",
+        "--line2", "VJ 222",
+        "--zip-code", "04696040",
+        "--city", "West",
+        "--state", "VJ",
+        "--country", "MG",
+        "--metadata", `{"chave1": "valor1", "chave2": 2,  "chave3": true}`,
+    ))
+
+    // Additional tests for other operations...
+}
+```
+
+### Golden Files
+
+The project uses golden files to maintain reference output for integration tests. This approach:
+
+- Provides a stable reference for expected outputs
+- Makes it easy to update expected outputs when necessary
+- Clearly shows the difference between expected and actual output
+
+## Acceptance/System Testing
+
+Acceptance tests verify that the system as a whole meets business requirements. These tests:
+
+- Simulate complete user workflows
+- Test end-to-end business processes
+- Verify the system's interaction with external dependencies
+- Focus on business requirements rather than technical implementation
+
+The Midaz acceptance testing approach includes:
+
+- **API Contract Tests**: Verify API endpoints conform to the OpenAPI specification
+- **End-to-End Workflow Tests**: Test complete financial workflows
+- **Performance Tests**: Verify performance under load for critical operations
+
+## Testing Tools
+
+Midaz employs several testing tools and libraries:
+
+### Core Testing Tools
+
+- **testing**: Go's standard testing package
+- **testify/assert**: Enhanced assertion utilities
+- **gomock**: Mocking framework for interfaces
+- **golden**: Comparison of test output with reference files
+
+### Command-Line Tools
+
+- **go test**: Run tests via command-line
+- **make test**: Midaz Makefile target for running tests
+- **make cover**: Generate test coverage reports
+
+### Example Makefile Test Target
+
+```makefile
+.PHONY: test
+test:
+    $(call title1,"Running tests on all components")
+    $(call check_command,go,"Install Go from https://golang.org/doc/install")
+    @echo "$(CYAN)Starting tests at $$(date)$(NC)"
+    @start_time=$$(date +%s); \
+    test_output=$$(go test -v ./... 2>&1); \
+    exit_code=$$?; \
+    end_time=$$(date +%s); \
+    duration=$$((end_time - start_time)); \
+    echo "$$test_output"; \
+    echo ""; \
+    echo "$(BOLD)$(BLUE)Test Summary:$(NC)"; \
+    echo "$(CYAN)----------------------------------------$(NC)"; \
+    passed=$$(echo "$$test_output" | grep -c "PASS"); \
+    failed=$$(echo "$$test_output" | grep -c "FAIL"); \
+    skipped=$$(echo "$$test_output" | grep -c "\[no test"); \
+    total=$$((passed + failed)); \
+    echo "$(GREEN)✓ Passed:  $$passed tests$(NC)"; \
+    if [ $$failed -gt 0 ]; then \
+        echo "$(RED)✗ Failed:  $$failed tests$(NC)"; \
+    else \
+        echo "$(GREEN)✓ Failed:  $$failed tests$(NC)"; \
+    fi; \
+    echo "$(YELLOW)⚠ Skipped: $$skipped packages [no test files]$(NC)"; \
+    echo "$(BLUE)⏱ Duration: $$(printf '%dm:%02ds' $$((duration / 60)) $$((duration % 60)))$(NC)"; \
+    echo "$(CYAN)----------------------------------------$(NC)"; \
+    if [ $$failed -eq 0 ]; then \
+        echo "$(GREEN)$(BOLD)All tests passed successfully!$(NC)"; \
+    else \
+        echo "$(RED)$(BOLD)Some tests failed. Please check the output above for details.$(NC)"; \
+    fi; \
+    exit $$exit_code
+```
+
+## Mocking Strategy
+
+Midaz uses a consistent approach to mocking dependencies in tests:
+
+### Mock Generation
+
+- **gomock**: Used to generate mock implementations of interfaces
+- **make regenerate-mocks**: Makefile target to regenerate all mocks
+- **make cleanup-regenerate-mocks**: Clean and regenerate all mocks
+
+### Mock Conventions
+
+- Mock files are named with a `_mock.go` suffix
+- Mocks are placed in the same package as the interface they implement
+- Mocks are automatically generated from interface definitions
+
+### Dependency Injection
+
+Midaz employs dependency injection to facilitate testing:
+
+- Services accept dependencies via constructor parameters
+- Interfaces are defined for all external dependencies
+- Production and test code use the same interfaces
+
+## Test Coverage
+
+Test coverage is an important metric but is not the sole criterion for quality:
+
+### Coverage Goals
+
+- **Business Logic**: Target 80%+ coverage
+- **Critical Paths**: Target 90%+ coverage
+- **Infrastructure Code**: Target 60%+ coverage
+
+### Coverage Commands
+
+- **make cover**: Generate coverage report and HTML visualization
+- **make check-tests**: Verify test coverage meets thresholds
+
+### Coverage Exclusions
+
+Some code is explicitly excluded from coverage calculations:
+
+- Generated code (e.g., mocks, protobuf)
+- Main packages and initialization code
+- Pure data structures without behavior
+
+## Best Practices
+
+### Code Organization
+
+- Test files are placed alongside the code they test with a `_test.go` suffix
+- Helper functions are kept in the same test file or in dedicated test utility packages
+- Shared test fixtures are placed in `testdata` directories
+
+### Test Naming
+
+- Test functions are named with a `Test` prefix followed by the function or scenario being tested
+- Table-driven test cases have descriptive names explaining the scenario
+
+### Assertions
+
+- Use `testify/assert` for consistent assertions
+- Prefer specific assertions (e.g., `assert.Equal`) over generic ones
+- Include meaningful error messages in assertions
+
+### Common Test Patterns
+
+- **Repository Tests**: Test database interactions
+- **Service Tests**: Test business logic with mocked dependencies
+- **Handler Tests**: Test API handlers with mocked services
+- **End-to-End Tests**: Test complete workflows
+
+## Continuous Integration
+
+Midaz integrates testing into the CI/CD pipeline:
+
+### CI Pipeline Steps
+
+1. **Lint**: Check code style and identify potential issues
+2. **Unit Tests**: Run all unit tests
+3. **Integration Tests**: Run integration tests in isolated environments
+4. **Coverage**: Generate and check coverage reports
+5. **Build**: Ensure the code can be built successfully
+
+### Pre-Commit Hooks
+
+Local development uses Git hooks to enforce quality:
+
+- **pre-commit**: Run linters and formatters
+- **pre-push**: Run unit tests
+
+These hooks can be installed with:
+
+```bash
+make setup-git-hooks
+```
+
+### Test Automation
+
+Tests are automatically triggered on:
+
+- Pull request creation or updates
+- Merges to main branches
+- Scheduled runs for stability verification
\ No newline at end of file
diff --git a/docs/domain-models/README.md b/docs/domain-models/README.md
new file mode 100644
index 00000000..57a10f5d
--- /dev/null
+++ b/docs/domain-models/README.md
@@ -0,0 +1,91 @@
+# Domain Models
+
+**Navigation:** [Home](../) > Domain Models
+
+This section provides detailed documentation about the domain models used throughout the Midaz platform, including entities, relationships, and architectural patterns.
+
+## Overview
+
+Domain models are the core abstractions that represent the financial concepts within the Midaz platform. These models define:
+
+- The key business entities and their attributes
+- Relationships between different entities
+- Business rules and constraints
+- Behaviors and operations
+
+Understanding these domain models is essential for effective use of the Midaz platform and for building applications that integrate with it.
+
+## Core Domain Concepts
+
+### Financial Entity Hierarchy
+
+Midaz uses a hierarchical structure for organizing financial entities:
+
+- **Organizations**: Top-level container entities (e.g., companies, institutions)
+- **Ledgers**: Financial books within an organization 
+- **Assets**: Currencies or financial instruments (e.g., USD, EUR, BTC)
+- **Segments**: Business segments for categorization
+- **Portfolios**: Collections of related accounts
+- **Accounts**: Individual financial accounts that can hold balances
+
+Each of these entities follows a consistent pattern with:
+- Unique identifiers
+- Core attributes
+- Extensible metadata
+- Relationships to other entities
+
+For more details, see the [Entity Hierarchy](./entity-hierarchy.md) documentation.
+
+### Financial Transactions
+
+Transactions represent the movement of value between accounts and follow double-entry bookkeeping principles:
+
+- Each transaction consists of operations
+- The sum of all operations in a transaction must equal zero
+- Operations can be debits (negative) or credits (positive)
+- Transactions update account balances
+
+For more details, see the [Financial Model](./financial-model.md) documentation.
+
+### Metadata Approach
+
+All entities in Midaz support extensible metadata, which allows for flexible customization without changing the core schema:
+
+- Metadata is stored as key-value pairs
+- Keys and values are strings with size limits
+- Metadata can be used for filtering and categorization
+- Metadata can be updated independently from the main entity attributes
+
+For more details, see the [Metadata Approach](./metadata-approach.md) documentation.
+
+## Domain Model Documentation
+
+- [Entity Hierarchy](./entity-hierarchy.md) - The structure and relationships of financial entities
+- [Financial Model](./financial-model.md) - Double-entry bookkeeping and transaction model
+- [Metadata Approach](./metadata-approach.md) - Extending entities with custom attributes
+
+## Domain-Driven Design
+
+Midaz follows Domain-Driven Design (DDD) principles to ensure that the software model accurately reflects the financial domain:
+
+- **Bounded Contexts**: Clear boundaries between different parts of the system
+- **Ubiquitous Language**: Consistent terminology throughout the codebase and documentation
+- **Aggregates**: Cluster of domain objects treated as a unit
+- **Repositories**: Abstraction for data persistence
+- **Domain Services**: Operations that don't belong to any specific entity
+- **Value Objects**: Immutable objects that represent concepts with no identity
+
+## Data Models vs. Domain Models
+
+It's important to understand the distinction:
+
+- **Data Models**: Focus on storage representation (database tables, fields)
+- **Domain Models**: Focus on business concepts and behaviors (entities, relationships, rules)
+
+Midaz uses a clear separation between these concerns, with repositories and adapters translating between domain models and data storage.
+
+## Related Documentation
+
+- [API Reference](../api-reference/README.md) - API endpoints for working with domain entities
+- [Architecture](../architecture/README.md) - The system architecture that implements these domain models
+- [Tutorials](../tutorials/README.md) - Practical examples of working with domain models
\ No newline at end of file
diff --git a/docs/domain-models/entity-hierarchy.md b/docs/domain-models/entity-hierarchy.md
new file mode 100644
index 00000000..5c4e0664
--- /dev/null
+++ b/docs/domain-models/entity-hierarchy.md
@@ -0,0 +1,294 @@
+# Entity Hierarchy
+
+**Navigation:** [Home](../../) > [Domain Models](../) > Entity Hierarchy
+
+This document describes the main domain entities in Midaz, their relationships, and hierarchical structure.
+
+## Entity Hierarchy Overview
+
+Midaz implements a hierarchical financial entity model that reflects real-world financial structures. For a detailed visualization of this hierarchy, see the [Entity Hierarchy Diagram](../assets/entity-hierarchy-diagram.md).
+
+The hierarchy follows this general pattern:
+
+```
+Organization
+  └── Ledger
+       ├── Asset
+       ├── Segment
+       ├── Portfolio
+       └── Account (linked to an Asset)
+             └── Balance
+```
+
+Additionally, there are transaction-related entities:
+
+```
+Transaction
+  └── Operation (linked to an Account)
+```
+
+## Core Domain Entities
+
+### Organization
+
+Organizations are the top-level entities in the Midaz hierarchy, representing businesses, companies, or divisions.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `legalName`: Official registered name
+- `legalDocument`: Tax ID, registration number, or other legal identifier
+- `doingBusinessAs`: Trading name (optional)
+- `address`: Physical location information
+- `status`: Current state (active, inactive, etc.)
+- `parentOrganizationID`: Parent organization reference (optional)
+
+**Relationships:**
+- Can have parent-child relationships with other Organizations
+- Contains multiple Ledgers
+
+**Validation Rules:**
+- `legalName` and `legalDocument` are required
+- `legalDocument` must follow country-specific formats
+
+### Ledger
+
+Ledgers represent financial record-keeping systems within an Organization.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `name`: Descriptive name
+- `organizationID`: Parent organization reference
+- `status`: Current state
+
+**Relationships:**
+- Belongs to exactly one Organization
+- Contains Assets, Segments, Portfolios, and Accounts
+
+**Validation Rules:**
+- `name` is required
+- `organizationID` must reference a valid Organization
+
+### Asset
+
+Assets represent currencies, cryptocurrencies, or other financial instruments tracked in a Ledger.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `name`: Descriptive name
+- `type`: Asset type (e.g., currency, cryptocurrency, commodity)
+- `code`: Unique asset code (e.g., USD, BTC)
+- `ledgerID`: Parent ledger reference
+- `organizationID`: Parent organization reference
+- `status`: Current state
+
+**Relationships:**
+- Belongs to exactly one Ledger and Organization
+- Referenced by Accounts via `assetCode`
+
+**Validation Rules:**
+- `name` and `code` are required
+- `code` must be unique within a Ledger
+
+### Segment
+
+Segments represent logical divisions within a Ledger, such as business areas or product lines.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `name`: Descriptive name
+- `ledgerID`: Parent ledger reference
+- `organizationID`: Parent organization reference
+- `status`: Current state
+
+**Relationships:**
+- Belongs to exactly one Ledger and Organization
+- Can contain multiple Accounts
+
+**Validation Rules:**
+- `name` is required
+
+### Portfolio
+
+Portfolios represent collections of Accounts grouped for specific purposes.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `name`: Descriptive name
+- `entityID`: Entity identifier (optional)
+- `ledgerID`: Parent ledger reference
+- `organizationID`: Parent organization reference
+- `status`: Current state
+
+**Relationships:**
+- Belongs to exactly one Ledger and Organization
+- Can contain multiple Accounts
+
+**Validation Rules:**
+- `name` is required
+
+### Account
+
+Accounts are the basic units for tracking financial resources, always associated with a specific Asset.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `name`: Descriptive name
+- `parentAccountID`: Parent account reference (optional)
+- `entityID`: Entity identifier (optional)
+- `assetCode`: Reference to associated Asset
+- `organizationID`: Parent organization reference
+- `ledgerID`: Parent ledger reference
+- `portfolioID`: Parent portfolio reference (optional)
+- `segmentID`: Parent segment reference (optional)
+- `status`: Current state
+- `alias`: Alternative identifier (optional)
+- `type`: Account type (e.g., asset, liability, equity, revenue, expense)
+
+**Relationships:**
+- Belongs to exactly one Ledger and Organization
+- Can optionally belong to a Portfolio and/or Segment
+- Can have parent-child relationships with other Accounts
+- Associated with exactly one Asset via `assetCode`
+- Has exactly one Balance
+
+**Validation Rules:**
+- `assetCode` and `type` are required
+- `assetCode` must reference a valid Asset in the same Ledger
+
+### Balance
+
+Balances track the financial position of an Account in a specific Asset.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `accountID`: Parent account reference
+- `assetCode`: Asset code
+- `available`: Available balance amount
+- `onHold`: Amount on hold (unavailable)
+- `scale`: Decimal scale for the balance amount
+- `version`: Optimistic locking version
+- `accountType`: Type of account (mirrors Account.type)
+- `allowSending`: Whether account can send funds
+- `allowReceiving`: Whether account can receive funds
+
+**Relationships:**
+- Belongs to exactly one Account
+- Referenced by Operations
+
+**Lifecycle:**
+- Created automatically when an Account is created
+- Updated by Operations within Transactions
+
+### Transaction
+
+Transactions represent financial operations involving one or more Accounts.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `parentTransactionID`: Parent transaction reference (optional)
+- `description`: Transaction description
+- `template`: Transaction template information
+- `status`: Current state
+- `amount`: Transaction amount
+- `amountScale`: Decimal scale for the amount
+- `assetCode`: Primary asset code for the transaction
+- `chartOfAccountsGroupName`: Accounting group name
+- `ledgerID`: Parent ledger reference
+- `organizationID`: Parent organization reference
+
+**Relationships:**
+- Can have parent-child relationships with other Transactions
+- Contains multiple Operations
+- Associated with a Ledger and Organization
+
+**Validation Rules:**
+- Must have at least one Operation
+- Sum of debit Operations must equal sum of credit Operations
+
+### Operation
+
+Operations represent individual account movements within a Transaction.
+
+**Key Attributes:**
+- `ID`: Unique identifier
+- `transactionID`: Parent transaction reference
+- `description`: Operation description
+- `type`: Operation type (debit or credit)
+- `assetCode`: Asset code
+- `amount`: Operation amount
+- `amountScale`: Decimal scale for the amount
+- `accountID`: Associated account reference
+- `accountAlias`: Account alias (optional)
+- `balanceID`: Associated balance reference
+- `chartOfAccounts`: Accounting classification
+- `organizationID`: Parent organization reference
+- `ledgerID`: Parent ledger reference
+
+**Relationships:**
+- Belongs to exactly one Transaction
+- References exactly one Account and its Balance
+
+**Validation Rules:**
+- `amount` must be positive
+- `type` must be either debit or credit
+- Account must allow sending for debit operations
+- Account must allow receiving for credit operations
+
+## Entity Relationships Diagram
+
+```
+┌─────────────────┐          ┌─────────────────┐
+│   Organization  │◄─────────┤   Organization  │
+└───────┬─────────┘          │     (Parent)    │
+        │                    └─────────────────┘
+        │ 1:n
+        ▼
+┌─────────────────┐
+│     Ledger      │
+└───────┬─────────┘
+        │ 1:n
+        ├───────────────────┬───────────────────┐
+        │                   │                   │
+        ▼                   ▼                   ▼
+┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐
+│      Asset      │ │     Segment     │ │    Portfolio    │
+└───────┬─────────┘ └───────┬─────────┘ └───────┬─────────┘
+        │ 1:n               │ 1:n               │ 1:n
+        │                   │                   │
+        │                   ▼                   ▼
+        │            ┌─────────────────┐
+        └───────────►│     Account     │◄────────┐
+                     └───────┬─────────┘         │
+                             │ 1:1               │
+                             ▼                   │
+                     ┌─────────────────┐         │
+                     │     Balance     │         │
+                     └─────────────────┘         │
+                                                 │
+┌─────────────────┐          ┌─────────────────┐ │
+│   Transaction   │◄─────────┤   Transaction   │ │
+└───────┬─────────┘          │     (Parent)    │ │
+        │                    └─────────────────┘ │
+        │ 1:n                                    │
+        ▼                                        │
+┌─────────────────┐                              │
+│    Operation    │─────────────────────────────┘
+└─────────────────┘
+```
+
+## Lifecycle Management
+
+All entities in Midaz share common lifecycle attributes and behaviors:
+
+- **Creation**: Entities are created with required fields and validated
+- **Updates**: Entities can be updated with full or partial updates
+- **Soft Deletion**: Entities are never physically deleted, only marked as deleted via `deletedAt` field
+- **Status Tracking**: Entities have status fields to track their current state
+- **Metadata**: Entities can have custom metadata as key-value pairs
+- **Timestamps**: All entities track creation and update times
+
+## Next Steps
+
+- Learn more about the [Financial Model](./financial-model.md)
+- Understand how [Metadata](./metadata-approach.md) extends the entity model
+- Explore [Onboarding Service](../components/onboarding/README.md) for entity management implementation
\ No newline at end of file
diff --git a/docs/domain-models/financial-model.md b/docs/domain-models/financial-model.md
new file mode 100644
index 00000000..29c4e512
--- /dev/null
+++ b/docs/domain-models/financial-model.md
@@ -0,0 +1,407 @@
+# Financial Model
+
+**Navigation:** [Home](../) > [Domain Models](./) > Financial Model
+
+This document describes the financial model implemented in the Midaz system, covering the core financial entities, accounting principles, and transaction processing mechanisms.
+
+## Overview
+
+Midaz implements a comprehensive financial accounting model designed to handle complex financial operations with high integrity and flexibility. The model follows double-entry accounting principles and provides a structured approach to managing financial entities, transactions, and balances.
+
+The system enables:
+- Hierarchical organization of financial entities
+- Double-entry accounting with balanced transactions
+- Flexible transaction templates using a domain-specific language
+- Precise balance tracking with optimistic concurrency control
+- Multiple asset types with scale-aware calculations
+
+## Core Financial Entities
+
+### Organization Structure
+
+The financial model starts with a hierarchical organization structure:
+
+1. **Organizations**
+   - Top-level entity representing a business or individual
+   - Can have parent-child relationships
+   - Contains ledgers
+
+2. **Ledgers**
+   - Financial book of records for an organization
+   - Container for accounts, assets, and transactions
+   - Separates financial data into distinct contexts
+
+3. **Portfolios & Segments**
+   - Optional grouping constructs for accounts
+   - Enable classification and reporting
+   - Support organizational hierarchies
+
+### Financial Instruments
+
+Midaz supports different financial instruments through:
+
+1. **Assets**
+   - Represent currencies, cryptocurrencies, or other financial instruments
+   - Properties:
+     - Code/Symbol (e.g., "BRL", "USD", "BTC")
+     - Type (currency, cryptocurrency, etc.)
+     - Scale (decimal precision)
+   - Can be used across multiple accounts
+
+2. **Accounts**
+   - Individual financial entities within a ledger
+   - Properties:
+     - Type (checking, savings, credit card, expense)
+     - Asset code (currency used)
+     - Alias (optional unique identifier, e.g., "@person1")
+     - Hierarchical structure (parent-child relationships)
+   - Associated with specific assets, portfolios, and segments
+
+3. **Balances**
+   - Current financial position of accounts
+   - Properties:
+     - Available amount (actual balance)
+     - On-hold amount (reserved funds)
+     - Version number (for concurrency control)
+     - Permissions (sending/receiving capabilities)
+   - Each account can have multiple balances (one per asset)
+
+## Double-Entry Accounting Model
+
+Midaz implements double-entry accounting through a Balance-Transaction-Operation (BTO) pattern:
+
+### Transactions
+
+Transactions are the core financial events that move value between accounts:
+
+```
+┌─────────────────────────────────────────────┐
+│ Transaction                                 │
+│ - ID                                        │
+│ - Parent Transaction ID (optional)          │
+│ - Description                               │
+│ - Status (CREATED, APPROVED, PENDING, etc.) │
+│ - Asset Code                                │
+│ - Amount                                    │
+│ - Chart of Accounts Group                   │
+│ - Body (Transaction DSL)                    │
+└─────────────────────┬───────────────────────┘
+                      │
+                      │ contains
+                      ▼
+┌─────────────────────────────────────────────┐
+│ Operations (2 or more)                      │
+│ - ID                                        │
+│ - Transaction ID                            │
+│ - Type (DEBIT/CREDIT)                       │
+│ - Account ID                                │
+│ - Amount                                    │
+│ - Balance Before/After                      │
+└─────────────────────────────────────────────┘
+```
+
+Key principles:
+- Every transaction must have balanced debits and credits
+- Transactions record both sides of a financial movement
+- Transactions can be atomic or part of a larger transaction group
+- Transactions follow a hierarchical parent-child relationship
+
+### Balance Processing
+
+Balance management follows these principles:
+
+1. **Atomic Updates**
+   - Balance updates are atomic and version-controlled
+   - Uses optimistic concurrency control with version numbers
+   - Prevents race conditions during concurrent transactions
+
+2. **Balance Tracking**
+   - Operations record pre and post balance states
+   - Provides audit trail of all balance changes
+   - Enables reconciliation and verification
+
+3. **Two-phase Balance Updates**
+   - First phase: validate and lock balances
+   - Second phase: update balances and create operations
+   - Ensures consistency across complex transactions
+
+## Transaction DSL
+
+Midaz implements a domain-specific language (DSL) for defining transactions, providing a flexible way to express complex financial operations:
+
+### DSL Syntax
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS <chart_id>
+  [DESCRIPTION "<description>"]
+  [CODE <code>]
+  [PENDING <true|false>]
+  [METADATA { <key>: <value>, ... }]
+  SEND <asset_code> <amount> <scale>
+    FROM
+      <account> [AMOUNT <asset> <value> <scale> | SHARE <percent> | REMAINING]
+      [RATE <external_id> <from_asset> <to_asset> <value> <scale>]
+      [DESCRIPTION "<description>"]
+      [METADATA { <key>: <value>, ... }]
+    [FROM ...]
+    DISTRIBUTE TO
+      <account> [AMOUNT <asset> <value> <scale> | SHARE <percent> | REMAINING]
+      [RATE <external_id> <from_asset> <to_asset> <value> <scale>]
+      [DESCRIPTION "<description>"]
+      [METADATA { <key>: <value>, ... }]
+    [TO ...]
+```
+
+### Key DSL Features
+
+1. **Multiple Sources and Destinations**
+   - Support for multiple FROM and TO entries
+   - Allows complex multi-party transactions
+
+2. **Flexible Amount Distribution**
+   - Fixed amounts with AMOUNT
+   - Percentages with SHARE
+   - Remaining balances with REMAINING
+
+3. **Currency Conversion**
+   - RATE keyword for currency conversions
+   - Asset rate tracking and conversion
+
+4. **Metadata and Documentation**
+   - Per-transaction and per-operation metadata
+   - Description fields for audit and reporting
+
+### DSL Processing
+
+The DSL is processed using an ANTLR4 parser that:
+1. Validates transaction syntax and semantics
+2. Converts the DSL into executable operations
+3. Ensures balanced debits and credits
+
+## Asset Rates and Currency Handling
+
+The system manages different currencies and assets with:
+
+1. **Asset Rates**
+   - Tracks exchange rates between assets
+   - Supports point-in-time rate snapshots
+   - Used for currency conversion in transactions
+
+2. **Scale Management**
+   - Each asset defines its decimal scale (e.g., 2 for dollars, 8 for Bitcoin)
+   - All calculations preserve proper scale
+   - Amounts stored as integers with scale information
+
+## Event-Driven Processing
+
+Financial operations follow an event-driven pattern:
+
+1. **Asynchronous Transaction Processing**
+   - Account creation triggers balance creation
+   - Transactions are processed asynchronously
+   - Uses message queues (RabbitMQ) for reliability
+
+2. **Idempotent Operations**
+   - Transaction processing is idempotent
+   - Support for retries without duplicate entries
+   - Ensures at-least-once delivery semantics
+
+## Data Model
+
+### Transaction Schema
+
+```sql
+CREATE TABLE IF NOT EXISTS "transaction" (
+    id                                  UUID PRIMARY KEY NOT NULL,
+    parent_transaction_id               UUID,
+    description                         TEXT NOT NULL,
+    template                            TEXT NOT NULL,
+    status                              TEXT NOT NULL,
+    status_description                  TEXT,
+    amount                              BIGINT NOT NULL,
+    amount_scale                        BIGINT NOT NULL,
+    asset_code                          TEXT NOT NULL,
+    chart_of_accounts_group_name        TEXT NOT NULL,
+    ledger_id                           UUID NOT NULL,
+    organization_id                     UUID NOT NULL,
+    body                                JSONB NOT NULL,
+    created_at                          TIMESTAMP WITH TIME ZONE NOT NULL,
+    updated_at                          TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
+    deleted_at                          TIMESTAMP WITH TIME ZONE,
+    FOREIGN KEY (parent_transaction_id) REFERENCES "transaction" (id)
+);
+```
+
+### Operation Schema
+
+```sql
+CREATE TABLE IF NOT EXISTS operation (
+    id                                 UUID PRIMARY KEY NOT NULL,
+    transaction_id                     UUID NOT NULL,
+    description                        TEXT NOT NULL,
+    type                               TEXT NOT NULL,
+    asset_code                         TEXT NOT NULL,
+    amount                             BIGINT NOT NULL DEFAULT 0,
+    amount_scale                       BIGINT NOT NULL DEFAULT 0,
+    available_balance                  BIGINT NOT NULL DEFAULT 0,
+    on_hold_balance                    BIGINT NOT NULL DEFAULT 0,
+    balance_scale                      BIGINT NOT NULL DEFAULT 0,
+    available_balance_after            BIGINT NOT NULL DEFAULT 0,
+    on_hold_balance_after              BIGINT NOT NULL DEFAULT 0,
+    balance_scale_after                BIGINT NOT NULL DEFAULT 0,
+    status                             TEXT NOT NULL,
+    status_description                 TEXT NULL,
+    account_id                         UUID NOT NULL,
+    account_alias                      TEXT NOT NULL,
+    balance_id                         UUID NOT NULL,
+    chart_of_accounts                  TEXT NOT NULL,
+    organization_id                    UUID NOT NULL,
+    ledger_id                          UUID NOT NULL,
+    created_at                         TIMESTAMP WITH TIME ZONE NOT NULL,
+    updated_at                         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
+    deleted_at                         TIMESTAMP WITH TIME ZONE,
+    FOREIGN KEY (transaction_id) REFERENCES "transaction" (id)
+);
+```
+
+### Balance Schema
+
+```go
+type Balance struct {
+    ID             string         `json:"id"`
+    OrganizationID string         `json:"organizationId"`
+    LedgerID       string         `json:"ledgerId"`
+    AccountID      string         `json:"accountId"`
+    Alias          string         `json:"alias"`
+    AssetCode      string         `json:"assetCode"`
+    Available      int64          `json:"available"`
+    OnHold         int64          `json:"onHold"`
+    Scale          int64          `json:"scale"`
+    Version        int64          `json:"version"`
+    AccountType    string         `json:"accountType"`
+    AllowSending   bool           `json:"allowSending"`
+    AllowReceiving bool           `json:"allowReceiving"`
+    CreatedAt      time.Time      `json:"createdAt"`
+    UpdatedAt      time.Time      `json:"updatedAt"`
+    DeletedAt      *time.Time     `json:"deletedAt"`
+    Metadata       map[string]any `json:"metadata,omitempty"`
+}
+```
+
+## Transaction Processing Flow
+
+The transaction processing follows this flow:
+
+1. **Transaction Creation**
+   - Transaction is created with DSL body and metadata
+   - Initial status: CREATED
+
+2. **Transaction Validation**
+   - DSL is parsed and validated
+   - Accounts and balances are verified
+   - Required permissions are checked
+
+3. **Balance Locking**
+   - Balances are locked with SELECT FOR UPDATE
+   - Optimistic concurrency control with version checks
+
+4. **Operation Creation**
+   - Source account operations (debits) are created
+   - Destination account operations (credits) are created
+   - Pre and post balance states are recorded
+
+5. **Balance Updates**
+   - Balances are updated atomically
+   - Version numbers are incremented
+
+6. **Transaction Completion**
+   - Transaction status updated to APPROVED
+   - Metadata is updated
+   - Event notifications may be triggered
+
+## Common Transaction Patterns
+
+### Simple Transfer
+
+A basic transfer between two accounts:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS chart-id-12345
+  DESCRIPTION "Payment for services"
+  SEND BRL 10000 2
+    FROM
+      @person1 AMOUNT BRL 10000 2
+      DESCRIPTION "Payment sent"
+    DISTRIBUTE TO
+      @person2 AMOUNT BRL 10000 2
+      DESCRIPTION "Payment received"
+```
+
+### Multi-party Distribution
+
+Distribution of funds to multiple recipients:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS chart-id-12345
+  DESCRIPTION "Salary payment with benefits split"
+  SEND BRL 500000 2
+    FROM
+      @company AMOUNT BRL 500000 2
+      DESCRIPTION "Salary payment"
+    DISTRIBUTE TO
+      @employee AMOUNT BRL 400000 2
+      DESCRIPTION "Net salary"
+      @tax AMOUNT BRL 80000 2
+      DESCRIPTION "Income tax"
+      @retirement AMOUNT BRL 20000 2
+      DESCRIPTION "Retirement contribution"
+```
+
+### Currency Conversion
+
+Transaction with currency conversion:
+
+```
+TRANSACTION
+  CHART_OF_ACCOUNTS chart-id-12345
+  DESCRIPTION "USD to BRL conversion"
+  SEND USD 10000 2
+    FROM
+      @account-usd AMOUNT USD 10000 2
+      DESCRIPTION "USD withdrawal"
+    DISTRIBUTE TO
+      @account-brl AMOUNT BRL 52000 2
+      RATE rate-id-12345 USD BRL 520 2
+      DESCRIPTION "BRL deposit"
+```
+
+## Best Practices
+
+1. **Balance Consistency**
+   - Always use transactions for balance modifications
+   - Implement proper error handling for failed transactions
+   - Regularly reconcile balances against operations
+
+2. **Asset Management**
+   - Define assets with appropriate scale for precision
+   - Keep exchange rates updated for accurate conversions
+   - Consider precision requirements for financial calculations
+
+3. **Transaction Design**
+   - Use the DSL for complex transaction patterns
+   - Include descriptive information for audit purposes
+   - Structure transactions with appropriate chart of accounts
+
+4. **Concurrency Handling**
+   - Implement optimistic concurrency control
+   - Handle version conflicts gracefully
+   - Use appropriate database isolation levels
+
+## Related Documentation
+
+- [Entity Hierarchy](entity-hierarchy.md)
+- [Transaction Lifecycle](../architecture/data-flow/transaction-lifecycle.md)
+- [Event-Driven Design](../architecture/event-driven-design.md)
diff --git a/docs/domain-models/metadata-approach.md b/docs/domain-models/metadata-approach.md
new file mode 100644
index 00000000..73203613
--- /dev/null
+++ b/docs/domain-models/metadata-approach.md
@@ -0,0 +1,340 @@
+# Metadata Approach
+
+**Navigation:** [Home](../) > [Domain Models](./) > Metadata Approach
+
+This document describes the metadata approach implemented in the Midaz system, explaining how the system uses flexible metadata to extend core entities.
+
+## Overview
+
+Midaz employs a polyglot persistence approach that separates structured entity data from flexible metadata:
+
+- **Core Entity Data**: Stored in PostgreSQL with well-defined schemas
+- **Flexible Metadata**: Stored in MongoDB with a schema-less approach
+
+This design provides a best-of-both-worlds solution that maintains strong relational integrity for core financial data while allowing for extensibility through customizable metadata attributes.
+
+The key advantages of this approach include:
+
+1. **Schema Flexibility**: Entities can be extended with arbitrary metadata without schema migrations
+2. **Data Separation**: Core entity data remains in a strongly-typed relational database
+3. **Extensibility**: New attributes can be added to entities as needed by clients
+4. **Performance**: Each database technology is used for its strengths
+5. **Evolution**: The system can evolve without breaking changes to existing structures
+
+## Metadata Architecture
+
+### Dual-Storage Model
+
+The system separates data storage between two database technologies:
+
+```
+┌─────────────────────────┐     ┌─────────────────────────┐
+│ PostgreSQL              │     │ MongoDB                 │
+│                         │     │                         │
+│ - Core entity data      │     │ - Flexible metadata     │
+│ - Relational integrity  │     │ - Document-based        │
+│ - Transactional data    │     │ - Schema-less           │
+│ - Strong typing         │     │ - Key-value attributes  │
+└──────────┬──────────────┘     └────────────┬────────────┘
+           │                                  │
+           │                                  │
+           │ Common Entity ID (UUID)          │
+           └──────────────┬──────────────────┘
+                          │
+                          ▼
+                 ┌─────────────────┐
+                 │ Combined Entity │
+                 └─────────────────┘
+```
+
+### Metadata Structure
+
+MongoDB stores metadata documents with the following structure:
+
+```json
+{
+  "_id": "ObjectId('...')",
+  "entity_id": "uuid-reference-to-postgres-entity",
+  "entity_name": "EntityTypeName",
+  "metadata": {
+    "custom_key1": "value1",
+    "custom_key2": "value2",
+    "custom_key3": 123
+  },
+  "created_at": "2023-01-01T00:00:00.000Z",
+  "updated_at": "2023-01-01T00:00:00.000Z"
+}
+```
+
+Key components:
+- **entity_id**: UUID reference to the entity in PostgreSQL
+- **entity_name**: Type/name of the entity (e.g., "Account", "Transaction")
+- **metadata**: Flexible key-value map for custom attributes
+
+## Metadata Implementation
+
+### Data Models
+
+All entity models include a metadata field:
+
+```go
+type Account struct {
+    ID             string         `json:"id"`
+    Name           string         `json:"name"`
+    // Other structured fields...
+    
+    // Flexible metadata field for custom attributes
+    Metadata       map[string]any `json:"metadata,omitempty"`
+}
+```
+
+### API Validation
+
+Inputs with metadata undergo validation:
+
+```go
+type CreateAccountInput struct {
+    Name     string         `json:"name" validate:"max=256"`
+    // Other fields...
+    
+    // Metadata with validation rules
+    Metadata map[string]any `json:"metadata" validate:"dive,keys,keymax=100,endkeys,nonested,valuemax=2000"`
+}
+```
+
+The validation enforces:
+- Key length maximum of 100 characters
+- Value length maximum of 2000 characters
+- Flat key-value structure (non-nested)
+
+### MongoDB Adapter Implementation
+
+The system uses a dedicated repository interface for metadata operations:
+
+```go
+// Repository provides an interface for operations related to metadata entities.
+type Repository interface {
+    Create(ctx context.Context, collection string, metadata *Metadata) error
+    FindList(ctx context.Context, collection string, filter http.QueryHeader) ([]*Metadata, error)
+    FindByEntity(ctx context.Context, collection, id string) (*Metadata, error)
+    Update(ctx context.Context, collection, id string, metadata map[string]any) error
+    Delete(ctx context.Context, collection, id string) error
+}
+```
+
+This is implemented with MongoDB-specific code:
+
+```go
+// MetadataMongoDBRepository is a MongoDB-specific implementation.
+type MetadataMongoDBRepository struct {
+    connection *libMongo.MongoConnection
+    Database   string
+}
+```
+
+## Metadata Operations
+
+### Creation Flow
+
+When a new entity is created:
+
+1. The core entity is first stored in PostgreSQL
+2. A metadata document is created in MongoDB with the entity ID reference
+3. The combined entity with metadata is returned to the client
+
+```go
+// Create entity in PostgreSQL
+entityID, err := uc.EntityRepo.Create(ctx, entity)
+
+// Create metadata in MongoDB
+meta := mongodb.Metadata{
+    EntityID:   entityID,
+    EntityName: entityName,
+    Data:       metadata,
+    CreatedAt:  time.Now(),
+    UpdatedAt:  time.Now(),
+}
+err = uc.MetadataRepo.Create(ctx, entityName, &meta)
+```
+
+### Update Flow
+
+When updating metadata:
+
+1. The existing metadata is retrieved from MongoDB
+2. New metadata is merged with existing metadata
+3. The updated metadata is saved back to MongoDB
+
+```go
+// Get existing metadata
+existingMetadata, err := uc.MetadataRepo.FindByEntity(ctx, entityName, entityID)
+
+// Merge metadata
+metadataToUpdate := libCommons.MergeMaps(metadata, existingMetadata.Data)
+
+// Update metadata
+err = uc.MetadataRepo.Update(ctx, entityName, entityID, metadataToUpdate)
+```
+
+### Query Flow
+
+When querying entities with metadata:
+
+1. Metadata is queried from MongoDB based on search criteria
+2. Entity IDs are extracted from the metadata results
+3. Core entities are fetched from PostgreSQL using the IDs
+4. Entities and metadata are combined in the results
+
+```go
+// Get metadata matching criteria
+metadata, err := uc.MetadataRepo.FindList(ctx, entityName, filter)
+
+// Extract entity IDs and create metadata map
+uuids := make([]uuid.UUID, len(metadata))
+metadataMap := make(map[string]map[string]any, len(metadata))
+for i, meta := range metadata {
+    uuids[i] = uuid.MustParse(meta.EntityID)
+    metadataMap[meta.EntityID] = meta.Data
+}
+
+// Get entities from PostgreSQL
+entities, err := uc.EntityRepo.ListByIDs(ctx, uuids)
+
+// Combine entities with their metadata
+for i := range entities {
+    if data, ok := metadataMap[entities[i].ID]; ok {
+        entities[i].Metadata = data
+    }
+}
+```
+
+## Metadata Collections
+
+MongoDB collections are organized by entity type, including:
+
+- **organization**: Organization metadata
+- **ledger**: Ledger metadata
+- **asset**: Asset metadata
+- **segment**: Segment metadata
+- **portfolio**: Portfolio metadata
+- **account**: Account metadata
+- **transaction**: Transaction metadata
+- **operation**: Operation metadata
+
+Each collection stores metadata documents related to its specific entity type.
+
+## Metadata Querying
+
+The system supports querying entities by metadata attributes:
+
+```
+GET /v1/organizations?metadata.custom_key=value
+```
+
+These queries use MongoDB's flexible querying capabilities:
+
+1. Metadata is first searched in MongoDB
+2. Matching entity IDs are used to retrieve entities from PostgreSQL
+3. Results are combined and returned
+
+## Common Metadata Use Cases
+
+### Tagging and Categorization
+
+Metadata can be used for tagging and categorization:
+
+```json
+{
+  "metadata": {
+    "tags": ["important", "high-priority"],
+    "category": "personal",
+    "department": "finance"
+  }
+}
+```
+
+### Custom Attributes
+
+Entities can be extended with custom domain-specific attributes:
+
+```json
+{
+  "metadata": {
+    "risk_level": "high",
+    "credit_score": 720,
+    "customer_type": "premium",
+    "notes": "VIP customer"
+  }
+}
+```
+
+### Integration Data
+
+Metadata can store external system references:
+
+```json
+{
+  "metadata": {
+    "external_id": "SAP-12345",
+    "source_system": "ERP",
+    "integration_timestamp": "2023-01-01T00:00:00Z"
+  }
+}
+```
+
+### Audit Information
+
+Additional audit information beyond standard timestamps:
+
+```json
+{
+  "metadata": {
+    "created_by": "user123",
+    "approved_by": "manager456",
+    "approval_date": "2023-01-02T00:00:00Z",
+    "revision": 3
+  }
+}
+```
+
+## Best Practices
+
+### Metadata Design
+
+1. **Keep Metadata Flat**: Avoid deep nesting in metadata structures
+2. **Use Consistent Keys**: Establish conventions for metadata keys
+3. **Size Considerations**: Keep metadata values concise (under 2000 characters)
+4. **Type Consistency**: Maintain consistent data types for metadata values
+
+### API Usage
+
+1. **Metadata Filtering**: Use metadata for filtering only when necessary
+2. **Partial Updates**: Update only the required metadata fields
+3. **Documentation**: Document metadata fields used by your application
+
+### Performance Considerations
+
+1. **Batch Operations**: Combine metadata operations when possible
+2. **Cached Access**: Consider caching frequently accessed metadata
+3. **Query Optimization**: Limit metadata queries to necessary fields
+
+## Limitations and Constraints
+
+1. **Validation**: Metadata keys are limited to 100 characters maximum
+2. **Value Size**: Metadata values are limited to 2000 characters maximum
+3. **Nesting**: Nested structures are not supported (flat key-value pairs only)
+4. **Transactions**: Cross-database transactions are not supported
+
+## Extending the System
+
+New metadata fields can be added without code changes:
+
+1. Client applications can add new metadata fields as needed
+2. No schema migrations are required
+3. Existing code continues to work without modification
+
+## Related Documentation
+
+- [MongoDB Configuration](../components/infrastructure/mongodb.md)
+- [PostgreSQL Configuration](../components/infrastructure/postgresql.md)
+- [Entity Hierarchy](entity-hierarchy.md)
diff --git a/docs/faq.md b/docs/faq.md
new file mode 100644
index 00000000..e2145e40
--- /dev/null
+++ b/docs/faq.md
@@ -0,0 +1,422 @@
+# Frequently Asked Questions
+
+**Navigation:** [Home](./) > FAQ
+
+This document answers frequently asked questions about the Midaz platform. If you don't find an answer to your question here, please check the [Troubleshooting Guide](./troubleshooting.md) or [contact support](#support-and-community).
+
+## Table of Contents
+
+- [General Questions](#general-questions)
+- [Technical Questions](#technical-questions)
+- [Usage Questions](#usage-questions)
+- [Deployment and Infrastructure](#deployment-and-infrastructure)
+- [Integration Questions](#integration-questions)
+- [Troubleshooting](#troubleshooting)
+- [Development Questions](#development-questions)
+- [Security Questions](#security-questions)
+- [Advanced Features](#advanced-features)
+- [Support and Community](#support-and-community)
+
+## General Questions
+
+### What is Midaz?
+
+Midaz is an enterprise-grade open-source ledger system designed for building financial infrastructure. It provides a robust foundation for creating sophisticated financial applications ranging from fintech startups to enterprise banking solutions.
+
+### What can I build with Midaz?
+
+Midaz can be used to build:
+- Digital banking platforms
+- Payment processing systems
+- Asset management solutions
+- Financial inclusion applications
+- Treasury management systems
+- Blockchain/crypto integration platforms
+- Core banking systems
+
+### What makes Midaz different from other ledger systems?
+
+Midaz differentiates itself through:
+- **Enterprise-ready reliability**: Built for financial workloads with transactional integrity
+- **Developer-friendly architecture**: Modern, modular design with clean APIs
+- **Future-proof multi-asset support**: Handles traditional and digital assets in a unified system
+- **Compliance-focused features**: Audit trails, governance, and regulatory reporting features
+- **Comprehensive documentation**: Extensive guides and resources for all user types
+
+### Is Midaz free to use?
+
+Yes, Midaz is open-source software released under the Apache License 2.0, which allows you to use, modify, and distribute it freely, as long as you include the original copyright and license notice.
+
+### Who develops Midaz?
+
+Midaz is developed by Lerian Studio, with contributions from an active open-source community. The core team has extensive experience in developing ledger and core banking solutions.
+
+## Technical Questions
+
+### What is the architecture of Midaz?
+
+Midaz uses a modular microservices architecture with:
+- Hexagonal design (ports and adapters pattern)
+- CQRS (Command Query Responsibility Segregation)
+- Event-driven communication between services
+- Domain-driven design principles
+- Clear separation between domain logic and external dependencies
+
+### What are the main components of Midaz?
+
+The main components are:
+1. **Onboarding Service** - Manages organizations, ledgers, assets, portfolios, segments, and accounts
+2. **Transaction Service** - Handles transactions, operations, and balances
+3. **MDZ CLI** - Command-line interface for system management
+4. **Infrastructure Layer** - Containerized infrastructure services (databases, message broker, monitoring)
+
+### What databases does Midaz use?
+
+Midaz uses:
+- **PostgreSQL** for primary data storage with a primary-replica setup
+- **MongoDB** for flexible metadata storage
+- **Redis/Valkey** for caching and distributed locking
+
+### How does Midaz handle messaging?
+
+Midaz uses RabbitMQ for message queuing with:
+- Predefined exchanges for different event types
+- Event-driven architecture for transaction lifecycle management
+- Asynchronous processing of operations
+
+### What programming languages are used in Midaz?
+
+Midaz is primarily developed using Go (Golang), which provides:
+- Excellent performance for financial operations
+- Strong typing and compile-time checking
+- Robust concurrency handling
+- Cloud-native capabilities
+
+### Does Midaz support multi-currency transactions?
+
+Yes, Midaz has built-in multi-asset and multi-currency support through:
+- Flexible asset definitions
+- Asset rates for conversion
+- Multi-currency transaction capabilities
+- Currency-specific formatting and handling
+
+### What is the Transaction DSL in Midaz?
+
+Midaz includes a Domain-Specific Language (DSL) for modeling complex transactions. This lisp-like language makes it easier to define sophisticated financial operations through a specialized grammar that supports:
+- Multi-source transactions
+- Percentage-based distributions
+- Currency conversions
+- Custom metadata
+
+## Usage Questions
+
+### How do I set up Midaz locally?
+
+To set up Midaz locally:
+1. Ensure Docker and Docker Compose are installed
+2. Clone the repository: `git clone https://github.com/LerianStudio/midaz`
+3. Set up environment variables: `make set-env`
+4. Start all services: `make up`
+
+Detailed instructions are available in the [Installation Guide](./getting-started/installation.md).
+
+### How do I interact with Midaz?
+
+You can interact with Midaz through:
+1. The MDZ CLI (command-line interface)
+2. RESTful APIs exposed by the services
+3. Client libraries in various programming languages
+
+### How do I create my first financial structure?
+
+To create a basic financial structure:
+1. Create an organization
+2. Create a ledger within the organization
+3. Define assets (currencies)
+4. Create portfolios and segments
+5. Create accounts
+
+See the [Creating Financial Structures](./tutorials/creating-financial-structures.md) tutorial for step-by-step instructions.
+
+### How do I create a transaction in Midaz?
+
+Transactions can be created using:
+1. The Transaction Service API with JSON payload
+2. The Transaction DSL for more complex transactions
+3. Client libraries that abstract the API
+
+See the [Implementing Transactions](./tutorials/implementing-transactions.md) tutorial for details.
+
+### What are the core entity types in Midaz?
+
+The main entity types in Midaz are:
+- **Organizations** - Top-level entities representing companies or institutions
+- **Ledgers** - Financial record-keeping systems within organizations
+- **Assets** - Currencies or value stores (USD, EUR, BTC, etc.)
+- **Portfolios** - Collections of accounts (e.g., for customers or departments)
+- **Segments** - Categories for grouping accounts (e.g., business lines)
+- **Accounts** - Basic units for tracking financial resources
+- **Transactions** - Financial movements with debits and credits
+
+## Deployment and Infrastructure
+
+### What are the deployment options for Midaz?
+
+Midaz is designed to be cloud-native and cloud-agnostic, supporting:
+- Any cloud provider (AWS, GCP, Azure, etc.)
+- On-premises deployment
+- Hybrid cloud setups
+- Kubernetes orchestration
+- Docker Compose for simpler deployments
+
+### What are the minimum system requirements?
+
+For a basic development setup:
+- 4GB RAM
+- 2 CPU cores
+- 20GB storage
+- Docker and Docker Compose
+
+Production requirements depend on your expected transaction volume and number of accounts.
+
+### How does Midaz ensure high availability?
+
+Midaz supports high availability through:
+- PostgreSQL with primary-replica setup
+- MongoDB replica sets
+- Distributed message queuing
+- Stateless service design for horizontal scaling
+- Health checks and automatic recovery
+
+### How is monitoring handled in Midaz?
+
+Midaz includes comprehensive monitoring with:
+- Grafana dashboards for visualization
+- OpenTelemetry for metrics, traces, and logs collection
+- Health checks for all services
+- Alerting capabilities
+- Performance metrics for all components
+
+See the [Monitoring](./components/infrastructure/monitoring.md) documentation for details.
+
+## Integration Questions
+
+### How can I integrate Midaz with existing systems?
+
+Midaz provides:
+- Comprehensive RESTful APIs
+- Webhook capabilities
+- Message queue integration
+- Flexible metadata for cross-system references
+- Client libraries for various languages
+
+### Does Midaz support webhooks for events?
+
+Yes, Midaz uses an event-driven architecture that supports webhooks, allowing external systems to receive notifications about transactions and other events.
+
+### Can Midaz integrate with blockchain or cryptocurrency systems?
+
+Yes, Midaz is designed to bridge traditional finance and digital assets with:
+- Support for crypto assets
+- Flexible asset model
+- Integration capabilities with blockchain systems
+- Metadata for cross-chain references
+
+### How can I extend Midaz functionality?
+
+You can extend Midaz through:
+1. Creating plugins for integrations
+2. Implementing custom governance flows
+3. Adding new API endpoints
+4. Defining custom transaction types
+5. Contributing to the core codebase
+
+## Troubleshooting
+
+### Why are my transactions failing?
+
+Common reasons for transaction failures:
+- Insufficient balance in source accounts
+- Invalid account or entity IDs
+- Asset mismatch between source and destination
+- Business rule violations
+- Account status issues (inactive accounts)
+
+See the [Troubleshooting Guide](./troubleshooting.md#transaction-processing-issues) for detailed diagnostics.
+
+### How do I debug issues in Midaz?
+
+You can use the following approaches:
+1. Check logs with `make check-logs`
+2. Run tests with `make test`
+3. Use the CLI with verbose flags
+4. Inspect the state in databases
+5. Use the monitoring dashboards
+
+### What should I do if services won't start?
+
+If services won't start:
+1. Check Docker logs for errors
+2. Verify environment variables are correctly set
+3. Ensure required ports are available
+4. Check disk space and system resources
+5. Look for dependency issues between services
+
+See the [Infrastructure Setup Problems](./troubleshooting.md#infrastructure-setup-problems) section in the Troubleshooting Guide.
+
+### How do I handle transaction concurrency issues?
+
+Midaz uses optimistic concurrency control. To handle concurrency issues:
+1. Implement retry logic in applications
+2. Use idempotency keys for transactions
+3. Design transactions to minimize contention
+4. Use the on-hold feature for funds reservation
+
+## Development Questions
+
+### How do I contribute to Midaz?
+
+To contribute:
+1. Fork the repository
+2. Create a feature branch
+3. Make your changes following the contribution guidelines
+4. Sign your commits
+5. Submit a pull request
+
+See the [Contributing](./developer-guide/contributing.md) guide for detailed instructions.
+
+### What are the coding standards for Midaz?
+
+Midaz follows:
+- Go coding conventions and best practices
+- Revive for linting
+- Test coverage requirements
+- Conventional Commit format for commit messages
+- Code review process for all changes
+
+### How do I run tests?
+
+Run tests with:
+```bash
+# Run all tests
+make test
+
+# Run specific component tests
+cd components/transaction && make test
+cd components/onboarding && make test
+cd components/mdz && make test
+```
+
+See the [Testing Strategy](./developer-guide/testing-strategy.md) for more information.
+
+### How is versioning handled in Midaz?
+
+Midaz follows semantic versioning (MAJOR.MINOR.PATCH):
+- Major version for incompatible API changes
+- Minor version for backward-compatible features
+- Patch version for backward-compatible bug fixes
+
+Version information is accessible via the `mdz version` command or through API version endpoints.
+
+## Security Questions
+
+### How does Midaz handle authentication?
+
+Midaz uses:
+- Token-based authentication
+- Support for OAuth 2.0
+- JWT for secure token transfer
+- Automatic token refresh
+- Role-based access control
+
+### What encryption does Midaz use?
+
+Midaz ensures data security through:
+- TLS for all connections
+- Secure storage of sensitive information
+- Password hashing with industry-standard algorithms
+- Configurable encryption for data at rest
+
+### Is Midaz compliant with financial regulations?
+
+Midaz is designed to be SOC-2, GDPR, and PCI-DSS ready with:
+- Immutable transaction records
+- Comprehensive audit trails
+- Access controls and permissions
+- Customizable governance workflows
+
+### How do I implement custom compliance workflows?
+
+You can implement custom compliance workflows through:
+1. Transaction approval flows
+2. Metadata validation rules
+3. Custom validations in transaction creation
+4. Integration with external compliance systems
+
+## Advanced Features
+
+### How does Midaz handle double-entry accounting?
+
+Midaz implements true double-entry accounting where:
+- Every transaction ensures credits equal debits
+- All operations are recorded with two sides
+- Financial integrity is maintained at all times
+- Audit trails preserve the full transaction history
+
+### What is the difference between account types in Midaz?
+
+Midaz supports various account types like:
+- **Checking/Deposit** - For regular transactions
+- **Savings** - For interest-bearing accounts
+- **Credit Card** - For credit facilities
+- **Expense** - For tracking expenses
+- **Revenue** - For tracking income
+- **Asset** - For tracking assets
+- **Liability** - For tracking liabilities
+
+Each type has specific behaviors and uses within the financial hierarchy.
+
+### How do I implement multi-currency transactions?
+
+Multi-currency transactions are implemented through:
+1. Asset rates that define conversion relationships
+2. Transaction DSL with conversion specifications
+3. Currency-specific account configurations
+4. Automatic conversion during transactions
+
+### Can I define transaction templates?
+
+Yes, you can create transaction templates using the Transaction DSL and reuse them with different parameters for recurring transaction patterns.
+
+## Support and Community
+
+### Where can I get help with Midaz?
+
+Help resources include:
+- [Documentation](https://docs.midaz.io)
+- [GitHub Discussions](https://github.com/LerianStudio/midaz/discussions)
+- [Discord Community](https://discord.gg/midaz)
+- [Stack Overflow](https://stackoverflow.com/questions/tagged/midaz)
+
+### How do I report a bug or security issue?
+
+- For bugs: Create an issue on the [GitHub repository](https://github.com/LerianStudio/midaz/issues)
+- For security issues: Follow the process in the [Security Policy](./SECURITY.md)
+
+### Is commercial support available?
+
+Yes, Lerian Studio offers commercial support options, including:
+- Service level agreements (SLAs)
+- Implementation assistance
+- Custom development
+- Training and workshops
+
+Contact support@lerian.io for details.
+
+### How can I stay updated on Midaz development?
+
+Stay updated through:
+- [Midaz Blog](https://midaz.io/blog)
+- [Twitter/X](https://twitter.com/MidazFinance)
+- GitHub repository watch/star
+- Subscribing to the newsletter
\ No newline at end of file
diff --git a/docs/getting-started/README.md b/docs/getting-started/README.md
new file mode 100644
index 00000000..a8b785ef
--- /dev/null
+++ b/docs/getting-started/README.md
@@ -0,0 +1,54 @@
+# Getting Started
+
+**Navigation:** [Home](../) > Getting Started
+
+Welcome to Midaz! This section provides everything you need to start using the Midaz platform, from installation to your first transaction.
+
+## Introduction
+
+Midaz is a modern, open-source platform for building financial applications. It provides a robust infrastructure for managing financial entities, processing transactions, and maintaining ledgers with double-entry bookkeeping principles.
+
+Key features include:
+
+- **Hierarchical Entity Model**: Organizations, ledgers, assets, and accounts
+- **Double-Entry Transactions**: Ensures financial data integrity
+- **Metadata Support**: Extend entities with custom attributes
+- **Event-Driven Architecture**: React to financial events in real-time
+- **API-First Design**: RESTful APIs for all functionality
+
+## Getting Started Guides
+
+This section provides step-by-step guides to help you get up and running with Midaz:
+
+- [Installation](./installation.md) - Instructions for installing and configuring Midaz
+- [Quickstart](./quickstart.md) - A quick guide to create your first transaction
+- [Architecture Overview](./architecture-overview.md) - High-level overview of the Midaz architecture
+
+## System Requirements
+
+Minimum requirements for running Midaz:
+
+- **Runtime**: Go 1.24.1 or higher
+- **Docker**: Docker Engine 20.10.x or higher
+- **Docker Compose**: Docker Compose 2.0 or higher
+- **Memory**: 4GB RAM minimum (8GB recommended)
+- **Storage**: 10GB available disk space
+- **Operating Systems**: Linux, macOS, or Windows with WSL2
+
+## Development Environment
+
+For development:
+
+- **IDE**: Any modern IDE with Go support (VS Code, GoLand, etc.)
+- **Git**: Git 2.20 or higher
+- **Make**: GNU Make 4.0 or higher
+
+## Next Steps
+
+After getting familiar with the basics, you can explore:
+
+- [Tutorials](../tutorials/README.md) for guided walkthroughs of specific tasks
+- [API Reference](../api-reference/README.md) for detailed API documentation
+- [Developer Guide](../developer-guide/README.md) for contributing to Midaz
+
+If you run into issues, check the [Troubleshooting](../troubleshooting.md) guide or reach out to the community on [Discord](https://discord.gg/qtKU6Zwq5b).
\ No newline at end of file
diff --git a/docs/getting-started/architecture-overview.md b/docs/getting-started/architecture-overview.md
new file mode 100644
index 00000000..336b55cd
--- /dev/null
+++ b/docs/getting-started/architecture-overview.md
@@ -0,0 +1,12 @@
+# Architecture Overview
+
+**Navigation:** [Home](../) > [Getting Started](../) > Architecture Overview
+
+*Content for Architecture Overview will be documented here.*
+
+## Table of Contents
+
+- [Overview](#overview)
+- [Details](#details)
+- [Examples](#examples)
+- [References](#references)
diff --git a/docs/getting-started/installation.md b/docs/getting-started/installation.md
new file mode 100644
index 00000000..713fdaeb
--- /dev/null
+++ b/docs/getting-started/installation.md
@@ -0,0 +1,194 @@
+# Installation
+
+**Navigation:** [Home](../../) > [Getting Started](../) > Installation
+
+This guide provides step-by-step instructions for installing and setting up Midaz in your environment.
+
+## Prerequisites
+
+Before installing Midaz, ensure you have the following prerequisites installed:
+
+- **Go 1.24.1 or higher** - [Download and install from golang.org](https://golang.org/doc/install)
+- **Docker and Docker Compose** - [Download and install from docker.com](https://docs.docker.com/get-docker/)
+- **Git** - [Download and install from git-scm.com](https://git-scm.com/downloads)
+
+## Installation Steps
+
+### 1. Clone the Repository
+
+```bash
+git clone https://github.com/LerianStudio/midaz
+cd midaz
+```
+
+### 2. Set Up Environment Variables
+
+The Midaz system uses environment variables for configuration. Default environment files are provided as templates.
+
+```bash
+make set-env
+```
+
+This command copies all `.env.example` files to `.env` in each component directory. You may need to modify these files to match your environment.
+
+### 3. Start All Services
+
+To start all Midaz services using Docker Compose:
+
+```bash
+make up
+```
+
+This command will:
+- Start all infrastructure services (PostgreSQL, MongoDB, RabbitMQ, etc.)
+- Start the Onboarding service
+- Start the Transaction service
+
+### 4. Verify Installation
+
+To verify that all services are running correctly:
+
+```bash
+make logs
+```
+
+This will show logs from all running services. Ensure there are no error messages.
+
+You can also check the status of all running containers:
+
+```bash
+docker ps
+```
+
+## Component-specific Installation
+
+### MDZ CLI
+
+To build and install the MDZ CLI locally:
+
+```bash
+cd components/mdz
+make build
+make install-local
+```
+
+After installation, you can use the `mdz` command to interact with the Midaz services.
+
+## Configuration
+
+### Default Ports
+
+The following default ports are used by Midaz services:
+
+| Service               | Port  |
+|-----------------------|-------|
+| Onboarding Service    | 3000  |
+| Transaction Service   | 3001  |
+| PostgreSQL Primary    | 5701  |
+| PostgreSQL Replica    | 5702  |
+| MongoDB               | 5703  |
+| Redis                 | 5704  |
+| RabbitMQ Web UI       | 3003  |
+| RabbitMQ AMQP         | 3004  |
+| Grafana               | 3100  |
+
+### Environment Configuration
+
+Each component has its own `.env` file with specific configuration options:
+
+- **Infra** - Database connection details, message queue settings
+- **Onboarding** - Service-specific configurations
+- **Transaction** - Service-specific configurations
+- **MDZ CLI** - Client configuration and endpoints
+
+## Development Setup
+
+For a complete development environment setup, run:
+
+```bash
+make dev-setup
+```
+
+This will:
+- Set up git hooks
+- Configure development environments for all components
+- Install necessary dependencies
+
+## Common Operations
+
+### Starting and Stopping Services
+
+```bash
+# Start all services
+make up
+
+# Stop all services
+make down
+
+# Start all containers without recreating them
+make start
+
+# Stop all containers
+make stop
+
+# Restart all containers
+make restart
+```
+
+### Running Tests
+
+```bash
+# Run all tests
+make test
+
+# Generate test coverage report
+make cover
+```
+
+### Code Quality
+
+```bash
+# Run linters
+make lint
+
+# Format code
+make format
+
+# Run security checks
+make sec
+```
+
+## Troubleshooting
+
+### Docker Issues
+
+If you encounter issues with Docker containers:
+
+```bash
+# Clean all Docker resources
+make clean-docker
+
+# Rebuild and restart all services
+make rebuild-up
+```
+
+### Missing Environment Files
+
+If you see errors about missing configuration:
+
+```bash
+# Re-create environment files
+make set-env
+```
+
+### Port Conflicts
+
+If you see errors about ports being in use, check for other applications using the ports listed in the "Default Ports" section above. You can modify the port mappings in the `.env` files for each component.
+
+## Next Steps
+
+After successfully installing Midaz, you can:
+
+- Continue to the [Quickstart Guide](./quickstart.md) for basic usage examples
+- Explore the [Architecture Overview](./architecture-overview.md) to understand how Midaz works
+- Check out the [Tutorials](../tutorials/) for step-by-step guides on specific tasks
\ No newline at end of file
diff --git a/docs/getting-started/quickstart.md b/docs/getting-started/quickstart.md
new file mode 100644
index 00000000..b3bd03f4
--- /dev/null
+++ b/docs/getting-started/quickstart.md
@@ -0,0 +1,129 @@
+# Quickstart
+
+**Navigation:** [Home](../../) > [Getting Started](./README.md) > Quickstart
+
+This guide will help you get started with Midaz quickly. It covers the basic workflow for setting up financial structures and creating transactions.
+
+## Prerequisites
+
+Before starting, ensure you have:
+
+- Completed the [Installation](./installation.md) process
+- The MDZ CLI installed and configured
+- Basic understanding of financial accounting concepts
+
+## Quick Setup
+
+### 1. Login to Midaz
+
+```bash
+mdz login
+```
+
+This will authenticate you with the Midaz platform. Follow the prompts to complete the login process.
+
+### 2. Create Your Financial Structure
+
+Midaz uses a hierarchical structure for financial entities. Let's create a basic structure.
+
+#### Create an Organization
+
+```bash
+mdz organization create --name "My Company" --code "MYCO" --description "My test organization"
+```
+
+Note the organization ID returned in the response. You'll need it for subsequent commands.
+
+#### Create a Ledger
+
+```bash
+mdz ledger create --organization-id $ORG_ID --name "Main Ledger" --code "MAIN" --description "Main financial ledger"
+```
+
+Note the ledger ID returned in the response.
+
+#### Create an Asset
+
+```bash
+mdz asset create --organization-id $ORG_ID --ledger-id $LEDGER_ID --code "USD" --name "US Dollar" --symbol "$" --decimals 2
+```
+
+#### Create Accounts
+
+Create two accounts to test transactions:
+
+```bash
+# Create source account
+mdz account create --organization-id $ORG_ID --ledger-id $LEDGER_ID --name "Source Account" --alias "@source" --type "checking"
+
+# Create destination account
+mdz account create --organization-id $ORG_ID --ledger-id $LEDGER_ID --name "Destination Account" --alias "@destination" --type "savings"
+```
+
+### 3. Create Your First Transaction
+
+Now that you have accounts set up, you can create a transaction between them.
+
+#### Using the Transaction DSL
+
+Create a file named `transaction.dsl` with the following content:
+
+```
+transaction "First Transfer" {
+  description "Transfer from source to destination"
+  code "TRANSFER"
+  
+  send USD 100.00 {
+    source {
+      from "@source" {
+        chart_of_accounts "1000"
+        description "Withdrawal from source account"
+      }
+    }
+    
+    distribute {
+      to "@destination" {
+        chart_of_accounts "2000"
+        description "Deposit to destination account"
+      }
+    }
+  }
+}
+```
+
+Then execute the transaction:
+
+```bash
+curl -X POST "http://localhost:3001/v1/organizations/$ORG_ID/ledgers/$LEDGER_ID/transactions/dsl" \
+  -H "Content-Type: multipart/form-data" \
+  -F "transaction=@transaction.dsl"
+```
+
+### 4. Check Account Balances
+
+You can now check the balances of your accounts:
+
+```bash
+# Check source account balance
+curl "http://localhost:3001/v1/organizations/$ORG_ID/ledgers/$LEDGER_ID/accounts/@source/balances"
+
+# Check destination account balance
+curl "http://localhost:3001/v1/organizations/$ORG_ID/ledgers/$LEDGER_ID/accounts/@destination/balances"
+```
+
+The source account should show -100.00 USD, and the destination account should show +100.00 USD.
+
+## Next Steps
+
+Congratulations! You've completed the basic workflow for Midaz. Here are some next steps to explore:
+
+- Learn about more complex [transaction patterns](../tutorials/implementing-transactions.md)
+- Understand the [entity hierarchy](../domain-models/entity-hierarchy.md) in depth
+- Explore [API integration](../tutorials/api-integration-examples.md)
+- Set up [metadata fields](../domain-models/metadata-approach.md) for custom attributes
+
+For more detailed documentation, refer to:
+
+- [API Reference](../api-reference/README.md) for all available endpoints
+- [Architecture Overview](./architecture-overview.md) for understanding the system design
+- [Tutorials](../tutorials/README.md) for step-by-step guides
\ No newline at end of file
diff --git a/docs/reference/README.md b/docs/reference/README.md
new file mode 100644
index 00000000..08bf11e1
--- /dev/null
+++ b/docs/reference/README.md
@@ -0,0 +1,12 @@
+# Reference Materials
+
+**Navigation:** [Home](../) > Reference Materials
+
+This section provides comprehensive reference materials for the Midaz platform, including terminology, status codes, error codes, and configuration parameters.
+
+## In This Section
+
+- [Glossary](./glossary.md) - Definitions of domain-specific terms used throughout Midaz
+- [Status Codes](./status-codes.md) - Complete list of status codes used across the system
+- [Error Codes](./error-codes.md) - Reference for error codes returned by APIs
+- [Configuration Parameters](./configuration.md) - Documentation of environment variables and configuration options
\ No newline at end of file
diff --git a/docs/reference/configuration.md b/docs/reference/configuration.md
new file mode 100644
index 00000000..f251300d
--- /dev/null
+++ b/docs/reference/configuration.md
@@ -0,0 +1,188 @@
+# Configuration Parameters
+
+**Navigation:** [Home](../../) > [Reference Materials](../README.md) > Configuration Parameters
+
+This document provides a comprehensive reference for environment variables and configuration parameters used in the Midaz platform.
+
+## Configuration Structure
+
+Midaz uses environment variables for configuration, loaded from `.env` files for each component. Default values are provided in `.env.example` files.
+
+## Common Configuration Parameters
+
+These parameters are common across multiple components.
+
+### Environment Settings
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `ENV_NAME` | Environment name | `development` | `production`, `staging`, `development` |
+| `VERSION` | Service version | `v2.0.0` | `v2.1.0` |
+
+### Server Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `SERVER_PORT` | HTTP server port | Varies by service | `3000` (Onboarding), `3001` (Transaction) |
+| `SERVER_ADDRESS` | Server address with port | `:${SERVER_PORT}` | `:3000` |
+
+### Database Configuration (PostgreSQL)
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `DB_HOST` | Primary database hostname | `midaz-postgres-primary` | `localhost` |
+| `DB_PORT` | Primary database port | `5701` | `5432` |
+| `DB_USER` | Database username | `midaz` | `postgres` |
+| `DB_PASSWORD` | Database password | `lerian` | `strong_password` |
+| `DB_NAME` | Database name | Varies by service | `onboarding`, `transaction` |
+| `DB_MAX_OPEN_CONNS` | Maximum open connections | `3000` | `1000` |
+| `DB_MAX_IDLE_CONNS` | Maximum idle connections | `3000` | `1000` |
+
+### Replica Database Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `DB_REPLICA_HOST` | Replica database hostname | `midaz-postgres-replica` | `localhost` |
+| `DB_REPLICA_PORT` | Replica database port | `5702` | `5433` |
+| `DB_REPLICA_USER` | Replica database username | `midaz` | `postgres_read` |
+| `DB_REPLICA_PASSWORD` | Replica database password | `lerian` | `read_password` |
+| `DB_REPLICA_NAME` | Replica database name | Varies by service | `onboarding`, `transaction` |
+
+### MongoDB Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `MONGO_URI` | MongoDB connection URI scheme | `mongodb` | `mongodb+srv` |
+| `MONGO_HOST` | MongoDB hostname | `midaz-mongodb` | `localhost` |
+| `MONGO_PORT` | MongoDB port | `5703` | `27017` |
+| `MONGO_USER` | MongoDB username | `midaz` | `mongo_user` |
+| `MONGO_PASSWORD` | MongoDB password | `lerian` | `mongo_password` |
+| `MONGO_NAME` | MongoDB database name | Varies by service | `onboarding`, `transaction` |
+| `MONGO_MAX_POOL_SIZE` | Maximum connection pool size | `1000` | `500` |
+
+### Redis Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `REDIS_HOST` | Redis hostname | `midaz-redis` | `localhost` |
+| `REDIS_PORT` | Redis port | `5704` | `6379` |
+| `REDIS_USER` | Redis username | `midaz` | `redis_user` |
+| `REDIS_PASSWORD` | Redis password | `lerian` | `redis_password` |
+
+### RabbitMQ Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `RABBITMQ_URI` | RabbitMQ connection URI scheme | `amqp` | `amqp` |
+| `RABBITMQ_HOST` | RabbitMQ hostname | `midaz-rabbitmq` | `localhost` |
+| `RABBITMQ_PORT_HOST` | RabbitMQ host port | `3003` | `5672` |
+| `RABBITMQ_PORT_AMQP` | RabbitMQ AMQP port | `3004` | `5673` |
+| `RABBITMQ_DEFAULT_USER` | RabbitMQ username | Varies by service | `rabbitmq_user` |
+| `RABBITMQ_DEFAULT_PASS` | RabbitMQ password | `lerian` | `rabbitmq_password` |
+| `RABBITMQ_NUMBERS_OF_WORKERS` | Number of worker processes | `5` | `10` |
+| `RABBITMQ_NUMBERS_OF_PREFETCH` | Prefetch count for workers | `10` | `20` |
+
+### Logging Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `LOG_LEVEL` | Logging level | `debug` | `info`, `warn`, `error` |
+
+### OpenTelemetry Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `ENABLE_TELEMETRY` | Enable OpenTelemetry | `false` | `true` |
+| `OTEL_RESOURCE_SERVICE_NAME` | Service name for telemetry | Varies by service | `onboarding`, `transaction` |
+| `OTEL_RESOURCE_SERVICE_VERSION` | Service version for telemetry | `${VERSION}` | `v2.0.0` |
+| `OTEL_RESOURCE_DEPLOYMENT_ENVIRONMENT` | Deployment environment | `${ENV_NAME}` | `production` |
+| `OTEL_EXPORTER_OTLP_ENDPOINT` | OpenTelemetry collector endpoint | `midaz-otel-lgtm:4317` | `localhost:4317` |
+
+### Swagger Documentation
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `SWAGGER_TITLE` | API title for Swagger | Varies by service | `Onboarding API` |
+| `SWAGGER_DESCRIPTION` | API description | Varies by service | `Documentation for the Midaz Onboarding API` |
+| `SWAGGER_VERSION` | API version for Swagger | `${VERSION}` | `v2.0.0` |
+| `SWAGGER_HOST` | Swagger host | `${SERVER_ADDRESS}` | `:3000` |
+| `SWAGGER_SCHEMES` | Swagger schemes | `http` | `https` |
+
+### Pagination Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `MAX_PAGINATION_LIMIT` | Maximum items per page | `100` | `500` |
+| `MAX_PAGINATION_MONTH_DATE_RANGE` | Maximum month range for date filters | Varies by service | `3` (Onboarding), `1` (Transaction) |
+
+## Service-Specific Configuration
+
+### Transaction Service
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `RABBITMQ_BALANCE_CREATE_QUEUE` | Queue for balance creation | `transaction.balance_create.queue` | `transaction.balance_create.queue.v2` |
+| `RABBITMQ_TRANSACTION_BALANCE_OPERATION_EXCHANGE` | Exchange for BTO operations | `transaction.transaction_balance_operation.exchange` | `transaction.transaction_balance_operation.exchange.v2` |
+| `RABBITMQ_TRANSACTION_BALANCE_OPERATION_KEY` | Routing key for BTO operations | `transaction.transaction_balance_operation.key` | `transaction.transaction_balance_operation.key.v2` |
+| `RABBITMQ_TRANSACTION_BALANCE_OPERATION_QUEUE` | Queue for BTO operations | `transaction.transaction_balance_operation.queue` | `transaction.transaction_balance_operation.queue.v2` |
+| `AUDIT_LOG_ENABLED` | Enable audit logging | `false` | `true` |
+| `RABBITMQ_AUDIT_EXCHANGE` | Exchange for audit logs | `audit.append_log.exchange` | `audit.append_log.exchange.v2` |
+| `RABBITMQ_AUDIT_KEY` | Routing key for audit logs | `audit.append_log.key` | `audit.append_log.key.v2` |
+
+### Onboarding Service
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `RABBITMQ_EXCHANGE` | Exchange for outgoing messages | `transaction.balance_create.exchange` | `transaction.balance_create.exchange.v2` |
+| `RABBITMQ_KEY` | Routing key for outgoing messages | `transaction.balance_create.key` | `transaction.balance_create.key.v2` |
+
+## Authentication Configuration
+
+| Parameter | Description | Default | Example |
+|-----------|-------------|---------|---------|
+| `PLUGIN_AUTH_ENABLED` | Enable authentication | `false` | `true` |
+| `PLUGIN_AUTH_HOST` | Authentication service host | Empty | `https://auth.midaz.io` |
+
+## Configuration Best Practices
+
+1. **Environment Separation**: Use different configuration values for development, staging, and production
+2. **Secrets Management**: Never commit sensitive configuration (passwords, keys) to version control
+3. **Default Fallbacks**: Provide sensible defaults for non-critical configuration
+4. **Documentation**: Keep this documentation updated when adding new configuration parameters
+5. **Validation**: Validate configuration values at startup to fail fast on misconfigurations
+
+## Environment Variables Hierarchy
+
+Configuration values are loaded in the following order, with later sources overriding earlier ones:
+
+1. Default values in code
+2. `.env` file in the component directory
+3. Environment variables set in the host environment
+4. Command-line flags (where applicable)
+
+## Example .env File
+
+```bash
+# TRANSACTION
+ENV_NAME=development
+VERSION=v2.0.0
+SERVER_PORT=3001
+SERVER_ADDRESS=:${SERVER_PORT}
+
+# DB POSTGRESQL
+DB_HOST=midaz-postgres-primary
+DB_USER=midaz
+DB_NAME=transaction
+DB_PASSWORD=secure_password
+DB_PORT=5701
+
+# REDIS
+REDIS_HOST=midaz-redis
+REDIS_PORT=5704
+REDIS_PASSWORD=secure_redis_password
+
+# LOG LEVEL
+LOG_LEVEL=debug
+
+# Additional component-specific configuration...
+```
\ No newline at end of file
diff --git a/docs/reference/error-codes.md b/docs/reference/error-codes.md
new file mode 100644
index 00000000..2af79b0b
--- /dev/null
+++ b/docs/reference/error-codes.md
@@ -0,0 +1,139 @@
+# Error Codes
+
+**Navigation:** [Home](../../) > [Reference Materials](../README.md) > Error Codes
+
+This document provides a comprehensive reference for error codes used throughout the Midaz APIs.
+
+## Error Response Format
+
+All errors returned by Midaz APIs follow a standardized format:
+
+```json
+{
+  "code": "ERROR_CODE",
+  "title": "Human-readable error title",
+  "message": "Detailed error message explaining the issue",
+  "entityType": "Optional entity type (e.g., 'Transaction')",
+  "fields": {
+    "fieldName": "Field-specific error message"
+  }
+}
+```
+
+## Common Error Codes
+
+### Authentication and Authorization Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `AUTH_INVALID_TOKEN` | Invalid Token | The authentication token is invalid or expired | 401 |
+| `AUTH_MISSING_TOKEN` | Missing Token | No authentication token was provided | 401 |
+| `AUTH_INSUFFICIENT_PERMISSIONS` | Insufficient Permissions | The authenticated user lacks permission for this operation | 403 |
+| `AUTH_ACCOUNT_LOCKED` | Account Locked | The user account is locked | 403 |
+
+### Resource Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `RESOURCE_NOT_FOUND` | Resource Not Found | The requested resource does not exist | 404 |
+| `RESOURCE_ALREADY_EXISTS` | Resource Already Exists | A resource with the same unique identifier already exists | 409 |
+| `RESOURCE_STATE_CONFLICT` | Resource State Conflict | The operation cannot be performed due to the current state of the resource | 409 |
+| `RESOURCE_DELETED` | Resource Deleted | The requested resource has been deleted | 410 |
+
+### Validation Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `VALIDATION_REQUIRED_FIELD` | Required Field Missing | A required field is missing from the request | 400 |
+| `VALIDATION_INVALID_FORMAT` | Invalid Format | A field has an invalid format | 400 |
+| `VALIDATION_INVALID_VALUE` | Invalid Value | A field has a value that is not valid for its context | 400 |
+| `VALIDATION_VALUE_TOO_LONG` | Value Too Long | A field value exceeds the maximum allowed length | 400 |
+| `VALIDATION_VALUE_TOO_SHORT` | Value Too Short | A field value is shorter than the minimum required length | 400 |
+
+### Business Logic Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `BUSINESS_INSUFFICIENT_FUNDS` | Insufficient Funds | The account does not have sufficient funds for the operation | 422 |
+| `BUSINESS_ACCOUNT_INACTIVE` | Account Inactive | The account is not in an active state | 422 |
+| `BUSINESS_ASSET_MISMATCH` | Asset Mismatch | The operation involves mismatched asset types | 422 |
+| `BUSINESS_BALANCE_NEGATIVE` | Negative Balance | The operation would result in a negative balance where not allowed | 422 |
+| `BUSINESS_TRANSACTION_UNBALANCED` | Unbalanced Transaction | The transaction debits and credits do not balance | 422 |
+
+### Transaction Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `TRANSACTION_ALREADY_PROCESSED` | Transaction Already Processed | The transaction has already been processed | 409 |
+| `TRANSACTION_EXPIRED` | Transaction Expired | The transaction has expired and cannot be processed | 422 |
+| `TRANSACTION_CANCELLED` | Transaction Cancelled | The transaction has been cancelled | 422 |
+| `TRANSACTION_DSL_SYNTAX_ERROR` | DSL Syntax Error | The transaction DSL contains syntax errors | 400 |
+| `TRANSACTION_VALIDATION_ERROR` | Transaction Validation Error | The transaction failed validation checks | 422 |
+
+### Asset Rate Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `ASSET_RATE_NOT_FOUND` | Asset Rate Not Found | No exchange rate found for the specified asset pair | 404 |
+| `ASSET_RATE_EXPIRED` | Asset Rate Expired | The exchange rate has expired and needs to be refreshed | 422 |
+| `ASSET_RATE_INVALID` | Invalid Asset Rate | The exchange rate value is invalid | 422 |
+
+### System Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `SYSTEM_INTERNAL_ERROR` | Internal Server Error | An unexpected error occurred in the system | 500 |
+| `SYSTEM_SERVICE_UNAVAILABLE` | Service Unavailable | The service is temporarily unavailable | 503 |
+| `SYSTEM_TIMEOUT` | Service Timeout | The operation timed out | 504 |
+| `SYSTEM_DATABASE_ERROR` | Database Error | An error occurred while accessing the database | 500 |
+| `SYSTEM_DEPENDENCY_ERROR` | Dependency Error | An error occurred in a dependent service | 502 |
+
+### Rate Limiting Errors
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `RATE_LIMIT_EXCEEDED` | Rate Limit Exceeded | The client has exceeded the allowed request rate | 429 |
+| `RATE_LIMIT_ORG_EXCEEDED` | Organization Rate Limit Exceeded | The organization has exceeded its allowed request rate | 429 |
+
+## Component-Specific Error Codes
+
+### Onboarding Service Error Codes
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `ONBOARDING_ORG_LIMIT_EXCEEDED` | Organization Limit Exceeded | The maximum number of organizations has been reached | 422 |
+| `ONBOARDING_LEDGER_LIMIT_EXCEEDED` | Ledger Limit Exceeded | The maximum number of ledgers for this organization has been reached | 422 |
+| `ONBOARDING_INVALID_PORTFOLIO_SEGMENT` | Invalid Portfolio Segment | The portfolio cannot be assigned to the specified segment | 422 |
+| `ONBOARDING_DUPLICATE_ALIAS` | Duplicate Alias | An account with this alias already exists | 409 |
+
+### Transaction Service Error Codes
+
+| Error Code | Title | Description | HTTP Status |
+|------------|-------|-------------|------------|
+| `TRANSACTION_IDEMPOTENCY_CONFLICT` | Idempotency Conflict | A transaction with this idempotency key already exists but with different parameters | 409 |
+| `TRANSACTION_AMOUNT_TOO_LARGE` | Amount Too Large | The transaction amount exceeds the maximum allowed | 422 |
+| `TRANSACTION_OPERATIONS_LIMIT` | Operations Limit Exceeded | The transaction contains too many operations | 422 |
+| `TRANSACTION_RATE_EXPIRED` | Asset Rate Expired | The asset rate used in the transaction has expired | 422 |
+
+## Error Handling Best Practices
+
+1. **Be specific**: Return the most specific error code that applies to the situation
+2. **Include details**: Provide clear error messages that help clients understand what went wrong
+3. **Field validation**: For validation errors, specify which fields failed validation and why
+4. **Localization**: Error titles and messages should support localization
+5. **Logging**: Log errors with correlation IDs for easier troubleshooting
+
+## Example Error Response
+
+```json
+{
+  "code": "VALIDATION_INVALID_VALUE",
+  "title": "Invalid Field Value",
+  "message": "One or more field values are invalid",
+  "entityType": "Account",
+  "fields": {
+    "alias": "Account alias must start with '@' and contain only letters, numbers, and underscores",
+    "type": "Account type must be one of: deposit, savings, creditCard, loan"
+  }
+}
+```
\ No newline at end of file
diff --git a/docs/reference/glossary.md b/docs/reference/glossary.md
new file mode 100644
index 00000000..1de26e23
--- /dev/null
+++ b/docs/reference/glossary.md
@@ -0,0 +1,149 @@
+# Glossary
+
+**Navigation:** [Home](../../) > [Reference Materials](../README.md) > Glossary
+
+This glossary provides definitions for domain-specific terms used throughout the Midaz documentation and codebase.
+
+## Terms
+
+<!-- Terms are organized alphabetically -->
+
+### A
+
+**Account**  
+An individual financial entity within a portfolio that tracks balances and transaction history for a specific asset. Accounts have types (e.g., deposit, savings) and can be organized hierarchically with parent-child relationships.
+
+**Address**  
+A structured representation of a physical location associated with organizations, containing standard postal fields like line1, line2, zip code, city, state, and country.
+
+**Alias**  
+A unique human-readable identifier for an account, formatted as a handle (e.g., "@customer1") that can be used in transactions instead of the account ID.
+
+**Asset**  
+A financial instrument within a ledger, such as a currency, cryptocurrency, commodity, or other value store. Each asset has a unique code (e.g., "USD", "BTC"), type, and name.
+
+**Asset Rate**  
+A conversion rate between two different assets (e.g., USD to EUR), including metadata like the rate source, timestamp, and time-to-live (TTL) for the rate's validity.
+
+**Available Balance**  
+The portion of an account's balance that is immediately available for transactions, separate from funds that may be on hold.
+
+### B
+
+**Balance**  
+A record of the amount of a specific asset held in an account, including available funds, on-hold funds, and other attributes related to transaction capabilities.
+
+**BTO (Balance-Transaction-Operation)**  
+A pattern used in the Transaction service to ensure consistency across balances, transactions, and operations, particularly during complex financial operations.
+
+### C
+
+**Command**  
+In the CQRS pattern, a request to change state within the system. Commands in Midaz are implemented as discrete service operations that modify entities or trigger processes.
+
+**CQRS (Command Query Responsibility Segregation)**  
+An architectural pattern used in Midaz that separates read operations (queries) from write operations (commands), allowing for better performance, scalability, and security.
+
+**Credit**  
+A type of operation that increases the balance of an account, such as a deposit or incoming transfer.
+
+### D
+
+**Debit**  
+A type of operation that decreases the balance of an account, such as a withdrawal or outgoing transfer.
+
+**Double-Entry Bookkeeping**  
+An accounting principle implemented in Midaz where every transaction must have balanced debits and credits, ensuring financial integrity across accounts.
+
+### E
+
+**Entity ID**  
+An optional external identifier that can be associated with accounts, portfolios, and other entities to link them to external systems.
+
+**Event-Driven Design**  
+An architectural approach where system components communicate through events, enabling loose coupling and scalability. In Midaz, implemented using RabbitMQ for messaging.
+
+### H
+
+**Hexagonal Architecture**  
+A software design pattern used in Midaz that separates the core business logic (domain) from external concerns like databases and user interfaces, using adapters to communicate between layers.
+
+### I
+
+**Idempotency Key**  
+A unique identifier used to ensure that a transaction is processed only once, even if the same request is received multiple times.
+
+### L
+
+**Ledger**  
+A financial record-keeping system within an organization that contains accounts, assets, portfolios, segments, and transactions. Ledgers provide isolation between different business areas.
+
+### M
+
+**MDZ CLI**  
+The Command Line Interface tool for interacting with Midaz services, allowing users to manage entities and perform operations through a terminal.
+
+**Metadata**  
+Custom key-value pairs that can be attached to various entities (accounts, assets, transactions, etc.) to extend them with additional application-specific information without changing the core data model.
+
+### O
+
+**On-Hold Balance**  
+Funds in an account that are reserved for pending transactions and not available for immediate use.
+
+**Onboarding Service**  
+A microservice responsible for creating and managing core entities like organizations, ledgers, assets, accounts, portfolios, and segments.
+
+**Operation**  
+A single financial action affecting one account as part of a transaction, such as a debit or credit. A transaction typically consists of multiple operations.
+
+**Organization**  
+The top-level entity in Midaz that represents a business or other legal entity. Organizations contain ledgers and have attributes like legal name, doing-business-as name, and legal document identifiers.
+
+### P
+
+**Portfolio**  
+A collection of accounts grouped for specific purposes such as business units, customers, or client portfolios, allowing for organizational subdivision within a ledger.
+
+**Polyglot Persistence**  
+The approach of using different data storage technologies (PostgreSQL for relational data, MongoDB for metadata) to best suit different aspects of the application data.
+
+### Q
+
+**Query**  
+In the CQRS pattern, a request for information that does not change system state. Queries in Midaz are implemented as read-only service operations.
+
+### R
+
+**Repository Pattern**  
+A design pattern that abstracts the data access layer, providing a collection-like interface for accessing domain objects while decoupling business logic from data access logic.
+
+### S
+
+**Scale**  
+The number of decimal places used when representing a financial amount, allowing for precision in calculations (e.g., a scale of 2 for dollars and cents).
+
+**Segment**  
+A logical division within a ledger such as a business area, product line, or customer category, providing another way to organize portfolios and accounts.
+
+**Status**  
+A state indicator for entities in Midaz with common values including ACTIVE, INACTIVE, PENDING, SUSPENDED, and DELETED, optionally including a descriptive text.
+
+### T
+
+**Transaction**  
+A financial event that typically involves multiple operations affecting different accounts. Transactions ensure data consistency by being atomic (all operations succeed or all fail).
+
+**Transaction DSL (Domain Specific Language)**  
+A specialized language for defining transactions in Midaz, allowing for complex transaction logic to be expressed clearly and consistently.
+
+**Transaction Service**  
+A microservice responsible for processing financial transactions, managing balances, tracking asset rates, and recording operations.
+
+**TTL (Time-To-Live)**  
+A duration in seconds that specifies how long certain data (like asset rates) remains valid before requiring refresh.
+
+### V
+
+**Version**  
+A counter used to track changes to records and prevent conflicts when multiple processes attempt to update the same data simultaneously (optimistic concurrency control).
\ No newline at end of file
diff --git a/docs/reference/status-codes.md b/docs/reference/status-codes.md
new file mode 100644
index 00000000..3df9c5a3
--- /dev/null
+++ b/docs/reference/status-codes.md
@@ -0,0 +1,106 @@
+# Status Codes
+
+**Navigation:** [Home](../../) > [Reference Materials](../README.md) > Status Codes
+
+This document provides a comprehensive reference for status codes used throughout the Midaz platform.
+
+## Entity Status Codes
+
+These status codes are used for organizations, ledgers, assets, portfolios, segments, accounts, and other entities in the system.
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `ACTIVE` | Entity is active and available for use | Default status for most entities after creation |
+| `INACTIVE` | Entity exists but is not currently active | Temporarily disabled entities |
+| `PENDING` | Entity is waiting for activation or approval | Newly created entities that require verification |
+| `SUSPENDED` | Entity is temporarily blocked from use | Entities with compliance or security issues |
+| `DELETED` | Entity has been soft-deleted | Entities that have been removed but retained for record-keeping |
+| `BLOCKED` | Entity is permanently blocked from use | Entities with permanent restrictions |
+| `ARCHIVED` | Entity is no longer active but preserved for historical purposes | Historical records that should not be used for new transactions |
+
+## Transaction Status Codes
+
+These status codes represent the state of transactions in the system.
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `PENDING` | Transaction is created but not yet processed | Initial state for transactions |
+| `PROCESSING` | Transaction is currently being processed | Transactions in the execution phase |
+| `COMPLETED` | Transaction has been successfully completed | Successful transactions |
+| `FAILED` | Transaction processing has failed | Transactions that encountered errors |
+| `REVERSED` | Transaction has been reversed | Transactions that have been reversed by a subsequent transaction |
+| `CANCELLED` | Transaction was cancelled before processing | Transactions cancelled by user or system |
+| `ON_HOLD` | Transaction is on hold awaiting further action | Transactions requiring additional verification |
+
+## Operation Status Codes
+
+These status codes represent the state of individual operations within transactions.
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `PENDING` | Operation is created but not yet processed | Initial state for operations |
+| `COMPLETED` | Operation has been successfully completed | Successful operations |
+| `FAILED` | Operation processing has failed | Operations that encountered errors |
+| `REVERSED` | Operation has been reversed | Operations that have been reversed by a subsequent operation |
+
+## Balance Status Codes
+
+These status codes represent the state of account balances.
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `ACTIVE` | Balance is active and can be used for transactions | Normal functioning balances |
+| `FROZEN` | Balance is temporarily frozen and cannot be used | Balances with temporary restrictions |
+| `CLOSED` | Balance is closed and no longer accessible | Balances that have been permanently closed |
+| `NEGATIVE` | Balance is in a negative state | Balances that have gone below zero (where permitted) |
+
+## HTTP Status Codes
+
+These HTTP status codes are returned by the Midaz APIs.
+
+### Success Codes
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `200 OK` | The request was successful | Successful GET, PATCH, PUT, DELETE operations |
+| `201 Created` | The resource was successfully created | Successful POST operations |
+| `204 No Content` | The request was successful but no content is returned | DELETE operations with no response body |
+
+### Client Error Codes
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `400 Bad Request` | The request contained invalid parameters | Validation errors, malformed requests |
+| `401 Unauthorized` | Authentication is required | Missing or invalid authentication |
+| `403 Forbidden` | The client lacks permissions for the requested action | Permission denied for authenticated users |
+| `404 Not Found` | The requested resource does not exist | Resource not found |
+| `409 Conflict` | The request conflicts with the current state | Duplicate entity creation, conflicting updates |
+| `422 Unprocessable Entity` | The request was well-formed but contains semantic errors | Business rule violations |
+| `429 Too Many Requests` | Rate limit exceeded | Too many requests in a given time period |
+
+### Server Error Codes
+
+| Status Code | Description | Usage |
+|-------------|-------------|-------|
+| `500 Internal Server Error` | An error occurred on the server | Unexpected server errors |
+| `502 Bad Gateway` | The server received an invalid response from an upstream server | Errors from dependent services |
+| `503 Service Unavailable` | The server is temporarily unavailable | Maintenance or overload |
+| `504 Gateway Timeout` | The server timed out waiting for a response from an upstream server | Timeouts from dependent services |
+
+## Usage Guidelines
+
+1. **Consistency**: Always use the predefined status codes rather than creating new ones
+2. **Transitions**: Follow allowed status transitions (e.g., `ACTIVE` can transition to `INACTIVE` but not directly to `DELETED`)
+3. **Documentation**: Include status code in API responses with both code and description
+4. **Internationalization**: Status descriptions can be translated, but status codes remain consistent
+
+## Example Status Usage
+
+```json
+{
+  "status": {
+    "code": "ACTIVE",
+    "description": "The account is active and available for transactions"
+  }
+}
+```
\ No newline at end of file
diff --git a/docs/troubleshooting.md b/docs/troubleshooting.md
new file mode 100644
index 00000000..7e883ac2
--- /dev/null
+++ b/docs/troubleshooting.md
@@ -0,0 +1,589 @@
+# Troubleshooting Guide
+
+**Navigation:** [Home](./) > Troubleshooting
+
+This guide helps you diagnose and resolve common issues when working with the Midaz platform. It covers infrastructure problems, service errors, development challenges, and more.
+
+## Table of Contents
+
+- [Authentication Issues](#authentication-issues)
+- [Database Issues](#database-issues)
+- [Message Queue Issues](#message-queue-issues)
+- [Transaction Processing Issues](#transaction-processing-issues)
+- [Entity Management Issues](#entity-management-issues)
+- [Infrastructure Setup Problems](#infrastructure-setup-problems)
+- [API Integration Issues](#api-integration-issues)
+- [CLI Issues](#cli-issues)
+- [Development Environment Issues](#development-environment-issues)
+- [Debugging and Diagnostics](#debugging-and-diagnostics)
+
+## Authentication Issues
+
+### Login Failures
+
+**Symptoms:**
+- Unable to authenticate via MDZ CLI
+- "Authentication failed" errors
+- Browser login page not loading
+
+**Possible Causes:**
+- Empty or incorrect username/password
+- Authentication service unavailability
+- Token expiration
+- Network connectivity issues
+
+**Diagnosis:**
+1. Check for error messages like "username must not be empty" or "invalid credentials"
+2. Verify network connectivity to authentication servers
+3. Check if token exists in settings file (`~/.config/mdz/mdz.toml`)
+
+**Solutions:**
+1. Run `mdz login` with valid credentials
+2. If browser authentication fails, try terminal method with `mdz login --username your@email.com`
+3. Check configuration with `mdz configure --show` and update if necessary
+4. Verify network connectivity to the authentication service URL
+
+### Token Validation Failures
+
+**Symptoms:**
+- Operations fail after previously working
+- "Invalid token" or "Token expired" errors
+- Error codes: `ErrTokenMissing` (0041), `ErrInvalidToken` (0042)
+
+**Possible Causes:**
+- Token expiration
+- JWK service unavailability
+- Invalid token format
+
+**Solutions:**
+1. Re-authenticate using `mdz login`
+2. Verify JWK address configuration in environment variables
+3. Check Casdoor JWK service availability
+
+## Database Issues
+
+### PostgreSQL Connection Problems
+
+**Symptoms:**
+- Services fail to start
+- "Unable to connect to database" errors
+- Timeout errors during database operations
+
+**Possible Causes:**
+- Database service not running
+- Incorrect connection parameters
+- Network connectivity issues
+- Insufficient privileges
+
+**Diagnosis:**
+1. Check PostgreSQL logs for connection attempts
+   ```
+   docker-compose logs midaz-postgres-primary
+   ```
+2. Verify database container health status
+   ```
+   docker-compose ps
+   ```
+3. Confirm environment variables match the database configuration
+
+**Solutions:**
+1. Restart PostgreSQL services
+   ```
+   docker-compose restart midaz-postgres-primary
+   ```
+2. Verify database environment variables:
+   - `DB_HOST`
+   - `DB_PORT`
+   - `DB_USER`
+   - `DB_PASSWORD`
+3. Check database user permissions and connection limits
+
+### MongoDB Connection Problems
+
+**Symptoms:**
+- Metadata operations failing
+- "Cannot connect to MongoDB" errors
+- Replica set initialization failures
+
+**Possible Causes:**
+- MongoDB service not running
+- Replica set initialization failure
+- Authentication issues
+- Network connectivity problems
+
+**Diagnosis:**
+1. Check MongoDB logs for connection errors
+   ```
+   docker-compose logs midaz-mongodb
+   ```
+2. Verify replica set status
+   ```
+   docker-compose exec midaz-mongodb mongosh --eval "rs.status()"
+   ```
+
+**Solutions:**
+1. Restart MongoDB
+   ```
+   docker-compose restart midaz-mongodb
+   ```
+2. Re-initialize replica set
+3. Verify MongoDB credentials in environment variables
+
+### Data Integrity Issues
+
+**Symptoms:**
+- Foreign key constraint errors
+- Entity relationship violations
+- "Entity not found" when trying to create dependent entities
+
+**Possible Causes:**
+- Entity relationships violated
+- Missing referenced entities
+- Race conditions in entity creation
+
+**Diagnosis:**
+- Error codes: `ErrOrganizationIDNotFound` (0038), `ErrLedgerIDNotFound` (0037)
+- PostgreSQL constraint violation errors
+
+**Solutions:**
+1. Ensure parent entities exist before creating dependent entities
+2. Verify entity IDs match across related objects
+3. Check operation sequence to maintain referential integrity
+
+## Message Queue Issues
+
+### RabbitMQ Connection Problems
+
+**Symptoms:**
+- Services failing to start or process messages
+- "Failed to connect to RabbitMQ" errors
+- Event-driven operations not completing
+
+**Possible Causes:**
+- RabbitMQ service not running
+- Authentication issues
+- Incorrect connection parameters
+- Network connectivity issues
+
+**Diagnosis:**
+1. Check RabbitMQ management interface (accessible on port 3004)
+2. Verify connection logs
+   ```
+   docker-compose logs midaz-rabbitmq
+   ```
+3. Test connectivity to RabbitMQ ports
+
+**Solutions:**
+1. Restart RabbitMQ
+   ```
+   docker-compose restart midaz-rabbitmq
+   ```
+2. Verify RabbitMQ environment variables
+3. Check network connectivity to RabbitMQ ports
+
+### Queue Message Processing Failures
+
+**Symptoms:**
+- Operations hanging or never completing
+- Inconsistent state between services
+- Messages accumulating in queues
+
+**Possible Causes:**
+- Consumer service not running
+- Queue bindings misconfigured
+- Message format issues
+- Queue overflow
+
+**Diagnosis:**
+1. Check queue depth in RabbitMQ management console
+2. Verify exchange and queue bindings
+3. Monitor consumer logs for processing errors
+
+**Solutions:**
+1. Verify exchange and queue definitions in RabbitMQ config
+2. Restart consumer services
+3. Check for error logs in consumer applications
+
+## Transaction Processing Issues
+
+### Insufficient Funds
+
+**Symptoms:**
+- Transactions failing
+- "Insufficient funds" errors
+- Error codes: `ErrInsufficientFunds` (0018), `ErrInsufficientAccountBalance` (0025)
+
+**Possible Causes:**
+- Account balance too low
+- Balance calculation errors
+- Concurrency issues
+
+**Diagnosis:**
+1. Check account balances before transaction
+2. Verify transaction amount doesn't exceed available funds
+3. Look for balance calculation errors in logs
+
+**Solutions:**
+1. Ensure account has sufficient funds before transaction
+2. Fix concurrent transaction issues with proper locking
+3. Use account describe command to verify current balance
+   ```
+   mdz account describe --organization-id ORG_ID --ledger-id LEDGER_ID --portfolio-id PORTFOLIO_ID --account-id ACCOUNT_ID
+   ```
+
+### Transaction Validation Failures
+
+**Symptoms:**
+- Transactions rejected
+- Validation error messages
+- Error codes: `ErrMismatchedAssetCode` (0030), `ErrInvalidTransactionType` (0072)
+
+**Possible Causes:**
+- Invalid transaction format
+- Missing required fields
+- Business rule violations
+- Asset mismatches
+
+**Diagnosis:**
+1. Review error messages for specific validation failures
+2. Check transaction data against API requirements
+3. Verify business rules compliance
+
+**Solutions:**
+1. Ensure transaction format follows API specifications
+2. Provide all required fields
+3. Verify asset codes match between source and destination accounts
+4. Check that transaction follows business validation rules
+
+### Idempotency Key Issues
+
+**Symptoms:**
+- Duplicate transaction processing
+- "Idempotency key already exists" errors
+- Error code: `ErrIdempotencyKey` (0084)
+
+**Possible Causes:**
+- Missing idempotency keys
+- Redis connectivity issues
+- Key collision
+
+**Diagnosis:**
+1. Check if idempotency keys are being properly generated
+2. Verify Redis connection and availability
+3. Look for duplicate key errors in logs
+
+**Solutions:**
+1. Ensure idempotency keys are unique for each transaction
+2. Verify Redis connectivity
+3. Implement retry logic with the same idempotency key
+
+## Entity Management Issues
+
+### Entity Creation Failures
+
+**Symptoms:**
+- Failures when creating organizations, ledgers, accounts, etc.
+- Database constraint violation errors
+- Error codes: `ErrDuplicateLedger` (0001), `ErrAssetNameOrCodeDuplicate` (0003)
+
+**Possible Causes:**
+- Missing required fields
+- Duplicated unique fields
+- Foreign key constraints
+- Permission issues
+
+**Diagnosis:**
+1. Check error message for specific constraint violations
+2. Verify all required fields are provided
+3. Ensure unique constraints aren't violated
+
+**Solutions:**
+1. Provide all required fields when creating entities
+2. Ensure unique fields don't conflict with existing entities
+3. Verify parent entities exist before creating dependent entities
+4. Check permissions for entity creation
+
+### Entity Not Found
+
+**Symptoms:**
+- "Entity not found" errors during operations
+- Error code: `ErrEntityNotFound` (0007)
+- Specific errors: `ErrAccountIDNotFound` (0052), `ErrAssetIDNotFound` (0055)
+
+**Possible Causes:**
+- Entity doesn't exist
+- Entity was deleted
+- Incorrect ID format
+- Permission issues
+
+**Diagnosis:**
+1. Check if entity exists using list or describe commands
+2. Verify UUID format is correct
+3. Check for typos in entity IDs
+
+**Solutions:**
+1. Verify entity exists before attempting operations
+   ```
+   mdz <entity-type> list --organization-id ORG_ID
+   ```
+2. Ensure you're using the correct ID
+3. Check for permissions to access the entity
+
+## Infrastructure Setup Problems
+
+### Docker Compose Issues
+
+**Symptoms:**
+- Services fail to start
+- "Port already in use" errors
+- Container exit errors
+
+**Possible Causes:**
+- Environment variable misconfiguration
+- Port conflicts
+- Volume mount issues
+- Network problems
+
+**Diagnosis:**
+1. Check docker-compose logs
+   ```
+   docker-compose logs
+   ```
+2. Verify container health status
+   ```
+   docker-compose ps
+   ```
+3. Inspect network connectivity between containers
+
+**Solutions:**
+1. Ensure all required environment variables are set in `.env` file
+2. Check for port conflicts with `netstat -tuln`
+3. Verify volume mounts and permissions
+4. Recreate the network
+   ```
+   docker-compose down
+   docker-compose up -d
+   ```
+
+### Environment Variable Issues
+
+**Symptoms:**
+- Applications unable to start
+- "Missing required environment variable" errors
+- Configuration-related panics
+
+**Possible Causes:**
+- Missing required environment variables
+- Incorrect variable formats
+- Environment file not loaded
+
+**Diagnosis:**
+1. Check application startup logs for configuration errors
+2. Verify environment variable presence
+
+**Solutions:**
+1. Ensure `.env` file exists and contains all required variables
+2. Verify environment variable formats
+3. Use the environment validation script
+   ```
+   ./scripts/check-envs.sh
+   ```
+
+## API Integration Issues
+
+### API Request Failures
+
+**Symptoms:**
+- HTTP error responses (400, 401, 403, 500)
+- Error codes: `ErrBadRequest` (0047), `ErrInvalidRequestBody` (0094)
+- Timeout or connection errors
+
+**Possible Causes:**
+- Malformed requests
+- Missing required fields
+- Invalid request body
+- Authentication issues
+
+**Diagnosis:**
+1. Check HTTP status code and error message
+2. Verify request format against API documentation
+3. Inspect request and response payloads
+
+**Solutions:**
+1. Format request according to API documentation
+2. Provide all required fields
+3. Verify authentication token is valid
+4. Check network connectivity to API servers
+
+### API Rate Limiting
+
+**Symptoms:**
+- HTTP 429 "Too Many Requests" responses
+- Increasing response times
+- Intermittent failures
+
+**Possible Causes:**
+- Exceeding rate limits
+- API server overload
+
+**Solutions:**
+1. Implement request throttling
+2. Batch requests when possible
+3. Optimize API usage patterns
+4. Implement exponential backoff for retries
+
+## CLI Issues
+
+### Command Execution Failures
+
+**Symptoms:**
+- MDZ CLI commands failing
+- Error responses from server
+- Connection timeouts
+
+**Possible Causes:**
+- Missing authentication
+- Command syntax errors
+- Network connectivity issues
+- Server-side errors
+
+**Diagnosis:**
+1. Check CLI error output
+2. Try running with verbose flag if available
+3. Verify connectivity to API servers
+
+**Solutions:**
+1. Check command syntax with `mdz <command> --help`
+2. Ensure authentication with `mdz login`
+3. Verify network connectivity to API servers
+4. Check server logs for related errors
+
+### Configuration Issues
+
+**Symptoms:**
+- "Configuration not found" errors
+- Settings not being applied
+- Connection failures
+
+**Possible Causes:**
+- Corrupted configuration file
+- Permission issues
+- Missing settings
+
+**Diagnosis:**
+1. Verify configuration file exists
+   ```
+   cat ~/.config/mdz/mdz.toml
+   ```
+2. Check file permissions
+3. Inspect configuration contents
+
+**Solutions:**
+1. Reset configuration
+   ```
+   mdz configure
+   ```
+2. Fix configuration file permissions
+3. Manually edit configuration file if necessary
+
+## Development Environment Issues
+
+### Dependencies and Installation
+
+**Symptoms:**
+- Build errors
+- Missing dependencies
+- Version compatibility issues
+
+**Possible Causes:**
+- Missing prerequisites
+- Incompatible versions
+- Environment setup issues
+
+**Diagnosis:**
+1. Check for build errors
+2. Verify installed dependency versions
+3. Compare with required dependencies
+
+**Solutions:**
+1. Follow installation guide steps precisely
+2. Verify Go version compatibility (use Go 1.20+)
+3. Install required system dependencies
+4. Use dependency management tools correctly
+
+### Testing Issues
+
+**Symptoms:**
+- Test failures
+- Inconsistent test results
+- Integration test errors
+
+**Possible Causes:**
+- Environment misconfiguration
+- Test data issues
+- Race conditions
+
+**Diagnosis:**
+1. Run specific failing tests with verbose flag
+2. Check test environment configuration
+3. Look for timing or race condition issues
+
+**Solutions:**
+1. Set up isolated test environment
+2. Reset test data between runs
+3. Use testing scripts in the scripts directory
+   ```
+   ./scripts/check-tests.sh
+   ```
+4. Fix race conditions with proper synchronization
+
+## Debugging and Diagnostics
+
+### Log Analysis
+
+**Techniques:**
+1. Check component logs
+   ```
+   docker-compose logs <service-name>
+   ```
+2. Filter logs by severity
+   ```
+   docker-compose logs | grep "ERROR"
+   ```
+3. Track transaction flow across services by ID
+4. Look for error codes and stack traces
+
+### Performance Monitoring
+
+**Tools and Techniques:**
+1. Grafana dashboards for monitoring (accessible on port 3000)
+2. Database query performance analysis
+3. Message queue depth monitoring
+   ```
+   # Check RabbitMQ management interface on port 3004
+   ```
+4. API response time tracking
+
+### Diagnostic Commands
+
+**Useful Commands:**
+1. Check system health
+   ```
+   docker-compose ps
+   ```
+2. Database inspection
+   ```
+   docker-compose exec midaz-postgres-primary psql -U midaz
+   ```
+3. RabbitMQ queue inspection
+   ```
+   # Access management interface at port 3004
+   ```
+4. MongoDB status
+   ```
+   docker-compose exec midaz-mongodb mongosh --eval "rs.status()"
+   ```
+5. Check service logs
+   ```
+   docker-compose logs --tail=100 <service-name>
+   ```
\ No newline at end of file
diff --git a/docs/tutorials/README.md b/docs/tutorials/README.md
new file mode 100644
index 00000000..b2eae0fc
--- /dev/null
+++ b/docs/tutorials/README.md
@@ -0,0 +1,36 @@
+# Tutorials
+
+**Navigation:** [Home](../) > Tutorials
+
+This section provides step-by-step guides to help you learn how to use Midaz effectively for different use cases. Each tutorial includes detailed instructions, code examples, and best practices.
+
+## Available Tutorials
+
+### Getting Started
+
+- [New Developer Onboarding](./new-developer-onboarding.md) - Essential steps to start developing with Midaz
+- [Creating Financial Structures](./creating-financial-structures.md) - Learn how to build a financial entity hierarchy
+- [Implementing Transactions](./implementing-transactions.md) - Guide to creating and processing transactions
+
+### Integration
+
+- [API Integration Examples](./api-integration-examples.md) - Examples of integrating with Midaz APIs
+
+## Coming Soon
+
+We're actively expanding our tutorial library. The following topics will be covered in upcoming tutorials:
+
+- Building Complex Transactions - Advanced transaction patterns with the Transaction DSL
+- Metadata Implementation Patterns - Best practices for using metadata fields
+- Implementing Custom Reports - Creating custom reports using the Midaz APIs
+- Event-Driven Integration - How to use events to integrate with Midaz
+
+## Tutorial Structure
+
+Each tutorial follows these best practices:
+
+1. Clear prerequisites section listing required knowledge and tools
+2. Step-by-step instructions with code examples
+3. Complete working examples that can be copied and run
+4. Troubleshooting section for common issues
+5. Links to related documentation
diff --git a/docs/tutorials/api-integration-examples.md b/docs/tutorials/api-integration-examples.md
new file mode 100644
index 00000000..43690824
--- /dev/null
+++ b/docs/tutorials/api-integration-examples.md
@@ -0,0 +1,410 @@
+# API Integration Examples
+
+**Navigation:** [Home](../) > [Tutorials](./README.md) > API Integration Examples
+
+This tutorial provides practical examples of integrating with the Midaz APIs, including authentication, basic CRUD operations, and more complex interactions.
+
+## Table of Contents
+
+- [Introduction](#introduction)
+- [Prerequisites](#prerequisites)
+- [Authentication](#authentication)
+- [Basic API Interactions](#basic-api-interactions)
+- [Advanced API Interactions](#advanced-api-interactions)
+- [Error Handling](#error-handling)
+- [Rate Limiting](#rate-limiting)
+- [Idempotency](#idempotency)
+- [Webhooks](#webhooks)
+- [Best Practices](#best-practices)
+
+## Introduction
+
+The Midaz platform provides RESTful APIs for programmatic interaction with the system. This tutorial demonstrates common API integration patterns and best practices.
+
+## Prerequisites
+
+Before starting this tutorial, you should:
+
+1. Have a valid Midaz account with API access
+2. Be familiar with making HTTP requests in your preferred programming language
+3. Understand the basics of REST API concepts
+4. Have read the [API Reference](../api-reference/README.md) documentation
+
+## Authentication
+
+API requests to Midaz require authentication when the authentication plugin is enabled (`PLUGIN_AUTH_ENABLED=true`). Midaz uses OAuth 2.0 Bearer tokens for authentication.
+
+> **Note:** Detailed authentication documentation, including token acquisition and permissions management, is available in the Auth Plugin repository. The examples below assume you have already obtained a valid access token.
+
+### Including Authentication in Requests
+
+```javascript
+// JavaScript example using fetch
+const fetchData = async (url) => {
+  const response = await fetch(url, {
+    headers: {
+      'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
+      'Content-Type': 'application/json'
+    }
+  });
+  return response.json();
+};
+```
+
+```python
+# Python example using requests
+import requests
+
+def fetch_data(url, token):
+    headers = {
+        'Authorization': f'Bearer {token}',
+        'Content-Type': 'application/json'
+    }
+    response = requests.get(url, headers=headers)
+    return response.json()
+```
+
+## Basic API Interactions
+
+Let's start with some basic API interactions using the Onboarding API.
+
+### Creating an Organization
+
+```javascript
+// JavaScript example
+const createOrganization = async () => {
+  const url = 'https://api.midaz.io/onboarding/v1/organizations';
+  const data = {
+    name: 'Acme Corporation',
+    description: 'Manufacturing company',
+    metadata: {
+      industry: 'Manufacturing',
+      size: 'Medium'
+    }
+  };
+  
+  const response = await fetch(url, {
+    method: 'POST',
+    headers: {
+      'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
+      'Content-Type': 'application/json'
+    },
+    body: JSON.stringify(data)
+  });
+  
+  return response.json();
+};
+```
+
+### Retrieving an Organization
+
+```python
+# Python example
+import requests
+
+def get_organization(org_id, token):
+    url = f'https://api.midaz.io/onboarding/v1/organizations/{org_id}'
+    headers = {
+        'Authorization': f'Bearer {token}',
+        'Content-Type': 'application/json'
+    }
+    response = requests.get(url, headers=headers)
+    return response.json()
+```
+
+### Listing Organizations with Pagination
+
+```javascript
+// JavaScript example
+const listOrganizations = async (limit = 10, cursor = null) => {
+  let url = `https://api.midaz.io/onboarding/v1/organizations?limit=${limit}`;
+  
+  if (cursor) {
+    url += `&cursor=${cursor}`;
+  }
+  
+  const response = await fetch(url, {
+    headers: {
+      'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
+      'Content-Type': 'application/json'
+    }
+  });
+  
+  return response.json();
+};
+```
+
+## Advanced API Interactions
+
+Now let's look at some more complex API interactions using the Transaction API.
+
+### Creating a Transaction
+
+```javascript
+// JavaScript example
+const createTransaction = async (orgId, ledgerId) => {
+  const url = `https://api.midaz.io/v1/organizations/${orgId}/ledgers/${ledgerId}/transactions/json`;
+  const data = {
+    type: 'transfer',
+    sources: [
+      {
+        accountId: 'source-account-id',
+        amount: '100.00',
+        assetCode: 'USD'
+      }
+    ],
+    destinations: [
+      {
+        accountId: 'destination-account-id',
+        amount: '100.00',
+        assetCode: 'USD'
+      }
+    ],
+    metadata: {
+      reference: 'Invoice #12345',
+      category: 'Payment'
+    }
+  };
+  
+  const response = await fetch(url, {
+    method: 'POST',
+    headers: {
+      'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
+      'Content-Type': 'application/json',
+      'X-Idempotency-Key': 'unique-request-id-123'
+    },
+    body: JSON.stringify(data)
+  });
+  
+  return response.json();
+};
+```
+
+### Creating a Transaction using DSL
+
+```python
+# Python example
+import requests
+
+def create_transaction_dsl(org_id, ledger_id, token):
+    url = f'https://api.midaz.io/v1/organizations/{org_id}/ledgers/{ledger_id}/transactions/dsl'
+    
+    # DSL transaction content
+    dsl_content = '''
+    transaction "Simple Transfer" {
+      description "Transfer between accounts"
+      code "TRANSFER"
+      
+      send USD 100.00 {
+        source {
+          from "source-account-id" {
+            chart_of_accounts "1000"
+            description "Withdrawal from source account"
+          }
+        }
+        
+        distribute {
+          to "destination-account-id" {
+            chart_of_accounts "2000"
+            description "Deposit to destination account"
+          }
+        }
+      }
+    }
+    '''
+    
+    # Create the multipart/form-data request
+    files = {'transaction': ('transaction.dsl', dsl_content, 'text/plain')}
+    headers = {
+        'Authorization': f'Bearer {token}',
+        'X-Idempotency-Key': 'unique-request-id-456'
+    }
+    
+    response = requests.post(url, headers=headers, files=files)
+    return response.json()
+```
+
+## Error Handling
+
+Proper error handling is crucial for robust API integration.
+
+```javascript
+// JavaScript example
+const safeApiCall = async (apiFunc) => {
+  try {
+    const result = await apiFunc();
+    return { success: true, data: result };
+  } catch (error) {
+    console.error('API error:', error);
+    
+    // Handle different error types
+    if (error.response) {
+      const status = error.response.status;
+      const errorData = await error.response.json();
+      
+      if (status === 401) {
+        // Authentication error - token might be expired
+        return { success: false, error: 'Authentication failed', code: 'AUTH_ERROR' };
+      } else if (status === 404) {
+        // Resource not found
+        return { success: false, error: 'Resource not found', code: 'NOT_FOUND' };
+      } else if (status === 422) {
+        // Validation error
+        return { 
+          success: false, 
+          error: 'Validation failed', 
+          code: 'VALIDATION_ERROR',
+          details: errorData.fields 
+        };
+      } else {
+        // Other errors
+        return { 
+          success: false, 
+          error: errorData.message || 'Unknown error', 
+          code: errorData.code || 'UNKNOWN_ERROR' 
+        };
+      }
+    }
+    
+    // Network errors
+    return { success: false, error: 'Network error', code: 'NETWORK_ERROR' };
+  }
+};
+```
+
+## Rate Limiting
+
+Handle rate limiting gracefully in your API integration.
+
+```python
+# Python example
+import requests
+import time
+
+def rate_limited_request(url, token, max_retries=3):
+    headers = {
+        'Authorization': f'Bearer {token}',
+        'Content-Type': 'application/json'
+    }
+    
+    retries = 0
+    while retries < max_retries:
+        response = requests.get(url, headers=headers)
+        
+        if response.status_code == 429:
+            # Rate limited, get retry-after header
+            retry_after = int(response.headers.get('Retry-After', 5))
+            print(f'Rate limited. Retrying after {retry_after} seconds')
+            time.sleep(retry_after)
+            retries += 1
+        else:
+            return response.json()
+    
+    # If we've exhausted all retries
+    return {'error': 'Rate limit exceeded after maximum retries'}
+```
+
+## Idempotency
+
+Use idempotency keys to prevent duplicate transactions.
+
+```javascript
+// JavaScript example
+const makeIdempotentRequest = async (url, data, idempotencyKey) => {
+  const response = await fetch(url, {
+    method: 'POST',
+    headers: {
+      'Authorization': 'Bearer YOUR_ACCESS_TOKEN',
+      'Content-Type': 'application/json',
+      'X-Idempotency-Key': idempotencyKey
+    },
+    body: JSON.stringify(data)
+  });
+  
+  return response.json();
+};
+```
+
+## Webhooks
+
+If your Midaz instance supports webhooks, you can use them to receive real-time updates.
+
+```javascript
+// Node.js Express webhook receiver example
+const express = require('express');
+const bodyParser = require('body-parser');
+const crypto = require('crypto');
+
+const app = express();
+app.use(bodyParser.json());
+
+// Verify webhook signature
+const verifyWebhookSignature = (request, secret) => {
+  const signature = request.headers['x-midaz-signature'];
+  const payload = JSON.stringify(request.body);
+  
+  const hmac = crypto.createHmac('sha256', secret);
+  hmac.update(payload);
+  const digest = hmac.digest('hex');
+  
+  return crypto.timingSafeEqual(
+    Buffer.from(signature),
+    Buffer.from(digest)
+  );
+};
+
+app.post('/webhooks/midaz', (req, res) => {
+  // Replace with your actual webhook secret
+  const webhookSecret = 'your_webhook_secret';
+  
+  if (!verifyWebhookSignature(req, webhookSecret)) {
+    return res.status(401).send('Invalid signature');
+  }
+  
+  const event = req.body;
+  
+  // Handle different event types
+  switch (event.type) {
+    case 'transaction.created':
+      console.log('Transaction created:', event.data.id);
+      // Process transaction created event
+      break;
+    case 'transaction.completed':
+      console.log('Transaction completed:', event.data.id);
+      // Process transaction completed event
+      break;
+    default:
+      console.log('Unhandled event type:', event.type);
+  }
+  
+  res.sendStatus(200);
+});
+
+app.listen(3000, () => {
+  console.log('Webhook server running on port 3000');
+});
+```
+
+## Best Practices
+
+Follow these best practices for successful API integration with Midaz:
+
+1. **Always Use HTTPS**: Secure your API requests using HTTPS
+2. **Implement Proper Authentication**: Secure your tokens and implement refresh token logic
+3. **Use Idempotency Keys**: For all state-changing operations
+4. **Implement Retry Logic**: For transient failures, with exponential backoff
+5. **Handle Rate Limiting**: Respect rate limits and implement proper retry mechanisms
+6. **Validate Input Data**: Before sending to the API
+7. **Implement Proper Error Handling**: For all possible error responses
+8. **Monitor API Usage**: Track API calls, errors, and performance
+9. **Keep API Versions in Mind**: Be aware of API versioning and deprecation policies
+10. **Use Webhooks When Available**: For real-time updates rather than polling
+
+## Next Steps
+
+Now that you've learned the basics of integrating with the Midaz APIs, you can explore more advanced topics:
+
+- [Creating Financial Structures](./creating-financial-structures.md)
+- [Implementing Transactions](./implementing-transactions.md)
+- [Transaction Processing](../components/transaction/transaction-processing.md)
+- [Error Handling Best Practices](../developer-guide/error-handling.md)
\ No newline at end of file
diff --git a/docs/tutorials/creating-financial-structures.md b/docs/tutorials/creating-financial-structures.md
new file mode 100644
index 00000000..8c895ef5
--- /dev/null
+++ b/docs/tutorials/creating-financial-structures.md
@@ -0,0 +1,459 @@
+# Creating Financial Structures
+
+**Navigation:** [Home](../) > [Tutorials](./README.md) > Creating Financial Structures
+
+This tutorial provides a step-by-step guide for creating a complete financial structure in Midaz, including organizations, ledgers, assets, portfolios, segments, and accounts.
+
+## Table of Contents
+
+- [Introduction](#introduction)
+- [Financial Entity Hierarchy](#financial-entity-hierarchy)
+- [Step-by-Step Guide](#step-by-step-guide)
+- [Advanced Configurations](#advanced-configurations)
+- [Complete Example](#complete-example)
+- [Best Practices](#best-practices)
+- [Troubleshooting](#troubleshooting)
+- [References](#references)
+
+## Introduction
+
+Setting up a proper financial structure is the first step in using the Midaz platform for financial operations. This tutorial will guide you through creating a complete structure using the MDZ CLI, explaining each entity's purpose and how they relate to each other.
+
+## Financial Entity Hierarchy
+
+Midaz uses a hierarchical structure for organizing financial entities:
+
+```
+Organization
+    └── Ledger
+         ├── Asset
+         ├── Segment
+         └── Portfolio
+              └── Account
+```
+
+Each entity has specific relationships and dependencies:
+
+| Entity | Parent | Description |
+|--------|--------|-------------|
+| Organization | None | Top-level entity representing a company |
+| Ledger | Organization | Financial record-keeping system |
+| Asset | Ledger | Currencies or financial instruments (e.g., USD, BTC) |
+| Segment | Ledger | Logical divisions (e.g., business areas, customer categories) |
+| Portfolio | Ledger | Account grouping for specific purposes |
+| Account | Portfolio | Individual financial account tied to a specific asset |
+
+## Step-by-Step Guide
+
+### 1. Create an Organization
+
+The Organization is the top-level entity representing a company or financial institution.
+
+```bash
+# Create an organization
+mdz organization create --legal-name "Demo Company Inc." \
+                        --doing-business-as "Demo Company" \
+                        --legal-document "123456789" \
+                        --code "ACTIVE" \
+                        --country "US"
+```
+
+Key fields:
+- `legal-name`: The official registered name
+- `doing-business-as`: The operational name (optional)
+- `legal-document`: Tax ID or registration number
+- `code`: Status code (usually "ACTIVE")
+
+Store the organization ID for subsequent commands:
+```bash
+# Store organization ID in a variable
+ORGANIZATION_ID=$(mdz organization list --output json | jq -r '.items[0].id')
+echo "Organization ID: $ORGANIZATION_ID"
+```
+
+### 2. Create a Ledger
+
+Ledgers belong to an organization and contain all financial records.
+
+```bash
+# Create a ledger within the organization
+mdz ledger create --organization-id "$ORGANIZATION_ID" \
+                  --name "Main Ledger" \
+                  --status-code "ACTIVE"
+```
+
+Key fields:
+- `organization-id`: The parent organization's ID
+- `name`: Descriptive name for the ledger
+- `status-code`: Status of the ledger (usually "ACTIVE")
+
+Store the ledger ID:
+```bash
+# Store ledger ID in a variable
+LEDGER_ID=$(mdz ledger list --organization-id "$ORGANIZATION_ID" --output json | jq -r '.items[0].id')
+echo "Ledger ID: $LEDGER_ID"
+```
+
+### 3. Create Assets
+
+Assets represent currencies, cryptocurrencies, or other financial instruments within a ledger.
+
+```bash
+# Create a USD asset
+mdz asset create --organization-id "$ORGANIZATION_ID" \
+                 --ledger-id "$LEDGER_ID" \
+                 --name "US Dollar" \
+                 --code "USD" \
+                 --type "currency" \
+                 --status-code "ACTIVE"
+
+# Create a EUR asset
+mdz asset create --organization-id "$ORGANIZATION_ID" \
+                 --ledger-id "$LEDGER_ID" \
+                 --name "Euro" \
+                 --code "EUR" \
+                 --type "currency" \
+                 --status-code "ACTIVE"
+```
+
+Key fields:
+- `organization-id` and `ledger-id`: Parent entity IDs
+- `name`: Descriptive name of the asset
+- `code`: Unique identifier code (e.g., USD, EUR, BTC)
+- `type`: Asset category (e.g., currency, crypto, commodity)
+
+Store asset IDs:
+```bash
+# Store asset IDs in variables
+USD_ASSET_ID=$(mdz asset list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.code=="USD") | .id')
+EUR_ASSET_ID=$(mdz asset list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.code=="EUR") | .id')
+echo "USD Asset ID: $USD_ASSET_ID"
+echo "EUR Asset ID: $EUR_ASSET_ID"
+```
+
+### 4. Create Segments
+
+Segments are logical divisions within a ledger, such as business areas, product lines, or customer categories.
+
+```bash
+# Create a Retail segment
+mdz segment create --organization-id "$ORGANIZATION_ID" \
+                   --ledger-id "$LEDGER_ID" \
+                   --name "Retail Customers" \
+                   --status-code "ACTIVE"
+
+# Create a Corporate segment
+mdz segment create --organization-id "$ORGANIZATION_ID" \
+                   --ledger-id "$LEDGER_ID" \
+                   --name "Corporate Customers" \
+                   --status-code "ACTIVE"
+```
+
+Key fields:
+- `organization-id` and `ledger-id`: Parent entity IDs
+- `name`: Descriptive name for the segment
+- `status-code`: Status of the segment (usually "ACTIVE")
+
+Store segment IDs:
+```bash
+# Store segment IDs in variables
+RETAIL_SEGMENT_ID=$(mdz segment list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.name=="Retail Customers") | .id')
+CORPORATE_SEGMENT_ID=$(mdz segment list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.name=="Corporate Customers") | .id')
+echo "Retail Segment ID: $RETAIL_SEGMENT_ID"
+echo "Corporate Segment ID: $CORPORATE_SEGMENT_ID"
+```
+
+### 5. Create Portfolios
+
+Portfolios group related accounts and are typically associated with customers, business units, or departments.
+
+```bash
+# Create a Customer portfolio
+mdz portfolio create --organization-id "$ORGANIZATION_ID" \
+                     --ledger-id "$LEDGER_ID" \
+                     --name "Customer Portfolio" \
+                     --entity-id "CUST-001" \
+                     --status-code "ACTIVE"
+
+# Create an Investment portfolio
+mdz portfolio create --organization-id "$ORGANIZATION_ID" \
+                     --ledger-id "$LEDGER_ID" \
+                     --name "Investment Portfolio" \
+                     --entity-id "INV-001" \
+                     --status-code "ACTIVE"
+```
+
+Key fields:
+- `organization-id` and `ledger-id`: Parent entity IDs
+- `name`: Descriptive name for the portfolio
+- `entity-id`: External identifier for the portfolio (optional)
+- `status-code`: Status of the portfolio (usually "ACTIVE")
+
+Store portfolio IDs:
+```bash
+# Store portfolio IDs in variables
+CUSTOMER_PORTFOLIO_ID=$(mdz portfolio list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.name=="Customer Portfolio") | .id')
+INVESTMENT_PORTFOLIO_ID=$(mdz portfolio list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --output json | jq -r '.items[] | select(.name=="Investment Portfolio") | .id')
+echo "Customer Portfolio ID: $CUSTOMER_PORTFOLIO_ID"
+echo "Investment Portfolio ID: $INVESTMENT_PORTFOLIO_ID"
+```
+
+### 6. Create Accounts
+
+Accounts represent individual financial entities and belong to portfolios.
+
+```bash
+# Create a USD Checking account for the Customer portfolio
+mdz account create --organization-id "$ORGANIZATION_ID" \
+                  --ledger-id "$LEDGER_ID" \
+                  --portfolio-id "$CUSTOMER_PORTFOLIO_ID" \
+                  --segment-id "$RETAIL_SEGMENT_ID" \
+                  --name "Checking Account" \
+                  --type "checking" \
+                  --asset-code "USD" \
+                  --alias "@checking" \
+                  --status-code "ACTIVE"
+
+# Create a EUR Savings account for the Investment portfolio
+mdz account create --organization-id "$ORGANIZATION_ID" \
+                  --ledger-id "$LEDGER_ID" \
+                  --portfolio-id "$INVESTMENT_PORTFOLIO_ID" \
+                  --segment-id "$CORPORATE_SEGMENT_ID" \
+                  --name "Investment Account" \
+                  --type "investment" \
+                  --asset-code "EUR" \
+                  --alias "@investment" \
+                  --status-code "ACTIVE"
+```
+
+Key fields:
+- `organization-id`, `ledger-id`, `portfolio-id`, and `segment-id`: Parent entity IDs
+- `name`: Descriptive name for the account
+- `type`: Account type (e.g., checking, savings, investment)
+- `asset-code`: The code of the asset this account handles
+- `alias`: A human-readable unique identifier for the account (starts with @)
+- `status-code`: Status of the account (usually "ACTIVE")
+
+## Advanced Configurations
+
+### Using Metadata
+
+All entities in Midaz support custom metadata to extend their functionality. Metadata is stored as key-value pairs in JSON format.
+
+```bash
+# Add metadata to an organization
+mdz organization update --organization-id "$ORGANIZATION_ID" \
+                       --metadata '{"industry": "Finance", "region": "North America"}'
+
+# Add metadata to an account
+mdz account update --organization-id "$ORGANIZATION_ID" \
+                  --ledger-id "$LEDGER_ID" \
+                  --portfolio-id "$CUSTOMER_PORTFOLIO_ID" \
+                  --account-id "$ACCOUNT_ID" \
+                  --metadata '{"purpose": "Operations", "category": "Retail"}'
+```
+
+### Hierarchical Accounts
+
+Accounts can have parent-child relationships for representing hierarchical structures.
+
+```bash
+# Create a parent account
+PARENT_ACCOUNT_ID=$(mdz account create --organization-id "$ORGANIZATION_ID" \
+                                     --ledger-id "$LEDGER_ID" \
+                                     --portfolio-id "$CUSTOMER_PORTFOLIO_ID" \
+                                     --name "Parent Account" \
+                                     --type "parent" \
+                                     --asset-code "USD" \
+                                     --status-code "ACTIVE" \
+                                     --output json | jq -r '.id')
+
+# Create a child account
+mdz account create --organization-id "$ORGANIZATION_ID" \
+                  --ledger-id "$LEDGER_ID" \
+                  --portfolio-id "$CUSTOMER_PORTFOLIO_ID" \
+                  --parent-account-id "$PARENT_ACCOUNT_ID" \
+                  --name "Child Account" \
+                  --type "child" \
+                  --asset-code "USD" \
+                  --status-code "ACTIVE"
+```
+
+## Complete Example
+
+Below is a complete script that builds a financial structure from scratch:
+
+```bash
+#!/bin/bash
+
+# Create an organization
+echo "Creating organization..."
+ORG_ID=$(mdz organization create --legal-name "Global Trading Inc." \
+                                --doing-business-as "GloTrade" \
+                                --legal-document "123456789" \
+                                --code "ACTIVE" \
+                                --country "US" \
+                                --output json | jq -r '.id')
+echo "Organization created with ID: $ORG_ID"
+
+# Create a ledger
+echo "Creating ledger..."
+LEDGER_ID=$(mdz ledger create --organization-id "$ORG_ID" \
+                             --name "Trading Ledger" \
+                             --status-code "ACTIVE" \
+                             --output json | jq -r '.id')
+echo "Ledger created with ID: $LEDGER_ID"
+
+# Create assets
+echo "Creating assets..."
+USD_ASSET_ID=$(mdz asset create --organization-id "$ORG_ID" \
+                               --ledger-id "$LEDGER_ID" \
+                               --name "US Dollar" \
+                               --type "currency" \
+                               --code "USD" \
+                               --status-code "ACTIVE" \
+                               --output json | jq -r '.id')
+echo "USD Asset created with ID: $USD_ASSET_ID"
+
+EUR_ASSET_ID=$(mdz asset create --organization-id "$ORG_ID" \
+                               --ledger-id "$LEDGER_ID" \
+                               --name "Euro" \
+                               --type "currency" \
+                               --code "EUR" \
+                               --status-code "ACTIVE" \
+                               --output json | jq -r '.id')
+echo "EUR Asset created with ID: $EUR_ASSET_ID"
+
+# Create segments
+echo "Creating segments..."
+RETAIL_SEGMENT_ID=$(mdz segment create --organization-id "$ORG_ID" \
+                                      --ledger-id "$LEDGER_ID" \
+                                      --name "Retail Customers" \
+                                      --status-code "ACTIVE" \
+                                      --output json | jq -r '.id')
+echo "Retail Segment created with ID: $RETAIL_SEGMENT_ID"
+
+CORPORATE_SEGMENT_ID=$(mdz segment create --organization-id "$ORG_ID" \
+                                         --ledger-id "$LEDGER_ID" \
+                                         --name "Corporate Customers" \
+                                         --status-code "ACTIVE" \
+                                         --output json | jq -r '.id')
+echo "Corporate Segment created with ID: $CORPORATE_SEGMENT_ID"
+
+# Create portfolios
+echo "Creating portfolios..."
+INVESTMENT_PORTFOLIO_ID=$(mdz portfolio create --organization-id "$ORG_ID" \
+                                              --ledger-id "$LEDGER_ID" \
+                                              --entity-id "inv-001" \
+                                              --name "Investment Portfolio" \
+                                              --status-code "ACTIVE" \
+                                              --output json | jq -r '.id')
+echo "Investment Portfolio created with ID: $INVESTMENT_PORTFOLIO_ID"
+
+TRADING_PORTFOLIO_ID=$(mdz portfolio create --organization-id "$ORG_ID" \
+                                           --ledger-id "$LEDGER_ID" \
+                                           --entity-id "trade-001" \
+                                           --name "Trading Portfolio" \
+                                           --status-code "ACTIVE" \
+                                           --output json | jq -r '.id')
+echo "Trading Portfolio created with ID: $TRADING_PORTFOLIO_ID"
+
+# Create accounts
+echo "Creating accounts..."
+USD_ACCOUNT_ID=$(mdz account create --organization-id "$ORG_ID" \
+                                   --ledger-id "$LEDGER_ID" \
+                                   --portfolio-id "$INVESTMENT_PORTFOLIO_ID" \
+                                   --segment-id "$RETAIL_SEGMENT_ID" \
+                                   --asset-code "USD" \
+                                   --name "USD Investment Account" \
+                                   --type "investment" \
+                                   --alias "@usd_investment" \
+                                   --status-code "ACTIVE" \
+                                   --output json | jq -r '.id')
+echo "USD Account created with ID: $USD_ACCOUNT_ID"
+
+EUR_ACCOUNT_ID=$(mdz account create --organization-id "$ORG_ID" \
+                                   --ledger-id "$LEDGER_ID" \
+                                   --portfolio-id "$TRADING_PORTFOLIO_ID" \
+                                   --segment-id "$CORPORATE_SEGMENT_ID" \
+                                   --asset-code "EUR" \
+                                   --name "EUR Trading Account" \
+                                   --type "trading" \
+                                   --alias "@eur_trading" \
+                                   --status-code "ACTIVE" \
+                                   --output json | jq -r '.id')
+echo "EUR Account created with ID: $EUR_ACCOUNT_ID"
+
+# Validate structure
+echo "Validating structure..."
+echo "Organization:"
+mdz organization describe --organization-id "$ORG_ID"
+
+echo "Ledgers:"
+mdz ledger list --organization-id "$ORG_ID"
+
+echo "Assets:"
+mdz asset list --organization-id "$ORG_ID" --ledger-id "$LEDGER_ID"
+
+echo "Segments:"
+mdz segment list --organization-id "$ORG_ID" --ledger-id "$LEDGER_ID"
+
+echo "Portfolios:"
+mdz portfolio list --organization-id "$ORG_ID" --ledger-id "$LEDGER_ID"
+
+echo "Accounts:"
+mdz account list --organization-id "$ORG_ID" --ledger-id "$LEDGER_ID"
+
+echo "Financial structure created successfully!"
+```
+
+Save this script as `create-financial-structure.sh`, make it executable with `chmod +x create-financial-structure.sh`, and run it to create a complete financial structure.
+
+## Best Practices
+
+When creating financial structures in Midaz, follow these best practices:
+
+1. **Plan your hierarchy**: Design your financial structure before implementing it
+2. **Use descriptive names**: Choose clear, meaningful names for all entities
+3. **Store IDs in variables**: When creating child entities, store parent IDs in variables
+4. **Use status codes consistently**: Standardize status codes across entities (e.g., "ACTIVE", "INACTIVE")
+5. **Leverage metadata**: Use metadata to extend entities with custom attributes
+6. **Validate as you go**: Check that each entity is created correctly before moving to the next
+7. **Document your structure**: Keep track of entity IDs and relationships for future reference
+8. **Use unique aliases**: Create memorable aliases for accounts to make them easier to reference
+
+## Troubleshooting
+
+### Common Issues
+
+| Issue | Possible Cause | Solution |
+|-------|---------------|----------|
+| Entity creation fails | Missing required fields | Ensure all required fields are provided |
+| "Entity not found" errors | Incorrect parent entity ID | Double-check parent entity IDs |
+| Asset creation fails | Duplicate asset code | Use unique asset codes within a ledger |
+| Account creation fails | Invalid asset code | Verify the asset exists in the ledger |
+
+### Validating Your Structure
+
+Use these commands to validate your financial structure at any time:
+
+```bash
+# Check organization details
+mdz organization describe --organization-id "$ORGANIZATION_ID"
+
+# List all ledgers in an organization
+mdz ledger list --organization-id "$ORGANIZATION_ID"
+
+# List all assets in a ledger
+mdz asset list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID"
+
+# List all accounts in a portfolio
+mdz account list --organization-id "$ORGANIZATION_ID" --ledger-id "$LEDGER_ID" --portfolio-id "$PORTFOLIO_ID"
+```
+
+## References
+
+- [MDZ CLI Commands](../components/mdz-cli/commands.md) - Comprehensive reference for all CLI commands
+- [MDZ CLI Usage Guide](../components/mdz-cli/usage-guide.md) - Detailed guide for using the CLI
+- [Entity Hierarchy](../domain-models/entity-hierarchy.md) - Detailed explanation of entity relationships
+- [Financial Model](../domain-models/financial-model.md) - Overview of the financial model
\ No newline at end of file
diff --git a/docs/tutorials/implementing-transactions.md b/docs/tutorials/implementing-transactions.md
new file mode 100644
index 00000000..929b5b7d
--- /dev/null
+++ b/docs/tutorials/implementing-transactions.md
@@ -0,0 +1,653 @@
+# Implementing Transactions
+
+**Navigation:** [Home](../) > [Tutorials](./README.md) > Implementing Transactions
+
+This tutorial provides a comprehensive guide to implementing financial transactions in the Midaz platform. You'll learn how to create, execute, and manage different types of transactions using both the API and the Transaction DSL.
+
+## Table of Contents
+
+- [Introduction](#introduction)
+- [Transaction Model](#transaction-model)
+- [Transaction Processing Flow](#transaction-processing-flow)
+- [Transaction DSL](#transaction-dsl)
+- [Creating Simple Transactions](#creating-simple-transactions)
+- [Advanced Transaction Patterns](#advanced-transaction-patterns)
+- [Error Handling](#error-handling)
+- [Testing Transactions](#testing-transactions)
+- [Best Practices](#best-practices)
+- [References](#references)
+
+## Introduction
+
+Transactions are the core of any financial system. In Midaz, transactions represent the movement of funds between accounts and are implemented with double-entry bookkeeping principles to ensure financial integrity. This tutorial will guide you through the process of implementing various types of transactions in Midaz.
+
+### Prerequisites
+
+Before implementing transactions, you should:
+
+1. Have a [financial structure](./creating-financial-structures.md) set up with organizations, ledgers, assets, and accounts
+2. Understand the [entity hierarchy](../domain-models/entity-hierarchy.md) of Midaz
+3. Be familiar with the [financial model](../domain-models/financial-model.md) principles
+
+## Transaction Model
+
+A transaction in Midaz consists of several key components:
+
+1. **Transaction Entity**: The top-level record containing metadata and status
+2. **Operations**: Individual debit/credit entries that affect account balances
+3. **Source/Destination**: Accounts involved in the transaction
+4. **Amounts**: Values being transferred between accounts
+5. **Asset Codes**: The currencies or assets involved
+
+*Note: Transaction model diagram will be provided in a future documentation update.*
+
+### Key Transaction Fields
+
+| Field | Description |
+|-------|-------------|
+| `id` | Unique identifier for the transaction |
+| `externalId` | Optional external reference ID |
+| `ledgerId` | ID of the ledger where the transaction takes place |
+| `organizationId` | ID of the organization that owns the transaction |
+| `operationIds` | IDs of the operations created by this transaction |
+| `type` | Type of transaction (e.g., transfer, payment) |
+| `status` | Current status (e.g., pending, completed, failed) |
+| `metadata` | Custom key-value pairs for additional information |
+| `createdAt` | Timestamp when the transaction was created |
+| `updatedAt` | Timestamp when the transaction was last updated |
+
+## Transaction Processing Flow
+
+Transactions in Midaz follow a well-defined processing flow:
+
+1. **Request Submission**: Transaction request is submitted via API or using the DSL
+2. **Validation**: The transaction is validated for integrity and correctness
+3. **Creation**: The transaction record is created in the database
+4. **Operations Generation**: Individual operations are created for each account entry
+5. **Balance Updates**: Account balances are updated based on operations
+6. **Status Updates**: Transaction status is updated throughout the process
+7. **Completion**: The transaction is marked as completed or failed
+
+This flow is managed by the Transaction Service, which uses a Balance-Transaction-Operation (BTO) pattern to maintain consistency and atomicity.
+
+*Note: Transaction processing flow diagram will be provided in a future documentation update.*
+
+## Transaction DSL
+
+Midaz provides a domain-specific language (DSL) for defining transactions. The Transaction DSL offers a powerful, expressive way to define complex transactions.
+
+### Basic DSL Syntax
+
+The Transaction DSL uses a structured syntax with the following basic structure:
+
+```
+transaction "Name" {
+  description "Description of the transaction"
+  code "TRANSACTION_CODE"
+  
+  send USD 100.00 {
+    source {
+      from "account-id" {
+        chart_of_accounts "ACCOUNT_CODE"
+        description "Description of the source"
+      }
+    }
+    
+    distribute {
+      to "account-id" {
+        chart_of_accounts "ACCOUNT_CODE"
+        description "Description of the destination"
+      }
+    }
+  }
+}
+```
+
+### DSL Elements
+
+| Element | Description | Example |
+|---------|-------------|---------|
+| `transaction` | The transaction container | `transaction "Payment" { ... }` |
+| `send` | Defines a fund transfer with asset and amount | `send USD 100.00 { ... }` |
+| `source` | Container for source accounts | `source { ... }` |
+| `from` | Specifies which account to debit | `from "@account123" { ... }` |
+| `distribute` | Container for destination accounts | `distribute { ... }` |
+| `to` | Specifies which account to credit | `to "@account456" { ... }` |
+| `chart_of_accounts` | Account classification code | `chart_of_accounts "1000"` |
+| `description` | Human-readable description | `description "Payment for invoice"` |
+| `metadata` | Container for key-value metadata | `metadata { ("key" "value") }` |
+
+## Creating Simple Transactions
+
+Let's start by implementing basic transactions in Midaz.
+
+### Direct Transfer Between Accounts
+
+This example shows a simple transfer of funds from one account to another.
+
+#### Using API (JSON)
+
+```json
+POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json
+
+{
+  "type": "transfer",
+  "sources": [
+    {
+      "accountId": "source-account-id",
+      "amount": "100.00",
+      "assetCode": "USD"
+    }
+  ],
+  "destinations": [
+    {
+      "accountId": "destination-account-id",
+      "amount": "100.00",
+      "assetCode": "USD"
+    }
+  ],
+  "metadata": {
+    "reference": "Invoice #12345",
+    "category": "Payment"
+  }
+}
+```
+
+#### Using Transaction DSL
+
+```
+POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl
+
+transaction "Simple Transfer" {
+  description "Transfer between accounts"
+  code "TRANSFER"
+  
+  send USD 100.00 {
+    source {
+      from "source-account-id" {
+        chart_of_accounts "1000"
+        description "Withdrawal from source account"
+      }
+    }
+    
+    distribute {
+      to "destination-account-id" {
+        chart_of_accounts "2000"
+        description "Deposit to destination account"
+      }
+    }
+  }
+  
+  metadata {
+    ("reference" "Invoice #12345")
+    ("category" "Payment")
+  }
+}
+```
+
+### Using Account Aliases
+
+You can also use account aliases instead of IDs for more readable transactions:
+
+```
+transaction "Account Transfer" {
+  description "Transfer between named accounts"
+  code "TRANSFER"
+  
+  send USD 100.00 {
+    source {
+      from "@checking_account" {
+        chart_of_accounts "1001"
+        description "Withdrawal from checking account"
+      }
+    }
+    
+    distribute {
+      to "@savings_account" {
+        chart_of_accounts "2001"
+        description "Deposit to savings account"
+      }
+    }
+  }
+}
+```
+
+### Checking Transaction Status
+
+After creating a transaction, you can check its status:
+
+```
+GET /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}
+```
+
+Response:
+
+```json
+{
+  "id": "transaction-id",
+  "externalId": null,
+  "organizationId": "organization-id",
+  "ledgerId": "ledger-id",
+  "type": "transfer",
+  "status": "completed",
+  "metadata": {
+    "reference": "Invoice #12345",
+    "category": "Payment"
+  },
+  "operationIds": ["op-id-1", "op-id-2"],
+  "createdAt": "2023-01-01T12:00:00Z",
+  "updatedAt": "2023-01-01T12:00:05Z"
+}
+```
+
+## Advanced Transaction Patterns
+
+Now let's explore more complex transaction patterns in Midaz.
+
+### Multi-source Transaction
+
+Transfer funds from multiple source accounts to a single destination:
+
+```
+transaction "Multi-source Transfer" {
+  description "Transfer from multiple accounts"
+  code "MULTI_SOURCE"
+  
+  send USD 100.00 {
+    source {
+      from "@checking_account" {
+        amount USD 50.00
+        chart_of_accounts "1001"
+        description "Withdrawal from checking account"
+      }
+      from "@savings_account" {
+        amount USD 50.00
+        chart_of_accounts "1002"
+        description "Withdrawal from savings account"
+      }
+    }
+    
+    distribute {
+      to "@investment_account" {
+        amount USD 100.00
+        chart_of_accounts "3001"
+        description "Deposit to investment account"
+      }
+    }
+  }
+}
+```
+
+### Multi-destination Transaction (Distribution)
+
+Distribute funds from a single source to multiple destinations:
+
+```
+transaction "Multi-destination Transfer" {
+  description "Transfer to multiple accounts"
+  code "DISTRIBUTE"
+  
+  send USD 100.00 {
+    source {
+      from "@main_account" {
+        chart_of_accounts "1000"
+        description "Withdrawal from main account"
+      }
+    }
+    
+    distribute {
+      to "@account1" {
+        amount USD 50.00
+        chart_of_accounts "2001"
+        description "First recipient"
+      }
+      to "@account2" {
+        amount USD 30.00
+        chart_of_accounts "2002"
+        description "Second recipient"
+      }
+      to "@account3" {
+        amount USD 20.00
+        chart_of_accounts "2003"
+        description "Third recipient"
+      }
+    }
+  }
+}
+```
+
+### Percentage-based Distribution
+
+Distribute funds based on percentages:
+
+```
+transaction "Percentage Distribution" {
+  description "Distribute by percentage"
+  code "PERCENT_DIST"
+  
+  send USD 100.00 {
+    source {
+      from "@main_account" {
+        chart_of_accounts "1000"
+        description "Withdrawal from main account"
+      }
+    }
+    
+    distribute {
+      to "@account1" {
+        share 50
+        chart_of_accounts "2001"
+        description "50% share recipient"
+      }
+      to "@account2" {
+        share 30
+        chart_of_accounts "2002"
+        description "30% share recipient"
+      }
+      to "@account3" {
+        share 20
+        chart_of_accounts "2003"
+        description "20% share recipient"
+      }
+    }
+  }
+}
+```
+
+### Currency Conversion Transaction
+
+Convert between different currencies using asset rates:
+
+```
+transaction "Currency Conversion" {
+  description "USD to EUR conversion"
+  code "FX_CONVERT"
+  
+  send USD 100.00 {
+    source {
+      from "@usd_account" {
+        chart_of_accounts "1001"
+        description "USD account withdrawal"
+      }
+    }
+    
+    distribute {
+      to "@eur_account" {
+        rate "RATE_ID" USD -> EUR 0.85
+        chart_of_accounts "1002"
+        description "EUR account deposit"
+      }
+    }
+  }
+}
+```
+
+### Transaction with Pending Status
+
+Create a transaction that requires review before processing:
+
+```
+transaction "Pending Payment" {
+  description "Payment requiring review"
+  code "PENDING_PAY"
+  pending true
+  
+  send USD 100.00 {
+    source {
+      from "@checking_account" {
+        chart_of_accounts "1001"
+        description "Withdrawal from checking"
+      }
+    }
+    
+    distribute {
+      to "@merchant_account" {
+        chart_of_accounts "2001"
+        description "Payment to merchant"
+      }
+    }
+  }
+}
+
+// Later, to commit the pending transaction:
+// POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit
+
+// Or to revert the pending transaction:
+// POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert
+```
+
+## Error Handling
+
+Proper error handling is crucial when implementing transactions. Here are the common error types and how to handle them:
+
+### Common Transaction Errors
+
+| Error Code | Description | Handling Strategy |
+|------------|-------------|-------------------|
+| `ErrInsufficientFunds` | Account doesn't have enough available balance | Check balance before transaction or handle retry logic |
+| `ErrInvalidAccount` | Account doesn't exist or is invalid | Validate accounts before transaction |
+| `ErrMismatchedAssetCode` | Asset codes don't match between source and destination | Ensure asset codes match or use currency conversion |
+| `ErrIdempotencyKey` | Duplicate transaction with same idempotency key | Use a new idempotency key or check the original transaction |
+| `ErrTransactionValidation` | Transaction doesn't pass validation rules | Fix the transaction structure based on error details |
+
+### Idempotency Keys
+
+To ensure transactions are processed only once, use idempotency keys:
+
+```json
+POST /v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json
+X-Idempotency-Key: unique-request-id-123
+
+{
+  "type": "transfer",
+  "sources": [...],
+  "destinations": [...]
+}
+```
+
+### Error Response Example
+
+```json
+{
+  "error": {
+    "code": "ErrInsufficientFunds",
+    "message": "Insufficient funds in account",
+    "details": {
+      "accountId": "source-account-id",
+      "available": "50.00",
+      "required": "100.00",
+      "assetCode": "USD"
+    }
+  }
+}
+```
+
+## Testing Transactions
+
+It's important to thoroughly test your transactions before moving to production. Here are some ways to test transactions in Midaz:
+
+### Balance Verification
+
+After a transaction, verify the balances of all involved accounts to ensure they were updated correctly:
+
+```
+GET /v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/balances
+```
+
+### Transaction Lifecycle Testing
+
+1. Create a transaction
+2. Verify that operations were created
+3. Check account balances
+4. Verify transaction status
+
+### Test Cases for Transactions
+
+| Test Case | Description |
+|-----------|-------------|
+| Valid transaction | Basic transaction with sufficient funds |
+| Insufficient funds | Transaction with more funds than available |
+| Invalid account | Transaction with non-existent account |
+| Asset mismatch | Transaction with mismatched asset codes |
+| Idempotency | Same transaction submitted twice |
+| Concurrent transactions | Multiple transactions affecting the same account |
+
+## Best Practices
+
+Follow these best practices when implementing transactions in Midaz:
+
+1. **Use Idempotency Keys**: Always include idempotency keys for production transactions to prevent duplicates.
+
+2. **Transaction Atomicity**: Design transactions to be atomic - either all operations succeed or all fail.
+
+3. **Balance Checking**: Check account balances before attempting large transactions to avoid failures.
+
+4. **Error Handling**: Implement comprehensive error handling for transaction failures.
+
+5. **Transaction Logging**: Include sufficient metadata for auditing and tracking.
+
+6. **Asynchronous Processing**: Be prepared for asynchronous processing; don't assume transactions complete instantly.
+
+7. **Amount Precision**: Be careful with amount calculations to avoid floating-point errors.
+
+8. **Security**: Always validate permissions before executing transactions.
+
+9. **Monitoring**: Implement monitoring for transaction failures and unusual patterns.
+
+10. **Documentation**: Document the purpose and structure of your transaction patterns.
+
+## Advanced Implementation Examples
+
+Here are some complete implementation examples for common transaction scenarios:
+
+### Example 1: Customer Payment Processing
+
+```
+transaction "Customer Payment" {
+  description "Payment from customer to merchant with fee"
+  code "PAYMENT_FEE"
+  
+  send USD 100.00 {
+    source {
+      from "@customer_account" {
+        chart_of_accounts "1000"
+        description "Customer payment"
+      }
+    }
+    
+    distribute {
+      to "@merchant_account" {
+        amount USD 97.00
+        chart_of_accounts "2000"
+        description "Merchant payment"
+      }
+      to "@fee_account" {
+        amount USD 3.00
+        chart_of_accounts "5000"
+        description "Transaction fee"
+      }
+    }
+  }
+  
+  metadata {
+    ("payment_id" "PAY-123456")
+    ("customer_id" "CUST-789")
+    ("merchant_id" "MERCH-456")
+    ("fee_percentage" "3")
+  }
+}
+```
+
+### Example 2: Salary Distribution
+
+```
+transaction "Salary Payment" {
+  description "Monthly salary distribution"
+  code "PAYROLL"
+  
+  send USD 5000.00 {
+    source {
+      from "@payroll_account" {
+        chart_of_accounts "1100"
+        description "Payroll account withdrawal"
+      }
+    }
+    
+    distribute {
+      to "@employee1_account" {
+        amount USD 2000.00
+        chart_of_accounts "2100"
+        description "Senior Engineer salary"
+      }
+      to "@employee2_account" {
+        amount USD 1500.00
+        chart_of_accounts "2100"
+        description "Engineer salary"
+      }
+      to "@employee3_account" {
+        amount USD 1500.00
+        chart_of_accounts "2100"
+        description "Engineer salary"
+      }
+    }
+  }
+  
+  metadata {
+    ("payroll_id" "PR-202301")
+    ("period" "January 2023")
+    ("department" "Engineering")
+  }
+}
+```
+
+### Example 3: Investment Allocation
+
+```
+transaction "Investment Allocation" {
+  description "Portfolio allocation based on investment strategy"
+  code "INVEST_ALLOC"
+  
+  send USD 10000.00 {
+    source {
+      from "@investment_pool" {
+        chart_of_accounts "1200"
+        description "Investment pool withdrawal"
+      }
+    }
+    
+    distribute {
+      to "@stocks_fund" {
+        share 60
+        chart_of_accounts "4100"
+        description "Equity allocation"
+      }
+      to "@bonds_fund" {
+        share 30
+        chart_of_accounts "4200"
+        description "Fixed income allocation"
+      }
+      to "@cash_reserve" {
+        share 10
+        chart_of_accounts "4300"
+        description "Cash reserve allocation"
+      }
+    }
+  }
+  
+  metadata {
+    ("strategy" "Growth")
+    ("investor_id" "INV-456")
+    ("allocation_date" "2023-01-15")
+  }
+}
+```
+
+## References
+
+- [Transaction Service API](../components/transaction/api.md)
+- [Transaction Domain Model](../components/transaction/domain-model.md)
+- [Transaction Processing](../components/transaction/transaction-processing.md)
+- [Balance Management](../components/transaction/balance-management.md)
+- [Financial Model](../domain-models/financial-model.md)
+- [Transaction DSL Documentation](../api-reference/transaction-dsl/README.md)
+- [Creating Financial Structures](./creating-financial-structures.md)
\ No newline at end of file
diff --git a/docs/tutorials/new-developer-onboarding.md b/docs/tutorials/new-developer-onboarding.md
new file mode 100644
index 00000000..d829d4a3
--- /dev/null
+++ b/docs/tutorials/new-developer-onboarding.md
@@ -0,0 +1,376 @@
+# New Developer Onboarding
+
+**Navigation:** [Home](../) > [Tutorials](../) > New Developer Onboarding
+
+This guide provides a comprehensive walkthrough for new developers joining the Midaz project. It covers the development environment setup, codebase structure, development workflow, and best practices.
+
+## Table of Contents
+
+- [Development Environment Setup](#development-environment-setup)
+- [Codebase Structure Overview](#codebase-structure-overview)
+- [Development Workflow](#development-workflow)
+- [Common Development Tasks](#common-development-tasks)
+- [Testing Strategy](#testing-strategy)
+- [Debugging and Troubleshooting](#debugging-and-troubleshooting)
+- [Contribution Guidelines](#contribution-guidelines)
+- [Resources and References](#resources-and-references)
+
+## Development Environment Setup
+
+### Prerequisites
+
+Before you begin, ensure you have the following prerequisites installed:
+
+- **Go 1.24.1 or higher** - [Download and install from golang.org](https://golang.org/doc/install)
+- **Docker and Docker Compose** - [Download and install from docker.com](https://docs.docker.com/get-docker/)
+- **Git** - [Download and install from git-scm.com](https://git-scm.com/downloads)
+
+### Initial Setup
+
+1. **Clone the Repository**
+
+   ```bash
+   git clone https://github.com/LerianStudio/midaz
+   cd midaz
+   ```
+
+2. **Set Up Development Environment**
+
+   ```bash
+   make dev-setup
+   ```
+
+   This command will:
+   - Install necessary Git hooks
+   - Install development tools (golangci-lint, mockgen, swag, gosec, etc.)
+   - Configure your development environment
+
+3. **Set Up Environment Variables**
+
+   ```bash
+   make set-env
+   ```
+
+   This command copies all `.env.example` files to `.env` in each component directory. Review and modify these files as needed for your environment.
+
+4. **Start All Services**
+
+   ```bash
+   make up
+   ```
+
+   This command starts all required services using Docker Compose.
+
+5. **Verify Installation**
+
+   ```bash
+   make logs
+   ```
+
+   Ensure all services are running without errors.
+
+## Codebase Structure Overview
+
+Midaz follows a modular microservices architecture with the following main components:
+
+### Top-Level Structure
+
+```
+midaz/
+├── components/           # Main microservices components
+│   ├── infra/            # Infrastructure setup (databases, message queues)
+│   ├── mdz/              # CLI component
+│   ├── onboarding/       # Onboarding API component
+│   └── transaction/      # Transaction processing component
+├── pkg/                  # Shared packages used across components
+│   ├── constant/         # Shared constants
+│   ├── gold/             # Transaction DSL parser
+│   ├── mmodel/           # Shared model definitions
+│   ├── net/              # Network utilities
+│   └── shell/            # Shell utilities
+├── docs/                 # Documentation
+├── scripts/              # Build and utility scripts
+└── ...
+```
+
+### Key Components
+
+1. **Infrastructure (`components/infra/`)**
+   - Contains Docker configurations for PostgreSQL, MongoDB, RabbitMQ, and other supporting services
+   - Manages infrastructure dependencies for development and testing
+
+2. **MDZ CLI (`components/mdz/`)**
+   - Command-line interface for interacting with the Midaz system
+   - Built using Cobra for a modern CLI experience
+   - Organized using domain-driven design patterns
+
+3. **Onboarding Service (`components/onboarding/`)**
+   - Manages financial entities (organizations, ledgers, accounts, etc.)
+   - Implements hexagonal architecture with CQRS pattern
+   - Uses PostgreSQL for primary data, MongoDB for flexible metadata
+
+4. **Transaction Service (`components/transaction/`)**
+   - Processes financial transactions using double-entry accounting principles
+   - Follows the same architectural pattern as the onboarding service
+   - Implements the Balance-Transaction-Operation (BTO) pattern
+
+5. **Shared Packages (`pkg/`)**
+   - Common code used across multiple components
+   - Domain models, constants, error handling, and utilities
+   - Contains the transaction Domain-Specific Language (DSL) parser
+
+### Architectural Patterns
+
+Each service component follows these key architectural patterns:
+
+1. **Hexagonal Architecture**
+   - Core domain logic isolated from external concerns
+   - Port interfaces define interactions with external systems
+   - Adapter implementations connect to specific technologies
+
+2. **Command Query Responsibility Segregation (CQRS)**
+   - Separate command (write) and query (read) operations
+   - Commands in `internal/services/command/`
+   - Queries in `internal/services/query/`
+
+3. **Repository Pattern**
+   - Domain entities accessed through repository interfaces
+   - Technology-specific implementations (PostgreSQL, MongoDB)
+   - Clean separation between business logic and persistence
+
+For a deeper understanding of these patterns, refer to the [Hexagonal Architecture](../architecture/hexagonal-architecture.md) and [CQRS Pattern](../developer-guide/code-organization.md#cqrs-pattern) documentation.
+
+## Development Workflow
+
+### Git Workflow
+
+1. **Branch Management**
+   - Create a feature branch from `main`
+   - Use descriptive branch names (e.g., `feature/add-new-entity`, `fix/transaction-validation`)
+   - Follow the [Conventional Commits](https://www.conventionalcommits.org/) format for commit messages
+
+2. **Pull Request Process**
+   - Create a PR against the `main` branch
+   - Ensure all tests pass and code quality checks are satisfied
+   - Address code review feedback
+   - Sign your commits with the `-s` flag
+
+### Making Changes
+
+1. **Locate the relevant component**
+   - Determine which service (onboarding, transaction, CLI) your change affects
+   - Find the appropriate domain within that service
+
+2. **Understand the existing code**
+   - Review the component's `internal/domain` directory to understand domain entities
+   - Check existing implementations in the `internal/adapters` directory
+   - Look at handler implementations in `internal/services/command` or `internal/services/query`
+
+3. **Follow the established patterns**
+   - Use the existing code as a reference for how to structure your changes
+   - Maintain separation between commands and queries
+   - Follow the repository pattern for data access
+   - Keep business logic independent of infrastructure
+
+4. **Update tests**
+   - Add or update unit tests for your changes
+   - Follow the established test patterns and naming conventions
+   - Aim for good test coverage (checked with `make cover`)
+
+## Common Development Tasks
+
+### Building and Running
+
+```bash
+# Build all components
+make build
+
+# Start all services with Docker
+make up
+
+# View logs
+make logs
+
+# Rebuild and restart services
+make rebuild-up
+```
+
+### Component-Specific Commands
+
+```bash
+# Execute a command for a specific component
+make mdz COMMAND=build
+make onboarding COMMAND=test
+make transaction COMMAND=generate-docs
+```
+
+### Code Quality
+
+```bash
+# Format code
+make format
+
+# Run linter
+make lint
+
+# Security check
+make sec
+
+# Clean up dependencies
+make tidy
+```
+
+### API Documentation
+
+```bash
+# Generate OpenAPI documentation
+make generate-docs-all
+
+# Validate API documentation
+make validate-api-docs
+```
+
+## Testing Strategy
+
+Midaz employs a comprehensive testing approach:
+
+### Unit Testing
+
+```bash
+# Run all tests
+make test
+
+# Run tests with coverage report
+make cover
+```
+
+### Test Patterns
+
+1. **Mocking**
+   - Each repository interface has a corresponding mock implementation (`*_mock.go`)
+   - Use the mock implementations for unit testing services
+   - Mock generation is handled by the `mockgen` tool
+
+2. **Table-Driven Tests**
+   - Tests use a table-driven approach with multiple test cases
+   - Each test case includes input data and expected outputs
+   - Descriptive test case names explain the scenario being tested
+
+3. **Golden File Tests**
+   - Used for testing CLI output and complex serialization
+   - Expected outputs stored in `testdata/*.golden` files
+   - Test compares actual output with the golden file
+
+### Integration Testing
+
+```bash
+# Run integration tests for MDZ CLI
+cd components/mdz
+make test_integration
+```
+
+Integration tests ensure that components work correctly together, including:
+- CLI commands against a running system
+- API endpoints with real database interactions
+- End-to-end transaction processing
+
+## Debugging and Troubleshooting
+
+### Viewing Logs
+
+```bash
+# View logs from all services
+make logs
+
+# View logs from a specific service
+make logs SERVICE=onboarding
+make logs SERVICE=transaction
+```
+
+### Database Access
+
+```bash
+# Connect to PostgreSQL
+make postgres-cli
+
+# Connect to MongoDB
+make mongo-cli
+```
+
+### Common Issues
+
+1. **Docker Issues**
+   
+   If you encounter issues with Docker containers:
+
+   ```bash
+   # Clean all Docker resources
+   make clean-docker
+
+   # Rebuild and restart all services
+   make rebuild-up
+   ```
+
+2. **Missing Environment Files**
+   
+   If you see errors about missing configuration:
+
+   ```bash
+   # Re-create environment files
+   make set-env
+   ```
+
+3. **Port Conflicts**
+   
+   If services fail to start due to port conflicts, check for other applications using the same ports. You can modify the port mappings in the `.env` files.
+
+## Contribution Guidelines
+
+### Code Style
+
+- Follow Go's idiomatic style and conventions
+- Use consistent naming according to the project's conventions
+- Format code with `gofmt` or `make format`
+
+### Pull Request Checklist
+
+Before submitting a pull request, ensure:
+
+1. Code builds successfully with `make build`
+2. All tests pass with `make test`
+3. Linting passes with `make lint`
+4. Security checks pass with `make sec`
+5. API documentation is up-to-date with `make generate-docs-all`
+6. Commit messages follow the Conventional Commits format
+7. You've added tests for new features or bug fixes
+8. Documentation is updated if necessary
+
+### Code Review Process
+
+- Pull requests require at least one approval from a maintainer
+- Address all code review comments and requested changes
+- Automated CI checks must pass before merging
+
+## Resources and References
+
+### Documentation
+
+- [Architecture Overview](../architecture/system-overview.md)
+- [Hexagonal Architecture](../architecture/hexagonal-architecture.md)
+- [Code Organization](../developer-guide/code-organization.md)
+- [Error Handling](../developer-guide/error-handling.md)
+- [Financial Model](../domain-models/financial-model.md)
+
+### External Resources
+
+- [Go Documentation](https://golang.org/doc/)
+- [Docker Documentation](https://docs.docker.com/)
+- [PostgreSQL Documentation](https://www.postgresql.org/docs/)
+- [MongoDB Documentation](https://docs.mongodb.com/)
+- [RabbitMQ Documentation](https://www.rabbitmq.com/documentation.html)
+
+### Getting Help
+
+- Create issues in the GitHub repository for bugs or feature requests
+- Contact the project maintainers for questions
+- Refer to the [CONTRIBUTING.md](../../CONTRIBUTING.md) file for detailed contribution guidelines
\ No newline at end of file
diff --git a/docs/versions.md b/docs/versions.md
new file mode 100644
index 00000000..ce87aede
--- /dev/null
+++ b/docs/versions.md
@@ -0,0 +1,127 @@
+# Version History
+
+**Navigation:** [Home](./) > Version History
+
+This document tracks the major versions and significant changes to the Midaz platform, providing a comprehensive change log that highlights important features, breaking changes, and improvements across versions.
+
+## Overview
+
+Midaz follows [Semantic Versioning (SemVer)](https://semver.org/) for its release versioning. The version format is MAJOR.MINOR.PATCH:
+
+- **MAJOR** version increments indicate incompatible API changes or significant architectural changes
+- **MINOR** version increments indicate backward-compatible functionality additions
+- **PATCH** version increments indicate backward-compatible bug fixes
+
+## Version History
+
+### v2.0.0 (2025-04-05)
+
+A major release with significant architectural changes and breaking changes to the platform.
+
+#### Breaking Changes
+
+- Complete redesign of the Makefile system for improved build and deployment workflow
+- Changed dependency management approach for sync postman script
+- Infrastructure changes requiring migration steps from v1.x
+
+#### Key Features
+
+- Enhanced authentication framework with plugin auth network integration
+- Improved error handling with more descriptive field validations
+- Enhanced MongoDB and PostgreSQL configuration:
+  - Logical replication support in PostgreSQL
+  - MongoDB replica set configuration
+- CI/CD improvements:
+  - Migrated to golangci-lint v2
+  - Organized linting by module
+  - Improved GitHub Action workflows
+
+#### Bug Fixes
+
+- Fixed JSON metadata handling with improved support for JSON Merge Patch
+- Improved error code and status standardization
+- Fixed API documentation generation process
+- Corrected numerous internal API responses to follow error code standards
+- Enhanced RabbitMQ channel configuration
+
+### v1.51.0 (2025-04-04)
+
+Minor update focusing on documentation and README improvements.
+
+#### Bug Fixes
+
+- Updated README with accurate Midaz platform description
+
+### v1.50.0 (2025-03-21)
+
+Performance-focused release with improvements to transaction processing and infrastructure.
+
+#### Key Features
+
+- Performance optimization for balance updates
+- Configurable number of workers via environment variables
+
+#### Bug Fixes
+
+- Added database indexes to improve query performance:
+  - Added balance table indexes with reindex commands
+  - Added account table indexes for performance optimization
+- Improved error handling:
+  - Changed pagination limit error type to validation error
+  - Fixed business error validation
+- Fixed metadata handling for MongoDB
+- Database migration improvements:
+  - Added graceful error handling for migrations
+  - Fixed handling when no migration files exist
+- Infrastructure changes:
+  - Removed pgbouncer
+  - Updated network configurations
+- CI/CD improvements:
+  - Enhanced Discord notifications for releases
+  - Fixed workflow triggers
+
+### v1.40.0 (2024-12-27)
+
+CI/CD focused release with improvements to the deployment and release process.
+
+#### Bug Fixes
+
+- Multiple CI/CD workflow and GitHub Actions improvements
+- Enhanced branch detection and PR management
+- Improved automated release process
+
+### v1.30.0 (2024-10-15)
+
+First public release with core financial transaction functionality.
+
+#### Key Features
+
+- Complete double-entry bookkeeping system with transaction validation
+- Basic entity management (Organization, Ledger, Asset, Segment, Portfolio, Account)
+- Command Line Interface (CLI) for entity and transaction management
+- Event-driven architecture with RabbitMQ messaging
+- Polyglot persistence with PostgreSQL and MongoDB support
+- RESTful APIs for all core services
+
+## Migration Guides
+
+### Migrating from v1.x to v2.0
+
+When migrating from v1.x to v2.0, follow these steps:
+
+1. Update your Makefile references to match the new structure
+2. Migrate database schemas using the provided migration scripts
+3. Update client applications to handle enhanced error responses
+4. Ensure MongoDB is configured for replica set if using metadata functionality
+
+For detailed migration assistance, contact the Midaz support team.
+
+## Documentation Versions
+
+Midaz documentation is versioned alongside the software releases. The current documentation reflects the latest release (v2.0.0).
+
+For historical documentation, please refer to the GitHub repository tags or contact the development team for access to archived documentation.
+
+---
+
+This document is maintained by the Midaz development team. Last updated: 2025-04-07.
\ No newline at end of file
