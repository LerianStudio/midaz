{
	"info": {
		"_postman_id": "233cf94b-251f-4fe9-8bcb-b9c49d3eb661",
		"name": "MIDAZ",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38928920"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Authorization Code Grant",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"access_token\", pm.request.auth.oauth2.get(\"accessToken\"));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "clientSecret",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "clientId",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "tokenName",
													"value": "access_token",
													"type": "string"
												},
												{
													"key": "accessTokenUrl",
													"value": "{{url_auth}}/api/login/oauth/access_token",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "{{url_auth}}/login/oauth/authorize",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "string"
												},
												{
													"key": "useBrowser",
													"value": false,
													"type": "boolean"
												},
												{
													"key": "state",
													"value": "{{$randomUUID}}",
													"type": "string"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "string"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:9000/callback",
													"type": "string"
												},
												{
													"key": "refreshRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "tokenRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "authRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "challengeAlgorithm",
													"value": "S256",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "queryParams",
													"type": "string"
												},
												{
													"key": "client_authentication",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "<check-auth-tab>",
											"host": [
												"<check-auth-tab>"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Implicit Grant",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"postman.setEnvironmentVariable(\"access_token\", pm.request.auth.oauth2.get(\"accessToken\"));"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "oauth2",
											"oauth2": [
												{
													"key": "clientId",
													"value": "{{client_id}}",
													"type": "string"
												},
												{
													"key": "authUrl",
													"value": "{{url_auth}}/login/oauth/authorize",
													"type": "string"
												},
												{
													"key": "tokenName",
													"value": "token",
													"type": "string"
												},
												{
													"key": "useBrowser",
													"value": false,
													"type": "boolean"
												},
												{
													"key": "state",
													"value": "{{$randomUUID}}",
													"type": "string"
												},
												{
													"key": "scope",
													"value": "openid",
													"type": "string"
												},
												{
													"key": "redirect_uri",
													"value": "http://localhost:9000/callback",
													"type": "string"
												},
												{
													"key": "grant_type",
													"value": "implicit",
													"type": "string"
												},
												{
													"key": "refreshRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "tokenRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "authRequestParams",
													"value": [],
													"type": "any"
												},
												{
													"key": "challengeAlgorithm",
													"value": "S256",
													"type": "string"
												},
												{
													"key": "addTokenTo",
													"value": "queryParams",
													"type": "string"
												},
												{
													"key": "client_authentication",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "<check-auth-tab>",
											"host": [
												"<check-auth-tab>"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Resource Owner Password Credentials Grant",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"access_token\", jsonData.access_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"grant_type\": \"password\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"username\": \"user_john\",\n    \"password\": \"Leriand@123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_auth}}/api/login/oauth/access_token",
											"host": [
												"{{url_auth}}"
											],
											"path": [
												"api",
												"login",
												"oauth",
												"access_token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Client Credentials Grant",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"access_token\", jsonData.access_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_auth}}/api/login/oauth/access_token",
											"host": [
												"{{url_auth}}"
											],
											"path": [
												"api",
												"login",
												"oauth",
												"access_token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Refresh Token",
							"item": [
								{
									"name": "Login",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"access_token\", jsonData.access_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"grant_type\": \"refresh_token\",\n    \"refresh_token\": \"{{access_token}}\",\n    \"scope\": \"profile\",\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url_auth}}/api/login/oauth/refresh_token",
											"host": [
												"{{url_auth}}"
											],
											"path": [
												"api",
												"login",
												"oauth",
												"refresh_token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Token Introspection",
					"item": [
						{
							"name": "Verify Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "text"
										},
										{
											"key": "token_type_hint",
											"value": "access_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url_auth}}/api/login/oauth/introspect",
									"host": [
										"{{url_auth}}"
									],
									"path": [
										"api",
										"login",
										"oauth",
										"introspect"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"organization_id before: \" + postman.getEnvironmentVariable(\"organization_id\"));",
									"    postman.setEnvironmentVariable(\"organization_id\", jsonData.id);",
									"    console.log(\"organization_id after: \" + postman.getEnvironmentVariable(\"organization_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"legalName\": \"{{$randomCompanyName}}\",\n    //\"parentOrganizationId\": \"{{organization_id}}\",\n    \"doingBusinessAs\": \"The ledger.io\", //opcional\n    \"legalDocument\": \"48784548000104\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Ledger\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\" //de acordo com a ISO 3166-1 alpha2\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"legalName\": \"{{$randomCompanyName}}\",\n    \"parentOrganizationId\": \"{{organization_id}}\",\n    \"doingBusinessAs\": \"The ledger.io\", //opcional\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Blocked\"\n    },\n    \"address\": {\n        \"line1\": \"Avenida Paulista, 1234\",\n        \"line2\": \"CJ 203\",\n        \"zipCode\": \"04696040\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"{{$randomCountryCode}}\",\n        \"country\": \"{{$randomCountryCode}}\" //de acordo com a ISO 3166-1 alpha2\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave_update\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/v1/organizations?metadata.chave=teste&limit=6&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "teste",
									"description": "Search on MongoDB"
								},
								{
									"key": "limit",
									"value": "6",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ledgers",
			"item": [
				{
					"name": "Ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"ledger_id before: \" + postman.getEnvironmentVariable(\"ledger_id\"));",
									"    postman.setEnvironmentVariable(\"ledger_id\", jsonData.id);",
									"    console.log(\"ledger_id after: \" + postman.getEnvironmentVariable(\"ledger_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"BLOCKED Tech LTDA\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste BLOCKED Ledger\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers?limit=5&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "teste",
									"description": "Search on MongoDB",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ledgers by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Assets",
			"item": [
				{
					"name": "Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"asset_id before: \" + postman.getEnvironmentVariable(\"asset_id\"));",
									"    postman.setEnvironmentVariable(\"asset_id\", jsonData.id);",
									"    console.log(\"asset_id after: \" + postman.getEnvironmentVariable(\"asset_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Brazilian Real\",\n    //\"name\": \"{{$randomCurrencyName}}\",\n    \"type\": \"currency\",\n    \"code\": \"BRL\",\n    //\"code\": \"{{$randomCurrencyCode}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste asset 1\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/assets",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Bitcoin\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"McGregor 2 BLOCKED ASSET\"\n    },\n    \"metadata\": {\n        \"chave\": \"jacare\",\n        \"boolean\": true,\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/assets/{{asset_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"assets",
								"{{asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/assets?limit=2&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"assets"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlf",
									"description": "Search on MongoDB",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "2",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets by Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/assets/{{asset_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"assets",
								"{{asset_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets by Id",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/assets/{{asset_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"assets",
								"{{asset_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Portfolios",
			"item": [
				{
					"name": "Portfolios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"portfolio_id before: \" + postman.getEnvironmentVariable(\"portfolio_id\"));",
									"    postman.setEnvironmentVariable(\"portfolio_id\", jsonData.id);",
									"    console.log(\"portfolio_id after: \" + postman.getEnvironmentVariable(\"portfolio_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"entityId\": \"{{$randomUUID}}\",\n    \"name\": \"{{$randomUserName}} Portfolio\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Portfolio\",\n        \"allowSending\": true,\n        \"allowReceiving\": false\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomUserName}} Portfolio 3 UPDATE\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Portfolio 3 Update\",\n        \"allowSending\": false,\n        \"allowReceiving\": false\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios?limit=10&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "teste",
									"description": "Search on MongoDB",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolios by Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Portfolios",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"product_id before: \" + postman.getEnvironmentVariable(\"product_id\"));",
									"    postman.setEnvironmentVariable(\"product_id\", jsonData.id);",
									"    console.log(\"product_id after: \" + postman.getEnvironmentVariable(\"product_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Product {{$randomProductName}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Product\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Product {{$randomProductName}} BLOCKED\",\n    \"status\": {\n        \"code\": \"BLOCKED\",\n        \"description\": \"Teste Product BLOCKED\"\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/products/{{product_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Products",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/products?limit=5&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"products"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "metadata_chave",
									"description": "Search on MongoDB",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "5",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Products by Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/products/{{product_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Products",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/products/{{product_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"account_id before: \" + postman.getEnvironmentVariable(\"account_id\"));",
									"    postman.setEnvironmentVariable(\"account_id\", jsonData.id);",
									"    console.log(\"account_id after: \" + postman.getEnvironmentVariable(\"account_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assetCode\": \"BRL\",\n    \"name\": \"{{$randomBankAccountName}}\",\n    \"alias\": \"@wallet_{{$randomBankAccount}}\",\n    \"type\": \"DEBIT\",\n    //\"parentAccountId\": \"{{account_id}}\",\n    //\"entityId\": \"{{$randomUUID}}\", //optional\n    \"productId\": \"{{product_id}}\",\n    \"status\": {\n        \"code\": \"CREDIT\",\n        \"description\": \"Teste Account\",\n        \"allowSending\": true,\n        \"allowReceiving\": true\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomBankAccountName}} Account\", //opcional\n    \"alias\": \"Wallet {{$randomBankAccount}}\",\n    \"productId\": \"{{product_id}}\",\n    \"status\": {\n        \"code\": \"ACTIVE\",\n        \"description\": \"Teste Account\",\n        \"allowSending\": false,\n        \"allowReceiving\": false\n    },\n    \"metadata\": {\n        \"chave\": \"metadata_chave\",\n        \"bitcoinn\": \"{{$randomBitcoin}}\",\n        \"boolean\": {{$randomBoolean}},\n        \"double\": 10.5,\n        \"int\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}/accounts/{{account_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}",
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}/accounts?limit=10&page=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}",
								"accounts"
							],
							"query": [
								{
									"key": "metadata.chave",
									"value": "xuxa",
									"description": "Search on MongoDB",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Default 10"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Default 1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts by Id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}/accounts/{{account_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}",
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accounts",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/portfolios/{{portfolio_id}}/accounts/{{account_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"portfolios",
								"{{portfolio_id}}",
								"accounts",
								"{{account_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Transactions DSL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"transaction_id before: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData.id);",
									"    console.log(\"transaction_id after: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "dsl",
									"description": "test 1",
									"type": "file",
									"src": "postman-cloud:///1ef2418e-2c63-43f0-8b92-4d38a5dd8157"
								},
								{
									"key": "dsl",
									"description": "ok",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "empty",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "error",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "wrong extension",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "template",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Transactions Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"transaction_id before: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData.id);",
									"    console.log(\"transaction_id after: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionTypeCode\": \"PIX_OUT\",\n    \"variables\": {\n        \"amount\": 100,\n        \"source\": \"@gabriel\",\n        \"fee\": 1\n    },\n    \"metadata\": {\n        \"anyKey\": \"anyValue\",\n        \"anotherKey\": \"anotherValue\"\n    },\n    \"parentTransactionId\": null,\n    \"description\": \"My first transaction using Midaz!\", //optional\n    \"inheritMetadata\": false,\n    \"inheritDescription\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Transactions Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "dsl",
									"description": "ok",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction.gold"
								},
								{
									"key": "dsl",
									"description": "empty",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/empty.gold",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "error",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/error.gold",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "wrong extension",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction.yml",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "template",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction-template.gold",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions/{{transaction_id}}/commit",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions",
								"{{transaction_id}}",
								"commit"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Transactions Revert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "dsl",
									"description": "ok",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction.gold"
								},
								{
									"key": "dsl",
									"description": "empty",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/empty.gold",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "error",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/error.gold",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "wrong extension",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction.yml",
									"disabled": true
								},
								{
									"key": "dsl",
									"description": "template",
									"type": "file",
									"src": "/Users/mcgregor/Documents/LERIAND/GO/midaz/components/transaction/examples/transaction-template.gold",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions/{{transaction_id}}/revert",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions",
								"{{transaction_id}}",
								"revert"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "transactions Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"transaction_id before: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData.id);",
									"    console.log(\"transaction_id after: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"transactionType\": \"{{$randomUUID}}\",\n    \"transactionTypeCode\": \"P2P_TRANSFER\",\n    \"variables\": {\n        \"amount\": 100,\n        \"destination\": \"@Wallet_16750673\",\n        \"sourceAccount\": \"@Gabriel\",\n        \"scale\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Transaction by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions/{{transaction_id}}",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions",
								"{{transaction_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transactions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"if (jsonData.hasOwnProperty('id')) {",
									"    console.log(\"transaction_id before: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData.id);",
									"    console.log(\"transaction_id after: \" + postman.getEnvironmentVariable(\"transaction_id\"));",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"description for the transaction mcgregor to jeff value of 100 reais\",\n    \"metadata\": {\n        \"mensagem\": \"pagamento\",\n        \"valor\": \"100\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_transaction}}/v1/organizations/{{organization_id}}/ledgers/{{ledger_id}}/transactions/{{transaction_id}}",
							"host": [
								"{{url_transaction}}"
							],
							"path": [
								"v1",
								"organizations",
								"{{organization_id}}",
								"ledgers",
								"{{ledger_id}}",
								"transactions",
								"{{transaction_id}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}