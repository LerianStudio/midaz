{
  "info": {
    "name": "MIDAZ",
    "description": "This is a swagger documentation for the Midaz Ledger API\n\n**IMPORTANT**: This collection requires the **MIDAZ Environment** to be selected for proper functionality. Please ensure you have imported and selected the MIDAZ environment before using this collection.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "v1.48.0",
    "_postman_id": "00b3869d-895d-49b2-a6b5-68b193471560"
  },
  "item": [
    {
      "name": "Complete API Workflow",
      "description": "A sequence of API calls representing a typical workflow, generated from WORKFLOW.md.",
      "item": [
        {
          "name": "1. Create Organization",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ]
            },
            "description": "**Workflow Step 1: Create Organization**\n\nCreates a new organization in the system",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c8a826-299c-4321-a471-5e9736828a7f",
                "exec": [
                  "\n// ===== STEP 1: Create Organization =====\nconsole.log(\"üîç Executing Step 1: Create Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_1\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè¢ Business Logic: Organization has required fields\", function() {\n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('legalName');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Organization ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Organization createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Organization updatedAt should be ISO timestamp\");\n    \n    // Data consistency validation\n    if (requestData.legalName) {\n        pm.expect(jsonData.legalName).to.equal(requestData.legalName, \"Response legalName should match request\");\n    }\n    \n    // Store organization ID for subsequent requests\n    pm.environment.set(\"organizationId\", jsonData.id);\n    \n    console.log(\"üè¢ Organization creation validation passed:\", jsonData.legalName);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored organizationId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3d9334b9-a381-48e7-94a3-87883b207bbd",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 1: Create Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 1: Create Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_1_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 1\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations",
            "normalizedPath": "/v1/organizations",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations"
          }
        },
        {
          "name": "2. Get Organization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 2: Get Organization**\n\nRetrieves the organization details\n\n---\n\n**Uses:**\n- `organizationId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e54f4892-571f-4298-8729-bf0043dea0fe",
                "exec": [
                  "\n// ===== STEP 2: Get Organization =====\nconsole.log(\"üîç Executing Step 2: Get Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_2\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "46db00aa-3849-4163-998b-da0b8d11e78e",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 2: Get Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 2: Get Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_2_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 2\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}",
            "normalizedPath": "/v1/organizations/{}",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations/{}"
          }
        },
        {
          "name": "3. Update Organization",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 3: Update Organization**\n\nUpdates organization details\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "03635f2b-8d98-4ba4-9851-9b05db41d2aa",
                "exec": [
                  "\n// ===== STEP 3: Update Organization =====\nconsole.log(\"üîç Executing Step 3: Update Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_3\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9233fb20-f0b5-44d9-94d8-dfb4ec3841e3",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 3: Update Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 3: Update Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_3_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 3\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}",
            "normalizedPath": "/v1/organizations/{}",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations/{}"
          }
        },
        {
          "name": "4. List Organizations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter organizations by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 4: List Organizations**\n\nLists all organizations"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b22887d-aeab-4b16-9204-abec6cc5df1f",
                "exec": [
                  "\n// ===== STEP 4: List Organizations =====\nconsole.log(\"üîç Executing Step 4: List Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_4\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f850bc8e-9b2d-4e83-94a7-6b35cd068a63",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 4: List Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 4: List Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_4_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 4\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations",
            "normalizedPath": "/v1/organizations",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations"
          }
        },
        {
          "name": "5. Create Ledger",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 5: Create Ledger**\n\nCreates a new ledger within the organization\n\n---\n\n**Uses:**\n- `organizationId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4de058ec-96fb-43d5-aea6-8b33900937b2",
                "exec": [
                  "\n// ===== STEP 5: Create Ledger =====\nconsole.log(\"üîç Executing Step 5: Create Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_5\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìí Business Logic: Ledger has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping ledger validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Ledger ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Ledger createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Ledger updatedAt should be ISO timestamp\");\n    \n    // Store ledger ID for subsequent requests\n    pm.environment.set(\"ledgerId\", jsonData.id);\n    \n    console.log(\"üìí Ledger creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored ledgerId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c6b8bc06-778c-4928-9f89-f607284c2ddc",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 5: Create Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 5: Create Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_5_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 5\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
            "normalizedPath": "/v1/organizations/{}/ledgers",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers"
          }
        },
        {
          "name": "6. Get Ledger",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 6: Get Ledger**\n\nRetrieves the ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "178ea09b-5b76-4e4c-82c5-df8555ec641b",
                "exec": [
                  "\n// ===== STEP 6: Get Ledger =====\nconsole.log(\"üîç Executing Step 6: Get Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_6\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cceb084f-d86b-4454-936b-7895a4dca02f",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 6: Get Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 6: Get Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_6_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 6\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
          }
        },
        {
          "name": "7. Update Ledger",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 7: Update Ledger**\n\nUpdates ledger details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc7b8cb0-a3b8-426d-9111-53497c67d030",
                "exec": [
                  "\n// ===== STEP 7: Update Ledger =====\nconsole.log(\"üîç Executing Step 7: Update Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_7\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6283e4da-76d6-4ef4-b3ad-2b3796eec8d6",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 7: Update Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 7: Update Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_7_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 7\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
          }
        },
        {
          "name": "8. List Ledgers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter ledgers by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 8: List Ledgers**\n\nLists all ledgers in the organization\n\n---\n\n**Uses:**\n- `organizationId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7a6b642a-36c0-4756-903c-dcf1f291ddbb",
                "exec": [
                  "\n// ===== STEP 8: List Ledgers =====\nconsole.log(\"üîç Executing Step 8: List Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_8\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "13e173ab-8c7f-4258-b584-ca5d59471d8d",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 8: List Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 8: List Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_8_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 8\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers",
            "normalizedPath": "/v1/organizations/{}/ledgers",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers"
          }
        },
        {
          "name": "9. Create Asset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 9: Create Asset**\n\nCreates a new asset (e.g., USD) in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "77dec6e5-2a54-40b3-a53b-35880189f071",
                "exec": [
                  "\n// ===== STEP 9: Create Asset =====\nconsole.log(\"üîç Executing Step 9: Create Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_9\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∞ Business Logic: Asset has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping asset validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('code');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Asset ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Asset createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Asset updatedAt should be ISO timestamp\");\n    \n    // Store asset ID for subsequent requests\n    pm.environment.set(\"assetId\", jsonData.id);\n    \n    console.log(\"üí∞ Asset creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored assetId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e146fcd3-fd3f-4e85-af73-5b5ee4316245",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 9: Create Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 9: Create Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_9_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 9\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
          }
        },
        {
          "name": "10. Get Asset",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 10: Get Asset**\n\nRetrieves the asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acf86005-4e65-419b-8e25-9d6ac3362193",
                "exec": [
                  "\n// ===== STEP 10: Get Asset =====\nconsole.log(\"üîç Executing Step 10: Get Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_10\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bf47f62f-c586-43e1-9462-15134820a6a7",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 10: Get Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 10: Get Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_10_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 10\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
          }
        },
        {
          "name": "11. Update Asset",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 11: Update Asset**\n\nUpdates asset details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "62318e6c-512d-43dc-bab9-6d524db709d0",
                "exec": [
                  "\n// ===== STEP 11: Update Asset =====\nconsole.log(\"üîç Executing Step 11: Update Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_11\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8913cba2-caa0-4197-b176-a50210627f9e",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 11: Update Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 11: Update Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_11_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 11\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
          }
        },
        {
          "name": "12. List Assets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter assets by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 12: List Assets**\n\nLists all assets in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1f9d703d-4b3a-457f-aba7-51cacb6ff5bf",
                "exec": [
                  "\n// ===== STEP 12: List Assets =====\nconsole.log(\"üîç Executing Step 12: List Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_12\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "be51e1f7-b928-42ea-afcb-4eda8e0ba587",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 12: List Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 12: List Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_12_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 12\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets"
          }
        },
        {
          "name": "13. Create Account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 13: Create Account**\n\nCreates a new account in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1374ab7e-dfeb-4fff-9018-e021d17a468b",
                "exec": [
                  "\n// ===== STEP 13: Create Account =====\nconsole.log(\"üîç Executing Step 13: Create Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_13\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üë§ Business Logic: Account has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping account validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Account ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Account createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Account updatedAt should be ISO timestamp\");\n    \n    // Store account ID and alias for subsequent requests\n    pm.environment.set(\"accountId\", jsonData.id);\n    if (jsonData.alias) {\n        pm.environment.set(\"accountAlias\", jsonData.alias);\n        console.log(\"üíæ Stored accountAlias:\", jsonData.alias);\n    }\n    \n    console.log(\"üë§ Account creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored accountId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd67ebe4-8be7-4978-a8be-317fe0b4dd86",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 13: Create Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 13: Create Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_13_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 13\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
          }
        },
        {
          "name": "14. Get Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 14: Get Account**\n\nRetrieves the account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c7a2d0d-2c39-4c52-90dd-c6ce44c3f639",
                "exec": [
                  "\n// ===== STEP 14: Get Account =====\nconsole.log(\"üîç Executing Step 14: Get Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_14\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9b24b0ba-a5a2-4a7b-9260-d604c08484cd",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 14: Get Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 14: Get Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_14_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 14\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
          }
        },
        {
          "name": "15. Update Account",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 15: Update Account**\n\nUpdates account details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f964b5f-1976-4d08-9539-8ad48f2d4afd",
                "exec": [
                  "\n// ===== STEP 15: Update Account =====\nconsole.log(\"üîç Executing Step 15: Update Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_15\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b08fb4e0-2cdd-40e7-bb27-d64f3caf173b",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 15: Update Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 15: Update Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_15_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 15\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
          }
        },
        {
          "name": "16. List Accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter accounts by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 16: List Accounts**\n\nLists all accounts in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75231d41-d900-4fe4-8033-0a102c8acd23",
                "exec": [
                  "\n// ===== STEP 16: List Accounts =====\nconsole.log(\"üîç Executing Step 16: List Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_16\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba05a9b9-ae76-4dd3-8c43-2a91a60124e7",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 16: List Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 16: List Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_16_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 16\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts"
          }
        },
        {
          "name": "17. Create Portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 17: Create Portfolio**\n\nCreates a new portfolio in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91553644-4722-4511-aa84-b96a631a61f6",
                "exec": [
                  "\n// ===== STEP 17: Create Portfolio =====\nconsole.log(\"üîç Executing Step 17: Create Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_17\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üìÅ Business Logic: Portfolio has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping portfolio validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Portfolio ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Portfolio createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Portfolio updatedAt should be ISO timestamp\");\n    \n    // Store portfolio ID for subsequent requests\n    pm.environment.set(\"portfolioId\", jsonData.id);\n    \n    console.log(\"üìÅ Portfolio creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored portfolioId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dd531014-b824-4f96-a230-a95c3bf843fc",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 17: Create Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 17: Create Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_17_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 17\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
          }
        },
        {
          "name": "18. Get Portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 18: Get Portfolio**\n\nRetrieves the portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6751e0fd-0f9f-4127-a2ac-2c352d548841",
                "exec": [
                  "\n// ===== STEP 18: Get Portfolio =====\nconsole.log(\"üîç Executing Step 18: Get Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_18\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6e6968e5-6be7-419d-880f-38f092a1d227",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 18: Get Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 18: Get Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_18_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 18\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
          }
        },
        {
          "name": "19. Update Portfolio",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 19: Update Portfolio**\n\nUpdates portfolio details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ca8539e-a138-4623-8dfd-2c7405e30e78",
                "exec": [
                  "\n// ===== STEP 19: Update Portfolio =====\nconsole.log(\"üîç Executing Step 19: Update Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_19\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "870dac70-148f-4d6e-9141-360a15d5f3d2",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 19: Update Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 19: Update Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_19_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 19\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
          }
        },
        {
          "name": "20. List Portfolios",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter portfolios by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 20: List Portfolios**\n\nLists all portfolios in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a93374fc-d10a-484c-b520-2684e4fcd842",
                "exec": [
                  "\n// ===== STEP 20: List Portfolios =====\nconsole.log(\"üîç Executing Step 20: List Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_20\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2fff4bbb-94e3-497e-b677-c3fe5f3d985f",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 20: List Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 20: List Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_20_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 20\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios"
          }
        },
        {
          "name": "21. Create Segment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 21: Create Segment**\n\nCreates a new segment in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8dce21d5-9ce7-4a67-9bb1-5158e811fb44",
                "exec": [
                  "\n// ===== STEP 21: Create Segment =====\nconsole.log(\"üîç Executing Step 21: Create Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_21\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üè∑Ô∏è Business Logic: Segment has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping segment validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    const requestData = JSON.parse(pm.request.body.raw || '{}');\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Segment ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Segment createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Segment updatedAt should be ISO timestamp\");\n    \n    // Store segment ID for subsequent requests\n    pm.environment.set(\"segmentId\", jsonData.id);\n    \n    console.log(\"üè∑Ô∏è Segment creation validation passed:\", jsonData.name);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n    console.log(\"üíæ Stored segmentId:\", jsonData.id);\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3830b8fd-cb28-44e2-9668-9d554e39f99d",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 21: Create Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 21: Create Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_21_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 21\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
          }
        },
        {
          "name": "22. Get Segment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 22: Get Segment**\n\nRetrieves the segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d650d736-5337-4156-9b65-53d8b8c6cdbc",
                "exec": [
                  "\n// ===== STEP 22: Get Segment =====\nconsole.log(\"üîç Executing Step 22: Get Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_22\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c5a04cff-076a-4e4b-88a5-4b2299c37736",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 22: Get Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 22: Get Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_22_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 22\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
          }
        },
        {
          "name": "23. Update Segment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 23: Update Segment**\n\nUpdates segment details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fb3b773-992d-42bf-84c9-3b1bbcdb2ad0",
                "exec": [
                  "\n// ===== STEP 23: Update Segment =====\nconsole.log(\"üîç Executing Step 23: Update Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_23\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "41aef611-2d01-48b7-ad18-1f5718a88c19",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 23: Update Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 23: Update Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_23_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 23\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
          }
        },
        {
          "name": "24. List Segments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter segments by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 24: List Segments**\n\nLists all segments in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c20d786b-ec7b-4a7a-84bf-c5f11d703267",
                "exec": [
                  "\n// ===== STEP 24: List Segments =====\nconsole.log(\"üîç Executing Step 24: List Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_24\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba476071-2f85-4448-a4a2-d7c0cd8fdb59",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 24: List Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 24: List Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_24_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 24\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments"
          }
        },
        {
          "name": "25. Count Organizations",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "metrics",
                "count"
              ]
            },
            "description": "**Workflow Step 25: Count Organizations**\n\nReturns 204 No Content with X-Total-Count header containing the count"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "843202a0-be23-4b5c-95d9-359cfc5b396e",
                "exec": [
                  "\n// ===== STEP 25: Count Organizations =====\nconsole.log(\"üîç Executing Step 25: Count Organizations\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_25\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "415cc999-ee58-4891-be23-47448357c38e",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 25: Count Organizations =====\nconsole.log(\"‚öôÔ∏è Setting up Step 25: Count Organizations\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_25_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 25\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/metrics/count",
            "normalizedPath": "/v1/organizations/metrics/count",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations/metrics/count"
          }
        },
        {
          "name": "26. Count Ledgers",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 26: Count Ledgers**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3473aaca-75fc-4833-9346-83d1e1acf72b",
                "exec": [
                  "\n// ===== STEP 26: Count Ledgers =====\nconsole.log(\"üîç Executing Step 26: Count Ledgers\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_26\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "4d46eff0-eb4a-4f21-92a5-dc18ae2ed266",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 26: Count Ledgers =====\nconsole.log(\"‚öôÔ∏è Setting up Step 26: Count Ledgers\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_26_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 26\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/metrics/count",
            "normalizedPath": "/v1/organizations/{}/ledgers/metrics/count",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/metrics/count"
          }
        },
        {
          "name": "27. Count Accounts",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 27: Count Accounts**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0912496-e569-4dbd-aea5-c2986a9e9f30",
                "exec": [
                  "\n// ===== STEP 27: Count Accounts =====\nconsole.log(\"üîç Executing Step 27: Count Accounts\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_27\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cc8c91f4-ae02-49aa-95b4-3c2879f4d086",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 27: Count Accounts =====\nconsole.log(\"‚öôÔ∏è Setting up Step 27: Count Accounts\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_27_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 27\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/metrics/count"
          }
        },
        {
          "name": "28. Count Assets",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 28: Count Assets**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf8e78e9-cb7c-43b4-979d-7d5d3ce6580a",
                "exec": [
                  "\n// ===== STEP 28: Count Assets =====\nconsole.log(\"üîç Executing Step 28: Count Assets\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_28\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b2a9a357-2f26-4a80-a7e0-078a7683a7f4",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 28: Count Assets =====\nconsole.log(\"‚öôÔ∏è Setting up Step 28: Count Assets\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_28_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 28\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/metrics/count"
          }
        },
        {
          "name": "29. Count Portfolios",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 29: Count Portfolios**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b7c0f41-fd21-4e48-a390-37bc0e10a572",
                "exec": [
                  "\n// ===== STEP 29: Count Portfolios =====\nconsole.log(\"üîç Executing Step 29: Count Portfolios\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_29\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "709d4afe-6560-4ee2-9422-2ec4fda16059",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 29: Count Portfolios =====\nconsole.log(\"‚öôÔ∏è Setting up Step 29: Count Portfolios\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_29_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 29\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/metrics/count"
          }
        },
        {
          "name": "30. Count Segments",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 30: Count Segments**\n\nReturns 204 No Content with X-Total-Count header containing the count\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9b12aca-362e-4e2c-a915-b27d77adc7fe",
                "exec": [
                  "\n// ===== STEP 30: Count Segments =====\nconsole.log(\"üîç Executing Step 30: Count Segments\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\npm.test(\"‚úÖ Status: HEAD request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ HEAD operation completed successfully - Count: \" + pm.response.headers.get(\"X-Total-Count\"));\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_30\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "084903ea-aa43-4eb2-b94b-69317b9097ad",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 30: Count Segments =====\nconsole.log(\"‚öôÔ∏è Setting up Step 30: Count Segments\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_30_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 30\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/metrics/count"
          }
        },
        {
          "name": "31. Get Account by Alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Account alias (e.g. @person1)"
                }
              ]
            },
            "description": "**Workflow Step 31: Get Account by Alias**\n\nRetrieves an account using its alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "231b3a7f-249c-4735-b8f9-4c4150c91787",
                "exec": [
                  "\n// ===== STEP 31: Get Account by Alias =====\nconsole.log(\"üîç Executing Step 31: Get Account by Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_31\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "90903d23-7ef4-4114-a145-e6b42297e0ac",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 31: Get Account by Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 31: Get Account by Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_31_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 31\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}"
          }
        },
        {
          "name": "32. Get Account by External Code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "code",
                  "value": "",
                  "description": "Account External Code (e.g. BRL)"
                }
              ]
            },
            "description": "**Workflow Step 32: Get Account by External Code**\n\nRetrieves an account using external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "99d89db1-61d3-434a-bc22-8075e697eeb2",
                "exec": [
                  "\n// ===== STEP 32: Get Account by External Code =====\nconsole.log(\"üîç Executing Step 32: Get Account by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_32\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "27c6ad62-c57f-459d-ac17-42f0718e65a8",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 32: Get Account by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 32: Get Account by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_32_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 32\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}"
          }
        },
        {
          "name": "33. Create Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "**Workflow Step 33: Create Transaction**\n\nCreates a new transaction in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "30426063-57e1-4f40-9ef3-15dfb2ff39b4",
                "exec": [
                  "\n// ===== STEP 33: Create Transaction =====\nconsole.log(\"üîç Executing Step 33: Create Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_33\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "521208a3-f98b-42f3-a9ca-941dc8d97dde",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 33: Create Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 33: Create Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_33_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 33\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
          }
        },
        {
          "name": "34. Create Transaction (Inflow)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "inflow"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "**Workflow Step 34: Create Transaction (Inflow)**\n\nCreates an inflow transaction (money coming in)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1c3fd249-b2d2-4600-9295-31a1df91b6cf",
                "exec": [
                  "\n// ===== STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"üîç Executing Step 34: Create Transaction (Inflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_34\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8822b7b2-a6a9-4443-bdd9-2681c89292b5",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 34: Create Transaction (Inflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 34: Create Transaction (Inflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_34_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 34\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/inflow"
          }
        },
        {
          "name": "35. Create Transaction (Outflow)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "outflow"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "**Workflow Step 35: Create Transaction (Outflow)**\n\nCreates an outflow transaction (money going out)\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "12ffd124-dd26-4094-9134-193e0fa5d3a1",
                "exec": [
                  "\n// ===== STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"üîç Executing Step 35: Create Transaction (Outflow)\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_35\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6a57ef9f-5a67-4a12-8301-c4601442d435",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 35: Create Transaction (Outflow) =====\nconsole.log(\"‚öôÔ∏è Setting up Step 35: Create Transaction (Outflow)\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_35_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 35\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/outflow"
          }
        },
        {
          "name": "36. Get Transaction",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "**Workflow Step 36: Get Transaction**\n\nRetrieves the transaction details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ddc1d0c-07bd-4cce-be75-9438d2eb710f",
                "exec": [
                  "\n// ===== STEP 36: Get Transaction =====\nconsole.log(\"üîç Executing Step 36: Get Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_36\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8ec59c4d-8ea4-43c3-96cb-7b3dad4b23f6",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 36: Get Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 36: Get Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_36_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 36\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
          }
        },
        {
          "name": "37. Update Transaction",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "**Workflow Step 37: Update Transaction**\n\nUpdates transaction metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea73e7fc-eb57-4845-b656-3d535cb8b431",
                "exec": [
                  "\n// ===== STEP 37: Update Transaction =====\nconsole.log(\"üîç Executing Step 37: Update Transaction\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_37\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ee12cb60-5a24-4104-b582-a3cf6cb4b6dd",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 37: Update Transaction =====\nconsole.log(\"‚öôÔ∏è Setting up Step 37: Update Transaction\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_37_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 37\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}"
          }
        },
        {
          "name": "38. List Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 38: List Transactions**\n\nLists all transactions in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c106a309-1520-4c55-85b6-37a7cf08a5eb",
                "exec": [
                  "\n// ===== STEP 38: List Transactions =====\nconsole.log(\"üîç Executing Step 38: List Transactions\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_38\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "31644785-29f1-4dee-a48b-41a34ba7e726",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 38: List Transactions =====\nconsole.log(\"‚öôÔ∏è Setting up Step 38: List Transactions\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_38_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 38\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions"
          }
        },
        {
          "name": "39. Get Operation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "**Workflow Step 39: Get Operation**\n\nRetrieves the operation details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n- `operationId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0c11ca65-45c9-4acd-a07a-1943881ec200",
                "exec": [
                  "\n// ===== STEP 39: Get Operation =====\nconsole.log(\"üîç Executing Step 39: Get Operation\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_39\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3c7c9e93-1e8c-4555-b07b-dfb7276db4b0",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 39: Get Operation =====\nconsole.log(\"‚öôÔ∏è Setting up Step 39: Get Operation\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_39_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 39\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}",
            "folderPath": "Operations",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations/{}"
          }
        },
        {
          "name": "40. List Operations by Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "",
                  "description": "DEBIT, CREDIT",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 40: List Operations by Account**\n\nLists all operations for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ecdb253-b29f-471e-aa87-3cc534c95aa8",
                "exec": [
                  "\n// ===== STEP 40: List Operations by Account =====\nconsole.log(\"üîç Executing Step 40: List Operations by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_40\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "35c40c3f-c3f6-4b3d-b336-c7f669e6223e",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 40: List Operations by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 40: List Operations by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_40_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 40\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations",
            "folderPath": "Operations",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/operations"
          }
        },
        {
          "name": "41. Update Operation Metadata",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "**Workflow Step 41: Update Operation Metadata**\n\nUpdates operation metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `transactionId`\n- `operationId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f77bc5cc-984d-40e0-9f69-9bbdd866f8dc",
                "exec": [
                  "\n// ===== STEP 41: Update Operation Metadata =====\nconsole.log(\"üîç Executing Step 41: Update Operation Metadata\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_41\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7ff834ee-7109-445d-911b-4759560b9882",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 41: Update Operation Metadata =====\nconsole.log(\"‚öôÔ∏è Setting up Step 41: Update Operation Metadata\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_41_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 41\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}",
            "folderPath": "Operations",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/{}/operations/{}"
          }
        },
        {
          "name": "42. Get Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "**Workflow Step 42: Get Balance**\n\nRetrieves the balance details\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7debf505-7e1d-4634-b357-2955cb13695c",
                "exec": [
                  "\n// ===== STEP 42: Get Balance =====\nconsole.log(\"üîç Executing Step 42: Get Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_42\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "daeef4a0-aad7-4e23-8fc9-2b6f852817fe",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 42: Get Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 42: Get Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_42_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 42\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
          }
        },
        {
          "name": "43. List Balances by Account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 43: List Balances by Account**\n\nLists all balances for a specific account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf2bb8ad-200f-4fa9-8ae7-ac219837a77a",
                "exec": [
                  "\n// ===== STEP 43: List Balances by Account =====\nconsole.log(\"üîç Executing Step 43: List Balances by Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_43\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "06d72736-45a1-4615-bb84-e27d82b55b5b",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 43: List Balances by Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 43: List Balances by Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_43_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 43\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}/balances"
          }
        },
        {
          "name": "44. List Balances by Account Alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Alias (e.g. @person1)"
                }
              ]
            },
            "description": "**Workflow Step 44: List Balances by Account Alias**\n\nLists all balances for an account identified by alias\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acb8ccd7-392b-470f-a26a-0d36a1224fe6",
                "exec": [
                  "\n// ===== STEP 44: List Balances by Account Alias =====\nconsole.log(\"üîç Executing Step 44: List Balances by Account Alias\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_44\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c490f2f6-42c7-4949-bcee-a6c4398c9fd2",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 44: List Balances by Account Alias =====\nconsole.log(\"‚öôÔ∏è Setting up Step 44: List Balances by Account Alias\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_44_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 44\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
          }
        },
        {
          "name": "45. List Balances by External Code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "code",
                  "value": "",
                  "description": "Code (e.g. BRL)"
                }
              ]
            },
            "description": "**Workflow Step 45: List Balances by External Code**\n\nLists all balances for an account identified by external code\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6bb1d45-6f0f-4629-bfbd-bf4aeddef9ea",
                "exec": [
                  "\n// ===== STEP 45: List Balances by External Code =====\nconsole.log(\"üîç Executing Step 45: List Balances by External Code\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_45\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42f08de7-f662-46cf-9b4c-2bfcf463437f",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 45: List Balances by External Code =====\nconsole.log(\"‚öôÔ∏è Setting up Step 45: List Balances by External Code\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_45_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 45\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/external/{}/balances"
          }
        },
        {
          "name": "46. Update Balance",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "**Workflow Step 46: Update Balance**\n\nUpdates balance metadata\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08b6fd92-0dea-4b0b-9f90-d87ea2bc8463",
                "exec": [
                  "\n// ===== STEP 46: Update Balance =====\nconsole.log(\"üîç Executing Step 46: Update Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\npm.test(\"‚úÖ Status: PATCH request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ PATCH operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_46\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "28a64e7a-c428-4ac8-b310-c11af3861ab1",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 46: Update Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 46: Update Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_46_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 46\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
          }
        },
        {
          "name": "47. List All Balances",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "**Workflow Step 47: List All Balances**\n\nLists all balances in the ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e2b7da3e-c1a7-4634-92b3-3a4faa3cf497",
                "exec": [
                  "\n// ===== STEP 47: List All Balances =====\nconsole.log(\"üîç Executing Step 47: List All Balances\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_47\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "704ba0ea-10eb-4c57-a738-cc6c0bea830c",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 47: List All Balances =====\nconsole.log(\"‚öôÔ∏è Setting up Step 47: List All Balances\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_47_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 47\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances"
          }
        },
        {
          "name": "48. Check Account Balance Before Zeroing",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Alias (e.g. @person1)"
                }
              ]
            },
            "description": "**Workflow Step 48: Check Account Balance Before Zeroing**\n\nGets the current balance of the account before zeroing it out\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0200d9ac-c996-4ad1-8049-33f436b7fa8b",
                "exec": [
                  "\n// ===== STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"üîç Executing Step 48: Check Account Balance Before Zeroing\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\npm.test(\"‚úÖ Status: GET request successful (200)\", function () {\n    pm.expect(pm.response.code).to.equal(200);\n    console.log(\"‚úÖ GET operation completed successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_48\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n// Extract balance information for zero-out transaction\nif (pm.response.code === 200) {\n    const responseJson = pm.response.json();\n    console.log(\"üè¶ Balance response structure:\", JSON.stringify(responseJson, null, 2));\n    \n    if (responseJson.items && responseJson.items.length > 0) {\n        const balance = responseJson.items[0];\n        if (balance.available !== undefined) {\n            const balanceAmount = Math.abs(balance.available);\n            pm.environment.set(\"currentBalanceAmount\", balanceAmount);\n            console.log(\"üí∞ Extracted balance amount:\", balanceAmount);\n            console.log(\"‚úÖ Balance amount variable set for zero-out transaction\");\n        } else {\n            console.warn(\"‚ö†Ô∏è No balance amount found in response\");\n            pm.environment.set(\"currentBalanceAmount\", 0);\n        }\n    } else {\n        console.warn(\"‚ö†Ô∏è No balance items found in response\");\n        pm.environment.set(\"currentBalanceAmount\", 0);\n    }\n}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "dc0c44ef-9c46-45ce-b095-246f91d74281",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 48: Check Account Balance Before Zeroing =====\nconsole.log(\"‚öôÔ∏è Setting up Step 48: Check Account Balance Before Zeroing\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_48_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 48\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/alias/{}/balances"
          }
        },
        {
          "name": "49. Zero Out Balance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "**Workflow Step 49: Zero Out Balance**\n\n**Description:** Creates a transaction that transfers the current balance amount from account to external/USD, completely zeroing the balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountAlias`\n- `currentBalanceAmount`\n",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Zero Out Balance Transaction\",\n  \"description\": \"Reverse transaction to zero out the account balance using actual current balance\",\n  \"metadata\": {\n    \"purpose\": \"balance_zeroing\",\n    \"reference_step\": \"48\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"External account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"credit\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"{{accountAlias}}\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"{{currentBalanceAmount}}\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Source account for balance zeroing\",\n          \"metadata\": {\n            \"operation_type\": \"debit\"\n          }\n        }\n      ]\n    },\n    \"value\": \"{{currentBalanceAmount}}\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "25b58737-3d62-4ec2-a891-bbd9208bda73",
                "exec": [
                  "\n// ===== STEP 49: Zero Out Balance =====\nconsole.log(\"üîç Executing Step 49: Zero Out Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\npm.test(\"‚úÖ Status: POST request successful (200/201)\", function () {\n    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\n    if (pm.response.code === 201) {\n        console.log(\"‚úÖ Resource created successfully\");\n    } else {\n        console.log(\"‚úÖ POST operation completed successfully\");\n    }\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_49\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});\n\npm.test(\"üìã Structure: Response has valid JSON structure\", function() {\n    pm.response.to.be.json;\n    \n    const jsonData = pm.response.json();\n    pm.expect(jsonData).to.be.an('object');\n    \n    // Log response structure for debugging\n    console.log(\"üìã Response structure keys:\", Object.keys(jsonData));\n});\n\npm.test(\"üí∏ Business Logic: Transaction has required fields\", function() {\n    // Only validate if response was successful\n    if (pm.response.code !== 200 && pm.response.code !== 201) {\n        console.log(\"‚ö†Ô∏è Skipping transaction validation - response code:\", pm.response.code);\n        pm.test.skip();\n        return;\n    }\n    \n    const jsonData = pm.response.json();\n    \n    // Required fields validation\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('status');\n    pm.expect(jsonData).to.have.property('createdAt');\n    pm.expect(jsonData).to.have.property('updatedAt');\n    \n    // UUID format validation\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n    pm.expect(jsonData.id).to.match(uuidRegex, \"Transaction ID should be a valid UUID\");\n    \n    // ISO timestamp format validation\n    const isoTimestampRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\n    pm.expect(jsonData.createdAt).to.match(isoTimestampRegex, \"Transaction createdAt should be ISO timestamp\");\n    pm.expect(jsonData.updatedAt).to.match(isoTimestampRegex, \"Transaction updatedAt should be ISO timestamp\");\n    \n    // Determine transaction type and set appropriate variable names\n    const currentUrl = pm.request.url.toString();\n    let varPrefix = \"\";\n    \n    if (currentUrl.includes(\"/transactions/json\")) {\n        varPrefix = \"\"; // Standard transaction - use original variable names\n    } else if (currentUrl.includes(\"/transactions/dsl\")) {\n        varPrefix = \"dsl\"; // DSL transaction\n    } else if (currentUrl.includes(\"/transactions/inflow\")) {\n        varPrefix = \"inflow\"; // Inflow transaction\n    } else if (currentUrl.includes(\"/transactions/outflow\")) {\n        varPrefix = \"outflow\"; // Outflow transaction\n    }\n    \n    // Store transaction ID with appropriate prefix\n    const transactionIdVar = varPrefix ? varPrefix + \"TransactionId\" : \"transactionId\";\n    const operationIdVar = varPrefix ? varPrefix + \"OperationId\" : \"operationId\";\n    const balanceIdVar = varPrefix ? varPrefix + \"BalanceId\" : \"balanceId\";\n    const accountIdVar = varPrefix ? varPrefix + \"AccountId\" : \"accountId\";\n    \n    pm.environment.set(transactionIdVar, jsonData.id);\n    console.log(\"üíæ Stored \" + transactionIdVar + \":\", jsonData.id);\n    \n    // Extract operation and balance IDs if available\n    if (jsonData.operations && jsonData.operations.length > 0) {\n        // Find the user operation (non-external account) first\n        const userOperation = jsonData.operations.find(op => \n            op.accountAlias && !op.accountAlias.startsWith(\"@external/\")  \n        ) || jsonData.operations[0]; // fallback to first operation if no user account found\n        \n        // Extract operation ID from the user operation (not external account)\n        if (userOperation && userOperation.id) {\n            pm.environment.set(operationIdVar, userOperation.id);\n            console.log(\"üíæ Stored \" + operationIdVar + \" from user account:\", userOperation.id);\n            console.log(\"    Operation belongs to account:\", userOperation.accountAlias || userOperation.accountId);\n        } else {\n            // Fallback to first operation if no user operation found\n            pm.environment.set(operationIdVar, jsonData.operations[0].id);\n            console.log(\"‚ö†Ô∏è Stored \" + operationIdVar + \" from first operation (might be external):\", jsonData.operations[0].id);\n        }\n        \n        // Extract and store accountId - prefer non-external accounts\n        if (userOperation && userOperation.accountId) {\n            // Only store if we do not already have an accountId (preserve treasury account ID)\n            const existingAccountId = pm.environment.get(\"accountId\");\n            if (!existingAccountId) {\n                pm.environment.set(accountIdVar, userOperation.accountId);\n                console.log(\"üíæ Stored \" + accountIdVar + \":\", userOperation.accountId);\n            } else {\n                console.log(\"‚ö†Ô∏è Preserving existing accountId:\", existingAccountId, \"(not overwriting with:\", userOperation.accountId + \")\");\n            }\n        }\n        \n        // Extract balance ID from user operation as well\n        if (userOperation && userOperation.balanceId) {\n            pm.environment.set(balanceIdVar, userOperation.balanceId);\n            console.log(\"üíæ Stored \" + balanceIdVar + \" from user account:\", userOperation.balanceId);\n        } else if (jsonData.operations[0].balanceId) {\n            pm.environment.set(balanceIdVar, jsonData.operations[0].balanceId);\n            console.log(\"‚ö†Ô∏è Stored \" + balanceIdVar + \" from first operation (might be external):\", jsonData.operations[0].balanceId);\n        }\n    }\n    \n    console.log(\"üí∏ Transaction creation validation passed:\", jsonData.id);\n    console.log(\"‚úÖ Required fields verified, UUID and timestamp validation completed\");\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c56cc4ff-f0e3-4618-880d-fbe626517ad7",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 49: Zero Out Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 49: Zero Out Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_49_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 49\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/transactions/json",
            "folderPath": "Transactions",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/transactions/json"
          }
        },
        {
          "name": "50. Delete Balance",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "**Workflow Step 50: Delete Balance**\n\nDeletes a balance\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `balanceId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cfe305e1-3c51-480e-b2f7-6dc469ef19fd",
                "exec": [
                  "\n// ===== STEP 50: Delete Balance =====\nconsole.log(\"üîç Executing Step 50: Delete Balance\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_50\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "df37876f-f6c7-439c-93c0-bba8cedcfbcd",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 50: Delete Balance =====\nconsole.log(\"‚öôÔ∏è Setting up Step 50: Delete Balance\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_50_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 50\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/balances/{}",
            "folderPath": "Balances",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/balances/{}"
          }
        },
        {
          "name": "51. Delete Segment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 51: Delete Segment**\n\nDeletes a segment\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `segmentId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "61779bad-3f77-4dd5-854b-b81c33d0aad2",
                "exec": [
                  "\n// ===== STEP 51: Delete Segment =====\nconsole.log(\"üîç Executing Step 51: Delete Segment\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_51\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "617ffd75-13f7-490b-9827-fe1cea9848bd",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 51: Delete Segment =====\nconsole.log(\"‚öôÔ∏è Setting up Step 51: Delete Segment\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_51_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 51\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/segments/{}",
            "folderPath": "Segments",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/segments/{}"
          }
        },
        {
          "name": "52. Delete Portfolio",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 52: Delete Portfolio**\n\nDeletes a portfolio\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `portfolioId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "168799f5-7a73-451a-94c5-1bd23dc49a86",
                "exec": [
                  "\n// ===== STEP 52: Delete Portfolio =====\nconsole.log(\"üîç Executing Step 52: Delete Portfolio\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_52\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3271663-459d-4c71-8759-dccc767d543b",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 52: Delete Portfolio =====\nconsole.log(\"‚öôÔ∏è Setting up Step 52: Delete Portfolio\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_52_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 52\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}",
            "folderPath": "Portfolios",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/portfolios/{}"
          }
        },
        {
          "name": "53. Delete Account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 53: Delete Account**\n\nDeletes an account\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `accountId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "016d677a-b25d-490c-a94c-6b963b67d1f0",
                "exec": [
                  "\n// ===== STEP 53: Delete Account =====\nconsole.log(\"üîç Executing Step 53: Delete Account\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_53\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "70388306-d141-4403-9732-392c66572d04",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 53: Delete Account =====\nconsole.log(\"‚öôÔ∏è Setting up Step 53: Delete Account\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_53_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 53\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/accounts/{}",
            "folderPath": "Accounts",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/accounts/{}"
          }
        },
        {
          "name": "54. Delete Asset",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 54: Delete Asset**\n\nDeletes an asset\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n- `assetId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dae220ab-371a-493d-ab94-d970f25ce3db",
                "exec": [
                  "\n// ===== STEP 54: Delete Asset =====\nconsole.log(\"üîç Executing Step 54: Delete Asset\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_54\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8dc72ab8-e363-44e7-8c83-573ee74693f5",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 54: Delete Asset =====\nconsole.log(\"‚öôÔ∏è Setting up Step 54: Delete Asset\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_54_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 54\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}/assets/{}",
            "folderPath": "Assets",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}/assets/{}"
          }
        },
        {
          "name": "55. Delete Ledger",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 55: Delete Ledger**\n\nDeletes a ledger\n\n---\n\n**Uses:**\n- `organizationId`\n- `ledgerId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "950f74b1-36b3-4119-b9db-c17b612e2f42",
                "exec": [
                  "\n// ===== STEP 55: Delete Ledger =====\nconsole.log(\"üîç Executing Step 55: Delete Ledger\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_55\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "aa63ee07-0212-4cba-9fc9-0adaecbcfa62",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 55: Delete Ledger =====\nconsole.log(\"‚öôÔ∏è Setting up Step 55: Delete Ledger\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_55_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 55\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
            "normalizedPath": "/v1/organizations/{}/ledgers/{}",
            "folderPath": "Ledgers",
            "matchedTargetPath": "/v1/organizations/{}/ledgers/{}"
          }
        },
        {
          "name": "56. Delete Organization",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "**Workflow Step 56: Delete Organization**\n\n**Environment Variables**: Can be automated in Postman by using environment variables to store and pass the IDs between requests.\n\n---\n\n**Uses:**\n- `organizationId`\n"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1716c27a-4073-4477-b589-b79d9424ce8a",
                "exec": [
                  "\n// ===== STEP 56: Delete Organization =====\nconsole.log(\"üîç Executing Step 56: Delete Organization\");\n\n// Record start time for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\npm.test(\"‚úÖ Status: DELETE request successful (204)\", function () {\n    pm.expect(pm.response.code).to.equal(204);\n    console.log(\"‚úÖ Resource deleted successfully\");\n});\n\npm.test(\"‚ö° Performance: Response time acceptable\", function () {\n    const responseTime = pm.response.responseTime;\n    const maxTime = pm.environment.get(\"max_response_time\") || 5000;\n    \n    pm.expect(responseTime).to.be.below(maxTime);\n    console.log(\"‚ö° Response time: \" + responseTime + \"ms (max: \" + maxTime + \"ms)\");\n    \n    // Track performance for regression detection\n    const perfKey = \"perf_step_56\";\n    const previousTime = pm.environment.get(perfKey);\n    pm.environment.set(perfKey, responseTime);\n    \n    if (previousTime) {\n        const increase = ((responseTime - previousTime) / previousTime) * 100;\n        if (increase > 50) {\n            console.warn(\"‚ö†Ô∏è Performance regression: \" + increase.toFixed(1) + \"% slower than previous run\");\n        }\n    }\n});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "7ef09809-fe3a-41de-b2f5-1e580ea08cff",
                "exec": [
                  "\n// ===== PRE-REQUEST STEP 56: Delete Organization =====\nconsole.log(\"‚öôÔ∏è Setting up Step 56: Delete Organization\");\n\n// Set step start timestamp for performance tracking\npm.globals.set(\"step_56_start\", Date.now());\n\n// Generate unique idempotency key for each POST/PUT request\nif (pm.request.method === 'POST' || pm.request.method === 'PUT') {\n    // Always generate a new unique idempotency key for each transaction\n    const newIdempotencyKey = pm.variables.replaceIn('{{$guid}}');\n    pm.environment.set('idempotencyKey', newIdempotencyKey);\n    console.log('üîë Generated new idempotency key:', newIdempotencyKey);\n}\n\n// Check for required variables based on operation type\nconst requestUrl = pm.request.url.toString();\nconst method = pm.request.method;\n\n// Base required variables\nconst requiredVars = ['organizationId', 'ledgerId'];\n\n// Add specific variables based on the operation\nif (requestUrl.includes('/transactions/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{transactionId}}') || requestUrl.includes('{transaction_id}')) {\n        requiredVars.push('transactionId');\n    }\n}\n\nif (requestUrl.includes('/operations/') && (method === 'PATCH' || method === 'GET')) {\n    if (requestUrl.includes('{{operationId}}') || requestUrl.includes('{operation_id}')) {\n        requiredVars.push('operationId');\n    }\n}\n\nif (requestUrl.includes('/balances/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{balanceId}}') || requestUrl.includes('{balance_id}')) {\n        requiredVars.push('balanceId');\n    }\n}\n\nif (requestUrl.includes('/accounts/') && (method === 'PATCH' || method === 'DELETE' || method === 'GET')) {\n    if (requestUrl.includes('{{accountId}}') || requestUrl.includes('{account_id}')) {\n        requiredVars.push('accountId');\n    }\n}\n\n// Check all required variables\nlet hasAllRequiredVars = true;\nrequiredVars.forEach(varName => {\n    const value = pm.environment.get(varName);\n    if (!value || value === '') {\n        console.error(\"‚ùå CRITICAL: Required environment variable '\" + varName + \"' is not set for \" + method + \" operation\");\n        hasAllRequiredVars = false;\n    } else {\n        console.log(\"‚úÖ \" + varName + \": \" + value);\n    }\n});\n\nif (!hasAllRequiredVars) {\n    console.error(\"‚ùå Missing required variables - this request will likely fail with 404/405 error\");\n    console.log(\"üí° Suggestion: Ensure previous steps completed successfully and extracted required IDs\");\n}\n\nconsole.log(\"‚úÖ Pre-request setup completed for Step 56\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_matchInfo": {
            "originalPath": "/v1/organizations/{{organizationId}}",
            "normalizedPath": "/v1/organizations/{}",
            "folderPath": "Organizations",
            "matchedTargetPath": "/v1/organizations/{}"
          }
        },
        {
          "name": "Workflow Summary & Report",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{onboardingUrl}}/health",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Final step that generates comprehensive test summary for CI reporting"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6022e60b-6b0b-4676-83ce-36506c53ef5d",
                "exec": [
                  "\n// ===== WORKFLOW SUMMARY =====\nconsole.log(\"üìä Workflow Execution Summary\");\nconsole.log(\"Total Steps: 56\");\n\n// Calculate total execution time\nconst startTime = pm.globals.get(\"workflow_start_time\");\nif (startTime) {\n    const totalTime = Date.now() - startTime;\n    console.log(\"‚è±Ô∏è Total Execution Time: \" + totalTime + \"ms\");\n    pm.globals.set(\"workflow_total_time\", totalTime);\n}\n\n// Summary of step performance\nconsole.log(\"üìà Performance Summary:\");\nfor (let i = 1; i <= 56; i++) {\n    const stepTime = pm.environment.get(\"perf_step_\" + i);\n    if (stepTime) {\n        console.log(\"  Step \" + i + \": \" + stepTime + \"ms\");\n    }\n}\n\nconsole.log(\"‚úÖ Workflow completed successfully\");\n"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "_postman_id": "0f6e75e0-282c-4527-a4af-f12a32896c48",
      "event": []
    },
    {
      "name": "Organizations",
      "description": "Endpoints for managing organizations, which are the top-level entities in the MIDAZ system.",
      "item": [
        {
          "name": "List all organizations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter organizations by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new organization",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ]
            },
            "description": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"organizationId\", jsonData.id);",
                  "    console.log(\"organizationId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract organizationId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Count total organizations",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "metrics",
                "count"
              ]
            },
            "description": "Returns the total count of organizations as a header without a response body"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific organization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an organization identified by its UUID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an organization",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an existing organization",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Ledgers",
      "description": "Endpoints for managing ledgers, which are financial record-keeping systems for tracking assets, accounts, and transactions within an organization.",
      "item": [
        {
          "name": "List all ledgers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter ledgers by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new ledger",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"ledgerId\", jsonData.id);",
                  "    console.log(\"ledgerId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract ledgerId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Count total ledgers",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Returns the total count of ledgers for a specific organization as a header without a response body"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific ledger",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a ledger identified by its UUID within the specified organization"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a ledger",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an existing ledger",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Account Types",
      "description": "Endpoints related to Account Types.",
      "item": [
        {
          "name": "Get all account types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/account-types",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "account-types"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter account types by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit of account types per page (default: 10, max: 100)",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for offset pagination (default: 1)",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor for cursor-based pagination",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort order (asc or desc, default: asc)",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start date for filtering (YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End date for filtering (YYYY-MM-DD)",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of all account types for the specified organization and ledger, optionally filtered by metadata"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create Account Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/account-types",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "account-types"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to create a new Account Type.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"keyValue\": \"current_assets\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific account type",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/account-types/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "account-types",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Account Type ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an account type identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an account type",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/account-types/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "account-types",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Account Type ID in UUID format"
                }
              ]
            },
            "description": "Deletes an existing account type identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update Account Type",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/account-types/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "account-types",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Account Type ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to update an existing Account Type.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Assets that are expected to be converted to cash within one year\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Current Assets\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Accounts",
      "description": "Endpoints for managing accounts, which represent individual financial entities like bank accounts, credit cards, or expense categories within a ledger.",
      "item": [
        {
          "name": "List all accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter accounts by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"accountId\", jsonData.id);",
                  "    console.log(\"accountId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract accountId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.alias) {",
                  "    pm.environment.set(\"accountAlias\", jsonData.alias);",
                  "    console.log(\"accountAlias set to: \" + jsonData.alias);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract accountAlias: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve an account by alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Account alias (e.g. @person1)"
                }
              ]
            },
            "description": "Returns detailed information about an account identified by its alias within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve an account by alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "code",
                  "value": "",
                  "description": "Account External Code (e.g. BRL)"
                }
              ]
            },
            "description": "Returns detailed information about an account identified by its alias within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Count accounts",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns the total count of accounts for the specified organization, ledger, and optional portfolio"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an account identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an account from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an account",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Assets",
      "description": "Endpoints for managing assets, which represent the types of value that can be transferred between accounts.",
      "item": [
        {
          "name": "List all assets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter assets by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new asset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"assetId\", jsonData.id);",
                  "    console.log(\"assetId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract assetId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Count total assets",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns the total count of assets for a specific ledger in an organization as a header without a response body"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific asset",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an asset identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"assetId\")) {",
                  "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an asset",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an asset from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"assetId\")) {",
                  "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an asset",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/assets/{{assetId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Portfolios",
      "description": "Endpoints for managing portfolios, which are collections of accounts grouped for reporting or management purposes.",
      "item": [
        {
          "name": "List all portfolios",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter portfolios by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"portfolioId\", jsonData.id);",
                  "    console.log(\"portfolioId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract portfolioId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Count total portfolios",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns the total count of portfolios for a specific organization and ledger as a header without a response body"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a portfolio identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"portfolioId\")) {",
                  "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a portfolio",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"portfolioId\")) {",
                  "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a portfolio",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/portfolios/{{portfolioId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Segments",
      "description": "Endpoints for managing segments, which are used to categorize accounts for reporting or management purposes.",
      "item": [
        {
          "name": "List all segments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter segments by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new segment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"segmentId\", jsonData.id);",
                  "    console.log(\"segmentId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract segmentId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Count segments",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/metrics/count",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "metrics",
                "count"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns the total count of segments for the specified organization and ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  // HEAD responses have no body, skip JSON validation",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific segment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a segment identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"segmentId\")) {",
                  "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a segment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a segment from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"segmentId\")) {",
                  "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a segment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/segments/{{segmentId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Balances",
      "description": "Endpoints for retrieving account balances, which represent the current value of an account.",
      "item": [
        {
          "name": "Get Balances using Alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/alias/{{accountAlias}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{accountAlias}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Alias (e.g. @person1)"
                }
              ]
            },
            "description": "Get Balances with alias"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get External balances using code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/external/{{externalCode}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "external",
                "{{externalCode}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "code",
                  "value": "",
                  "description": "Code (e.g. BRL)"
                }
              ]
            },
            "description": "Get External balances with code"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // 404 acceptable if resource not found",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  if (pm.response.code === 200) { pm.response.to.be.json; } // Only validate JSON for successful responses",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get all balances by account id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all balances by account id"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Additional Balance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ]
            },
            "description": "Create an Additional Balance with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true,\n  \"key\": \"asset-freeze\",\n  \"assetCode\": \"USD\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get all balances",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all balances"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get Balance by id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Get a Balance with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Balance by account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Delete a Balance with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update Balance",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/balances/{{balanceId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Update a Balance with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Operations",
      "description": "Endpoints for managing operations, which are the individual debit and credit entries that make up a transaction.",
      "item": [
        {
          "name": "Get all Operations by account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "",
                  "description": "DEBIT, CREDIT",
                  "disabled": true
                }
              ]
            },
            "description": "Get all Operations with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                  "    var operationToUse = null;",
                  "    ",
                  "    // Try multiple strategies to find the right operation",
                  "    // Strategy 1: Find destination operation based on account alias",
                  "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.accountAlias === destAccount || ",
                  "        op.account === destAccount ||",
                  "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // Strategy 3: Find operation with non-zero positive amount",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 4: Use the first operation with valid ID",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                  "    }",
                  "    ",
                  "    // Strategy 5: Just use the first operation",
                  "    if (!operationToUse && jsonData.operations.length > 0) {",
                  "      operationToUse = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (operationToUse && operationToUse.id) {",
                  "      pm.environment.set(\"operationId\", operationToUse.id);",
                  "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                  "    } else {",
                  "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                  "    }",
                  "  } else {",
                  "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract operationId: \", error);",
                  "  console.error(\"Response data: \", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Operation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/accounts/{{accountId}}/operations/{{operationId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "Get an Operation with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"operationId\")) {",
                  "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an Operation",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}/operations/{{operationId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "Update an Operation with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"transactionId\")) {",
                  "  console.log(\"Warning: transactionId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"operationId\")) {",
                  "  console.log(\"Warning: operationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Operation Route",
      "description": "Endpoints related to Operation Route.",
      "item": [
        {
          "name": "Retrieve all operation routes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/operation-routes",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "operation-routes"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of all operation routes within the specified ledger with cursor-based pagination"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create Operation Route",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/operation-routes",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "operation-routes"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to create a new Operation Route.",
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific operation route",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/operation-routes/{{ledgerId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "operation-routes",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Operation Route ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an operation route identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an operation route",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/operation-routes/{{operationRouteId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "operation-routes",
                "{{operationRouteId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "operation_route_id",
                  "value": "{{operationRouteId}}",
                  "description": "Operation Route ID in UUID format"
                }
              ]
            },
            "description": "Deletes an existing operation route identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an operation route",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/operation-routes/{{operationRouteId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "operation-routes",
                "{{operationRouteId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "operation_route_id",
                  "value": "{{operationRouteId}}",
                  "description": "Operation Route ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing operation route's properties such as title, description, and type within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account\": null,\n  \"description\": \"This operation route handles cash-in transactions from service charge collections\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"title\": \"Cashin from service charge\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Transaction Route",
      "description": "Endpoints related to Transaction Route.",
      "item": [
        {
          "name": "Get all Transaction Routes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transaction-routes",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transaction-routes"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Endpoint to get all Transaction Routes with optional metadata filtering."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create Transaction Route",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transaction-routes",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transaction-routes"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to create a new Transaction Route.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transaction Route by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transaction-routes/{{transactionRouteId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transaction-routes",
                "{{transactionRouteId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "transaction_route_id",
                  "value": "{{transactionRouteId}}",
                  "description": "Transaction Route ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to get a Transaction Route by its ID."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Transaction Route by ID",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transaction-routes/{{transactionRouteId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transaction-routes",
                "{{transactionRouteId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "transaction_route_id",
                  "value": "{{transactionRouteId}}",
                  "description": "Transaction Route ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to delete a Transaction Route by its ID."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update Transaction Route",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transaction-routes/{{transactionRouteId}}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transaction-routes",
                "{{transactionRouteId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "transaction_route_id",
                  "value": "{{transactionRouteId}}",
                  "description": "Transaction Route ID in UUID format"
                }
              ]
            },
            "description": "Endpoint to update a Transaction Route by its ID.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Settlement route for service charges\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"operationRoutes\": [\n    \"Example string\"\n  ],\n  \"title\": \"Charge Settlement\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Transactions",
      "description": "Endpoints for managing transactions, which represent the movement of value between accounts.",
      "item": [
        {
          "name": "Get all Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all Transactions with the input metadata or without metadata"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction Annotation using JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/annotation",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "annotation"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction Annotation with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction using DSL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/dsl",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "dsl"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input DSL file"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate a unique idempotency key for this transaction",
                  "const timestamp = new Date().getTime();",
                  "const random = Math.floor(Math.random() * 1000000);",
                  "const stepId = pm.variables.get(\"$guid\") || \"\";",
                  "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                  "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                  "",
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]); // DSL endpoint requires proper DSL format",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction without passing from source",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/inflow",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "inflow"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountAlias\")) {",
                  "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"inflowTransactionId\", jsonData.id);",
                  "    console.log(\"inflowTransactionId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract inflowTransactionId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                  "    var operationToUse = null;",
                  "    ",
                  "    // Try multiple strategies to find the right operation",
                  "    // Strategy 1: Find destination operation based on account alias",
                  "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.accountAlias === destAccount || ",
                  "        op.account === destAccount ||",
                  "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // Strategy 3: Find operation with non-zero positive amount",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 4: Use the first operation with valid ID",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                  "    }",
                  "    ",
                  "    // Strategy 5: Just use the first operation",
                  "    if (!operationToUse && jsonData.operations.length > 0) {",
                  "      operationToUse = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (operationToUse && operationToUse.id) {",
                  "      pm.environment.set(\"operationId\", operationToUse.id);",
                  "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                  "    } else {",
                  "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                  "    }",
                  "  } else {",
                  "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract operationId: \", error);",
                  "  console.error(\"Response data: \", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction using JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/json",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate a unique idempotency key for this transaction",
                  "const timestamp = new Date().getTime();",
                  "const random = Math.floor(Math.random() * 1000000);",
                  "const stepId = pm.variables.get(\"$guid\") || \"\";",
                  "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random + \"-\" + stepId.slice(0, 8));",
                  "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                  "",
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"transactionId\", jsonData.id);",
                  "    console.log(\"transactionId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract transactionId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                  "    var operationToUse = null;",
                  "    ",
                  "    // Try multiple strategies to find the right operation",
                  "    // Strategy 1: Find destination operation based on account alias",
                  "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.accountAlias === destAccount || ",
                  "        op.account === destAccount ||",
                  "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // Strategy 3: Find operation with non-zero positive amount",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 4: Use the first operation with valid ID",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                  "    }",
                  "    ",
                  "    // Strategy 5: Just use the first operation",
                  "    if (!operationToUse && jsonData.operations.length > 0) {",
                  "      operationToUse = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (operationToUse && operationToUse.id) {",
                  "      pm.environment.set(\"operationId\", operationToUse.id);",
                  "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                  "    } else {",
                  "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                  "    }",
                  "  } else {",
                  "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract operationId: \", error);",
                  "  console.error(\"Response data: \", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction without passing to distribution",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/outflow",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "outflow"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"source\": {\n      \"from\": [\n        {\n          \"accountAlias\": \"Example accountAlias\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"value\": \"100.00\"\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": \"100.00\"\n  },\n  \"transactionDate\": \"Example transactionDate\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountAlias\")) {",
                  "  console.log(\"Warning: accountAlias is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"outflowTransactionId\", jsonData.id);",
                  "    console.log(\"outflowTransactionId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract outflowTransactionId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && Array.isArray(jsonData.operations) && jsonData.operations.length > 0) {",
                  "    var operationToUse = null;",
                  "    ",
                  "    // Try multiple strategies to find the right operation",
                  "    // Strategy 1: Find destination operation based on account alias",
                  "    if (jsonData.destination && Array.isArray(jsonData.destination) && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.accountAlias === destAccount || ",
                  "        op.account === destAccount ||",
                  "        (op.accountId && pm.environment.get(\"accountId\") && op.accountId === pm.environment.get(\"accountId\"))",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 2: Find CREDIT operation (usually the destination in double-entry)",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // Strategy 3: Find operation with non-zero positive amount",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => ",
                  "        op.amount && typeof op.amount === 'object' && op.amount.value > 0",
                  "      );",
                  "    }",
                  "    ",
                  "    // Strategy 4: Use the first operation with valid ID",
                  "    if (!operationToUse) {",
                  "      operationToUse = jsonData.operations.find(op => op.id && op.id.length > 0);",
                  "    }",
                  "    ",
                  "    // Strategy 5: Just use the first operation",
                  "    if (!operationToUse && jsonData.operations.length > 0) {",
                  "      operationToUse = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (operationToUse && operationToUse.id) {",
                  "      pm.environment.set(\"operationId\", operationToUse.id);",
                  "      console.log(\"operationId set to: \" + operationToUse.id + \" (from operation: \" + JSON.stringify(operationToUse) + \")\");",
                  "    } else {",
                  "      console.warn(\"No valid operation found for operationId extraction. Operations: \" + JSON.stringify(jsonData.operations));",
                  "    }",
                  "  } else {",
                  "    console.warn(\"No operations array found in response for operationId extraction. Response: \" + JSON.stringify(jsonData));",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract operationId: \", error);",
                  "  console.error(\"Response data: \", pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get a Transaction by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Get a Transaction with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a Transaction",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{{organizationId}}/ledgers/{{ledgerId}}/transactions/{{transactionId}}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Update a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "environment",
      "value": "MIDAZ",
      "type": "string",
      "description": "This collection requires the MIDAZ environment to be selected for proper functionality."
    }
  ]
}