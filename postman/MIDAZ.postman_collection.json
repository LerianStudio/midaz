{
  "info": {
    "name": "MIDAZ",
    "description": "This is a swagger documentation for the Midaz Ledger API\n\n**IMPORTANT**: This collection requires the **MIDAZ Environment** to be selected for proper functionality. Please ensure you have imported and selected the MIDAZ environment before using this collection.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "v1.48.0",
    "_postman_id": "00b3869d-895d-49b2-a6b5-68b193471560"
  },
  "item": [
    {
      "name": "Organizations",
      "description": "Endpoints for managing organizations, which are the top-level entities in the MIDAZ system.",
      "item": [
        {
          "name": "List all organizations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter organizations by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter organizations created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter organizations created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of organizations, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new organization",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations"
              ]
            },
            "description": "Creates a new organization with the provided details including legal name, legal document, and optional address information",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian FS\",\n  \"legalDocument\": \"123456789012345\",\n  \"legalName\": \"Lerian Financial Services Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"organizationId\", jsonData.id);",
                  "    console.log(\"organizationId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract organizationId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific organization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an organization identified by its UUID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an organization",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an organization identified by its UUID. Note: This operation is not available in production environments."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an existing organization",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Updates an organization's information such as legal name, address, or status. Only supplied fields will be updated.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"address\": {\n    \"city\": \"New York\",\n    \"country\": \"US\",\n    \"line1\": \"123 Financial Avenue\",\n    \"line2\": \"Suite 1500\",\n    \"state\": \"NY\",\n    \"zipCode\": \"10001\"\n  },\n  \"doingBusinessAs\": \"Lerian Group\",\n  \"legalName\": \"Lerian Financial Group Ltd.\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"parentOrganizationId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Ledgers",
      "description": "Endpoints for managing ledgers, which are financial record-keeping systems for tracking assets, accounts, and transactions within an organization.",
      "item": [
        {
          "name": "List all ledgers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter ledgers by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter ledgers created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter ledgers created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of ledgers within the specified organization, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new ledger",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                }
              ]
            },
            "description": "Creates a new ledger within the specified organization. A ledger is a financial record-keeping system for tracking assets, accounts, and transactions.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Example name\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"ledgerId\", jsonData.id);",
                  "    console.log(\"ledgerId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract ledgerId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific ledger",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a ledger identified by its UUID within the specified organization"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a ledger",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a ledger identified by its UUID. Note: This operation is not available in production environments."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an existing ledger",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Updates a ledger's information such as name, status, or metadata. Only supplied fields will be updated.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Treasury Operations Global\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Accounts",
      "description": "Endpoints for managing accounts, which represent individual financial entities like bank accounts, credit cards, or expense categories within a ledger.",
      "item": [
        {
          "name": "List all accounts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter accounts by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter accounts created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter accounts created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of accounts within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new account",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new account within the specified ledger. Accounts represent individual financial entities like bank accounts, credit cards, or expense categories.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alias\": \"@treasury_checking\",\n  \"assetCode\": \"USD\",\n  \"entityId\": \"EXT-ACC-12345\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Corporate Checking Account\",\n  \"parentAccountId\": null,\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"deposit\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"accountId\", jsonData.id);",
                  "    console.log(\"accountId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract accountId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.alias) {",
                  "    pm.environment.set(\"accountAlias\", jsonData.alias);",
                  "    console.log(\"accountAlias set to: \" + jsonData.alias);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract accountAlias: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve an account by alias",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/alias/{alias}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "alias",
                "{{alias}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "alias",
                  "value": "",
                  "description": "Account alias (e.g. @person1)"
                }
              ]
            },
            "description": "Returns detailed information about an account identified by its alias within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an account identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an account from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an account",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{accountId}}",
                  "description": "Account ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing account's properties such as name, status, portfolio, segment, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Primary Corporate Checking Account\",\n  \"portfolioId\": null,\n  \"segmentId\": null,\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Assets",
      "description": "Endpoints for managing assets, which represent the types of value that can be transferred between accounts.",
      "item": [
        {
          "name": "List all assets",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter assets by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter assets created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter assets created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of assets within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new asset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new asset within the specified ledger. Assets represent currencies, cryptocurrencies, commodities, or other financial instruments tracked in the ledger.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"US Dollar\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  },\n  \"type\": \"currency\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"assetId\", jsonData.id);",
                  "    console.log(\"assetId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract assetId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific asset",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about an asset identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"assetId\")) {",
                  "  console.log(\"Warning: assetId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete an asset",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes an asset from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an asset",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/assets/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "assets",
                "{{assetId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{assetId}}",
                  "description": "Asset ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing asset's properties such as name, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"Bitcoin\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Portfolios",
      "description": "Endpoints for managing portfolios, which are collections of accounts grouped for reporting or management purposes.",
      "item": [
        {
          "name": "List all portfolios",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter portfolios by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter portfolios created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter portfolios created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of portfolios within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new portfolio",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new portfolio within the specified ledger. Portfolios represent collections of accounts grouped for specific purposes such as business units, departments, or client portfolios.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"portfolioId\", jsonData.id);",
                  "    console.log(\"portfolioId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract portfolioId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a portfolio identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"portfolioId\")) {",
                  "  console.log(\"Warning: portfolioId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a portfolio",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a portfolio from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a portfolio",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/portfolios/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "portfolios",
                "{{portfolioId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{portfolioId}}",
                  "description": "Portfolio ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing portfolio's properties such as name, entity ID, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"entityId\": \"00000000-0000-0000-0000-000000000000\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Portfolio Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Segments",
      "description": "Endpoints for managing segments, which are used to categorize accounts for reporting or management purposes.",
      "item": [
        {
          "name": "List all segments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ],
              "query": [
                {
                  "key": "metadata",
                  "value": "",
                  "description": "JSON string to filter segments by metadata fields",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Maximum number of records to return per page",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "",
                  "description": "Page number for pagination",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Filter segments created on or after this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "Filter segments created on or before this date (format: YYYY-MM-DD)",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort direction for results based on creation date",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a paginated list of segments within the specified ledger, optionally filtered by metadata, date range, and other criteria"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new segment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                }
              ]
            },
            "description": "Creates a new segment within the specified ledger. Segments represent logical divisions within a ledger, such as business areas, product lines, or customer categories.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"segmentId\", jsonData.id);",
                  "    console.log(\"segmentId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract segmentId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Retrieve a specific segment",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Returns detailed information about a segment identified by its UUID within the specified ledger"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"segmentId\")) {",
                  "  console.log(\"Warning: segmentId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete a segment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Permanently removes a segment from the specified ledger. This operation cannot be undone."
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a segment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token with format: Bearer {token}",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID for tracing",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/segments/{id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "segments",
                "{{segmentId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID in UUID format"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID in UUID format"
                },
                {
                  "key": "id",
                  "value": "{{segmentId}}",
                  "description": "Segment ID in UUID format"
                }
              ]
            },
            "description": "Updates an existing segment's properties such as name, status, and metadata within the specified ledger",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"name\": \"My Segment Updated\",\n  \"status\": {\n    \"code\": \"ACTIVE\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Balances",
      "description": "Endpoints for retrieving account balances, which represent the current value of an account.",
      "item": [
        {
          "name": "Get all balances by account id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all balances by account id"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"accountId\")) {",
                  "  console.log(\"Warning: accountId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all balances",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all balances"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get Balance by id",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Get a Balance with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Balance by account",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Delete a Balance with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update Balance",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/balances/{balance_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "balances",
                "{{balanceId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "balance_id",
                  "value": "{{balanceId}}",
                  "description": "Balance ID"
                }
              ]
            },
            "description": "Update a Balance with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"allowReceiving\": true,\n  \"allowSending\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Operations",
      "description": "Endpoints for managing operations, which are the individual debit and credit entries that make up a transaction.",
      "item": [
        {
          "name": "Get all Operations by account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "",
                  "description": "DEBIT, CREDIT",
                  "disabled": true
                }
              ]
            },
            "description": "Get all Operations with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get an Operation by account",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/accounts/{account_id}/operations/{operation_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "accounts",
                "{{accountId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "account_id",
                  "value": "{{accountId}}",
                  "description": "Account ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "Get an Operation with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update an Operation",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/operations/{operation_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "operations",
                "{{operationId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                },
                {
                  "key": "operation_id",
                  "value": "{{operationId}}",
                  "description": "Operation ID"
                }
              ]
            },
            "description": "Update an Operation with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Credit card operation\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Asset Rates",
      "description": "Endpoints for managing asset exchange rates, which are used to convert between different asset types.",
      "item": [
        {
          "name": "Create or Update an AssetRate",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "asset-rates"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create or Update an AssetRate with the input details",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"externalId\": \"00000000-0000-0000-0000-000000000000\",\n  \"from\": \"USD\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"rate\": 100,\n  \"scale\": 2,\n  \"source\": \"External System\",\n  \"to\": \"BRL\",\n  \"ttl\": 3600\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get an AssetRate by the Asset Code",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/from/{asset_code}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "asset-rates",
                "from",
                "{{assetCode}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "asset_code",
                  "value": "{{assetCode}}",
                  "description": "From Asset Code"
                }
              ],
              "query": [
                {
                  "key": "to",
                  "value": "",
                  "description": "To Asset Codes",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get an AssetRate by the Asset Code with the input details"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get an AssetRate by External ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{onboardingUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/asset-rates/{external_id}",
              "host": [
                "{{onboardingUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "asset-rates",
                "{{externalId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "external_id",
                  "value": "{{externalId}}",
                  "description": "External ID"
                }
              ]
            },
            "description": "Get an AssetRate by External ID with the input details"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Transactions",
      "description": "Endpoints for managing transactions, which represent the movement of value between accounts.",
      "item": [
        {
          "name": "Get all Transactions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "",
                  "description": "Limit",
                  "disabled": true
                },
                {
                  "key": "start_date",
                  "value": "",
                  "description": "Start Date",
                  "disabled": true
                },
                {
                  "key": "end_date",
                  "value": "",
                  "description": "End Date",
                  "disabled": true
                },
                {
                  "key": "sort_order",
                  "value": "",
                  "description": "Sort Order",
                  "disabled": true
                },
                {
                  "key": "cursor",
                  "value": "",
                  "description": "Cursor",
                  "disabled": true
                }
              ]
            },
            "description": "Get all Transactions with the input metadata or without metadata"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction using DSL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/dsl",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "dsl"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input DSL file"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate a unique idempotency key for this transaction",
                  "const timestamp = new Date().getTime();",
                  "const random = Math.floor(Math.random() * 1000000);",
                  "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random);",
                  "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                  "",
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a Transaction using JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              },
              {
                "key": "X-Idempotency",
                "value": "{{idempotencyKey}}",
                "description": "Unique key to prevent duplicate transactions",
                "disabled": false
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/json",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "json"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                }
              ]
            },
            "description": "Create a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chartOfAccountsGroupName\": \"Example chartOfAccountsGroupName\",\n  \"code\": \"Example code\",\n  \"description\": \"Example description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  },\n  \"send\": {\n    \"asset\": \"USD\",\n    \"distribute\": {\n      \"to\": [\n        {\n          \"account\": \"@treasury_checking\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"scale\": 2,\n            \"value\": 100\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"scale\": 2,\n    \"source\": {\n      \"from\": [\n        {\n          \"account\": \"@external/USD\",\n          \"amount\": {\n            \"asset\": \"USD\",\n            \"scale\": 2,\n            \"value\": 100\n          },\n          \"chartOfAccounts\": \"Example chartOfAccounts\",\n          \"description\": \"Example description\",\n          \"metadata\": {\n            \"key\": \"value\"\n          }\n        }\n      ]\n    },\n    \"value\": 100\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate a unique idempotency key for this transaction",
                  "const timestamp = new Date().getTime();",
                  "const random = Math.floor(Math.random() * 1000000);",
                  "pm.environment.set(\"idempotencyKey\", timestamp + \"-\" + random);",
                  "console.log(\"Generated idempotency key:\", pm.environment.get(\"idempotencyKey\"));",
                  "",
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  "",
                  "// Validate required variables",
                  "",
                  "if (!pm.environment.get(\"organizationId\")) {",
                  "  console.log(\"Warning: organizationId is not set. This request may fail.\");",
                  "}",
                  "if (!pm.environment.get(\"ledgerId\")) {",
                  "  console.log(\"Warning: ledgerId is not set. This request may fail.\");",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  "",
                  "// Extract variables from response for use in subsequent requests",
                  "",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"transactionId\", jsonData.id);",
                  "    console.log(\"transactionId set to: \" + jsonData.id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract transactionId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].balanceId) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.balanceId) {",
                  "      pm.environment.set(\"balanceId\", destinationOp.balanceId);",
                  "      console.log(\"balanceId set to: \" + destinationOp.balanceId);",
                  "    }",
                  "  }",
                  "  // Check if response is an array with at least one item",
                  "  else if (Array.isArray(jsonData) && jsonData.length > 0 && jsonData[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData[0].id);",
                  "  } ",
                  "  // Check if response has a data array with at least one item",
                  "  else if (jsonData && Array.isArray(jsonData.data) && jsonData.data.length > 0 && jsonData.data[0].id) {",
                  "    pm.environment.set(\"balanceId\", jsonData.data[0].id);",
                  "    console.log(\"balanceId set to: \" + jsonData.data[0].id);",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract balanceId: \", error);",
                  "}",
                  "try {",
                  "  var jsonData = pm.response.json();",
                  "  // Check if this is a transaction response with operations",
                  "  if (jsonData && jsonData.operations && jsonData.operations.length > 0 && jsonData.operations[0].id) {",
                  "    // Find the destination operation (the one with account in the 'destination' array)",
                  "    var destinationOp = null;",
                  "    if (jsonData.destination && jsonData.destination.length > 0) {",
                  "      const destAccount = jsonData.destination[0];",
                  "      destinationOp = jsonData.operations.find(op => op.accountAlias === destAccount);",
                  "    }",
                  "    ",
                  "    // If we couldn't find by alias, try to find a CREDIT operation (usually the destination)",
                  "    if (!destinationOp) {",
                  "      destinationOp = jsonData.operations.find(op => op.type === 'CREDIT');",
                  "    }",
                  "    ",
                  "    // If we still couldn't find it, use the first operation",
                  "    if (!destinationOp && jsonData.operations.length > 0) {",
                  "      destinationOp = jsonData.operations[0];",
                  "    }",
                  "    ",
                  "    if (destinationOp && destinationOp.id) {",
                  "      pm.environment.set(\"operationId\", destinationOp.id);",
                  "      console.log(\"operationId set to: \" + destinationOp.id);",
                  "    }",
                  "  }",
                  "} catch (error) {",
                  "  console.error(\"Failed to extract operationId: \", error);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get a Transaction by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Get a Transaction with the input ID"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Update a Transaction",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Update a Transaction with the input payload",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Transaction description\",\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Commit a Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/commit",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "commit"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Commit a previously created transaction"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Revert a Transaction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "Authorization Bearer Token",
                "disabled": false
              },
              {
                "key": "X-Request-Id",
                "value": "{{$guid}}",
                "description": "Request ID",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{transactionUrl}}/v1/organizations/{organization_id}/ledgers/{ledger_id}/transactions/{transaction_id}/revert",
              "host": [
                "{{transactionUrl}}"
              ],
              "path": [
                "v1",
                "organizations",
                "{{organizationId}}",
                "ledgers",
                "{{ledgerId}}",
                "transactions",
                "{{transactionId}}",
                "revert"
              ],
              "variable": [
                {
                  "key": "organization_id",
                  "value": "{{organizationId}}",
                  "description": "Organization ID"
                },
                {
                  "key": "ledger_id",
                  "value": "{{ledgerId}}",
                  "description": "Ledger ID"
                },
                {
                  "key": "transaction_id",
                  "value": "{{transactionId}}",
                  "description": "Transaction ID"
                }
              ]
            },
            "description": "Revert a Transaction with Transaction ID only"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Check for auth token",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "  console.log(\"Warning: authToken is not set in the environment\");",
                  "}",
                  "",
                  "// Set authorization header if it exists",
                  "if (pm.environment.get(\"authToken\")) {",
                  "  pm.request.headers.upsert({",
                  "    key: \"Authorization\",",
                  "    value: \"Bearer \" + pm.environment.get(\"authToken\")",
                  "  });",
                  "}",
                  "",
                  "// Set request ID for tracing",
                  "pm.request.headers.upsert({",
                  "  key: \"X-Request-Id\",",
                  "  value: pm.variables.replaceIn(\"{{$guid}}\")",
                  "});",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "// Test for successful response status",
                  "if (pm.request.method === \"POST\") {",
                  "  pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "  });",
                  "} else if (pm.request.method === \"DELETE\") {",
                  "  pm.test(\"Status code is 204 No Content\", function () {",
                  "    pm.expect(pm.response.code).to.equal(204);",
                  "  });",
                  "} else {",
                  "  pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "  });",
                  "}",
                  "",
                  "// Validate response has the expected format",
                  "pm.test(\"Response has the correct structure\", function() {",
                  "  // For DELETE operations that return 204 No Content, the body is empty by design",
                  "  if (pm.response.code === 204) {",
                  "    pm.expect(true).to.be.true; // Always pass for 204 responses",
                  "    return;",
                  "  }",
                  "  ",
                  "  // For responses with content, validate JSON structure",
                  "  pm.response.to.be.json;",
                  "  ",
                  "  // Add specific validation based on response schema here",
                  "});",
                  ""
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "environment",
      "value": "MIDAZ",
      "type": "string",
      "description": "This collection requires the MIDAZ environment to be selected for proper functionality."
    }
  ]
}
