#!/usr/bin/env node

/**
 * Midaz API Workflow Generator v2 (Simplified Architecture)
 *
 * This is the modernized, modular version of the workflow generator that
 * implements the architecture described in WF_SIMP_PLAN.md. It maintains
 * 100% compatibility with the original implementation while providing:
 *
 * - Modular, maintainable code architecture
 * - Configuration-driven behavior
 * - Comprehensive error handling and validation
 * - Enhanced debugging and logging
 * - Preserved dependency chains and business logic
 *
 * Usage: node create-workflow-v2.js <input-collection> <workflow-md> <output-collection>
 *
 * Example: node create-workflow-v2.js ./postman/MIDAZ.postman_collection.json ./postman/WORKFLOW.md ./postman/MIDAZ.postman_collection.json
 */

const fs = require('fs');
const path = require('path');
const config = require('./config/workflow.config');
const { WorkflowProcessor } = require('./lib/workflow-processor');
const { ValidationError, ParseError } = require('./lib/markdown-parser');

// --- Utility Functions ---

function readJsonFile(filePath) {
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`‚ùå Error reading JSON file ${filePath}: ${error.message}`);
    process.exit(1);
  }
}

function readFile(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`‚ùå Error reading file ${filePath}: ${error.message}`);
    process.exit(1);
  }
}

function writeJsonFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ Successfully wrote JSON to ${filePath}`);
  } catch (error) {
    console.error(`‚ùå Error writing JSON file ${filePath}: ${error.message}`);
    process.exit(1);
  }
}

function validateArguments() {
  if (process.argv.length < 5) {
    console.error(`‚ùå Usage: node create-workflow-v2.js <collection-file> <workflow-markdown-file> <output-file>`);
    console.error(`   Example: node create-workflow-v2.js ./postman/MIDAZ.postman_collection.json ./postman/WORKFLOW.md ./postman/MIDAZ.postman_collection.json`);
    process.exit(1);
  }

  const [collectionFile, workflowFile, outputFile] = process.argv.slice(2);
  
  // Check if input files exist
  if (!fs.existsSync(collectionFile)) {
    console.error(`‚ùå Collection file not found: ${collectionFile}`);
    process.exit(1);
  }
  
  if (!fs.existsSync(workflowFile)) {
    console.error(`‚ùå Workflow markdown file not found: ${workflowFile}`);
    process.exit(1);
  }
  
  return { collectionFile, workflowFile, outputFile };
}

function printHeader() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        Midaz Workflow Generator v2.0           ‚ïë
‚ïë     üöÄ Simplified Modular Architecture         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
}

function printSummary(stats, processingTime) {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   SUMMARY                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
‚è±Ô∏è  Processing Time: ${processingTime}ms
üìä Request Matching: ${stats.matcherStats.successRate} success rate
üìã Total Attempts: ${stats.matcherStats.totalAttempts}
‚úÖ Successful: ${stats.matcherStats.successful}
‚ùå Failed: ${stats.matcherStats.failed}
üîß Variable Mappings: ${stats.variableMapperStats.totalMappingRules} rules configured
`);

  if (stats.matcherStats.failed > 0) {
    console.log(`‚ùå Failed Requests:`);
    stats.matcherStats.failedRequests.forEach(req => {
      console.log(`   - ${req.method} ${req.path}`);
    });
  }
}

async function main() {
  const startTime = Date.now();
  
  try {
    printHeader();
    
    // 1. Validate and parse arguments
    const { collectionFile, workflowFile, outputFile } = validateArguments();
    
    console.log(`üìÇ Input Collection: ${collectionFile}`);
    console.log(`üìù Workflow Markdown: ${workflowFile}`);
    console.log(`üì§ Output File: ${outputFile}`);
    
    // 2. Read input files
    console.log(`\nüîÑ Reading input files...`);
    const collection = readJsonFile(collectionFile);
    const workflowMarkdown = readFile(workflowFile);
    
    console.log(`‚úÖ Collection loaded: ${collection.info?.name || 'Unknown'}`);
    console.log(`‚úÖ Markdown loaded: ${Math.round(workflowMarkdown.length / 1024)}KB`);
    
    // 3. Initialize processor with configuration
    console.log(`\n‚öôÔ∏è  Initializing workflow processor...`);
    const processor = new WorkflowProcessor(config);
    
    console.log(`‚úÖ Processor initialized with ${Object.keys(config.variables.mapping.direct).length} direct mappings`);
    console.log(`‚úÖ API patterns: ${config.apiPatterns.pathCorrections.length} corrections configured`);
    console.log(`‚úÖ Transaction templates: ${Object.keys(config.transactions.templates).length} types available`);
    
    // 4. Process workflow
    console.log(`\nüîÑ Processing workflow...`);
    const workflowFolder = await processor.process(collection, workflowMarkdown);
    
    // 5. Integrate into collection
    console.log(`\nüîó Integrating workflow into collection...`);
    
    // Remove existing workflow folder if present
    const existingWorkflowIndex = collection.item.findIndex(item => item.name === "Complete API Workflow");
    if (existingWorkflowIndex !== -1) {
      console.log(`üîÑ Replacing existing 'Complete API Workflow' folder`);
      collection.item.splice(existingWorkflowIndex, 1);
    } else {
      console.log(`‚ûï Adding new 'Complete API Workflow' folder`);
    }
    
    // Add the new folder at the beginning
    collection.item.unshift(workflowFolder);
    
    // 6. Write updated collection
    console.log(`\nüíæ Writing updated collection...`);
    writeJsonFile(outputFile, collection);
    
    // 7. Print statistics and summary
    const processingTime = Date.now() - startTime;
    const stats = processor.getStatistics();
    
    printSummary(stats, processingTime);
    
    console.log(`\nüéâ Workflow generation completed successfully!`);
    console.log(`üìÅ Generated workflow with ${workflowFolder.item.length} steps`);
    
    // Exit with success
    process.exit(0);
    
  } catch (error) {
    const processingTime = Date.now() - startTime;
    console.error(`\nüí• Workflow generation failed after ${processingTime}ms`);
    
    if (error instanceof ValidationError) {
      console.error(`‚ùå Markdown Validation Failed:`);
      error.issues.forEach((issue, index) => {
        console.error(`   ${index + 1}. ${issue.message}`);
        if (issue.type) {
          console.error(`      Type: ${issue.type}`);
        }
      });
    } else if (error instanceof ParseError) {
      console.error(`‚ùå Markdown Parse Error: ${error.message}`);
      if (error.context) {
        console.error(`   Context: ${JSON.stringify(error.context, null, 2)}`);
      }
    } else {
      console.error(`‚ùå Unexpected Error: ${error.message}`);
      if (process.env.DEBUG) {
        console.error(error.stack);
      }
    }
    
    console.error(`\nüí° Troubleshooting Tips:`);
    console.error(`   - Check that the markdown file follows the correct format`);
    console.error(`   - Verify that the collection file is valid JSON`);
    console.error(`   - Ensure all step dependencies are properly defined`);
    console.error(`   - Run with DEBUG=1 for detailed error information`);
    
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log(`\n‚èπÔ∏è  Workflow generation interrupted by user`);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error(`üí• Uncaught Exception: ${error.message}`);
  if (process.env.DEBUG) {
    console.error(error.stack);
  }
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  console.error(`üí• Unhandled Promise Rejection: ${reason}`);
  process.exit(1);
});

// Run main function
if (require.main === module) {
  main();
}

module.exports = { main };